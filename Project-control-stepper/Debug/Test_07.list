
Test_07.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004be4  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08004db4  08004db4  00005db4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f04  08004f04  000060d8  2**0
                  CONTENTS
  4 .ARM          00000008  08004f04  08004f04  00005f04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f0c  08004f0c  000060d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f0c  08004f0c  00005f0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004f10  08004f10  00005f10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  08004f14  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000280  200000d8  08004fec  000060d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000358  08004fec  00006358  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000060d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000f436  00000000  00000000  00006108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024dd  00000000  00000000  0001553e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d38  00000000  00000000  00017a20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a47  00000000  00000000  00018758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022819  00000000  00000000  0001919f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011850  00000000  00000000  0003b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d11ce  00000000  00000000  0004d208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011e3d6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003d30  00000000  00000000  0011e41c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000062  00000000  00000000  0012214c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08004d9c 	.word	0x08004d9c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000dc 	.word	0x200000dc
 800020c:	08004d9c 	.word	0x08004d9c

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Command_Init>:
uint8_t g1_message[] = "G1 command launched\r\n";
uint8_t m203_message[] = "M203 command launched\r\n";
uint8_t m204_message[] = "M204 command launched\r\n";


void Command_Init(Command *command, uint8_t string[]){
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	strcpy((char *) command->string, (char *) string);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6839      	ldr	r1, [r7, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f003 fe1e 	bl	8004200 <strcpy>
	sscanf((char *) command->string, "%c %d %c %d", &(command->command_id), &(command->command_num), &(command->flag_id), &(command->flag_num));
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f103 0114 	add.w	r1, r3, #20
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f103 0418 	add.w	r4, r3, #24
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	331c      	adds	r3, #28
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	3220      	adds	r2, #32
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	4623      	mov	r3, r4
 80005e0:	460a      	mov	r2, r1
 80005e2:	4903      	ldr	r1, [pc, #12]	@ (80005f0 <Command_Init+0x40>)
 80005e4:	f003 fdac 	bl	8004140 <siscanf>
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd90      	pop	{r4, r7, pc}
 80005f0:	08004db4 	.word	0x08004db4

080005f4 <Command_Clear>:

void Command_Clear(Command *command){
 80005f4:	b580      	push	{r7, lr}
 80005f6:	b082      	sub	sp, #8
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	6078      	str	r0, [r7, #4]
	memset(command->string, 0, sizeof(command->string));
 80005fc:	687b      	ldr	r3, [r7, #4]
 80005fe:	2214      	movs	r2, #20
 8000600:	2100      	movs	r1, #0
 8000602:	4618      	mov	r0, r3
 8000604:	f003 fdc8 	bl	8004198 <memset>
	command->command_id = 0;
 8000608:	687b      	ldr	r3, [r7, #4]
 800060a:	2200      	movs	r2, #0
 800060c:	751a      	strb	r2, [r3, #20]
	command->command_num = 0;
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	2200      	movs	r2, #0
 8000612:	619a      	str	r2, [r3, #24]
	command->flag_id = 0;
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	2200      	movs	r2, #0
 8000618:	771a      	strb	r2, [r3, #28]
	command->flag_num = 0;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	2200      	movs	r2, #0
 800061e:	621a      	str	r2, [r3, #32]
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}

08000628 <Command_Execute>:

void Command_Execute(Command *command){
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
 800062e:	6078      	str	r0, [r7, #4]
	if (command->command_id == 'G' && command-> command_num == 0){
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	7d1b      	ldrb	r3, [r3, #20]
 8000634:	2b47      	cmp	r3, #71	@ 0x47
 8000636:	d109      	bne.n	800064c <Command_Execute+0x24>
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	699b      	ldr	r3, [r3, #24]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d105      	bne.n	800064c <Command_Execute+0x24>
		HAL_UART_Transmit_IT(&huart2, g0_message, sizeof(g0_message));
 8000640:	2216      	movs	r2, #22
 8000642:	491c      	ldr	r1, [pc, #112]	@ (80006b4 <Command_Execute+0x8c>)
 8000644:	481c      	ldr	r0, [pc, #112]	@ (80006b8 <Command_Execute+0x90>)
 8000646:	f002 fe21 	bl	800328c <HAL_UART_Transmit_IT>
 800064a:	e02f      	b.n	80006ac <Command_Execute+0x84>
	}
	else if (command->command_id == 'G' && command-> command_num == 1){
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	7d1b      	ldrb	r3, [r3, #20]
 8000650:	2b47      	cmp	r3, #71	@ 0x47
 8000652:	d109      	bne.n	8000668 <Command_Execute+0x40>
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	699b      	ldr	r3, [r3, #24]
 8000658:	2b01      	cmp	r3, #1
 800065a:	d105      	bne.n	8000668 <Command_Execute+0x40>
			HAL_UART_Transmit_IT(&huart2, g1_message, sizeof(g1_message));
 800065c:	2216      	movs	r2, #22
 800065e:	4917      	ldr	r1, [pc, #92]	@ (80006bc <Command_Execute+0x94>)
 8000660:	4815      	ldr	r0, [pc, #84]	@ (80006b8 <Command_Execute+0x90>)
 8000662:	f002 fe13 	bl	800328c <HAL_UART_Transmit_IT>
 8000666:	e021      	b.n	80006ac <Command_Execute+0x84>
	}
	else if (command->command_id == 'M' && command->command_num == 203){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	7d1b      	ldrb	r3, [r3, #20]
 800066c:	2b4d      	cmp	r3, #77	@ 0x4d
 800066e:	d109      	bne.n	8000684 <Command_Execute+0x5c>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	2bcb      	cmp	r3, #203	@ 0xcb
 8000676:	d105      	bne.n	8000684 <Command_Execute+0x5c>
		HAL_UART_Transmit_IT(&huart2, m203_message, sizeof(m203_message));
 8000678:	2218      	movs	r2, #24
 800067a:	4911      	ldr	r1, [pc, #68]	@ (80006c0 <Command_Execute+0x98>)
 800067c:	480e      	ldr	r0, [pc, #56]	@ (80006b8 <Command_Execute+0x90>)
 800067e:	f002 fe05 	bl	800328c <HAL_UART_Transmit_IT>
 8000682:	e013      	b.n	80006ac <Command_Execute+0x84>
	}
	else if (command->command_id == 'M' && command->command_num == 204){
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7d1b      	ldrb	r3, [r3, #20]
 8000688:	2b4d      	cmp	r3, #77	@ 0x4d
 800068a:	d109      	bne.n	80006a0 <Command_Execute+0x78>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	699b      	ldr	r3, [r3, #24]
 8000690:	2bcc      	cmp	r3, #204	@ 0xcc
 8000692:	d105      	bne.n	80006a0 <Command_Execute+0x78>
			HAL_UART_Transmit_IT(&huart2, m204_message, sizeof(m204_message));
 8000694:	2218      	movs	r2, #24
 8000696:	490b      	ldr	r1, [pc, #44]	@ (80006c4 <Command_Execute+0x9c>)
 8000698:	4807      	ldr	r0, [pc, #28]	@ (80006b8 <Command_Execute+0x90>)
 800069a:	f002 fdf7 	bl	800328c <HAL_UART_Transmit_IT>
 800069e:	e005      	b.n	80006ac <Command_Execute+0x84>
	}
	else {
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));
 80006a0:	2219      	movs	r2, #25
 80006a2:	4909      	ldr	r1, [pc, #36]	@ (80006c8 <Command_Execute+0xa0>)
 80006a4:	4804      	ldr	r0, [pc, #16]	@ (80006b8 <Command_Execute+0x90>)
 80006a6:	f002 fdf1 	bl	800328c <HAL_UART_Transmit_IT>
	}
}
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	3708      	adds	r7, #8
 80006b0:	46bd      	mov	sp, r7
 80006b2:	bd80      	pop	{r7, pc}
 80006b4:	2000001c 	.word	0x2000001c
 80006b8:	200001c4 	.word	0x200001c4
 80006bc:	20000034 	.word	0x20000034
 80006c0:	2000004c 	.word	0x2000004c
 80006c4:	20000064 	.word	0x20000064
 80006c8:	20000000 	.word	0x20000000

080006cc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b08a      	sub	sp, #40	@ 0x28
 80006d0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006d2:	f107 0314 	add.w	r3, r7, #20
 80006d6:	2200      	movs	r2, #0
 80006d8:	601a      	str	r2, [r3, #0]
 80006da:	605a      	str	r2, [r3, #4]
 80006dc:	609a      	str	r2, [r3, #8]
 80006de:	60da      	str	r2, [r3, #12]
 80006e0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006e2:	2300      	movs	r3, #0
 80006e4:	613b      	str	r3, [r7, #16]
 80006e6:	4b47      	ldr	r3, [pc, #284]	@ (8000804 <MX_GPIO_Init+0x138>)
 80006e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ea:	4a46      	ldr	r2, [pc, #280]	@ (8000804 <MX_GPIO_Init+0x138>)
 80006ec:	f043 0304 	orr.w	r3, r3, #4
 80006f0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006f2:	4b44      	ldr	r3, [pc, #272]	@ (8000804 <MX_GPIO_Init+0x138>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	613b      	str	r3, [r7, #16]
 80006fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
 8000702:	4b40      	ldr	r3, [pc, #256]	@ (8000804 <MX_GPIO_Init+0x138>)
 8000704:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000706:	4a3f      	ldr	r2, [pc, #252]	@ (8000804 <MX_GPIO_Init+0x138>)
 8000708:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800070c:	6313      	str	r3, [r2, #48]	@ 0x30
 800070e:	4b3d      	ldr	r3, [pc, #244]	@ (8000804 <MX_GPIO_Init+0x138>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071a:	2300      	movs	r3, #0
 800071c:	60bb      	str	r3, [r7, #8]
 800071e:	4b39      	ldr	r3, [pc, #228]	@ (8000804 <MX_GPIO_Init+0x138>)
 8000720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000722:	4a38      	ldr	r2, [pc, #224]	@ (8000804 <MX_GPIO_Init+0x138>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	6313      	str	r3, [r2, #48]	@ 0x30
 800072a:	4b36      	ldr	r3, [pc, #216]	@ (8000804 <MX_GPIO_Init+0x138>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	60bb      	str	r3, [r7, #8]
 8000734:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	2300      	movs	r3, #0
 8000738:	607b      	str	r3, [r7, #4]
 800073a:	4b32      	ldr	r3, [pc, #200]	@ (8000804 <MX_GPIO_Init+0x138>)
 800073c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073e:	4a31      	ldr	r2, [pc, #196]	@ (8000804 <MX_GPIO_Init+0x138>)
 8000740:	f043 0302 	orr.w	r3, r3, #2
 8000744:	6313      	str	r3, [r2, #48]	@ 0x30
 8000746:	4b2f      	ldr	r3, [pc, #188]	@ (8000804 <MX_GPIO_Init+0x138>)
 8000748:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800074a:	f003 0302 	and.w	r3, r3, #2
 800074e:	607b      	str	r3, [r7, #4]
 8000750:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MS2_Pin|MS1_Pin, GPIO_PIN_RESET);
 8000752:	2200      	movs	r2, #0
 8000754:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8000758:	482b      	ldr	r0, [pc, #172]	@ (8000808 <MX_GPIO_Init+0x13c>)
 800075a:	f000 ff73 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 800075e:	2200      	movs	r2, #0
 8000760:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000764:	4829      	ldr	r0, [pc, #164]	@ (800080c <MX_GPIO_Init+0x140>)
 8000766:	f000 ff6d 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ENABLE_Pin|DIR_Pin, GPIO_PIN_RESET);
 800076a:	2200      	movs	r2, #0
 800076c:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000770:	4827      	ldr	r0, [pc, #156]	@ (8000810 <MX_GPIO_Init+0x144>)
 8000772:	f000 ff67 	bl	8001644 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000776:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800077a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800077c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000780:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000782:	2300      	movs	r3, #0
 8000784:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000786:	f107 0314 	add.w	r3, r7, #20
 800078a:	4619      	mov	r1, r3
 800078c:	4820      	ldr	r0, [pc, #128]	@ (8000810 <MX_GPIO_Init+0x144>)
 800078e:	f000 fdc5 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|MS2_Pin|MS1_Pin;
 8000792:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000796:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000798:	2301      	movs	r3, #1
 800079a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079c:	2300      	movs	r3, #0
 800079e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007a0:	2300      	movs	r3, #0
 80007a2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007a4:	f107 0314 	add.w	r3, r7, #20
 80007a8:	4619      	mov	r1, r3
 80007aa:	4817      	ldr	r0, [pc, #92]	@ (8000808 <MX_GPIO_Init+0x13c>)
 80007ac:	f000 fdb6 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS3_Pin;
 80007b0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80007b4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007b6:	2301      	movs	r3, #1
 80007b8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ba:	2300      	movs	r3, #0
 80007bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007be:	2300      	movs	r3, #0
 80007c0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MS3_GPIO_Port, &GPIO_InitStruct);
 80007c2:	f107 0314 	add.w	r3, r7, #20
 80007c6:	4619      	mov	r1, r3
 80007c8:	4810      	ldr	r0, [pc, #64]	@ (800080c <MX_GPIO_Init+0x140>)
 80007ca:	f000 fda7 	bl	800131c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENABLE_Pin|DIR_Pin;
 80007ce:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80007d2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007d4:	2301      	movs	r3, #1
 80007d6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d8:	2300      	movs	r3, #0
 80007da:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007dc:	2300      	movs	r3, #0
 80007de:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007e0:	f107 0314 	add.w	r3, r7, #20
 80007e4:	4619      	mov	r1, r3
 80007e6:	480a      	ldr	r0, [pc, #40]	@ (8000810 <MX_GPIO_Init+0x144>)
 80007e8:	f000 fd98 	bl	800131c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80007ec:	2200      	movs	r2, #0
 80007ee:	2100      	movs	r1, #0
 80007f0:	2028      	movs	r0, #40	@ 0x28
 80007f2:	f000 fcca 	bl	800118a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80007f6:	2028      	movs	r0, #40	@ 0x28
 80007f8:	f000 fce3 	bl	80011c2 <HAL_NVIC_EnableIRQ>

}
 80007fc:	bf00      	nop
 80007fe:	3728      	adds	r7, #40	@ 0x28
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	40023800 	.word	0x40023800
 8000808:	40020000 	.word	0x40020000
 800080c:	40020400 	.word	0x40020400
 8000810:	40020800 	.word	0x40020800

08000814 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000818:	f000 fb6a 	bl	8000ef0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081c:	f000 f81a 	bl	8000854 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000820:	f7ff ff54 	bl	80006cc <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000824:	f000 fac0 	bl	8000da8 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000828:	f000 f986 	bl	8000b38 <MX_TIM2_Init>
  MX_TIM3_Init();
 800082c:	f000 f9fa 	bl	8000c24 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

  // Reset interrupt flags before starting the timers
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000830:	4b05      	ldr	r3, [pc, #20]	@ (8000848 <main+0x34>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f06f 0201 	mvn.w	r2, #1
 8000838:	611a      	str	r2, [r3, #16]

  //Stepper_Init(&nema_17, 0.05, GPIOC, GPIO_PIN_10, &htim2, GPIOA, GPIO_PIN_0, GPIOC, GPIO_PIN_12, GPIOA, GPIO_PIN_12, GPIOA, GPIO_PIN_11, GPIOB, GPIO_PIN_12);
  //Stepper_Enable(&nema_17);
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 800083a:	2201      	movs	r2, #1
 800083c:	4903      	ldr	r1, [pc, #12]	@ (800084c <main+0x38>)
 800083e:	4804      	ldr	r0, [pc, #16]	@ (8000850 <main+0x3c>)
 8000840:	f002 fd5a 	bl	80032f8 <HAL_UART_Receive_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000844:	bf00      	nop
 8000846:	e7fd      	b.n	8000844 <main+0x30>
 8000848:	2000017c 	.word	0x2000017c
 800084c:	20000118 	.word	0x20000118
 8000850:	200001c4 	.word	0x200001c4

08000854 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b094      	sub	sp, #80	@ 0x50
 8000858:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800085a:	f107 031c 	add.w	r3, r7, #28
 800085e:	2234      	movs	r2, #52	@ 0x34
 8000860:	2100      	movs	r1, #0
 8000862:	4618      	mov	r0, r3
 8000864:	f003 fc98 	bl	8004198 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000868:	f107 0308 	add.w	r3, r7, #8
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000878:	2300      	movs	r3, #0
 800087a:	607b      	str	r3, [r7, #4]
 800087c:	4b2a      	ldr	r3, [pc, #168]	@ (8000928 <SystemClock_Config+0xd4>)
 800087e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000880:	4a29      	ldr	r2, [pc, #164]	@ (8000928 <SystemClock_Config+0xd4>)
 8000882:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000886:	6413      	str	r3, [r2, #64]	@ 0x40
 8000888:	4b27      	ldr	r3, [pc, #156]	@ (8000928 <SystemClock_Config+0xd4>)
 800088a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800088c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000894:	2300      	movs	r3, #0
 8000896:	603b      	str	r3, [r7, #0]
 8000898:	4b24      	ldr	r3, [pc, #144]	@ (800092c <SystemClock_Config+0xd8>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80008a0:	4a22      	ldr	r2, [pc, #136]	@ (800092c <SystemClock_Config+0xd8>)
 80008a2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80008a6:	6013      	str	r3, [r2, #0]
 80008a8:	4b20      	ldr	r3, [pc, #128]	@ (800092c <SystemClock_Config+0xd8>)
 80008aa:	681b      	ldr	r3, [r3, #0]
 80008ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80008b0:	603b      	str	r3, [r7, #0]
 80008b2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80008b4:	2302      	movs	r3, #2
 80008b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80008b8:	2301      	movs	r3, #1
 80008ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80008bc:	2310      	movs	r3, #16
 80008be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80008c4:	2300      	movs	r3, #0
 80008c6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 80008c8:	2310      	movs	r3, #16
 80008ca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 80008cc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80008d0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80008d2:	2304      	movs	r3, #4
 80008d4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80008d6:	2302      	movs	r3, #2
 80008d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80008da:	2302      	movs	r3, #2
 80008dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008de:	f107 031c 	add.w	r3, r7, #28
 80008e2:	4618      	mov	r0, r3
 80008e4:	f001 fa36 	bl	8001d54 <HAL_RCC_OscConfig>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80008ee:	f000 f861 	bl	80009b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f2:	230f      	movs	r3, #15
 80008f4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f6:	2302      	movs	r3, #2
 80008f8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008fa:	2300      	movs	r3, #0
 80008fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80008fe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000904:	2300      	movs	r3, #0
 8000906:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000908:	f107 0308 	add.w	r3, r7, #8
 800090c:	2102      	movs	r1, #2
 800090e:	4618      	mov	r0, r3
 8000910:	f000 fed6 	bl	80016c0 <HAL_RCC_ClockConfig>
 8000914:	4603      	mov	r3, r0
 8000916:	2b00      	cmp	r3, #0
 8000918:	d001      	beq.n	800091e <SystemClock_Config+0xca>
  {
    Error_Handler();
 800091a:	f000 f84b 	bl	80009b4 <Error_Handler>
  }
}
 800091e:	bf00      	nop
 8000920:	3750      	adds	r7, #80	@ 0x50
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	40023800 	.word	0x40023800
 800092c:	40007000 	.word	0x40007000

08000930 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000930:	b580      	push	{r7, lr}
 8000932:	b082      	sub	sp, #8
 8000934:	af00      	add	r7, sp, #0
 8000936:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a18      	ldr	r2, [pc, #96]	@ (80009a0 <HAL_UART_RxCpltCallback+0x70>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d129      	bne.n	8000996 <HAL_UART_RxCpltCallback+0x66>

		if (*(rx_data+cnt) == '\r'){
 8000942:	4b18      	ldr	r3, [pc, #96]	@ (80009a4 <HAL_UART_RxCpltCallback+0x74>)
 8000944:	781b      	ldrb	r3, [r3, #0]
 8000946:	461a      	mov	r2, r3
 8000948:	4b17      	ldr	r3, [pc, #92]	@ (80009a8 <HAL_UART_RxCpltCallback+0x78>)
 800094a:	4413      	add	r3, r2
 800094c:	781b      	ldrb	r3, [r3, #0]
 800094e:	2b0d      	cmp	r3, #13
 8000950:	d111      	bne.n	8000976 <HAL_UART_RxCpltCallback+0x46>
			Command_Init(&g_command, rx_data);
 8000952:	4915      	ldr	r1, [pc, #84]	@ (80009a8 <HAL_UART_RxCpltCallback+0x78>)
 8000954:	4815      	ldr	r0, [pc, #84]	@ (80009ac <HAL_UART_RxCpltCallback+0x7c>)
 8000956:	f7ff fe2b 	bl	80005b0 <Command_Init>
			Command_Execute(&g_command);
 800095a:	4814      	ldr	r0, [pc, #80]	@ (80009ac <HAL_UART_RxCpltCallback+0x7c>)
 800095c:	f7ff fe64 	bl	8000628 <Command_Execute>
			cnt = -1;
 8000960:	4b10      	ldr	r3, [pc, #64]	@ (80009a4 <HAL_UART_RxCpltCallback+0x74>)
 8000962:	22ff      	movs	r2, #255	@ 0xff
 8000964:	701a      	strb	r2, [r3, #0]
			memset(rx_data,0,sizeof(rx_data));
 8000966:	2214      	movs	r2, #20
 8000968:	2100      	movs	r1, #0
 800096a:	480f      	ldr	r0, [pc, #60]	@ (80009a8 <HAL_UART_RxCpltCallback+0x78>)
 800096c:	f003 fc14 	bl	8004198 <memset>
			Command_Clear(&g_command);
 8000970:	480e      	ldr	r0, [pc, #56]	@ (80009ac <HAL_UART_RxCpltCallback+0x7c>)
 8000972:	f7ff fe3f 	bl	80005f4 <Command_Clear>
		}
		cnt++;
 8000976:	4b0b      	ldr	r3, [pc, #44]	@ (80009a4 <HAL_UART_RxCpltCallback+0x74>)
 8000978:	781b      	ldrb	r3, [r3, #0]
 800097a:	3301      	adds	r3, #1
 800097c:	b2da      	uxtb	r2, r3
 800097e:	4b09      	ldr	r3, [pc, #36]	@ (80009a4 <HAL_UART_RxCpltCallback+0x74>)
 8000980:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, rx_data+cnt, 1);
 8000982:	4b08      	ldr	r3, [pc, #32]	@ (80009a4 <HAL_UART_RxCpltCallback+0x74>)
 8000984:	781b      	ldrb	r3, [r3, #0]
 8000986:	461a      	mov	r2, r3
 8000988:	4b07      	ldr	r3, [pc, #28]	@ (80009a8 <HAL_UART_RxCpltCallback+0x78>)
 800098a:	4413      	add	r3, r2
 800098c:	2201      	movs	r2, #1
 800098e:	4619      	mov	r1, r3
 8000990:	4807      	ldr	r0, [pc, #28]	@ (80009b0 <HAL_UART_RxCpltCallback+0x80>)
 8000992:	f002 fcb1 	bl	80032f8 <HAL_UART_Receive_IT>

	}
}
 8000996:	bf00      	nop
 8000998:	3708      	adds	r7, #8
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40004400 	.word	0x40004400
 80009a4:	2000012c 	.word	0x2000012c
 80009a8:	20000118 	.word	0x20000118
 80009ac:	200000f4 	.word	0x200000f4
 80009b0:	200001c4 	.word	0x200001c4

080009b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009b8:	b672      	cpsid	i
}
 80009ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009bc:	bf00      	nop
 80009be:	e7fd      	b.n	80009bc <Error_Handler+0x8>

080009c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b082      	sub	sp, #8
 80009c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	607b      	str	r3, [r7, #4]
 80009ca:	4b10      	ldr	r3, [pc, #64]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ce:	4a0f      	ldr	r2, [pc, #60]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80009d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80009d6:	4b0d      	ldr	r3, [pc, #52]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80009de:	607b      	str	r3, [r7, #4]
 80009e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	603b      	str	r3, [r7, #0]
 80009e6:	4b09      	ldr	r3, [pc, #36]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009ea:	4a08      	ldr	r2, [pc, #32]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80009f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80009f2:	4b06      	ldr	r3, [pc, #24]	@ (8000a0c <HAL_MspInit+0x4c>)
 80009f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80009f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80009fa:	603b      	str	r3, [r7, #0]
 80009fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80009fe:	2007      	movs	r0, #7
 8000a00:	f000 fbb8 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a04:	bf00      	nop
 8000a06:	3708      	adds	r7, #8
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	bd80      	pop	{r7, pc}
 8000a0c:	40023800 	.word	0x40023800

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	bf00      	nop
 8000a16:	e7fd      	b.n	8000a14 <NMI_Handler+0x4>

08000a18 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1c:	bf00      	nop
 8000a1e:	e7fd      	b.n	8000a1c <HardFault_Handler+0x4>

08000a20 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <MemManage_Handler+0x4>

08000a28 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a38 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a3c:	bf00      	nop
 8000a3e:	46bd      	mov	sp, r7
 8000a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a44:	4770      	bx	lr

08000a46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a62:	b580      	push	{r7, lr}
 8000a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a66:	f000 fa95 	bl	8000f94 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a6a:	bf00      	nop
 8000a6c:	bd80      	pop	{r7, pc}
	...

08000a70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000a74:	4802      	ldr	r0, [pc, #8]	@ (8000a80 <TIM3_IRQHandler+0x10>)
 8000a76:	f001 fcb3 	bl	80023e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}
 8000a7e:	bf00      	nop
 8000a80:	2000017c 	.word	0x2000017c

08000a84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000a88:	4802      	ldr	r0, [pc, #8]	@ (8000a94 <USART2_IRQHandler+0x10>)
 8000a8a:	f002 fc5b 	bl	8003344 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000a8e:	bf00      	nop
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	200001c4 	.word	0x200001c4

08000a98 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000a9c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000aa0:	f000 fdea 	bl	8001678 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000aa4:	bf00      	nop
 8000aa6:	bd80      	pop	{r7, pc}

08000aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ab0:	4a14      	ldr	r2, [pc, #80]	@ (8000b04 <_sbrk+0x5c>)
 8000ab2:	4b15      	ldr	r3, [pc, #84]	@ (8000b08 <_sbrk+0x60>)
 8000ab4:	1ad3      	subs	r3, r2, r3
 8000ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ab8:	697b      	ldr	r3, [r7, #20]
 8000aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000abc:	4b13      	ldr	r3, [pc, #76]	@ (8000b0c <_sbrk+0x64>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	2b00      	cmp	r3, #0
 8000ac2:	d102      	bne.n	8000aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ac4:	4b11      	ldr	r3, [pc, #68]	@ (8000b0c <_sbrk+0x64>)
 8000ac6:	4a12      	ldr	r2, [pc, #72]	@ (8000b10 <_sbrk+0x68>)
 8000ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000aca:	4b10      	ldr	r3, [pc, #64]	@ (8000b0c <_sbrk+0x64>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	4413      	add	r3, r2
 8000ad2:	693a      	ldr	r2, [r7, #16]
 8000ad4:	429a      	cmp	r2, r3
 8000ad6:	d207      	bcs.n	8000ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000ad8:	f003 fb66 	bl	80041a8 <__errno>
 8000adc:	4603      	mov	r3, r0
 8000ade:	220c      	movs	r2, #12
 8000ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8000ae6:	e009      	b.n	8000afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ae8:	4b08      	ldr	r3, [pc, #32]	@ (8000b0c <_sbrk+0x64>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000aee:	4b07      	ldr	r3, [pc, #28]	@ (8000b0c <_sbrk+0x64>)
 8000af0:	681a      	ldr	r2, [r3, #0]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	4413      	add	r3, r2
 8000af6:	4a05      	ldr	r2, [pc, #20]	@ (8000b0c <_sbrk+0x64>)
 8000af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000afa:	68fb      	ldr	r3, [r7, #12]
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20020000 	.word	0x20020000
 8000b08:	00000400 	.word	0x00000400
 8000b0c:	20000130 	.word	0x20000130
 8000b10:	20000358 	.word	0x20000358

08000b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b14:	b480      	push	{r7}
 8000b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b18:	4b06      	ldr	r3, [pc, #24]	@ (8000b34 <SystemInit+0x20>)
 8000b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b1e:	4a05      	ldr	r2, [pc, #20]	@ (8000b34 <SystemInit+0x20>)
 8000b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b28:	bf00      	nop
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr
 8000b32:	bf00      	nop
 8000b34:	e000ed00 	.word	0xe000ed00

08000b38 <MX_TIM2_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	b08e      	sub	sp, #56	@ 0x38
 8000b3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b3e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000b42:	2200      	movs	r2, #0
 8000b44:	601a      	str	r2, [r3, #0]
 8000b46:	605a      	str	r2, [r3, #4]
 8000b48:	609a      	str	r2, [r3, #8]
 8000b4a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b4c:	f107 0320 	add.w	r3, r7, #32
 8000b50:	2200      	movs	r2, #0
 8000b52:	601a      	str	r2, [r3, #0]
 8000b54:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000b56:	1d3b      	adds	r3, r7, #4
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
 8000b64:	615a      	str	r2, [r3, #20]
 8000b66:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000b68:	4b2c      	ldr	r3, [pc, #176]	@ (8000c1c <MX_TIM2_Init+0xe4>)
 8000b6a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000b6e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000b70:	4b2a      	ldr	r3, [pc, #168]	@ (8000c1c <MX_TIM2_Init+0xe4>)
 8000b72:	2200      	movs	r2, #0
 8000b74:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b76:	4b29      	ldr	r3, [pc, #164]	@ (8000c1c <MX_TIM2_Init+0xe4>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 839999;
 8000b7c:	4b27      	ldr	r3, [pc, #156]	@ (8000c1c <MX_TIM2_Init+0xe4>)
 8000b7e:	4a28      	ldr	r2, [pc, #160]	@ (8000c20 <MX_TIM2_Init+0xe8>)
 8000b80:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b82:	4b26      	ldr	r3, [pc, #152]	@ (8000c1c <MX_TIM2_Init+0xe4>)
 8000b84:	2200      	movs	r2, #0
 8000b86:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b88:	4b24      	ldr	r3, [pc, #144]	@ (8000c1c <MX_TIM2_Init+0xe4>)
 8000b8a:	2200      	movs	r2, #0
 8000b8c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000b8e:	4823      	ldr	r0, [pc, #140]	@ (8000c1c <MX_TIM2_Init+0xe4>)
 8000b90:	f001 fb7e 	bl	8002290 <HAL_TIM_Base_Init>
 8000b94:	4603      	mov	r3, r0
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	d001      	beq.n	8000b9e <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8000b9a:	f7ff ff0b 	bl	80009b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000b9e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ba2:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ba4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ba8:	4619      	mov	r1, r3
 8000baa:	481c      	ldr	r0, [pc, #112]	@ (8000c1c <MX_TIM2_Init+0xe4>)
 8000bac:	f001 fdca 	bl	8002744 <HAL_TIM_ConfigClockSource>
 8000bb0:	4603      	mov	r3, r0
 8000bb2:	2b00      	cmp	r3, #0
 8000bb4:	d001      	beq.n	8000bba <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8000bb6:	f7ff fefd 	bl	80009b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000bba:	4818      	ldr	r0, [pc, #96]	@ (8000c1c <MX_TIM2_Init+0xe4>)
 8000bbc:	f001 fbb7 	bl	800232e <HAL_TIM_PWM_Init>
 8000bc0:	4603      	mov	r3, r0
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d001      	beq.n	8000bca <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8000bc6:	f7ff fef5 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8000bca:	2320      	movs	r3, #32
 8000bcc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8000bce:	2380      	movs	r3, #128	@ 0x80
 8000bd0:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000bd2:	f107 0320 	add.w	r3, r7, #32
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4810      	ldr	r0, [pc, #64]	@ (8000c1c <MX_TIM2_Init+0xe4>)
 8000bda:	f002 fa77 	bl	80030cc <HAL_TIMEx_MasterConfigSynchronization>
 8000bde:	4603      	mov	r3, r0
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d001      	beq.n	8000be8 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000be4:	f7ff fee6 	bl	80009b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000be8:	2360      	movs	r3, #96	@ 0x60
 8000bea:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 49;
 8000bec:	2331      	movs	r3, #49	@ 0x31
 8000bee:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000bf8:	1d3b      	adds	r3, r7, #4
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	4807      	ldr	r0, [pc, #28]	@ (8000c1c <MX_TIM2_Init+0xe4>)
 8000c00:	f001 fcde 	bl	80025c0 <HAL_TIM_PWM_ConfigChannel>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d001      	beq.n	8000c0e <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 8000c0a:	f7ff fed3 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000c0e:	4803      	ldr	r0, [pc, #12]	@ (8000c1c <MX_TIM2_Init+0xe4>)
 8000c10:	f000 f892 	bl	8000d38 <HAL_TIM_MspPostInit>

}
 8000c14:	bf00      	nop
 8000c16:	3738      	adds	r7, #56	@ 0x38
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	bd80      	pop	{r7, pc}
 8000c1c:	20000134 	.word	0x20000134
 8000c20:	000cd13f 	.word	0x000cd13f

08000c24 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	b088      	sub	sp, #32
 8000c28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	2200      	movs	r2, #0
 8000c30:	601a      	str	r2, [r3, #0]
 8000c32:	605a      	str	r2, [r3, #4]
 8000c34:	609a      	str	r2, [r3, #8]
 8000c36:	60da      	str	r2, [r3, #12]
 8000c38:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c3a:	1d3b      	adds	r3, r7, #4
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000c42:	4b1d      	ldr	r3, [pc, #116]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c44:	4a1d      	ldr	r2, [pc, #116]	@ (8000cbc <MX_TIM3_Init+0x98>)
 8000c46:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8000c48:	4b1b      	ldr	r3, [pc, #108]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c50:	2200      	movs	r2, #0
 8000c52:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8000c54:	4b18      	ldr	r3, [pc, #96]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c56:	22c8      	movs	r2, #200	@ 0xc8
 8000c58:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c5a:	4b17      	ldr	r3, [pc, #92]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c60:	4b15      	ldr	r3, [pc, #84]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000c66:	4814      	ldr	r0, [pc, #80]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c68:	f001 fb12 	bl	8002290 <HAL_TIM_Base_Init>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 8000c72:	f7ff fe9f 	bl	80009b4 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 8000c76:	2307      	movs	r3, #7
 8000c78:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8000c7a:	2310      	movs	r3, #16
 8000c7c:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8000c7e:	f107 030c 	add.w	r3, r7, #12
 8000c82:	4619      	mov	r1, r3
 8000c84:	480c      	ldr	r0, [pc, #48]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000c86:	f001 fe24 	bl	80028d2 <HAL_TIM_SlaveConfigSynchro>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8000c90:	f7ff fe90 	bl	80009b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000c94:	2300      	movs	r3, #0
 8000c96:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000c98:	2300      	movs	r3, #0
 8000c9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000c9c:	1d3b      	adds	r3, r7, #4
 8000c9e:	4619      	mov	r1, r3
 8000ca0:	4805      	ldr	r0, [pc, #20]	@ (8000cb8 <MX_TIM3_Init+0x94>)
 8000ca2:	f002 fa13 	bl	80030cc <HAL_TIMEx_MasterConfigSynchronization>
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	2b00      	cmp	r3, #0
 8000caa:	d001      	beq.n	8000cb0 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8000cac:	f7ff fe82 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000cb0:	bf00      	nop
 8000cb2:	3720      	adds	r7, #32
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	2000017c 	.word	0x2000017c
 8000cbc:	40000400 	.word	0x40000400

08000cc0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	681b      	ldr	r3, [r3, #0]
 8000ccc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000cd0:	d10e      	bne.n	8000cf0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	60fb      	str	r3, [r7, #12]
 8000cd6:	4b16      	ldr	r3, [pc, #88]	@ (8000d30 <HAL_TIM_Base_MspInit+0x70>)
 8000cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000cda:	4a15      	ldr	r2, [pc, #84]	@ (8000d30 <HAL_TIM_Base_MspInit+0x70>)
 8000cdc:	f043 0301 	orr.w	r3, r3, #1
 8000ce0:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ce2:	4b13      	ldr	r3, [pc, #76]	@ (8000d30 <HAL_TIM_Base_MspInit+0x70>)
 8000ce4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ce6:	f003 0301 	and.w	r3, r3, #1
 8000cea:	60fb      	str	r3, [r7, #12]
 8000cec:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000cee:	e01a      	b.n	8000d26 <HAL_TIM_Base_MspInit+0x66>
  else if(tim_baseHandle->Instance==TIM3)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0f      	ldr	r2, [pc, #60]	@ (8000d34 <HAL_TIM_Base_MspInit+0x74>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d115      	bne.n	8000d26 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	60bb      	str	r3, [r7, #8]
 8000cfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000d30 <HAL_TIM_Base_MspInit+0x70>)
 8000d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d02:	4a0b      	ldr	r2, [pc, #44]	@ (8000d30 <HAL_TIM_Base_MspInit+0x70>)
 8000d04:	f043 0302 	orr.w	r3, r3, #2
 8000d08:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <HAL_TIM_Base_MspInit+0x70>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	f003 0302 	and.w	r3, r3, #2
 8000d12:	60bb      	str	r3, [r7, #8]
 8000d14:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d16:	2200      	movs	r2, #0
 8000d18:	2100      	movs	r1, #0
 8000d1a:	201d      	movs	r0, #29
 8000d1c:	f000 fa35 	bl	800118a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d20:	201d      	movs	r0, #29
 8000d22:	f000 fa4e 	bl	80011c2 <HAL_NVIC_EnableIRQ>
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40023800 	.word	0x40023800
 8000d34:	40000400 	.word	0x40000400

08000d38 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b088      	sub	sp, #32
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d40:	f107 030c 	add.w	r3, r7, #12
 8000d44:	2200      	movs	r2, #0
 8000d46:	601a      	str	r2, [r3, #0]
 8000d48:	605a      	str	r2, [r3, #4]
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	60da      	str	r2, [r3, #12]
 8000d4e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000d58:	d11d      	bne.n	8000d96 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
 8000d5e:	4b10      	ldr	r3, [pc, #64]	@ (8000da0 <HAL_TIM_MspPostInit+0x68>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	4a0f      	ldr	r2, [pc, #60]	@ (8000da0 <HAL_TIM_MspPostInit+0x68>)
 8000d64:	f043 0301 	orr.w	r3, r3, #1
 8000d68:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8000da0 <HAL_TIM_MspPostInit+0x68>)
 8000d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d6e:	f003 0301 	and.w	r3, r3, #1
 8000d72:	60bb      	str	r3, [r7, #8]
 8000d74:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000d76:	2301      	movs	r3, #1
 8000d78:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d7a:	2302      	movs	r3, #2
 8000d7c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d7e:	2300      	movs	r3, #0
 8000d80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d82:	2300      	movs	r3, #0
 8000d84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000d86:	2301      	movs	r3, #1
 8000d88:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d8a:	f107 030c 	add.w	r3, r7, #12
 8000d8e:	4619      	mov	r1, r3
 8000d90:	4804      	ldr	r0, [pc, #16]	@ (8000da4 <HAL_TIM_MspPostInit+0x6c>)
 8000d92:	f000 fac3 	bl	800131c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000d96:	bf00      	nop
 8000d98:	3720      	adds	r7, #32
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	bd80      	pop	{r7, pc}
 8000d9e:	bf00      	nop
 8000da0:	40023800 	.word	0x40023800
 8000da4:	40020000 	.word	0x40020000

08000da8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000dac:	4b11      	ldr	r3, [pc, #68]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dae:	4a12      	ldr	r2, [pc, #72]	@ (8000df8 <MX_USART2_UART_Init+0x50>)
 8000db0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000db2:	4b10      	ldr	r3, [pc, #64]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000db4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000db8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000dba:	4b0e      	ldr	r3, [pc, #56]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dc8:	2200      	movs	r2, #0
 8000dca:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000dcc:	4b09      	ldr	r3, [pc, #36]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dce:	220c      	movs	r2, #12
 8000dd0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000dd2:	4b08      	ldr	r3, [pc, #32]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000dde:	4805      	ldr	r0, [pc, #20]	@ (8000df4 <MX_USART2_UART_Init+0x4c>)
 8000de0:	f002 fa04 	bl	80031ec <HAL_UART_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000dea:	f7ff fde3 	bl	80009b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	200001c4 	.word	0x200001c4
 8000df8:	40004400 	.word	0x40004400

08000dfc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b08a      	sub	sp, #40	@ 0x28
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e04:	f107 0314 	add.w	r3, r7, #20
 8000e08:	2200      	movs	r2, #0
 8000e0a:	601a      	str	r2, [r3, #0]
 8000e0c:	605a      	str	r2, [r3, #4]
 8000e0e:	609a      	str	r2, [r3, #8]
 8000e10:	60da      	str	r2, [r3, #12]
 8000e12:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	4a1d      	ldr	r2, [pc, #116]	@ (8000e90 <HAL_UART_MspInit+0x94>)
 8000e1a:	4293      	cmp	r3, r2
 8000e1c:	d133      	bne.n	8000e86 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e1e:	2300      	movs	r3, #0
 8000e20:	613b      	str	r3, [r7, #16]
 8000e22:	4b1c      	ldr	r3, [pc, #112]	@ (8000e94 <HAL_UART_MspInit+0x98>)
 8000e24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e26:	4a1b      	ldr	r2, [pc, #108]	@ (8000e94 <HAL_UART_MspInit+0x98>)
 8000e28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000e2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8000e2e:	4b19      	ldr	r3, [pc, #100]	@ (8000e94 <HAL_UART_MspInit+0x98>)
 8000e30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000e32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	60fb      	str	r3, [r7, #12]
 8000e3e:	4b15      	ldr	r3, [pc, #84]	@ (8000e94 <HAL_UART_MspInit+0x98>)
 8000e40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e42:	4a14      	ldr	r2, [pc, #80]	@ (8000e94 <HAL_UART_MspInit+0x98>)
 8000e44:	f043 0301 	orr.w	r3, r3, #1
 8000e48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000e4a:	4b12      	ldr	r3, [pc, #72]	@ (8000e94 <HAL_UART_MspInit+0x98>)
 8000e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000e4e:	f003 0301 	and.w	r3, r3, #1
 8000e52:	60fb      	str	r3, [r7, #12]
 8000e54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000e56:	230c      	movs	r3, #12
 8000e58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e5a:	2302      	movs	r3, #2
 8000e5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e62:	2303      	movs	r3, #3
 8000e64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e66:	2307      	movs	r3, #7
 8000e68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e6a:	f107 0314 	add.w	r3, r7, #20
 8000e6e:	4619      	mov	r1, r3
 8000e70:	4809      	ldr	r0, [pc, #36]	@ (8000e98 <HAL_UART_MspInit+0x9c>)
 8000e72:	f000 fa53 	bl	800131c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000e76:	2200      	movs	r2, #0
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2026      	movs	r0, #38	@ 0x26
 8000e7c:	f000 f985 	bl	800118a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e80:	2026      	movs	r0, #38	@ 0x26
 8000e82:	f000 f99e 	bl	80011c2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e86:	bf00      	nop
 8000e88:	3728      	adds	r7, #40	@ 0x28
 8000e8a:	46bd      	mov	sp, r7
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	40004400 	.word	0x40004400
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000

08000e9c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000e9c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000ed4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000ea0:	f7ff fe38 	bl	8000b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ea4:	480c      	ldr	r0, [pc, #48]	@ (8000ed8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ea6:	490d      	ldr	r1, [pc, #52]	@ (8000edc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ea8:	4a0d      	ldr	r2, [pc, #52]	@ (8000ee0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000eaa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000eac:	e002      	b.n	8000eb4 <LoopCopyDataInit>

08000eae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000eae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000eb0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000eb2:	3304      	adds	r3, #4

08000eb4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000eb4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eb6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eb8:	d3f9      	bcc.n	8000eae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eba:	4a0a      	ldr	r2, [pc, #40]	@ (8000ee4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000ebc:	4c0a      	ldr	r4, [pc, #40]	@ (8000ee8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000ebe:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ec0:	e001      	b.n	8000ec6 <LoopFillZerobss>

08000ec2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ec2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ec4:	3204      	adds	r2, #4

08000ec6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ec6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ec8:	d3fb      	bcc.n	8000ec2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000eca:	f003 f973 	bl	80041b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ece:	f7ff fca1 	bl	8000814 <main>
  bx  lr    
 8000ed2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ed4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000ed8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000edc:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8000ee0:	08004f14 	.word	0x08004f14
  ldr r2, =_sbss
 8000ee4:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8000ee8:	20000358 	.word	0x20000358

08000eec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eec:	e7fe      	b.n	8000eec <ADC_IRQHandler>
	...

08000ef0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000ef4:	4b0e      	ldr	r3, [pc, #56]	@ (8000f30 <HAL_Init+0x40>)
 8000ef6:	681b      	ldr	r3, [r3, #0]
 8000ef8:	4a0d      	ldr	r2, [pc, #52]	@ (8000f30 <HAL_Init+0x40>)
 8000efa:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000efe:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000f00:	4b0b      	ldr	r3, [pc, #44]	@ (8000f30 <HAL_Init+0x40>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	4a0a      	ldr	r2, [pc, #40]	@ (8000f30 <HAL_Init+0x40>)
 8000f06:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000f0a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000f0c:	4b08      	ldr	r3, [pc, #32]	@ (8000f30 <HAL_Init+0x40>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a07      	ldr	r2, [pc, #28]	@ (8000f30 <HAL_Init+0x40>)
 8000f12:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000f16:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f18:	2003      	movs	r0, #3
 8000f1a:	f000 f92b 	bl	8001174 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f1e:	2000      	movs	r0, #0
 8000f20:	f000 f808 	bl	8000f34 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000f24:	f7ff fd4c 	bl	80009c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	bd80      	pop	{r7, pc}
 8000f2e:	bf00      	nop
 8000f30:	40023c00 	.word	0x40023c00

08000f34 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f3c:	4b12      	ldr	r3, [pc, #72]	@ (8000f88 <HAL_InitTick+0x54>)
 8000f3e:	681a      	ldr	r2, [r3, #0]
 8000f40:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HAL_InitTick+0x58>)
 8000f42:	781b      	ldrb	r3, [r3, #0]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f4a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f4e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f52:	4618      	mov	r0, r3
 8000f54:	f000 f943 	bl	80011de <HAL_SYSTICK_Config>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f5e:	2301      	movs	r3, #1
 8000f60:	e00e      	b.n	8000f80 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	2b0f      	cmp	r3, #15
 8000f66:	d80a      	bhi.n	8000f7e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f68:	2200      	movs	r2, #0
 8000f6a:	6879      	ldr	r1, [r7, #4]
 8000f6c:	f04f 30ff 	mov.w	r0, #4294967295
 8000f70:	f000 f90b 	bl	800118a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f74:	4a06      	ldr	r2, [pc, #24]	@ (8000f90 <HAL_InitTick+0x5c>)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	e000      	b.n	8000f80 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000f7e:	2301      	movs	r3, #1
}
 8000f80:	4618      	mov	r0, r3
 8000f82:	3708      	adds	r7, #8
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	2000007c 	.word	0x2000007c
 8000f8c:	20000084 	.word	0x20000084
 8000f90:	20000080 	.word	0x20000080

08000f94 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000f98:	4b06      	ldr	r3, [pc, #24]	@ (8000fb4 <HAL_IncTick+0x20>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	461a      	mov	r2, r3
 8000f9e:	4b06      	ldr	r3, [pc, #24]	@ (8000fb8 <HAL_IncTick+0x24>)
 8000fa0:	681b      	ldr	r3, [r3, #0]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	4a04      	ldr	r2, [pc, #16]	@ (8000fb8 <HAL_IncTick+0x24>)
 8000fa6:	6013      	str	r3, [r2, #0]
}
 8000fa8:	bf00      	nop
 8000faa:	46bd      	mov	sp, r7
 8000fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop
 8000fb4:	20000084 	.word	0x20000084
 8000fb8:	2000020c 	.word	0x2000020c

08000fbc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc0:	4b03      	ldr	r3, [pc, #12]	@ (8000fd0 <HAL_GetTick+0x14>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
}
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fcc:	4770      	bx	lr
 8000fce:	bf00      	nop
 8000fd0:	2000020c 	.word	0x2000020c

08000fd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b085      	sub	sp, #20
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	f003 0307 	and.w	r3, r3, #7
 8000fe2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8000fe6:	68db      	ldr	r3, [r3, #12]
 8000fe8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000fea:	68ba      	ldr	r2, [r7, #8]
 8000fec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ff0:	4013      	ands	r3, r2
 8000ff2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ff8:	68bb      	ldr	r3, [r7, #8]
 8000ffa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ffc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001004:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001006:	4a04      	ldr	r2, [pc, #16]	@ (8001018 <__NVIC_SetPriorityGrouping+0x44>)
 8001008:	68bb      	ldr	r3, [r7, #8]
 800100a:	60d3      	str	r3, [r2, #12]
}
 800100c:	bf00      	nop
 800100e:	3714      	adds	r7, #20
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr
 8001018:	e000ed00 	.word	0xe000ed00

0800101c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800101c:	b480      	push	{r7}
 800101e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001020:	4b04      	ldr	r3, [pc, #16]	@ (8001034 <__NVIC_GetPriorityGrouping+0x18>)
 8001022:	68db      	ldr	r3, [r3, #12]
 8001024:	0a1b      	lsrs	r3, r3, #8
 8001026:	f003 0307 	and.w	r3, r3, #7
}
 800102a:	4618      	mov	r0, r3
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr
 8001034:	e000ed00 	.word	0xe000ed00

08001038 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001038:	b480      	push	{r7}
 800103a:	b083      	sub	sp, #12
 800103c:	af00      	add	r7, sp, #0
 800103e:	4603      	mov	r3, r0
 8001040:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001042:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001046:	2b00      	cmp	r3, #0
 8001048:	db0b      	blt.n	8001062 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800104a:	79fb      	ldrb	r3, [r7, #7]
 800104c:	f003 021f 	and.w	r2, r3, #31
 8001050:	4907      	ldr	r1, [pc, #28]	@ (8001070 <__NVIC_EnableIRQ+0x38>)
 8001052:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001056:	095b      	lsrs	r3, r3, #5
 8001058:	2001      	movs	r0, #1
 800105a:	fa00 f202 	lsl.w	r2, r0, r2
 800105e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001062:	bf00      	nop
 8001064:	370c      	adds	r7, #12
 8001066:	46bd      	mov	sp, r7
 8001068:	f85d 7b04 	ldr.w	r7, [sp], #4
 800106c:	4770      	bx	lr
 800106e:	bf00      	nop
 8001070:	e000e100 	.word	0xe000e100

08001074 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001074:	b480      	push	{r7}
 8001076:	b083      	sub	sp, #12
 8001078:	af00      	add	r7, sp, #0
 800107a:	4603      	mov	r3, r0
 800107c:	6039      	str	r1, [r7, #0]
 800107e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001080:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001084:	2b00      	cmp	r3, #0
 8001086:	db0a      	blt.n	800109e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001088:	683b      	ldr	r3, [r7, #0]
 800108a:	b2da      	uxtb	r2, r3
 800108c:	490c      	ldr	r1, [pc, #48]	@ (80010c0 <__NVIC_SetPriority+0x4c>)
 800108e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001092:	0112      	lsls	r2, r2, #4
 8001094:	b2d2      	uxtb	r2, r2
 8001096:	440b      	add	r3, r1
 8001098:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800109c:	e00a      	b.n	80010b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109e:	683b      	ldr	r3, [r7, #0]
 80010a0:	b2da      	uxtb	r2, r3
 80010a2:	4908      	ldr	r1, [pc, #32]	@ (80010c4 <__NVIC_SetPriority+0x50>)
 80010a4:	79fb      	ldrb	r3, [r7, #7]
 80010a6:	f003 030f 	and.w	r3, r3, #15
 80010aa:	3b04      	subs	r3, #4
 80010ac:	0112      	lsls	r2, r2, #4
 80010ae:	b2d2      	uxtb	r2, r2
 80010b0:	440b      	add	r3, r1
 80010b2:	761a      	strb	r2, [r3, #24]
}
 80010b4:	bf00      	nop
 80010b6:	370c      	adds	r7, #12
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	e000e100 	.word	0xe000e100
 80010c4:	e000ed00 	.word	0xe000ed00

080010c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010c8:	b480      	push	{r7}
 80010ca:	b089      	sub	sp, #36	@ 0x24
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	60f8      	str	r0, [r7, #12]
 80010d0:	60b9      	str	r1, [r7, #8]
 80010d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f003 0307 	and.w	r3, r3, #7
 80010da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010dc:	69fb      	ldr	r3, [r7, #28]
 80010de:	f1c3 0307 	rsb	r3, r3, #7
 80010e2:	2b04      	cmp	r3, #4
 80010e4:	bf28      	it	cs
 80010e6:	2304      	movcs	r3, #4
 80010e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010ea:	69fb      	ldr	r3, [r7, #28]
 80010ec:	3304      	adds	r3, #4
 80010ee:	2b06      	cmp	r3, #6
 80010f0:	d902      	bls.n	80010f8 <NVIC_EncodePriority+0x30>
 80010f2:	69fb      	ldr	r3, [r7, #28]
 80010f4:	3b03      	subs	r3, #3
 80010f6:	e000      	b.n	80010fa <NVIC_EncodePriority+0x32>
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	fa02 f303 	lsl.w	r3, r2, r3
 8001106:	43da      	mvns	r2, r3
 8001108:	68bb      	ldr	r3, [r7, #8]
 800110a:	401a      	ands	r2, r3
 800110c:	697b      	ldr	r3, [r7, #20]
 800110e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001110:	f04f 31ff 	mov.w	r1, #4294967295
 8001114:	697b      	ldr	r3, [r7, #20]
 8001116:	fa01 f303 	lsl.w	r3, r1, r3
 800111a:	43d9      	mvns	r1, r3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001120:	4313      	orrs	r3, r2
         );
}
 8001122:	4618      	mov	r0, r3
 8001124:	3724      	adds	r7, #36	@ 0x24
 8001126:	46bd      	mov	sp, r7
 8001128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800112c:	4770      	bx	lr
	...

08001130 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001130:	b580      	push	{r7, lr}
 8001132:	b082      	sub	sp, #8
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	3b01      	subs	r3, #1
 800113c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001140:	d301      	bcc.n	8001146 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001142:	2301      	movs	r3, #1
 8001144:	e00f      	b.n	8001166 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001146:	4a0a      	ldr	r2, [pc, #40]	@ (8001170 <SysTick_Config+0x40>)
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	3b01      	subs	r3, #1
 800114c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800114e:	210f      	movs	r1, #15
 8001150:	f04f 30ff 	mov.w	r0, #4294967295
 8001154:	f7ff ff8e 	bl	8001074 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001158:	4b05      	ldr	r3, [pc, #20]	@ (8001170 <SysTick_Config+0x40>)
 800115a:	2200      	movs	r2, #0
 800115c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800115e:	4b04      	ldr	r3, [pc, #16]	@ (8001170 <SysTick_Config+0x40>)
 8001160:	2207      	movs	r2, #7
 8001162:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001164:	2300      	movs	r3, #0
}
 8001166:	4618      	mov	r0, r3
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	e000e010 	.word	0xe000e010

08001174 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b082      	sub	sp, #8
 8001178:	af00      	add	r7, sp, #0
 800117a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ff29 	bl	8000fd4 <__NVIC_SetPriorityGrouping>
}
 8001182:	bf00      	nop
 8001184:	3708      	adds	r7, #8
 8001186:	46bd      	mov	sp, r7
 8001188:	bd80      	pop	{r7, pc}

0800118a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800118a:	b580      	push	{r7, lr}
 800118c:	b086      	sub	sp, #24
 800118e:	af00      	add	r7, sp, #0
 8001190:	4603      	mov	r3, r0
 8001192:	60b9      	str	r1, [r7, #8]
 8001194:	607a      	str	r2, [r7, #4]
 8001196:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001198:	2300      	movs	r3, #0
 800119a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800119c:	f7ff ff3e 	bl	800101c <__NVIC_GetPriorityGrouping>
 80011a0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80011a2:	687a      	ldr	r2, [r7, #4]
 80011a4:	68b9      	ldr	r1, [r7, #8]
 80011a6:	6978      	ldr	r0, [r7, #20]
 80011a8:	f7ff ff8e 	bl	80010c8 <NVIC_EncodePriority>
 80011ac:	4602      	mov	r2, r0
 80011ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80011b2:	4611      	mov	r1, r2
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7ff ff5d 	bl	8001074 <__NVIC_SetPriority>
}
 80011ba:	bf00      	nop
 80011bc:	3718      	adds	r7, #24
 80011be:	46bd      	mov	sp, r7
 80011c0:	bd80      	pop	{r7, pc}

080011c2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011c2:	b580      	push	{r7, lr}
 80011c4:	b082      	sub	sp, #8
 80011c6:	af00      	add	r7, sp, #0
 80011c8:	4603      	mov	r3, r0
 80011ca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80011cc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d0:	4618      	mov	r0, r3
 80011d2:	f7ff ff31 	bl	8001038 <__NVIC_EnableIRQ>
}
 80011d6:	bf00      	nop
 80011d8:	3708      	adds	r7, #8
 80011da:	46bd      	mov	sp, r7
 80011dc:	bd80      	pop	{r7, pc}

080011de <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80011de:	b580      	push	{r7, lr}
 80011e0:	b082      	sub	sp, #8
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80011e6:	6878      	ldr	r0, [r7, #4]
 80011e8:	f7ff ffa2 	bl	8001130 <SysTick_Config>
 80011ec:	4603      	mov	r3, r0
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3708      	adds	r7, #8
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}

080011f6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80011f6:	b580      	push	{r7, lr}
 80011f8:	b084      	sub	sp, #16
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001202:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001204:	f7ff feda 	bl	8000fbc <HAL_GetTick>
 8001208:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001210:	b2db      	uxtb	r3, r3
 8001212:	2b02      	cmp	r3, #2
 8001214:	d008      	beq.n	8001228 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2280      	movs	r2, #128	@ 0x80
 800121a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001224:	2301      	movs	r3, #1
 8001226:	e052      	b.n	80012ce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001228:	687b      	ldr	r3, [r7, #4]
 800122a:	681b      	ldr	r3, [r3, #0]
 800122c:	681a      	ldr	r2, [r3, #0]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	f022 0216 	bic.w	r2, r2, #22
 8001236:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	695a      	ldr	r2, [r3, #20]
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	681b      	ldr	r3, [r3, #0]
 8001242:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001246:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800124c:	2b00      	cmp	r3, #0
 800124e:	d103      	bne.n	8001258 <HAL_DMA_Abort+0x62>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001254:	2b00      	cmp	r3, #0
 8001256:	d007      	beq.n	8001268 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	681a      	ldr	r2, [r3, #0]
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f022 0208 	bic.w	r2, r2, #8
 8001266:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f022 0201 	bic.w	r2, r2, #1
 8001276:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001278:	e013      	b.n	80012a2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800127a:	f7ff fe9f 	bl	8000fbc <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	68bb      	ldr	r3, [r7, #8]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b05      	cmp	r3, #5
 8001286:	d90c      	bls.n	80012a2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	2220      	movs	r2, #32
 800128c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	2203      	movs	r2, #3
 8001292:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	2200      	movs	r2, #0
 800129a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800129e:	2303      	movs	r3, #3
 80012a0:	e015      	b.n	80012ce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	f003 0301 	and.w	r3, r3, #1
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d1e4      	bne.n	800127a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80012b4:	223f      	movs	r2, #63	@ 0x3f
 80012b6:	409a      	lsls	r2, r3
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	2201      	movs	r2, #1
 80012c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2200      	movs	r2, #0
 80012c8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80012cc:	2300      	movs	r3, #0
}
 80012ce:	4618      	mov	r0, r3
 80012d0:	3710      	adds	r7, #16
 80012d2:	46bd      	mov	sp, r7
 80012d4:	bd80      	pop	{r7, pc}

080012d6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012d6:	b480      	push	{r7}
 80012d8:	b083      	sub	sp, #12
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	2b02      	cmp	r3, #2
 80012e8:	d004      	beq.n	80012f4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2280      	movs	r2, #128	@ 0x80
 80012ee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80012f0:	2301      	movs	r3, #1
 80012f2:	e00c      	b.n	800130e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	2205      	movs	r2, #5
 80012f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	681a      	ldr	r2, [r3, #0]
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	f022 0201 	bic.w	r2, r2, #1
 800130a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800130c:	2300      	movs	r3, #0
}
 800130e:	4618      	mov	r0, r3
 8001310:	370c      	adds	r7, #12
 8001312:	46bd      	mov	sp, r7
 8001314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001318:	4770      	bx	lr
	...

0800131c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800131c:	b480      	push	{r7}
 800131e:	b089      	sub	sp, #36	@ 0x24
 8001320:	af00      	add	r7, sp, #0
 8001322:	6078      	str	r0, [r7, #4]
 8001324:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001326:	2300      	movs	r3, #0
 8001328:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800132a:	2300      	movs	r3, #0
 800132c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
 8001336:	e165      	b.n	8001604 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001338:	2201      	movs	r2, #1
 800133a:	69fb      	ldr	r3, [r7, #28]
 800133c:	fa02 f303 	lsl.w	r3, r2, r3
 8001340:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	4013      	ands	r3, r2
 800134a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800134c:	693a      	ldr	r2, [r7, #16]
 800134e:	697b      	ldr	r3, [r7, #20]
 8001350:	429a      	cmp	r2, r3
 8001352:	f040 8154 	bne.w	80015fe <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001356:	683b      	ldr	r3, [r7, #0]
 8001358:	685b      	ldr	r3, [r3, #4]
 800135a:	f003 0303 	and.w	r3, r3, #3
 800135e:	2b01      	cmp	r3, #1
 8001360:	d005      	beq.n	800136e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	685b      	ldr	r3, [r3, #4]
 8001366:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800136a:	2b02      	cmp	r3, #2
 800136c:	d130      	bne.n	80013d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001374:	69fb      	ldr	r3, [r7, #28]
 8001376:	005b      	lsls	r3, r3, #1
 8001378:	2203      	movs	r2, #3
 800137a:	fa02 f303 	lsl.w	r3, r2, r3
 800137e:	43db      	mvns	r3, r3
 8001380:	69ba      	ldr	r2, [r7, #24]
 8001382:	4013      	ands	r3, r2
 8001384:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001386:	683b      	ldr	r3, [r7, #0]
 8001388:	68da      	ldr	r2, [r3, #12]
 800138a:	69fb      	ldr	r3, [r7, #28]
 800138c:	005b      	lsls	r3, r3, #1
 800138e:	fa02 f303 	lsl.w	r3, r2, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4313      	orrs	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69ba      	ldr	r2, [r7, #24]
 800139c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013a4:	2201      	movs	r2, #1
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ac:	43db      	mvns	r3, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4013      	ands	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013b4:	683b      	ldr	r3, [r7, #0]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	091b      	lsrs	r3, r3, #4
 80013ba:	f003 0201 	and.w	r2, r3, #1
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4313      	orrs	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	69ba      	ldr	r2, [r7, #24]
 80013ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	685b      	ldr	r3, [r3, #4]
 80013d4:	f003 0303 	and.w	r3, r3, #3
 80013d8:	2b03      	cmp	r3, #3
 80013da:	d017      	beq.n	800140c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	68db      	ldr	r3, [r3, #12]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80013e2:	69fb      	ldr	r3, [r7, #28]
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	2203      	movs	r2, #3
 80013e8:	fa02 f303 	lsl.w	r3, r2, r3
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	689a      	ldr	r2, [r3, #8]
 80013f8:	69fb      	ldr	r3, [r7, #28]
 80013fa:	005b      	lsls	r3, r3, #1
 80013fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	4313      	orrs	r3, r2
 8001404:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	69ba      	ldr	r2, [r7, #24]
 800140a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	685b      	ldr	r3, [r3, #4]
 8001410:	f003 0303 	and.w	r3, r3, #3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d123      	bne.n	8001460 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001418:	69fb      	ldr	r3, [r7, #28]
 800141a:	08da      	lsrs	r2, r3, #3
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	3208      	adds	r2, #8
 8001420:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001424:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001426:	69fb      	ldr	r3, [r7, #28]
 8001428:	f003 0307 	and.w	r3, r3, #7
 800142c:	009b      	lsls	r3, r3, #2
 800142e:	220f      	movs	r2, #15
 8001430:	fa02 f303 	lsl.w	r3, r2, r3
 8001434:	43db      	mvns	r3, r3
 8001436:	69ba      	ldr	r2, [r7, #24]
 8001438:	4013      	ands	r3, r2
 800143a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	691a      	ldr	r2, [r3, #16]
 8001440:	69fb      	ldr	r3, [r7, #28]
 8001442:	f003 0307 	and.w	r3, r3, #7
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	fa02 f303 	lsl.w	r3, r2, r3
 800144c:	69ba      	ldr	r2, [r7, #24]
 800144e:	4313      	orrs	r3, r2
 8001450:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3208      	adds	r2, #8
 800145a:	69b9      	ldr	r1, [r7, #24]
 800145c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	005b      	lsls	r3, r3, #1
 800146a:	2203      	movs	r2, #3
 800146c:	fa02 f303 	lsl.w	r3, r2, r3
 8001470:	43db      	mvns	r3, r3
 8001472:	69ba      	ldr	r2, [r7, #24]
 8001474:	4013      	ands	r3, r2
 8001476:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	685b      	ldr	r3, [r3, #4]
 800147c:	f003 0203 	and.w	r2, r3, #3
 8001480:	69fb      	ldr	r3, [r7, #28]
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	fa02 f303 	lsl.w	r3, r2, r3
 8001488:	69ba      	ldr	r2, [r7, #24]
 800148a:	4313      	orrs	r3, r2
 800148c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	69ba      	ldr	r2, [r7, #24]
 8001492:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001494:	683b      	ldr	r3, [r7, #0]
 8001496:	685b      	ldr	r3, [r3, #4]
 8001498:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800149c:	2b00      	cmp	r3, #0
 800149e:	f000 80ae 	beq.w	80015fe <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	60fb      	str	r3, [r7, #12]
 80014a6:	4b5d      	ldr	r3, [pc, #372]	@ (800161c <HAL_GPIO_Init+0x300>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014aa:	4a5c      	ldr	r2, [pc, #368]	@ (800161c <HAL_GPIO_Init+0x300>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014b2:	4b5a      	ldr	r3, [pc, #360]	@ (800161c <HAL_GPIO_Init+0x300>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014ba:	60fb      	str	r3, [r7, #12]
 80014bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014be:	4a58      	ldr	r2, [pc, #352]	@ (8001620 <HAL_GPIO_Init+0x304>)
 80014c0:	69fb      	ldr	r3, [r7, #28]
 80014c2:	089b      	lsrs	r3, r3, #2
 80014c4:	3302      	adds	r3, #2
 80014c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	220f      	movs	r2, #15
 80014d6:	fa02 f303 	lsl.w	r3, r2, r3
 80014da:	43db      	mvns	r3, r3
 80014dc:	69ba      	ldr	r2, [r7, #24]
 80014de:	4013      	ands	r3, r2
 80014e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	4a4f      	ldr	r2, [pc, #316]	@ (8001624 <HAL_GPIO_Init+0x308>)
 80014e6:	4293      	cmp	r3, r2
 80014e8:	d025      	beq.n	8001536 <HAL_GPIO_Init+0x21a>
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	4a4e      	ldr	r2, [pc, #312]	@ (8001628 <HAL_GPIO_Init+0x30c>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d01f      	beq.n	8001532 <HAL_GPIO_Init+0x216>
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	4a4d      	ldr	r2, [pc, #308]	@ (800162c <HAL_GPIO_Init+0x310>)
 80014f6:	4293      	cmp	r3, r2
 80014f8:	d019      	beq.n	800152e <HAL_GPIO_Init+0x212>
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	4a4c      	ldr	r2, [pc, #304]	@ (8001630 <HAL_GPIO_Init+0x314>)
 80014fe:	4293      	cmp	r3, r2
 8001500:	d013      	beq.n	800152a <HAL_GPIO_Init+0x20e>
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	4a4b      	ldr	r2, [pc, #300]	@ (8001634 <HAL_GPIO_Init+0x318>)
 8001506:	4293      	cmp	r3, r2
 8001508:	d00d      	beq.n	8001526 <HAL_GPIO_Init+0x20a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	4a4a      	ldr	r2, [pc, #296]	@ (8001638 <HAL_GPIO_Init+0x31c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d007      	beq.n	8001522 <HAL_GPIO_Init+0x206>
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	4a49      	ldr	r2, [pc, #292]	@ (800163c <HAL_GPIO_Init+0x320>)
 8001516:	4293      	cmp	r3, r2
 8001518:	d101      	bne.n	800151e <HAL_GPIO_Init+0x202>
 800151a:	2306      	movs	r3, #6
 800151c:	e00c      	b.n	8001538 <HAL_GPIO_Init+0x21c>
 800151e:	2307      	movs	r3, #7
 8001520:	e00a      	b.n	8001538 <HAL_GPIO_Init+0x21c>
 8001522:	2305      	movs	r3, #5
 8001524:	e008      	b.n	8001538 <HAL_GPIO_Init+0x21c>
 8001526:	2304      	movs	r3, #4
 8001528:	e006      	b.n	8001538 <HAL_GPIO_Init+0x21c>
 800152a:	2303      	movs	r3, #3
 800152c:	e004      	b.n	8001538 <HAL_GPIO_Init+0x21c>
 800152e:	2302      	movs	r3, #2
 8001530:	e002      	b.n	8001538 <HAL_GPIO_Init+0x21c>
 8001532:	2301      	movs	r3, #1
 8001534:	e000      	b.n	8001538 <HAL_GPIO_Init+0x21c>
 8001536:	2300      	movs	r3, #0
 8001538:	69fa      	ldr	r2, [r7, #28]
 800153a:	f002 0203 	and.w	r2, r2, #3
 800153e:	0092      	lsls	r2, r2, #2
 8001540:	4093      	lsls	r3, r2
 8001542:	69ba      	ldr	r2, [r7, #24]
 8001544:	4313      	orrs	r3, r2
 8001546:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001548:	4935      	ldr	r1, [pc, #212]	@ (8001620 <HAL_GPIO_Init+0x304>)
 800154a:	69fb      	ldr	r3, [r7, #28]
 800154c:	089b      	lsrs	r3, r3, #2
 800154e:	3302      	adds	r3, #2
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001556:	4b3a      	ldr	r3, [pc, #232]	@ (8001640 <HAL_GPIO_Init+0x324>)
 8001558:	689b      	ldr	r3, [r3, #8]
 800155a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800155c:	693b      	ldr	r3, [r7, #16]
 800155e:	43db      	mvns	r3, r3
 8001560:	69ba      	ldr	r2, [r7, #24]
 8001562:	4013      	ands	r3, r2
 8001564:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001566:	683b      	ldr	r3, [r7, #0]
 8001568:	685b      	ldr	r3, [r3, #4]
 800156a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800156e:	2b00      	cmp	r3, #0
 8001570:	d003      	beq.n	800157a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001572:	69ba      	ldr	r2, [r7, #24]
 8001574:	693b      	ldr	r3, [r7, #16]
 8001576:	4313      	orrs	r3, r2
 8001578:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800157a:	4a31      	ldr	r2, [pc, #196]	@ (8001640 <HAL_GPIO_Init+0x324>)
 800157c:	69bb      	ldr	r3, [r7, #24]
 800157e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001580:	4b2f      	ldr	r3, [pc, #188]	@ (8001640 <HAL_GPIO_Init+0x324>)
 8001582:	68db      	ldr	r3, [r3, #12]
 8001584:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001586:	693b      	ldr	r3, [r7, #16]
 8001588:	43db      	mvns	r3, r3
 800158a:	69ba      	ldr	r2, [r7, #24]
 800158c:	4013      	ands	r3, r2
 800158e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001590:	683b      	ldr	r3, [r7, #0]
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001598:	2b00      	cmp	r3, #0
 800159a:	d003      	beq.n	80015a4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800159c:	69ba      	ldr	r2, [r7, #24]
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	4313      	orrs	r3, r2
 80015a2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015a4:	4a26      	ldr	r2, [pc, #152]	@ (8001640 <HAL_GPIO_Init+0x324>)
 80015a6:	69bb      	ldr	r3, [r7, #24]
 80015a8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015aa:	4b25      	ldr	r3, [pc, #148]	@ (8001640 <HAL_GPIO_Init+0x324>)
 80015ac:	685b      	ldr	r3, [r3, #4]
 80015ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015b0:	693b      	ldr	r3, [r7, #16]
 80015b2:	43db      	mvns	r3, r3
 80015b4:	69ba      	ldr	r2, [r7, #24]
 80015b6:	4013      	ands	r3, r2
 80015b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d003      	beq.n	80015ce <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	4313      	orrs	r3, r2
 80015cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80015ce:	4a1c      	ldr	r2, [pc, #112]	@ (8001640 <HAL_GPIO_Init+0x324>)
 80015d0:	69bb      	ldr	r3, [r7, #24]
 80015d2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80015d4:	4b1a      	ldr	r3, [pc, #104]	@ (8001640 <HAL_GPIO_Init+0x324>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	43db      	mvns	r3, r3
 80015de:	69ba      	ldr	r2, [r7, #24]
 80015e0:	4013      	ands	r3, r2
 80015e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	685b      	ldr	r3, [r3, #4]
 80015e8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d003      	beq.n	80015f8 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 80015f0:	69ba      	ldr	r2, [r7, #24]
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4313      	orrs	r3, r2
 80015f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80015f8:	4a11      	ldr	r2, [pc, #68]	@ (8001640 <HAL_GPIO_Init+0x324>)
 80015fa:	69bb      	ldr	r3, [r7, #24]
 80015fc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80015fe:	69fb      	ldr	r3, [r7, #28]
 8001600:	3301      	adds	r3, #1
 8001602:	61fb      	str	r3, [r7, #28]
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	2b0f      	cmp	r3, #15
 8001608:	f67f ae96 	bls.w	8001338 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800160c:	bf00      	nop
 800160e:	bf00      	nop
 8001610:	3724      	adds	r7, #36	@ 0x24
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	40023800 	.word	0x40023800
 8001620:	40013800 	.word	0x40013800
 8001624:	40020000 	.word	0x40020000
 8001628:	40020400 	.word	0x40020400
 800162c:	40020800 	.word	0x40020800
 8001630:	40020c00 	.word	0x40020c00
 8001634:	40021000 	.word	0x40021000
 8001638:	40021400 	.word	0x40021400
 800163c:	40021800 	.word	0x40021800
 8001640:	40013c00 	.word	0x40013c00

08001644 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
 800164c:	460b      	mov	r3, r1
 800164e:	807b      	strh	r3, [r7, #2]
 8001650:	4613      	mov	r3, r2
 8001652:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001654:	787b      	ldrb	r3, [r7, #1]
 8001656:	2b00      	cmp	r3, #0
 8001658:	d003      	beq.n	8001662 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800165a:	887a      	ldrh	r2, [r7, #2]
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001660:	e003      	b.n	800166a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001662:	887b      	ldrh	r3, [r7, #2]
 8001664:	041a      	lsls	r2, r3, #16
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	619a      	str	r2, [r3, #24]
}
 800166a:	bf00      	nop
 800166c:	370c      	adds	r7, #12
 800166e:	46bd      	mov	sp, r7
 8001670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001674:	4770      	bx	lr
	...

08001678 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b082      	sub	sp, #8
 800167c:	af00      	add	r7, sp, #0
 800167e:	4603      	mov	r3, r0
 8001680:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001682:	4b08      	ldr	r3, [pc, #32]	@ (80016a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001684:	695a      	ldr	r2, [r3, #20]
 8001686:	88fb      	ldrh	r3, [r7, #6]
 8001688:	4013      	ands	r3, r2
 800168a:	2b00      	cmp	r3, #0
 800168c:	d006      	beq.n	800169c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800168e:	4a05      	ldr	r2, [pc, #20]	@ (80016a4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001690:	88fb      	ldrh	r3, [r7, #6]
 8001692:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001694:	88fb      	ldrh	r3, [r7, #6]
 8001696:	4618      	mov	r0, r3
 8001698:	f000 f806 	bl	80016a8 <HAL_GPIO_EXTI_Callback>
  }
}
 800169c:	bf00      	nop
 800169e:	3708      	adds	r7, #8
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	40013c00 	.word	0x40013c00

080016a8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b083      	sub	sp, #12
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	4603      	mov	r3, r0
 80016b0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80016b2:	bf00      	nop
 80016b4:	370c      	adds	r7, #12
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
	...

080016c0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b084      	sub	sp, #16
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d101      	bne.n	80016d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80016d0:	2301      	movs	r3, #1
 80016d2:	e0cc      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80016d4:	4b68      	ldr	r3, [pc, #416]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f003 030f 	and.w	r3, r3, #15
 80016dc:	683a      	ldr	r2, [r7, #0]
 80016de:	429a      	cmp	r2, r3
 80016e0:	d90c      	bls.n	80016fc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016e2:	4b65      	ldr	r3, [pc, #404]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016e4:	683a      	ldr	r2, [r7, #0]
 80016e6:	b2d2      	uxtb	r2, r2
 80016e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ea:	4b63      	ldr	r3, [pc, #396]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f003 030f 	and.w	r3, r3, #15
 80016f2:	683a      	ldr	r2, [r7, #0]
 80016f4:	429a      	cmp	r2, r3
 80016f6:	d001      	beq.n	80016fc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80016f8:	2301      	movs	r3, #1
 80016fa:	e0b8      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f003 0302 	and.w	r3, r3, #2
 8001704:	2b00      	cmp	r3, #0
 8001706:	d020      	beq.n	800174a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0304 	and.w	r3, r3, #4
 8001710:	2b00      	cmp	r3, #0
 8001712:	d005      	beq.n	8001720 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001714:	4b59      	ldr	r3, [pc, #356]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001716:	689b      	ldr	r3, [r3, #8]
 8001718:	4a58      	ldr	r2, [pc, #352]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800171a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800171e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0308 	and.w	r3, r3, #8
 8001728:	2b00      	cmp	r3, #0
 800172a:	d005      	beq.n	8001738 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800172c:	4b53      	ldr	r3, [pc, #332]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	4a52      	ldr	r2, [pc, #328]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001732:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001736:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001738:	4b50      	ldr	r3, [pc, #320]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800173a:	689b      	ldr	r3, [r3, #8]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	689b      	ldr	r3, [r3, #8]
 8001744:	494d      	ldr	r1, [pc, #308]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001746:	4313      	orrs	r3, r2
 8001748:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	2b00      	cmp	r3, #0
 8001754:	d044      	beq.n	80017e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d107      	bne.n	800176e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800175e:	4b47      	ldr	r3, [pc, #284]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d119      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800176a:	2301      	movs	r3, #1
 800176c:	e07f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	685b      	ldr	r3, [r3, #4]
 8001772:	2b02      	cmp	r3, #2
 8001774:	d003      	beq.n	800177e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800177a:	2b03      	cmp	r3, #3
 800177c:	d107      	bne.n	800178e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800177e:	4b3f      	ldr	r3, [pc, #252]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001786:	2b00      	cmp	r3, #0
 8001788:	d109      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e06f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800178e:	4b3b      	ldr	r3, [pc, #236]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0302 	and.w	r3, r3, #2
 8001796:	2b00      	cmp	r3, #0
 8001798:	d101      	bne.n	800179e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800179a:	2301      	movs	r3, #1
 800179c:	e067      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800179e:	4b37      	ldr	r3, [pc, #220]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017a0:	689b      	ldr	r3, [r3, #8]
 80017a2:	f023 0203 	bic.w	r2, r3, #3
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	4934      	ldr	r1, [pc, #208]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017ac:	4313      	orrs	r3, r2
 80017ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80017b0:	f7ff fc04 	bl	8000fbc <HAL_GetTick>
 80017b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017b6:	e00a      	b.n	80017ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80017b8:	f7ff fc00 	bl	8000fbc <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	68fb      	ldr	r3, [r7, #12]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d901      	bls.n	80017ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80017ca:	2303      	movs	r3, #3
 80017cc:	e04f      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80017ce:	4b2b      	ldr	r3, [pc, #172]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 80017d0:	689b      	ldr	r3, [r3, #8]
 80017d2:	f003 020c 	and.w	r2, r3, #12
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	685b      	ldr	r3, [r3, #4]
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	429a      	cmp	r2, r3
 80017de:	d1eb      	bne.n	80017b8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80017e0:	4b25      	ldr	r3, [pc, #148]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	f003 030f 	and.w	r3, r3, #15
 80017e8:	683a      	ldr	r2, [r7, #0]
 80017ea:	429a      	cmp	r2, r3
 80017ec:	d20c      	bcs.n	8001808 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ee:	4b22      	ldr	r3, [pc, #136]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f0:	683a      	ldr	r2, [r7, #0]
 80017f2:	b2d2      	uxtb	r2, r2
 80017f4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017f6:	4b20      	ldr	r3, [pc, #128]	@ (8001878 <HAL_RCC_ClockConfig+0x1b8>)
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	f003 030f 	and.w	r3, r3, #15
 80017fe:	683a      	ldr	r2, [r7, #0]
 8001800:	429a      	cmp	r2, r3
 8001802:	d001      	beq.n	8001808 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001804:	2301      	movs	r3, #1
 8001806:	e032      	b.n	800186e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	f003 0304 	and.w	r3, r3, #4
 8001810:	2b00      	cmp	r3, #0
 8001812:	d008      	beq.n	8001826 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001814:	4b19      	ldr	r3, [pc, #100]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	68db      	ldr	r3, [r3, #12]
 8001820:	4916      	ldr	r1, [pc, #88]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001822:	4313      	orrs	r3, r2
 8001824:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f003 0308 	and.w	r3, r3, #8
 800182e:	2b00      	cmp	r3, #0
 8001830:	d009      	beq.n	8001846 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001832:	4b12      	ldr	r3, [pc, #72]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001834:	689b      	ldr	r3, [r3, #8]
 8001836:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	691b      	ldr	r3, [r3, #16]
 800183e:	00db      	lsls	r3, r3, #3
 8001840:	490e      	ldr	r1, [pc, #56]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 8001842:	4313      	orrs	r3, r2
 8001844:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001846:	f000 f855 	bl	80018f4 <HAL_RCC_GetSysClockFreq>
 800184a:	4602      	mov	r2, r0
 800184c:	4b0b      	ldr	r3, [pc, #44]	@ (800187c <HAL_RCC_ClockConfig+0x1bc>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	490a      	ldr	r1, [pc, #40]	@ (8001880 <HAL_RCC_ClockConfig+0x1c0>)
 8001858:	5ccb      	ldrb	r3, [r1, r3]
 800185a:	fa22 f303 	lsr.w	r3, r2, r3
 800185e:	4a09      	ldr	r2, [pc, #36]	@ (8001884 <HAL_RCC_ClockConfig+0x1c4>)
 8001860:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001862:	4b09      	ldr	r3, [pc, #36]	@ (8001888 <HAL_RCC_ClockConfig+0x1c8>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4618      	mov	r0, r3
 8001868:	f7ff fb64 	bl	8000f34 <HAL_InitTick>

  return HAL_OK;
 800186c:	2300      	movs	r3, #0
}
 800186e:	4618      	mov	r0, r3
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bd80      	pop	{r7, pc}
 8001876:	bf00      	nop
 8001878:	40023c00 	.word	0x40023c00
 800187c:	40023800 	.word	0x40023800
 8001880:	08004dcc 	.word	0x08004dcc
 8001884:	2000007c 	.word	0x2000007c
 8001888:	20000080 	.word	0x20000080

0800188c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001890:	4b03      	ldr	r3, [pc, #12]	@ (80018a0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001892:	681b      	ldr	r3, [r3, #0]
}
 8001894:	4618      	mov	r0, r3
 8001896:	46bd      	mov	sp, r7
 8001898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop
 80018a0:	2000007c 	.word	0x2000007c

080018a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80018a8:	f7ff fff0 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018ac:	4602      	mov	r2, r0
 80018ae:	4b05      	ldr	r3, [pc, #20]	@ (80018c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80018b0:	689b      	ldr	r3, [r3, #8]
 80018b2:	0a9b      	lsrs	r3, r3, #10
 80018b4:	f003 0307 	and.w	r3, r3, #7
 80018b8:	4903      	ldr	r1, [pc, #12]	@ (80018c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80018ba:	5ccb      	ldrb	r3, [r1, r3]
 80018bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018c0:	4618      	mov	r0, r3
 80018c2:	bd80      	pop	{r7, pc}
 80018c4:	40023800 	.word	0x40023800
 80018c8:	08004ddc 	.word	0x08004ddc

080018cc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80018d0:	f7ff ffdc 	bl	800188c <HAL_RCC_GetHCLKFreq>
 80018d4:	4602      	mov	r2, r0
 80018d6:	4b05      	ldr	r3, [pc, #20]	@ (80018ec <HAL_RCC_GetPCLK2Freq+0x20>)
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	0b5b      	lsrs	r3, r3, #13
 80018dc:	f003 0307 	and.w	r3, r3, #7
 80018e0:	4903      	ldr	r1, [pc, #12]	@ (80018f0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80018e2:	5ccb      	ldrb	r3, [r1, r3]
 80018e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	40023800 	.word	0x40023800
 80018f0:	08004ddc 	.word	0x08004ddc

080018f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80018f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80018f8:	b0ae      	sub	sp, #184	@ 0xb8
 80018fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80018fc:	2300      	movs	r3, #0
 80018fe:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001902:	2300      	movs	r3, #0
 8001904:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 800190e:	2300      	movs	r3, #0
 8001910:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800191a:	4bcb      	ldr	r3, [pc, #812]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x354>)
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f003 030c 	and.w	r3, r3, #12
 8001922:	2b0c      	cmp	r3, #12
 8001924:	f200 8206 	bhi.w	8001d34 <HAL_RCC_GetSysClockFreq+0x440>
 8001928:	a201      	add	r2, pc, #4	@ (adr r2, 8001930 <HAL_RCC_GetSysClockFreq+0x3c>)
 800192a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800192e:	bf00      	nop
 8001930:	08001965 	.word	0x08001965
 8001934:	08001d35 	.word	0x08001d35
 8001938:	08001d35 	.word	0x08001d35
 800193c:	08001d35 	.word	0x08001d35
 8001940:	0800196d 	.word	0x0800196d
 8001944:	08001d35 	.word	0x08001d35
 8001948:	08001d35 	.word	0x08001d35
 800194c:	08001d35 	.word	0x08001d35
 8001950:	08001975 	.word	0x08001975
 8001954:	08001d35 	.word	0x08001d35
 8001958:	08001d35 	.word	0x08001d35
 800195c:	08001d35 	.word	0x08001d35
 8001960:	08001b65 	.word	0x08001b65
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001964:	4bb9      	ldr	r3, [pc, #740]	@ (8001c4c <HAL_RCC_GetSysClockFreq+0x358>)
 8001966:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
       break;
 800196a:	e1e7      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800196c:	4bb8      	ldr	r3, [pc, #736]	@ (8001c50 <HAL_RCC_GetSysClockFreq+0x35c>)
 800196e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001972:	e1e3      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001974:	4bb4      	ldr	r3, [pc, #720]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800197c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001980:	4bb1      	ldr	r3, [pc, #708]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d071      	beq.n	8001a70 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800198c:	4bae      	ldr	r3, [pc, #696]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x354>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	099b      	lsrs	r3, r3, #6
 8001992:	2200      	movs	r2, #0
 8001994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001998:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800199c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80019a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80019a4:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80019a8:	2300      	movs	r3, #0
 80019aa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80019ae:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80019b2:	4622      	mov	r2, r4
 80019b4:	462b      	mov	r3, r5
 80019b6:	f04f 0000 	mov.w	r0, #0
 80019ba:	f04f 0100 	mov.w	r1, #0
 80019be:	0159      	lsls	r1, r3, #5
 80019c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80019c4:	0150      	lsls	r0, r2, #5
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4621      	mov	r1, r4
 80019cc:	1a51      	subs	r1, r2, r1
 80019ce:	6439      	str	r1, [r7, #64]	@ 0x40
 80019d0:	4629      	mov	r1, r5
 80019d2:	eb63 0301 	sbc.w	r3, r3, r1
 80019d6:	647b      	str	r3, [r7, #68]	@ 0x44
 80019d8:	f04f 0200 	mov.w	r2, #0
 80019dc:	f04f 0300 	mov.w	r3, #0
 80019e0:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80019e4:	4649      	mov	r1, r9
 80019e6:	018b      	lsls	r3, r1, #6
 80019e8:	4641      	mov	r1, r8
 80019ea:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ee:	4641      	mov	r1, r8
 80019f0:	018a      	lsls	r2, r1, #6
 80019f2:	4641      	mov	r1, r8
 80019f4:	1a51      	subs	r1, r2, r1
 80019f6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80019f8:	4649      	mov	r1, r9
 80019fa:	eb63 0301 	sbc.w	r3, r3, r1
 80019fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a00:	f04f 0200 	mov.w	r2, #0
 8001a04:	f04f 0300 	mov.w	r3, #0
 8001a08:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8001a0c:	4649      	mov	r1, r9
 8001a0e:	00cb      	lsls	r3, r1, #3
 8001a10:	4641      	mov	r1, r8
 8001a12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8001a16:	4641      	mov	r1, r8
 8001a18:	00ca      	lsls	r2, r1, #3
 8001a1a:	4610      	mov	r0, r2
 8001a1c:	4619      	mov	r1, r3
 8001a1e:	4603      	mov	r3, r0
 8001a20:	4622      	mov	r2, r4
 8001a22:	189b      	adds	r3, r3, r2
 8001a24:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a26:	462b      	mov	r3, r5
 8001a28:	460a      	mov	r2, r1
 8001a2a:	eb42 0303 	adc.w	r3, r2, r3
 8001a2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a30:	f04f 0200 	mov.w	r2, #0
 8001a34:	f04f 0300 	mov.w	r3, #0
 8001a38:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a3c:	4629      	mov	r1, r5
 8001a3e:	024b      	lsls	r3, r1, #9
 8001a40:	4621      	mov	r1, r4
 8001a42:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001a46:	4621      	mov	r1, r4
 8001a48:	024a      	lsls	r2, r1, #9
 8001a4a:	4610      	mov	r0, r2
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001a52:	2200      	movs	r2, #0
 8001a54:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001a58:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001a5c:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8001a60:	f7fe fc2e 	bl	80002c0 <__aeabi_uldivmod>
 8001a64:	4602      	mov	r2, r0
 8001a66:	460b      	mov	r3, r1
 8001a68:	4613      	mov	r3, r2
 8001a6a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001a6e:	e067      	b.n	8001b40 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a70:	4b75      	ldr	r3, [pc, #468]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	099b      	lsrs	r3, r3, #6
 8001a76:	2200      	movs	r2, #0
 8001a78:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001a7c:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8001a80:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8001a84:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8001a8e:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8001a92:	4622      	mov	r2, r4
 8001a94:	462b      	mov	r3, r5
 8001a96:	f04f 0000 	mov.w	r0, #0
 8001a9a:	f04f 0100 	mov.w	r1, #0
 8001a9e:	0159      	lsls	r1, r3, #5
 8001aa0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001aa4:	0150      	lsls	r0, r2, #5
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	460b      	mov	r3, r1
 8001aaa:	4621      	mov	r1, r4
 8001aac:	1a51      	subs	r1, r2, r1
 8001aae:	62b9      	str	r1, [r7, #40]	@ 0x28
 8001ab0:	4629      	mov	r1, r5
 8001ab2:	eb63 0301 	sbc.w	r3, r3, r1
 8001ab6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ab8:	f04f 0200 	mov.w	r2, #0
 8001abc:	f04f 0300 	mov.w	r3, #0
 8001ac0:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8001ac4:	4649      	mov	r1, r9
 8001ac6:	018b      	lsls	r3, r1, #6
 8001ac8:	4641      	mov	r1, r8
 8001aca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ace:	4641      	mov	r1, r8
 8001ad0:	018a      	lsls	r2, r1, #6
 8001ad2:	4641      	mov	r1, r8
 8001ad4:	ebb2 0a01 	subs.w	sl, r2, r1
 8001ad8:	4649      	mov	r1, r9
 8001ada:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ade:	f04f 0200 	mov.w	r2, #0
 8001ae2:	f04f 0300 	mov.w	r3, #0
 8001ae6:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001aea:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001aee:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001af2:	4692      	mov	sl, r2
 8001af4:	469b      	mov	fp, r3
 8001af6:	4623      	mov	r3, r4
 8001af8:	eb1a 0303 	adds.w	r3, sl, r3
 8001afc:	623b      	str	r3, [r7, #32]
 8001afe:	462b      	mov	r3, r5
 8001b00:	eb4b 0303 	adc.w	r3, fp, r3
 8001b04:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b06:	f04f 0200 	mov.w	r2, #0
 8001b0a:	f04f 0300 	mov.w	r3, #0
 8001b0e:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8001b12:	4629      	mov	r1, r5
 8001b14:	028b      	lsls	r3, r1, #10
 8001b16:	4621      	mov	r1, r4
 8001b18:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001b1c:	4621      	mov	r1, r4
 8001b1e:	028a      	lsls	r2, r1, #10
 8001b20:	4610      	mov	r0, r2
 8001b22:	4619      	mov	r1, r3
 8001b24:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001b28:	2200      	movs	r2, #0
 8001b2a:	673b      	str	r3, [r7, #112]	@ 0x70
 8001b2c:	677a      	str	r2, [r7, #116]	@ 0x74
 8001b2e:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8001b32:	f7fe fbc5 	bl	80002c0 <__aeabi_uldivmod>
 8001b36:	4602      	mov	r2, r0
 8001b38:	460b      	mov	r3, r1
 8001b3a:	4613      	mov	r3, r2
 8001b3c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001b40:	4b41      	ldr	r3, [pc, #260]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	0c1b      	lsrs	r3, r3, #16
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	005b      	lsls	r3, r3, #1
 8001b4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco/pllp;
 8001b52:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001b56:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001b5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b5e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001b62:	e0eb      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001b64:	4b38      	ldr	r3, [pc, #224]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b66:	685b      	ldr	r3, [r3, #4]
 8001b68:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001b6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001b70:	4b35      	ldr	r3, [pc, #212]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b72:	685b      	ldr	r3, [r3, #4]
 8001b74:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d06b      	beq.n	8001c54 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b7c:	4b32      	ldr	r3, [pc, #200]	@ (8001c48 <HAL_RCC_GetSysClockFreq+0x354>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	099b      	lsrs	r3, r3, #6
 8001b82:	2200      	movs	r2, #0
 8001b84:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001b86:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001b88:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8001b8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001b8e:	663b      	str	r3, [r7, #96]	@ 0x60
 8001b90:	2300      	movs	r3, #0
 8001b92:	667b      	str	r3, [r7, #100]	@ 0x64
 8001b94:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8001b98:	4622      	mov	r2, r4
 8001b9a:	462b      	mov	r3, r5
 8001b9c:	f04f 0000 	mov.w	r0, #0
 8001ba0:	f04f 0100 	mov.w	r1, #0
 8001ba4:	0159      	lsls	r1, r3, #5
 8001ba6:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001baa:	0150      	lsls	r0, r2, #5
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4621      	mov	r1, r4
 8001bb2:	1a51      	subs	r1, r2, r1
 8001bb4:	61b9      	str	r1, [r7, #24]
 8001bb6:	4629      	mov	r1, r5
 8001bb8:	eb63 0301 	sbc.w	r3, r3, r1
 8001bbc:	61fb      	str	r3, [r7, #28]
 8001bbe:	f04f 0200 	mov.w	r2, #0
 8001bc2:	f04f 0300 	mov.w	r3, #0
 8001bc6:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8001bca:	4659      	mov	r1, fp
 8001bcc:	018b      	lsls	r3, r1, #6
 8001bce:	4651      	mov	r1, sl
 8001bd0:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001bd4:	4651      	mov	r1, sl
 8001bd6:	018a      	lsls	r2, r1, #6
 8001bd8:	4651      	mov	r1, sl
 8001bda:	ebb2 0801 	subs.w	r8, r2, r1
 8001bde:	4659      	mov	r1, fp
 8001be0:	eb63 0901 	sbc.w	r9, r3, r1
 8001be4:	f04f 0200 	mov.w	r2, #0
 8001be8:	f04f 0300 	mov.w	r3, #0
 8001bec:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001bf0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001bf4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001bf8:	4690      	mov	r8, r2
 8001bfa:	4699      	mov	r9, r3
 8001bfc:	4623      	mov	r3, r4
 8001bfe:	eb18 0303 	adds.w	r3, r8, r3
 8001c02:	613b      	str	r3, [r7, #16]
 8001c04:	462b      	mov	r3, r5
 8001c06:	eb49 0303 	adc.w	r3, r9, r3
 8001c0a:	617b      	str	r3, [r7, #20]
 8001c0c:	f04f 0200 	mov.w	r2, #0
 8001c10:	f04f 0300 	mov.w	r3, #0
 8001c14:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8001c18:	4629      	mov	r1, r5
 8001c1a:	024b      	lsls	r3, r1, #9
 8001c1c:	4621      	mov	r1, r4
 8001c1e:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001c22:	4621      	mov	r1, r4
 8001c24:	024a      	lsls	r2, r1, #9
 8001c26:	4610      	mov	r0, r2
 8001c28:	4619      	mov	r1, r3
 8001c2a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001c2e:	2200      	movs	r2, #0
 8001c30:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001c32:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8001c34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8001c38:	f7fe fb42 	bl	80002c0 <__aeabi_uldivmod>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	4613      	mov	r3, r2
 8001c42:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8001c46:	e065      	b.n	8001d14 <HAL_RCC_GetSysClockFreq+0x420>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	00f42400 	.word	0x00f42400
 8001c50:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001c54:	4b3d      	ldr	r3, [pc, #244]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0x458>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	099b      	lsrs	r3, r3, #6
 8001c5a:	2200      	movs	r2, #0
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	4611      	mov	r1, r2
 8001c60:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001c64:	653b      	str	r3, [r7, #80]	@ 0x50
 8001c66:	2300      	movs	r3, #0
 8001c68:	657b      	str	r3, [r7, #84]	@ 0x54
 8001c6a:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8001c6e:	4642      	mov	r2, r8
 8001c70:	464b      	mov	r3, r9
 8001c72:	f04f 0000 	mov.w	r0, #0
 8001c76:	f04f 0100 	mov.w	r1, #0
 8001c7a:	0159      	lsls	r1, r3, #5
 8001c7c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001c80:	0150      	lsls	r0, r2, #5
 8001c82:	4602      	mov	r2, r0
 8001c84:	460b      	mov	r3, r1
 8001c86:	4641      	mov	r1, r8
 8001c88:	1a51      	subs	r1, r2, r1
 8001c8a:	60b9      	str	r1, [r7, #8]
 8001c8c:	4649      	mov	r1, r9
 8001c8e:	eb63 0301 	sbc.w	r3, r3, r1
 8001c92:	60fb      	str	r3, [r7, #12]
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8001ca0:	4659      	mov	r1, fp
 8001ca2:	018b      	lsls	r3, r1, #6
 8001ca4:	4651      	mov	r1, sl
 8001ca6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001caa:	4651      	mov	r1, sl
 8001cac:	018a      	lsls	r2, r1, #6
 8001cae:	4651      	mov	r1, sl
 8001cb0:	1a54      	subs	r4, r2, r1
 8001cb2:	4659      	mov	r1, fp
 8001cb4:	eb63 0501 	sbc.w	r5, r3, r1
 8001cb8:	f04f 0200 	mov.w	r2, #0
 8001cbc:	f04f 0300 	mov.w	r3, #0
 8001cc0:	00eb      	lsls	r3, r5, #3
 8001cc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001cc6:	00e2      	lsls	r2, r4, #3
 8001cc8:	4614      	mov	r4, r2
 8001cca:	461d      	mov	r5, r3
 8001ccc:	4643      	mov	r3, r8
 8001cce:	18e3      	adds	r3, r4, r3
 8001cd0:	603b      	str	r3, [r7, #0]
 8001cd2:	464b      	mov	r3, r9
 8001cd4:	eb45 0303 	adc.w	r3, r5, r3
 8001cd8:	607b      	str	r3, [r7, #4]
 8001cda:	f04f 0200 	mov.w	r2, #0
 8001cde:	f04f 0300 	mov.w	r3, #0
 8001ce2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001ce6:	4629      	mov	r1, r5
 8001ce8:	028b      	lsls	r3, r1, #10
 8001cea:	4621      	mov	r1, r4
 8001cec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001cf0:	4621      	mov	r1, r4
 8001cf2:	028a      	lsls	r2, r1, #10
 8001cf4:	4610      	mov	r0, r2
 8001cf6:	4619      	mov	r1, r3
 8001cf8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001d00:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8001d02:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8001d06:	f7fe fadb 	bl	80002c0 <__aeabi_uldivmod>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4613      	mov	r3, r2
 8001d10:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8001d14:	4b0d      	ldr	r3, [pc, #52]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0x458>)
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	0f1b      	lsrs	r3, r3, #28
 8001d1a:	f003 0307 	and.w	r3, r3, #7
 8001d1e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco/pllr;
 8001d22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8001d26:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8001d2a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d2e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d32:	e003      	b.n	8001d3c <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001d34:	4b06      	ldr	r3, [pc, #24]	@ (8001d50 <HAL_RCC_GetSysClockFreq+0x45c>)
 8001d36:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8001d3a:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d3c:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	37b8      	adds	r7, #184	@ 0xb8
 8001d44:	46bd      	mov	sp, r7
 8001d46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001d4a:	bf00      	nop
 8001d4c:	40023800 	.word	0x40023800
 8001d50:	00f42400 	.word	0x00f42400

08001d54 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	b086      	sub	sp, #24
 8001d58:	af00      	add	r7, sp, #0
 8001d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d101      	bne.n	8001d66 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d62:	2301      	movs	r3, #1
 8001d64:	e28d      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 0301 	and.w	r3, r3, #1
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	f000 8083 	beq.w	8001e7a <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d74:	4b94      	ldr	r3, [pc, #592]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 030c 	and.w	r3, r3, #12
 8001d7c:	2b04      	cmp	r3, #4
 8001d7e:	d019      	beq.n	8001db4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d80:	4b91      	ldr	r3, [pc, #580]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001d82:	689b      	ldr	r3, [r3, #8]
 8001d84:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8001d88:	2b08      	cmp	r3, #8
 8001d8a:	d106      	bne.n	8001d9a <HAL_RCC_OscConfig+0x46>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001d8c:	4b8e      	ldr	r3, [pc, #568]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001d8e:	685b      	ldr	r3, [r3, #4]
 8001d90:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001d94:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001d98:	d00c      	beq.n	8001db4 <HAL_RCC_OscConfig+0x60>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d9a:	4b8b      	ldr	r3, [pc, #556]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8001da2:	2b0c      	cmp	r3, #12
 8001da4:	d112      	bne.n	8001dcc <HAL_RCC_OscConfig+0x78>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001da6:	4b88      	ldr	r3, [pc, #544]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001dae:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8001db2:	d10b      	bne.n	8001dcc <HAL_RCC_OscConfig+0x78>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db4:	4b84      	ldr	r3, [pc, #528]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d05b      	beq.n	8001e78 <HAL_RCC_OscConfig+0x124>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d157      	bne.n	8001e78 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e25a      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001dd4:	d106      	bne.n	8001de4 <HAL_RCC_OscConfig+0x90>
 8001dd6:	4b7c      	ldr	r3, [pc, #496]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a7b      	ldr	r2, [pc, #492]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e01d      	b.n	8001e20 <HAL_RCC_OscConfig+0xcc>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCC_OscConfig+0xb4>
 8001dee:	4b76      	ldr	r3, [pc, #472]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a75      	ldr	r2, [pc, #468]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001df4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4b73      	ldr	r3, [pc, #460]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a72      	ldr	r2, [pc, #456]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e00b      	b.n	8001e20 <HAL_RCC_OscConfig+0xcc>
 8001e08:	4b6f      	ldr	r3, [pc, #444]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a6e      	ldr	r2, [pc, #440]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001e0e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4b6c      	ldr	r3, [pc, #432]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a6b      	ldr	r2, [pc, #428]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001e1a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d013      	beq.n	8001e50 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e28:	f7ff f8c8 	bl	8000fbc <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0xee>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e30:	f7ff f8c4 	bl	8000fbc <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	@ 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e21f      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	4b61      	ldr	r3, [pc, #388]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0xdc>
 8001e4e:	e014      	b.n	8001e7a <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e50:	f7ff f8b4 	bl	8000fbc <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0x116>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e58:	f7ff f8b0 	bl	8000fbc <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	@ 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e20b      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6a:	4b57      	ldr	r3, [pc, #348]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0x104>
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x126>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d06f      	beq.n	8001f66 <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e86:	4b50      	ldr	r3, [pc, #320]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d017      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e92:	4b4d      	ldr	r3, [pc, #308]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d105      	bne.n	8001eaa <HAL_RCC_OscConfig+0x156>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001e9e:	4b4a      	ldr	r3, [pc, #296]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d00b      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x16e>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eaa:	4b47      	ldr	r3, [pc, #284]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8001eb2:	2b0c      	cmp	r3, #12
 8001eb4:	d11c      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x19c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001eb6:	4b44      	ldr	r3, [pc, #272]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001eb8:	685b      	ldr	r3, [r3, #4]
 8001eba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d116      	bne.n	8001ef0 <HAL_RCC_OscConfig+0x19c>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ec2:	4b41      	ldr	r3, [pc, #260]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0302 	and.w	r3, r3, #2
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d005      	beq.n	8001eda <HAL_RCC_OscConfig+0x186>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	68db      	ldr	r3, [r3, #12]
 8001ed2:	2b01      	cmp	r3, #1
 8001ed4:	d001      	beq.n	8001eda <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e1d3      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eda:	4b3b      	ldr	r3, [pc, #236]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	691b      	ldr	r3, [r3, #16]
 8001ee6:	00db      	lsls	r3, r3, #3
 8001ee8:	4937      	ldr	r1, [pc, #220]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001eea:	4313      	orrs	r3, r2
 8001eec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eee:	e03a      	b.n	8001f66 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d020      	beq.n	8001f3a <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ef8:	4b34      	ldr	r3, [pc, #208]	@ (8001fcc <HAL_RCC_OscConfig+0x278>)
 8001efa:	2201      	movs	r2, #1
 8001efc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001efe:	f7ff f85d 	bl	8000fbc <HAL_GetTick>
 8001f02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f04:	e008      	b.n	8001f18 <HAL_RCC_OscConfig+0x1c4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f06:	f7ff f859 	bl	8000fbc <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	693b      	ldr	r3, [r7, #16]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	2b02      	cmp	r3, #2
 8001f12:	d901      	bls.n	8001f18 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8001f14:	2303      	movs	r3, #3
 8001f16:	e1b4      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f18:	4b2b      	ldr	r3, [pc, #172]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f003 0302 	and.w	r3, r3, #2
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d0f0      	beq.n	8001f06 <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f24:	4b28      	ldr	r3, [pc, #160]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	691b      	ldr	r3, [r3, #16]
 8001f30:	00db      	lsls	r3, r3, #3
 8001f32:	4925      	ldr	r1, [pc, #148]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001f34:	4313      	orrs	r3, r2
 8001f36:	600b      	str	r3, [r1, #0]
 8001f38:	e015      	b.n	8001f66 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f3a:	4b24      	ldr	r3, [pc, #144]	@ (8001fcc <HAL_RCC_OscConfig+0x278>)
 8001f3c:	2200      	movs	r2, #0
 8001f3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f40:	f7ff f83c 	bl	8000fbc <HAL_GetTick>
 8001f44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f46:	e008      	b.n	8001f5a <HAL_RCC_OscConfig+0x206>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f48:	f7ff f838 	bl	8000fbc <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	693b      	ldr	r3, [r7, #16]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	2b02      	cmp	r3, #2
 8001f54:	d901      	bls.n	8001f5a <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8001f56:	2303      	movs	r3, #3
 8001f58:	e193      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f5a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d1f0      	bne.n	8001f48 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f003 0308 	and.w	r3, r3, #8
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d036      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	695b      	ldr	r3, [r3, #20]
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d016      	beq.n	8001fa8 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f7a:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <HAL_RCC_OscConfig+0x27c>)
 8001f7c:	2201      	movs	r2, #1
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f80:	f7ff f81c 	bl	8000fbc <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f86:	e008      	b.n	8001f9a <HAL_RCC_OscConfig+0x246>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f88:	f7ff f818 	bl	8000fbc <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d901      	bls.n	8001f9a <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e173      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f9a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fc8 <HAL_RCC_OscConfig+0x274>)
 8001f9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001f9e:	f003 0302 	and.w	r3, r3, #2
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d0f0      	beq.n	8001f88 <HAL_RCC_OscConfig+0x234>
 8001fa6:	e01b      	b.n	8001fe0 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001fa8:	4b09      	ldr	r3, [pc, #36]	@ (8001fd0 <HAL_RCC_OscConfig+0x27c>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001fae:	f7ff f805 	bl	8000fbc <HAL_GetTick>
 8001fb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb4:	e00e      	b.n	8001fd4 <HAL_RCC_OscConfig+0x280>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001fb6:	f7ff f801 	bl	8000fbc <HAL_GetTick>
 8001fba:	4602      	mov	r2, r0
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	1ad3      	subs	r3, r2, r3
 8001fc0:	2b02      	cmp	r3, #2
 8001fc2:	d907      	bls.n	8001fd4 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	e15c      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	42470000 	.word	0x42470000
 8001fd0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fd4:	4b8a      	ldr	r3, [pc, #552]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 8001fd6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001fd8:	f003 0302 	and.w	r3, r3, #2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d1ea      	bne.n	8001fb6 <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	f000 8097 	beq.w	800211c <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fee:	2300      	movs	r3, #0
 8001ff0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001ff2:	4b83      	ldr	r3, [pc, #524]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 8001ff4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ff6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d10f      	bne.n	800201e <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ffe:	2300      	movs	r3, #0
 8002000:	60bb      	str	r3, [r7, #8]
 8002002:	4b7f      	ldr	r3, [pc, #508]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 8002004:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002006:	4a7e      	ldr	r2, [pc, #504]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 8002008:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800200c:	6413      	str	r3, [r2, #64]	@ 0x40
 800200e:	4b7c      	ldr	r3, [pc, #496]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 8002010:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002012:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002016:	60bb      	str	r3, [r7, #8]
 8002018:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800201a:	2301      	movs	r3, #1
 800201c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800201e:	4b79      	ldr	r3, [pc, #484]	@ (8002204 <HAL_RCC_OscConfig+0x4b0>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002026:	2b00      	cmp	r3, #0
 8002028:	d118      	bne.n	800205c <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800202a:	4b76      	ldr	r3, [pc, #472]	@ (8002204 <HAL_RCC_OscConfig+0x4b0>)
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a75      	ldr	r2, [pc, #468]	@ (8002204 <HAL_RCC_OscConfig+0x4b0>)
 8002030:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002034:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002036:	f7fe ffc1 	bl	8000fbc <HAL_GetTick>
 800203a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203c:	e008      	b.n	8002050 <HAL_RCC_OscConfig+0x2fc>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800203e:	f7fe ffbd 	bl	8000fbc <HAL_GetTick>
 8002042:	4602      	mov	r2, r0
 8002044:	693b      	ldr	r3, [r7, #16]
 8002046:	1ad3      	subs	r3, r2, r3
 8002048:	2b02      	cmp	r3, #2
 800204a:	d901      	bls.n	8002050 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 800204c:	2303      	movs	r3, #3
 800204e:	e118      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002050:	4b6c      	ldr	r3, [pc, #432]	@ (8002204 <HAL_RCC_OscConfig+0x4b0>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002058:	2b00      	cmp	r3, #0
 800205a:	d0f0      	beq.n	800203e <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	689b      	ldr	r3, [r3, #8]
 8002060:	2b01      	cmp	r3, #1
 8002062:	d106      	bne.n	8002072 <HAL_RCC_OscConfig+0x31e>
 8002064:	4b66      	ldr	r3, [pc, #408]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 8002066:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002068:	4a65      	ldr	r2, [pc, #404]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 800206a:	f043 0301 	orr.w	r3, r3, #1
 800206e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002070:	e01c      	b.n	80020ac <HAL_RCC_OscConfig+0x358>
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	2b05      	cmp	r3, #5
 8002078:	d10c      	bne.n	8002094 <HAL_RCC_OscConfig+0x340>
 800207a:	4b61      	ldr	r3, [pc, #388]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 800207c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800207e:	4a60      	ldr	r2, [pc, #384]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 8002080:	f043 0304 	orr.w	r3, r3, #4
 8002084:	6713      	str	r3, [r2, #112]	@ 0x70
 8002086:	4b5e      	ldr	r3, [pc, #376]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800208a:	4a5d      	ldr	r2, [pc, #372]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 800208c:	f043 0301 	orr.w	r3, r3, #1
 8002090:	6713      	str	r3, [r2, #112]	@ 0x70
 8002092:	e00b      	b.n	80020ac <HAL_RCC_OscConfig+0x358>
 8002094:	4b5a      	ldr	r3, [pc, #360]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 8002096:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002098:	4a59      	ldr	r2, [pc, #356]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 800209a:	f023 0301 	bic.w	r3, r3, #1
 800209e:	6713      	str	r3, [r2, #112]	@ 0x70
 80020a0:	4b57      	ldr	r3, [pc, #348]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 80020a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020a4:	4a56      	ldr	r2, [pc, #344]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 80020a6:	f023 0304 	bic.w	r3, r3, #4
 80020aa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d015      	beq.n	80020e0 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020b4:	f7fe ff82 	bl	8000fbc <HAL_GetTick>
 80020b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ba:	e00a      	b.n	80020d2 <HAL_RCC_OscConfig+0x37e>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020bc:	f7fe ff7e 	bl	8000fbc <HAL_GetTick>
 80020c0:	4602      	mov	r2, r0
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	1ad3      	subs	r3, r2, r3
 80020c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020ca:	4293      	cmp	r3, r2
 80020cc:	d901      	bls.n	80020d2 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80020ce:	2303      	movs	r3, #3
 80020d0:	e0d7      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020d2:	4b4b      	ldr	r3, [pc, #300]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 80020d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020d6:	f003 0302 	and.w	r3, r3, #2
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d0ee      	beq.n	80020bc <HAL_RCC_OscConfig+0x368>
 80020de:	e014      	b.n	800210a <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020e0:	f7fe ff6c 	bl	8000fbc <HAL_GetTick>
 80020e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020e6:	e00a      	b.n	80020fe <HAL_RCC_OscConfig+0x3aa>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020e8:	f7fe ff68 	bl	8000fbc <HAL_GetTick>
 80020ec:	4602      	mov	r2, r0
 80020ee:	693b      	ldr	r3, [r7, #16]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80020f6:	4293      	cmp	r3, r2
 80020f8:	d901      	bls.n	80020fe <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80020fa:	2303      	movs	r3, #3
 80020fc:	e0c1      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020fe:	4b40      	ldr	r3, [pc, #256]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 8002100:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d1ee      	bne.n	80020e8 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800210a:	7dfb      	ldrb	r3, [r7, #23]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d105      	bne.n	800211c <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002110:	4b3b      	ldr	r3, [pc, #236]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 8002112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002114:	4a3a      	ldr	r2, [pc, #232]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 8002116:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800211a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	699b      	ldr	r3, [r3, #24]
 8002120:	2b00      	cmp	r3, #0
 8002122:	f000 80ad 	beq.w	8002280 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002126:	4b36      	ldr	r3, [pc, #216]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 030c 	and.w	r3, r3, #12
 800212e:	2b08      	cmp	r3, #8
 8002130:	d060      	beq.n	80021f4 <HAL_RCC_OscConfig+0x4a0>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b02      	cmp	r3, #2
 8002138:	d145      	bne.n	80021c6 <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800213a:	4b33      	ldr	r3, [pc, #204]	@ (8002208 <HAL_RCC_OscConfig+0x4b4>)
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002140:	f7fe ff3c 	bl	8000fbc <HAL_GetTick>
 8002144:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002146:	e008      	b.n	800215a <HAL_RCC_OscConfig+0x406>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002148:	f7fe ff38 	bl	8000fbc <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	693b      	ldr	r3, [r7, #16]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	2b02      	cmp	r3, #2
 8002154:	d901      	bls.n	800215a <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002156:	2303      	movs	r3, #3
 8002158:	e093      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800215a:	4b29      	ldr	r3, [pc, #164]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d1f0      	bne.n	8002148 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	69da      	ldr	r2, [r3, #28]
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a1b      	ldr	r3, [r3, #32]
 800216e:	431a      	orrs	r2, r3
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002174:	019b      	lsls	r3, r3, #6
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800217c:	085b      	lsrs	r3, r3, #1
 800217e:	3b01      	subs	r3, #1
 8002180:	041b      	lsls	r3, r3, #16
 8002182:	431a      	orrs	r2, r3
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002188:	061b      	lsls	r3, r3, #24
 800218a:	431a      	orrs	r2, r3
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002190:	071b      	lsls	r3, r3, #28
 8002192:	491b      	ldr	r1, [pc, #108]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 8002194:	4313      	orrs	r3, r2
 8002196:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002198:	4b1b      	ldr	r3, [pc, #108]	@ (8002208 <HAL_RCC_OscConfig+0x4b4>)
 800219a:	2201      	movs	r2, #1
 800219c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219e:	f7fe ff0d 	bl	8000fbc <HAL_GetTick>
 80021a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021a4:	e008      	b.n	80021b8 <HAL_RCC_OscConfig+0x464>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021a6:	f7fe ff09 	bl	8000fbc <HAL_GetTick>
 80021aa:	4602      	mov	r2, r0
 80021ac:	693b      	ldr	r3, [r7, #16]
 80021ae:	1ad3      	subs	r3, r2, r3
 80021b0:	2b02      	cmp	r3, #2
 80021b2:	d901      	bls.n	80021b8 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e064      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80021b8:	4b11      	ldr	r3, [pc, #68]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d0f0      	beq.n	80021a6 <HAL_RCC_OscConfig+0x452>
 80021c4:	e05c      	b.n	8002280 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021c6:	4b10      	ldr	r3, [pc, #64]	@ (8002208 <HAL_RCC_OscConfig+0x4b4>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021cc:	f7fe fef6 	bl	8000fbc <HAL_GetTick>
 80021d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021d2:	e008      	b.n	80021e6 <HAL_RCC_OscConfig+0x492>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021d4:	f7fe fef2 	bl	8000fbc <HAL_GetTick>
 80021d8:	4602      	mov	r2, r0
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	1ad3      	subs	r3, r2, r3
 80021de:	2b02      	cmp	r3, #2
 80021e0:	d901      	bls.n	80021e6 <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80021e2:	2303      	movs	r3, #3
 80021e4:	e04d      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021e6:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <HAL_RCC_OscConfig+0x4ac>)
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d1f0      	bne.n	80021d4 <HAL_RCC_OscConfig+0x480>
 80021f2:	e045      	b.n	8002280 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	699b      	ldr	r3, [r3, #24]
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d107      	bne.n	800220c <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e040      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
 8002200:	40023800 	.word	0x40023800
 8002204:	40007000 	.word	0x40007000
 8002208:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800220c:	4b1f      	ldr	r3, [pc, #124]	@ (800228c <HAL_RCC_OscConfig+0x538>)
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	699b      	ldr	r3, [r3, #24]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d030      	beq.n	800227c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800221a:	68fb      	ldr	r3, [r7, #12]
 800221c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002224:	429a      	cmp	r2, r3
 8002226:	d129      	bne.n	800227c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d122      	bne.n	800227c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002236:	68fa      	ldr	r2, [r7, #12]
 8002238:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 800223c:	4013      	ands	r3, r2
 800223e:	687a      	ldr	r2, [r7, #4]
 8002240:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002242:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002244:	4293      	cmp	r3, r2
 8002246:	d119      	bne.n	800227c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002248:	68fb      	ldr	r3, [r7, #12]
 800224a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002252:	085b      	lsrs	r3, r3, #1
 8002254:	3b01      	subs	r3, #1
 8002256:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002258:	429a      	cmp	r2, r3
 800225a:	d10f      	bne.n	800227c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002266:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002268:	429a      	cmp	r2, r3
 800226a:	d107      	bne.n	800227c <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002276:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002278:	429a      	cmp	r2, r3
 800227a:	d001      	beq.n	8002280 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
        {
          return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e000      	b.n	8002282 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002280:	2300      	movs	r3, #0
}
 8002282:	4618      	mov	r0, r3
 8002284:	3718      	adds	r7, #24
 8002286:	46bd      	mov	sp, r7
 8002288:	bd80      	pop	{r7, pc}
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800

08002290 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002290:	b580      	push	{r7, lr}
 8002292:	b082      	sub	sp, #8
 8002294:	af00      	add	r7, sp, #0
 8002296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2b00      	cmp	r3, #0
 800229c:	d101      	bne.n	80022a2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	e041      	b.n	8002326 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80022a8:	b2db      	uxtb	r3, r3
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d106      	bne.n	80022bc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2200      	movs	r2, #0
 80022b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022b6:	6878      	ldr	r0, [r7, #4]
 80022b8:	f7fe fd02 	bl	8000cc0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2202      	movs	r2, #2
 80022c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	3304      	adds	r3, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	4610      	mov	r0, r2
 80022d0:	f000 fb74 	bl	80029bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	2201      	movs	r2, #1
 80022d8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	2201      	movs	r2, #1
 80022e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2201      	movs	r2, #1
 80022e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2201      	movs	r2, #1
 80022f0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	2201      	movs	r2, #1
 8002300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	2201      	movs	r2, #1
 8002308:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	2201      	movs	r2, #1
 8002310:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	2201      	movs	r2, #1
 8002318:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2201      	movs	r2, #1
 8002320:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002324:	2300      	movs	r3, #0
}
 8002326:	4618      	mov	r0, r3
 8002328:	3708      	adds	r7, #8
 800232a:	46bd      	mov	sp, r7
 800232c:	bd80      	pop	{r7, pc}

0800232e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800232e:	b580      	push	{r7, lr}
 8002330:	b082      	sub	sp, #8
 8002332:	af00      	add	r7, sp, #0
 8002334:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d101      	bne.n	8002340 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800233c:	2301      	movs	r3, #1
 800233e:	e041      	b.n	80023c4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002346:	b2db      	uxtb	r3, r3
 8002348:	2b00      	cmp	r3, #0
 800234a:	d106      	bne.n	800235a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	2200      	movs	r2, #0
 8002350:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f839 	bl	80023cc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2202      	movs	r2, #2
 800235e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	681a      	ldr	r2, [r3, #0]
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	3304      	adds	r3, #4
 800236a:	4619      	mov	r1, r3
 800236c:	4610      	mov	r0, r2
 800236e:	f000 fb25 	bl	80029bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	2201      	movs	r2, #1
 8002376:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	2201      	movs	r2, #1
 800237e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2201      	movs	r2, #1
 8002386:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	2201      	movs	r2, #1
 800238e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	2201      	movs	r2, #1
 8002396:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	2201      	movs	r2, #1
 800239e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	2201      	movs	r2, #1
 80023a6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	2201      	movs	r2, #1
 80023ae:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	2201      	movs	r2, #1
 80023b6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	2201      	movs	r2, #1
 80023be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80023c2:	2300      	movs	r3, #0
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	3708      	adds	r7, #8
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}

080023cc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80023cc:	b480      	push	{r7}
 80023ce:	b083      	sub	sp, #12
 80023d0:	af00      	add	r7, sp, #0
 80023d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80023d4:	bf00      	nop
 80023d6:	370c      	adds	r7, #12
 80023d8:	46bd      	mov	sp, r7
 80023da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023de:	4770      	bx	lr

080023e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80023e0:	b580      	push	{r7, lr}
 80023e2:	b084      	sub	sp, #16
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	691b      	ldr	r3, [r3, #16]
 80023f6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80023f8:	68bb      	ldr	r3, [r7, #8]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d020      	beq.n	8002444 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	f003 0302 	and.w	r3, r3, #2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d01b      	beq.n	8002444 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	f06f 0202 	mvn.w	r2, #2
 8002414:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2201      	movs	r2, #1
 800241a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	699b      	ldr	r3, [r3, #24]
 8002422:	f003 0303 	and.w	r3, r3, #3
 8002426:	2b00      	cmp	r3, #0
 8002428:	d003      	beq.n	8002432 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800242a:	6878      	ldr	r0, [r7, #4]
 800242c:	f000 faa7 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 8002430:	e005      	b.n	800243e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fa99 	bl	800296a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002438:	6878      	ldr	r0, [r7, #4]
 800243a:	f000 faaa 	bl	8002992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	2200      	movs	r2, #0
 8002442:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002444:	68bb      	ldr	r3, [r7, #8]
 8002446:	f003 0304 	and.w	r3, r3, #4
 800244a:	2b00      	cmp	r3, #0
 800244c:	d020      	beq.n	8002490 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800244e:	68fb      	ldr	r3, [r7, #12]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	d01b      	beq.n	8002490 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f06f 0204 	mvn.w	r2, #4
 8002460:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2202      	movs	r2, #2
 8002466:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002472:	2b00      	cmp	r3, #0
 8002474:	d003      	beq.n	800247e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002476:	6878      	ldr	r0, [r7, #4]
 8002478:	f000 fa81 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 800247c:	e005      	b.n	800248a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f000 fa73 	bl	800296a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002484:	6878      	ldr	r0, [r7, #4]
 8002486:	f000 fa84 	bl	8002992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	2200      	movs	r2, #0
 800248e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002490:	68bb      	ldr	r3, [r7, #8]
 8002492:	f003 0308 	and.w	r3, r3, #8
 8002496:	2b00      	cmp	r3, #0
 8002498:	d020      	beq.n	80024dc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f003 0308 	and.w	r3, r3, #8
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d01b      	beq.n	80024dc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f06f 0208 	mvn.w	r2, #8
 80024ac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	2204      	movs	r2, #4
 80024b2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	69db      	ldr	r3, [r3, #28]
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d003      	beq.n	80024ca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024c2:	6878      	ldr	r0, [r7, #4]
 80024c4:	f000 fa5b 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 80024c8:	e005      	b.n	80024d6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024ca:	6878      	ldr	r0, [r7, #4]
 80024cc:	f000 fa4d 	bl	800296a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024d0:	6878      	ldr	r0, [r7, #4]
 80024d2:	f000 fa5e 	bl	8002992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	2200      	movs	r2, #0
 80024da:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80024dc:	68bb      	ldr	r3, [r7, #8]
 80024de:	f003 0310 	and.w	r3, r3, #16
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d020      	beq.n	8002528 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	f003 0310 	and.w	r3, r3, #16
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d01b      	beq.n	8002528 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	f06f 0210 	mvn.w	r2, #16
 80024f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	2208      	movs	r2, #8
 80024fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	69db      	ldr	r3, [r3, #28]
 8002506:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800250a:	2b00      	cmp	r3, #0
 800250c:	d003      	beq.n	8002516 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 fa35 	bl	800297e <HAL_TIM_IC_CaptureCallback>
 8002514:	e005      	b.n	8002522 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002516:	6878      	ldr	r0, [r7, #4]
 8002518:	f000 fa27 	bl	800296a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800251c:	6878      	ldr	r0, [r7, #4]
 800251e:	f000 fa38 	bl	8002992 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2200      	movs	r2, #0
 8002526:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002528:	68bb      	ldr	r3, [r7, #8]
 800252a:	f003 0301 	and.w	r3, r3, #1
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00c      	beq.n	800254c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	f003 0301 	and.w	r3, r3, #1
 8002538:	2b00      	cmp	r3, #0
 800253a:	d007      	beq.n	800254c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f06f 0201 	mvn.w	r2, #1
 8002544:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 fa05 	bl	8002956 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800254c:	68bb      	ldr	r3, [r7, #8]
 800254e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002552:	2b00      	cmp	r3, #0
 8002554:	d00c      	beq.n	8002570 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800255c:	2b00      	cmp	r3, #0
 800255e:	d007      	beq.n	8002570 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002568:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800256a:	6878      	ldr	r0, [r7, #4]
 800256c:	f000 fe34 	bl	80031d8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002570:	68bb      	ldr	r3, [r7, #8]
 8002572:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00c      	beq.n	8002594 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002580:	2b00      	cmp	r3, #0
 8002582:	d007      	beq.n	8002594 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800258c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f000 fa09 	bl	80029a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	f003 0320 	and.w	r3, r3, #32
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00c      	beq.n	80025b8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	f003 0320 	and.w	r3, r3, #32
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d007      	beq.n	80025b8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	f06f 0220 	mvn.w	r2, #32
 80025b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80025b2:	6878      	ldr	r0, [r7, #4]
 80025b4:	f000 fe06 	bl	80031c4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80025b8:	bf00      	nop
 80025ba:	3710      	adds	r7, #16
 80025bc:	46bd      	mov	sp, r7
 80025be:	bd80      	pop	{r7, pc}

080025c0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	b086      	sub	sp, #24
 80025c4:	af00      	add	r7, sp, #0
 80025c6:	60f8      	str	r0, [r7, #12]
 80025c8:	60b9      	str	r1, [r7, #8]
 80025ca:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80025cc:	2300      	movs	r3, #0
 80025ce:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80025d6:	2b01      	cmp	r3, #1
 80025d8:	d101      	bne.n	80025de <HAL_TIM_PWM_ConfigChannel+0x1e>
 80025da:	2302      	movs	r3, #2
 80025dc:	e0ae      	b.n	800273c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	2201      	movs	r2, #1
 80025e2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	2b0c      	cmp	r3, #12
 80025ea:	f200 809f 	bhi.w	800272c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80025ee:	a201      	add	r2, pc, #4	@ (adr r2, 80025f4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80025f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025f4:	08002629 	.word	0x08002629
 80025f8:	0800272d 	.word	0x0800272d
 80025fc:	0800272d 	.word	0x0800272d
 8002600:	0800272d 	.word	0x0800272d
 8002604:	08002669 	.word	0x08002669
 8002608:	0800272d 	.word	0x0800272d
 800260c:	0800272d 	.word	0x0800272d
 8002610:	0800272d 	.word	0x0800272d
 8002614:	080026ab 	.word	0x080026ab
 8002618:	0800272d 	.word	0x0800272d
 800261c:	0800272d 	.word	0x0800272d
 8002620:	0800272d 	.word	0x0800272d
 8002624:	080026eb 	.word	0x080026eb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	4618      	mov	r0, r3
 8002630:	f000 fa70 	bl	8002b14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	699a      	ldr	r2, [r3, #24]
 800263a:	68fb      	ldr	r3, [r7, #12]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f042 0208 	orr.w	r2, r2, #8
 8002642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	699a      	ldr	r2, [r3, #24]
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f022 0204 	bic.w	r2, r2, #4
 8002652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	6999      	ldr	r1, [r3, #24]
 800265a:	68bb      	ldr	r3, [r7, #8]
 800265c:	691a      	ldr	r2, [r3, #16]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	430a      	orrs	r2, r1
 8002664:	619a      	str	r2, [r3, #24]
      break;
 8002666:	e064      	b.n	8002732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	68b9      	ldr	r1, [r7, #8]
 800266e:	4618      	mov	r0, r3
 8002670:	f000 fac0 	bl	8002bf4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	699a      	ldr	r2, [r3, #24]
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002682:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	699a      	ldr	r2, [r3, #24]
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002692:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	6999      	ldr	r1, [r3, #24]
 800269a:	68bb      	ldr	r3, [r7, #8]
 800269c:	691b      	ldr	r3, [r3, #16]
 800269e:	021a      	lsls	r2, r3, #8
 80026a0:	68fb      	ldr	r3, [r7, #12]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	430a      	orrs	r2, r1
 80026a6:	619a      	str	r2, [r3, #24]
      break;
 80026a8:	e043      	b.n	8002732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80026aa:	68fb      	ldr	r3, [r7, #12]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	68b9      	ldr	r1, [r7, #8]
 80026b0:	4618      	mov	r0, r3
 80026b2:	f000 fb15 	bl	8002ce0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	681b      	ldr	r3, [r3, #0]
 80026ba:	69da      	ldr	r2, [r3, #28]
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	f042 0208 	orr.w	r2, r2, #8
 80026c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	69da      	ldr	r2, [r3, #28]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f022 0204 	bic.w	r2, r2, #4
 80026d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	69d9      	ldr	r1, [r3, #28]
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	691a      	ldr	r2, [r3, #16]
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	430a      	orrs	r2, r1
 80026e6:	61da      	str	r2, [r3, #28]
      break;
 80026e8:	e023      	b.n	8002732 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	68b9      	ldr	r1, [r7, #8]
 80026f0:	4618      	mov	r0, r3
 80026f2:	f000 fb69 	bl	8002dc8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	69da      	ldr	r2, [r3, #28]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002704:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	69da      	ldr	r2, [r3, #28]
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002714:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	69d9      	ldr	r1, [r3, #28]
 800271c:	68bb      	ldr	r3, [r7, #8]
 800271e:	691b      	ldr	r3, [r3, #16]
 8002720:	021a      	lsls	r2, r3, #8
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	61da      	str	r2, [r3, #28]
      break;
 800272a:	e002      	b.n	8002732 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	75fb      	strb	r3, [r7, #23]
      break;
 8002730:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800273a:	7dfb      	ldrb	r3, [r7, #23]
}
 800273c:	4618      	mov	r0, r3
 800273e:	3718      	adds	r7, #24
 8002740:	46bd      	mov	sp, r7
 8002742:	bd80      	pop	{r7, pc}

08002744 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b084      	sub	sp, #16
 8002748:	af00      	add	r7, sp, #0
 800274a:	6078      	str	r0, [r7, #4]
 800274c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800274e:	2300      	movs	r3, #0
 8002750:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002758:	2b01      	cmp	r3, #1
 800275a:	d101      	bne.n	8002760 <HAL_TIM_ConfigClockSource+0x1c>
 800275c:	2302      	movs	r3, #2
 800275e:	e0b4      	b.n	80028ca <HAL_TIM_ConfigClockSource+0x186>
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2202      	movs	r2, #2
 800276c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	689b      	ldr	r3, [r3, #8]
 8002776:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002778:	68bb      	ldr	r3, [r7, #8]
 800277a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800277e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002780:	68bb      	ldr	r3, [r7, #8]
 8002782:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002786:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	68ba      	ldr	r2, [r7, #8]
 800278e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002790:	683b      	ldr	r3, [r7, #0]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002798:	d03e      	beq.n	8002818 <HAL_TIM_ConfigClockSource+0xd4>
 800279a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800279e:	f200 8087 	bhi.w	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027a6:	f000 8086 	beq.w	80028b6 <HAL_TIM_ConfigClockSource+0x172>
 80027aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80027ae:	d87f      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027b0:	2b70      	cmp	r3, #112	@ 0x70
 80027b2:	d01a      	beq.n	80027ea <HAL_TIM_ConfigClockSource+0xa6>
 80027b4:	2b70      	cmp	r3, #112	@ 0x70
 80027b6:	d87b      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027b8:	2b60      	cmp	r3, #96	@ 0x60
 80027ba:	d050      	beq.n	800285e <HAL_TIM_ConfigClockSource+0x11a>
 80027bc:	2b60      	cmp	r3, #96	@ 0x60
 80027be:	d877      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027c0:	2b50      	cmp	r3, #80	@ 0x50
 80027c2:	d03c      	beq.n	800283e <HAL_TIM_ConfigClockSource+0xfa>
 80027c4:	2b50      	cmp	r3, #80	@ 0x50
 80027c6:	d873      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027c8:	2b40      	cmp	r3, #64	@ 0x40
 80027ca:	d058      	beq.n	800287e <HAL_TIM_ConfigClockSource+0x13a>
 80027cc:	2b40      	cmp	r3, #64	@ 0x40
 80027ce:	d86f      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d0:	2b30      	cmp	r3, #48	@ 0x30
 80027d2:	d064      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x15a>
 80027d4:	2b30      	cmp	r3, #48	@ 0x30
 80027d6:	d86b      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027d8:	2b20      	cmp	r3, #32
 80027da:	d060      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x15a>
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d867      	bhi.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	d05c      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x15a>
 80027e4:	2b10      	cmp	r3, #16
 80027e6:	d05a      	beq.n	800289e <HAL_TIM_ConfigClockSource+0x15a>
 80027e8:	e062      	b.n	80028b0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80027ee:	683b      	ldr	r3, [r7, #0]
 80027f0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80027f2:	683b      	ldr	r3, [r7, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80027f6:	683b      	ldr	r3, [r7, #0]
 80027f8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80027fa:	f000 fc46 	bl	800308a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689b      	ldr	r3, [r3, #8]
 8002804:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800280c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	68ba      	ldr	r2, [r7, #8]
 8002814:	609a      	str	r2, [r3, #8]
      break;
 8002816:	e04f      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800281c:	683b      	ldr	r3, [r7, #0]
 800281e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002820:	683b      	ldr	r3, [r7, #0]
 8002822:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002828:	f000 fc2f 	bl	800308a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689a      	ldr	r2, [r3, #8]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800283a:	609a      	str	r2, [r3, #8]
      break;
 800283c:	e03c      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002842:	683b      	ldr	r3, [r7, #0]
 8002844:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800284a:	461a      	mov	r2, r3
 800284c:	f000 fba3 	bl	8002f96 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2150      	movs	r1, #80	@ 0x50
 8002856:	4618      	mov	r0, r3
 8002858:	f000 fbfc 	bl	8003054 <TIM_ITRx_SetConfig>
      break;
 800285c:	e02c      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002862:	683b      	ldr	r3, [r7, #0]
 8002864:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002866:	683b      	ldr	r3, [r7, #0]
 8002868:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800286a:	461a      	mov	r2, r3
 800286c:	f000 fbc2 	bl	8002ff4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	2160      	movs	r1, #96	@ 0x60
 8002876:	4618      	mov	r0, r3
 8002878:	f000 fbec 	bl	8003054 <TIM_ITRx_SetConfig>
      break;
 800287c:	e01c      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002882:	683b      	ldr	r3, [r7, #0]
 8002884:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800288a:	461a      	mov	r2, r3
 800288c:	f000 fb83 	bl	8002f96 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2140      	movs	r1, #64	@ 0x40
 8002896:	4618      	mov	r0, r3
 8002898:	f000 fbdc 	bl	8003054 <TIM_ITRx_SetConfig>
      break;
 800289c:	e00c      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	4619      	mov	r1, r3
 80028a8:	4610      	mov	r0, r2
 80028aa:	f000 fbd3 	bl	8003054 <TIM_ITRx_SetConfig>
      break;
 80028ae:	e003      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	73fb      	strb	r3, [r7, #15]
      break;
 80028b4:	e000      	b.n	80028b8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80028b6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2200      	movs	r2, #0
 80028c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80028c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}

080028d2 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80028d2:	b580      	push	{r7, lr}
 80028d4:	b082      	sub	sp, #8
 80028d6:	af00      	add	r7, sp, #0
 80028d8:	6078      	str	r0, [r7, #4]
 80028da:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <HAL_TIM_SlaveConfigSynchro+0x18>
 80028e6:	2302      	movs	r3, #2
 80028e8:	e031      	b.n	800294e <HAL_TIM_SlaveConfigSynchro+0x7c>
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2201      	movs	r2, #1
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2202      	movs	r2, #2
 80028f6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80028fa:	6839      	ldr	r1, [r7, #0]
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 fab9 	bl	8002e74 <TIM_SlaveTimer_SetConfig>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d009      	beq.n	800291c <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2200      	movs	r2, #0
 8002914:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e018      	b.n	800294e <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	68da      	ldr	r2, [r3, #12]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800292a:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68da      	ldr	r2, [r3, #12]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800293a:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2200      	movs	r2, #0
 8002948:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002968:	4770      	bx	lr

0800296a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800296a:	b480      	push	{r7}
 800296c:	b083      	sub	sp, #12
 800296e:	af00      	add	r7, sp, #0
 8002970:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002972:	bf00      	nop
 8002974:	370c      	adds	r7, #12
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr

0800297e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800297e:	b480      	push	{r7}
 8002980:	b083      	sub	sp, #12
 8002982:	af00      	add	r7, sp, #0
 8002984:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr

08002992 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002992:	b480      	push	{r7}
 8002994:	b083      	sub	sp, #12
 8002996:	af00      	add	r7, sp, #0
 8002998:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800299a:	bf00      	nop
 800299c:	370c      	adds	r7, #12
 800299e:	46bd      	mov	sp, r7
 80029a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a4:	4770      	bx	lr

080029a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029a6:	b480      	push	{r7}
 80029a8:	b083      	sub	sp, #12
 80029aa:	af00      	add	r7, sp, #0
 80029ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029b8:	4770      	bx	lr
	...

080029bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80029bc:	b480      	push	{r7}
 80029be:	b085      	sub	sp, #20
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	6078      	str	r0, [r7, #4]
 80029c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	4a46      	ldr	r2, [pc, #280]	@ (8002ae8 <TIM_Base_SetConfig+0x12c>)
 80029d0:	4293      	cmp	r3, r2
 80029d2:	d013      	beq.n	80029fc <TIM_Base_SetConfig+0x40>
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029da:	d00f      	beq.n	80029fc <TIM_Base_SetConfig+0x40>
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a43      	ldr	r2, [pc, #268]	@ (8002aec <TIM_Base_SetConfig+0x130>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d00b      	beq.n	80029fc <TIM_Base_SetConfig+0x40>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a42      	ldr	r2, [pc, #264]	@ (8002af0 <TIM_Base_SetConfig+0x134>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d007      	beq.n	80029fc <TIM_Base_SetConfig+0x40>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a41      	ldr	r2, [pc, #260]	@ (8002af4 <TIM_Base_SetConfig+0x138>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d003      	beq.n	80029fc <TIM_Base_SetConfig+0x40>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a40      	ldr	r2, [pc, #256]	@ (8002af8 <TIM_Base_SetConfig+0x13c>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d108      	bne.n	8002a0e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a02:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	68fa      	ldr	r2, [r7, #12]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	4a35      	ldr	r2, [pc, #212]	@ (8002ae8 <TIM_Base_SetConfig+0x12c>)
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d02b      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a1c:	d027      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	4a32      	ldr	r2, [pc, #200]	@ (8002aec <TIM_Base_SetConfig+0x130>)
 8002a22:	4293      	cmp	r3, r2
 8002a24:	d023      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	4a31      	ldr	r2, [pc, #196]	@ (8002af0 <TIM_Base_SetConfig+0x134>)
 8002a2a:	4293      	cmp	r3, r2
 8002a2c:	d01f      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a30      	ldr	r2, [pc, #192]	@ (8002af4 <TIM_Base_SetConfig+0x138>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d01b      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a2f      	ldr	r2, [pc, #188]	@ (8002af8 <TIM_Base_SetConfig+0x13c>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d017      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a2e      	ldr	r2, [pc, #184]	@ (8002afc <TIM_Base_SetConfig+0x140>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d013      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a2d      	ldr	r2, [pc, #180]	@ (8002b00 <TIM_Base_SetConfig+0x144>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d00f      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a2c      	ldr	r2, [pc, #176]	@ (8002b04 <TIM_Base_SetConfig+0x148>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00b      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a2b      	ldr	r2, [pc, #172]	@ (8002b08 <TIM_Base_SetConfig+0x14c>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d007      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a2a      	ldr	r2, [pc, #168]	@ (8002b0c <TIM_Base_SetConfig+0x150>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d003      	beq.n	8002a6e <TIM_Base_SetConfig+0xb2>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a29      	ldr	r2, [pc, #164]	@ (8002b10 <TIM_Base_SetConfig+0x154>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d108      	bne.n	8002a80 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002a74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	68db      	ldr	r3, [r3, #12]
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	695b      	ldr	r3, [r3, #20]
 8002a8a:	4313      	orrs	r3, r2
 8002a8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	68fa      	ldr	r2, [r7, #12]
 8002a92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	689a      	ldr	r2, [r3, #8]
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a9c:	683b      	ldr	r3, [r7, #0]
 8002a9e:	681a      	ldr	r2, [r3, #0]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	4a10      	ldr	r2, [pc, #64]	@ (8002ae8 <TIM_Base_SetConfig+0x12c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d003      	beq.n	8002ab4 <TIM_Base_SetConfig+0xf8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	4a12      	ldr	r2, [pc, #72]	@ (8002af8 <TIM_Base_SetConfig+0x13c>)
 8002ab0:	4293      	cmp	r3, r2
 8002ab2:	d103      	bne.n	8002abc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	691a      	ldr	r2, [r3, #16]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0301 	and.w	r3, r3, #1
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d105      	bne.n	8002ada <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f023 0201 	bic.w	r2, r3, #1
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	611a      	str	r2, [r3, #16]
  }
}
 8002ada:	bf00      	nop
 8002adc:	3714      	adds	r7, #20
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
 8002ae6:	bf00      	nop
 8002ae8:	40010000 	.word	0x40010000
 8002aec:	40000400 	.word	0x40000400
 8002af0:	40000800 	.word	0x40000800
 8002af4:	40000c00 	.word	0x40000c00
 8002af8:	40010400 	.word	0x40010400
 8002afc:	40014000 	.word	0x40014000
 8002b00:	40014400 	.word	0x40014400
 8002b04:	40014800 	.word	0x40014800
 8002b08:	40001800 	.word	0x40001800
 8002b0c:	40001c00 	.word	0x40001c00
 8002b10:	40002000 	.word	0x40002000

08002b14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002b14:	b480      	push	{r7}
 8002b16:	b087      	sub	sp, #28
 8002b18:	af00      	add	r7, sp, #0
 8002b1a:	6078      	str	r0, [r7, #4]
 8002b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6a1b      	ldr	r3, [r3, #32]
 8002b22:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a1b      	ldr	r3, [r3, #32]
 8002b28:	f023 0201 	bic.w	r2, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	f023 0303 	bic.w	r3, r3, #3
 8002b4a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	f023 0302 	bic.w	r3, r3, #2
 8002b5c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	689b      	ldr	r3, [r3, #8]
 8002b62:	697a      	ldr	r2, [r7, #20]
 8002b64:	4313      	orrs	r3, r2
 8002b66:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	4a20      	ldr	r2, [pc, #128]	@ (8002bec <TIM_OC1_SetConfig+0xd8>)
 8002b6c:	4293      	cmp	r3, r2
 8002b6e:	d003      	beq.n	8002b78 <TIM_OC1_SetConfig+0x64>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	4a1f      	ldr	r2, [pc, #124]	@ (8002bf0 <TIM_OC1_SetConfig+0xdc>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d10c      	bne.n	8002b92 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002b78:	697b      	ldr	r3, [r7, #20]
 8002b7a:	f023 0308 	bic.w	r3, r3, #8
 8002b7e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002b80:	683b      	ldr	r3, [r7, #0]
 8002b82:	68db      	ldr	r3, [r3, #12]
 8002b84:	697a      	ldr	r2, [r7, #20]
 8002b86:	4313      	orrs	r3, r2
 8002b88:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	f023 0304 	bic.w	r3, r3, #4
 8002b90:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	4a15      	ldr	r2, [pc, #84]	@ (8002bec <TIM_OC1_SetConfig+0xd8>)
 8002b96:	4293      	cmp	r3, r2
 8002b98:	d003      	beq.n	8002ba2 <TIM_OC1_SetConfig+0x8e>
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	4a14      	ldr	r2, [pc, #80]	@ (8002bf0 <TIM_OC1_SetConfig+0xdc>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d111      	bne.n	8002bc6 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002ba2:	693b      	ldr	r3, [r7, #16]
 8002ba4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002ba8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002bb0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	693a      	ldr	r2, [r7, #16]
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002bbc:	683b      	ldr	r3, [r7, #0]
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	693a      	ldr	r2, [r7, #16]
 8002bc2:	4313      	orrs	r3, r2
 8002bc4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	693a      	ldr	r2, [r7, #16]
 8002bca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	68fa      	ldr	r2, [r7, #12]
 8002bd0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002bd2:	683b      	ldr	r3, [r7, #0]
 8002bd4:	685a      	ldr	r2, [r3, #4]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	697a      	ldr	r2, [r7, #20]
 8002bde:	621a      	str	r2, [r3, #32]
}
 8002be0:	bf00      	nop
 8002be2:	371c      	adds	r7, #28
 8002be4:	46bd      	mov	sp, r7
 8002be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bea:	4770      	bx	lr
 8002bec:	40010000 	.word	0x40010000
 8002bf0:	40010400 	.word	0x40010400

08002bf4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	b087      	sub	sp, #28
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	6a1b      	ldr	r3, [r3, #32]
 8002c02:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	6a1b      	ldr	r3, [r3, #32]
 8002c08:	f023 0210 	bic.w	r2, r3, #16
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	699b      	ldr	r3, [r3, #24]
 8002c1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002c1c:	68fb      	ldr	r3, [r7, #12]
 8002c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	021b      	lsls	r3, r3, #8
 8002c32:	68fa      	ldr	r2, [r7, #12]
 8002c34:	4313      	orrs	r3, r2
 8002c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002c38:	697b      	ldr	r3, [r7, #20]
 8002c3a:	f023 0320 	bic.w	r3, r3, #32
 8002c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002c40:	683b      	ldr	r3, [r7, #0]
 8002c42:	689b      	ldr	r3, [r3, #8]
 8002c44:	011b      	lsls	r3, r3, #4
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	4a22      	ldr	r2, [pc, #136]	@ (8002cd8 <TIM_OC2_SetConfig+0xe4>)
 8002c50:	4293      	cmp	r3, r2
 8002c52:	d003      	beq.n	8002c5c <TIM_OC2_SetConfig+0x68>
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	4a21      	ldr	r2, [pc, #132]	@ (8002cdc <TIM_OC2_SetConfig+0xe8>)
 8002c58:	4293      	cmp	r3, r2
 8002c5a:	d10d      	bne.n	8002c78 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002c5c:	697b      	ldr	r3, [r7, #20]
 8002c5e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	68db      	ldr	r3, [r3, #12]
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	697a      	ldr	r2, [r7, #20]
 8002c6c:	4313      	orrs	r3, r2
 8002c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002c76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	4a17      	ldr	r2, [pc, #92]	@ (8002cd8 <TIM_OC2_SetConfig+0xe4>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d003      	beq.n	8002c88 <TIM_OC2_SetConfig+0x94>
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	4a16      	ldr	r2, [pc, #88]	@ (8002cdc <TIM_OC2_SetConfig+0xe8>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d113      	bne.n	8002cb0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002c88:	693b      	ldr	r3, [r7, #16]
 8002c8a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002c8e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002c90:	693b      	ldr	r3, [r7, #16]
 8002c92:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002c96:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	695b      	ldr	r3, [r3, #20]
 8002c9c:	009b      	lsls	r3, r3, #2
 8002c9e:	693a      	ldr	r2, [r7, #16]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	699b      	ldr	r3, [r3, #24]
 8002ca8:	009b      	lsls	r3, r3, #2
 8002caa:	693a      	ldr	r2, [r7, #16]
 8002cac:	4313      	orrs	r3, r2
 8002cae:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	68fa      	ldr	r2, [r7, #12]
 8002cba:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	685a      	ldr	r2, [r3, #4]
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	697a      	ldr	r2, [r7, #20]
 8002cc8:	621a      	str	r2, [r3, #32]
}
 8002cca:	bf00      	nop
 8002ccc:	371c      	adds	r7, #28
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	40010000 	.word	0x40010000
 8002cdc:	40010400 	.word	0x40010400

08002ce0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002ce0:	b480      	push	{r7}
 8002ce2:	b087      	sub	sp, #28
 8002ce4:	af00      	add	r7, sp, #0
 8002ce6:	6078      	str	r0, [r7, #4]
 8002ce8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6a1b      	ldr	r3, [r3, #32]
 8002cf4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	69db      	ldr	r3, [r3, #28]
 8002d06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002d0e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	f023 0303 	bic.w	r3, r3, #3
 8002d16:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68fa      	ldr	r2, [r7, #12]
 8002d1e:	4313      	orrs	r3, r2
 8002d20:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002d28:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	689b      	ldr	r3, [r3, #8]
 8002d2e:	021b      	lsls	r3, r3, #8
 8002d30:	697a      	ldr	r2, [r7, #20]
 8002d32:	4313      	orrs	r3, r2
 8002d34:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	4a21      	ldr	r2, [pc, #132]	@ (8002dc0 <TIM_OC3_SetConfig+0xe0>)
 8002d3a:	4293      	cmp	r3, r2
 8002d3c:	d003      	beq.n	8002d46 <TIM_OC3_SetConfig+0x66>
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	4a20      	ldr	r2, [pc, #128]	@ (8002dc4 <TIM_OC3_SetConfig+0xe4>)
 8002d42:	4293      	cmp	r3, r2
 8002d44:	d10d      	bne.n	8002d62 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002d4c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002d4e:	683b      	ldr	r3, [r7, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	021b      	lsls	r3, r3, #8
 8002d54:	697a      	ldr	r2, [r7, #20]
 8002d56:	4313      	orrs	r3, r2
 8002d58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002d60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a16      	ldr	r2, [pc, #88]	@ (8002dc0 <TIM_OC3_SetConfig+0xe0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d003      	beq.n	8002d72 <TIM_OC3_SetConfig+0x92>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	4a15      	ldr	r2, [pc, #84]	@ (8002dc4 <TIM_OC3_SetConfig+0xe4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d113      	bne.n	8002d9a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d78:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002d7a:	693b      	ldr	r3, [r7, #16]
 8002d7c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002d80:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	695b      	ldr	r3, [r3, #20]
 8002d86:	011b      	lsls	r3, r3, #4
 8002d88:	693a      	ldr	r2, [r7, #16]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	699b      	ldr	r3, [r3, #24]
 8002d92:	011b      	lsls	r3, r3, #4
 8002d94:	693a      	ldr	r2, [r7, #16]
 8002d96:	4313      	orrs	r3, r2
 8002d98:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	693a      	ldr	r2, [r7, #16]
 8002d9e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	685a      	ldr	r2, [r3, #4]
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	697a      	ldr	r2, [r7, #20]
 8002db2:	621a      	str	r2, [r3, #32]
}
 8002db4:	bf00      	nop
 8002db6:	371c      	adds	r7, #28
 8002db8:	46bd      	mov	sp, r7
 8002dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dbe:	4770      	bx	lr
 8002dc0:	40010000 	.word	0x40010000
 8002dc4:	40010400 	.word	0x40010400

08002dc8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	b087      	sub	sp, #28
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
 8002dd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	6a1b      	ldr	r3, [r3, #32]
 8002dd6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	6a1b      	ldr	r3, [r3, #32]
 8002ddc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	685b      	ldr	r3, [r3, #4]
 8002de8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69db      	ldr	r3, [r3, #28]
 8002dee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002df6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002e00:	683b      	ldr	r3, [r7, #0]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	021b      	lsls	r3, r3, #8
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	689b      	ldr	r3, [r3, #8]
 8002e18:	031b      	lsls	r3, r3, #12
 8002e1a:	693a      	ldr	r2, [r7, #16]
 8002e1c:	4313      	orrs	r3, r2
 8002e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	4a12      	ldr	r2, [pc, #72]	@ (8002e6c <TIM_OC4_SetConfig+0xa4>)
 8002e24:	4293      	cmp	r3, r2
 8002e26:	d003      	beq.n	8002e30 <TIM_OC4_SetConfig+0x68>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	4a11      	ldr	r2, [pc, #68]	@ (8002e70 <TIM_OC4_SetConfig+0xa8>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d109      	bne.n	8002e44 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002e36:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	695b      	ldr	r3, [r3, #20]
 8002e3c:	019b      	lsls	r3, r3, #6
 8002e3e:	697a      	ldr	r2, [r7, #20]
 8002e40:	4313      	orrs	r3, r2
 8002e42:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	697a      	ldr	r2, [r7, #20]
 8002e48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	68fa      	ldr	r2, [r7, #12]
 8002e4e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	685a      	ldr	r2, [r3, #4]
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	693a      	ldr	r2, [r7, #16]
 8002e5c:	621a      	str	r2, [r3, #32]
}
 8002e5e:	bf00      	nop
 8002e60:	371c      	adds	r7, #28
 8002e62:	46bd      	mov	sp, r7
 8002e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e68:	4770      	bx	lr
 8002e6a:	bf00      	nop
 8002e6c:	40010000 	.word	0x40010000
 8002e70:	40010400 	.word	0x40010400

08002e74 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b086      	sub	sp, #24
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
 8002e7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002e8a:	693b      	ldr	r3, [r7, #16]
 8002e8c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002e90:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	685b      	ldr	r3, [r3, #4]
 8002e96:	693a      	ldr	r2, [r7, #16]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8002e9c:	693b      	ldr	r3, [r7, #16]
 8002e9e:	f023 0307 	bic.w	r3, r3, #7
 8002ea2:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	693a      	ldr	r2, [r7, #16]
 8002eaa:	4313      	orrs	r3, r2
 8002eac:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	693a      	ldr	r2, [r7, #16]
 8002eb4:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8002eb6:	683b      	ldr	r3, [r7, #0]
 8002eb8:	685b      	ldr	r3, [r3, #4]
 8002eba:	2b70      	cmp	r3, #112	@ 0x70
 8002ebc:	d01a      	beq.n	8002ef4 <TIM_SlaveTimer_SetConfig+0x80>
 8002ebe:	2b70      	cmp	r3, #112	@ 0x70
 8002ec0:	d860      	bhi.n	8002f84 <TIM_SlaveTimer_SetConfig+0x110>
 8002ec2:	2b60      	cmp	r3, #96	@ 0x60
 8002ec4:	d054      	beq.n	8002f70 <TIM_SlaveTimer_SetConfig+0xfc>
 8002ec6:	2b60      	cmp	r3, #96	@ 0x60
 8002ec8:	d85c      	bhi.n	8002f84 <TIM_SlaveTimer_SetConfig+0x110>
 8002eca:	2b50      	cmp	r3, #80	@ 0x50
 8002ecc:	d046      	beq.n	8002f5c <TIM_SlaveTimer_SetConfig+0xe8>
 8002ece:	2b50      	cmp	r3, #80	@ 0x50
 8002ed0:	d858      	bhi.n	8002f84 <TIM_SlaveTimer_SetConfig+0x110>
 8002ed2:	2b40      	cmp	r3, #64	@ 0x40
 8002ed4:	d019      	beq.n	8002f0a <TIM_SlaveTimer_SetConfig+0x96>
 8002ed6:	2b40      	cmp	r3, #64	@ 0x40
 8002ed8:	d854      	bhi.n	8002f84 <TIM_SlaveTimer_SetConfig+0x110>
 8002eda:	2b30      	cmp	r3, #48	@ 0x30
 8002edc:	d055      	beq.n	8002f8a <TIM_SlaveTimer_SetConfig+0x116>
 8002ede:	2b30      	cmp	r3, #48	@ 0x30
 8002ee0:	d850      	bhi.n	8002f84 <TIM_SlaveTimer_SetConfig+0x110>
 8002ee2:	2b20      	cmp	r3, #32
 8002ee4:	d051      	beq.n	8002f8a <TIM_SlaveTimer_SetConfig+0x116>
 8002ee6:	2b20      	cmp	r3, #32
 8002ee8:	d84c      	bhi.n	8002f84 <TIM_SlaveTimer_SetConfig+0x110>
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d04d      	beq.n	8002f8a <TIM_SlaveTimer_SetConfig+0x116>
 8002eee:	2b10      	cmp	r3, #16
 8002ef0:	d04b      	beq.n	8002f8a <TIM_SlaveTimer_SetConfig+0x116>
 8002ef2:	e047      	b.n	8002f84 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8002efc:	683b      	ldr	r3, [r7, #0]
 8002efe:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8002f04:	f000 f8c1 	bl	800308a <TIM_ETR_SetConfig>
      break;
 8002f08:	e040      	b.n	8002f8c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2b05      	cmp	r3, #5
 8002f10:	d101      	bne.n	8002f16 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e03b      	b.n	8002f8e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	6a1b      	ldr	r3, [r3, #32]
 8002f1c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a1a      	ldr	r2, [r3, #32]
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f022 0201 	bic.w	r2, r2, #1
 8002f2c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	699b      	ldr	r3, [r3, #24]
 8002f34:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002f3c:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	011b      	lsls	r3, r3, #4
 8002f44:	68ba      	ldr	r2, [r7, #8]
 8002f46:	4313      	orrs	r3, r2
 8002f48:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	68ba      	ldr	r2, [r7, #8]
 8002f50:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	621a      	str	r2, [r3, #32]
      break;
 8002f5a:	e017      	b.n	8002f8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002f60:	683b      	ldr	r3, [r7, #0]
 8002f62:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002f64:	683b      	ldr	r3, [r7, #0]
 8002f66:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f68:	461a      	mov	r2, r3
 8002f6a:	f000 f814 	bl	8002f96 <TIM_TI1_ConfigInputStage>
      break;
 8002f6e:	e00d      	b.n	8002f8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8002f74:	683b      	ldr	r3, [r7, #0]
 8002f76:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f7c:	461a      	mov	r2, r3
 8002f7e:	f000 f839 	bl	8002ff4 <TIM_TI2_ConfigInputStage>
      break;
 8002f82:	e003      	b.n	8002f8c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8002f84:	2301      	movs	r3, #1
 8002f86:	75fb      	strb	r3, [r7, #23]
      break;
 8002f88:	e000      	b.n	8002f8c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8002f8a:	bf00      	nop
  }

  return status;
 8002f8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002f8e:	4618      	mov	r0, r3
 8002f90:	3718      	adds	r7, #24
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002f96:	b480      	push	{r7}
 8002f98:	b087      	sub	sp, #28
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	60f8      	str	r0, [r7, #12]
 8002f9e:	60b9      	str	r1, [r7, #8]
 8002fa0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6a1b      	ldr	r3, [r3, #32]
 8002fa6:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	6a1b      	ldr	r3, [r3, #32]
 8002fac:	f023 0201 	bic.w	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	699b      	ldr	r3, [r3, #24]
 8002fb8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002fc0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	011b      	lsls	r3, r3, #4
 8002fc6:	693a      	ldr	r2, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	f023 030a 	bic.w	r3, r3, #10
 8002fd2:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002fd4:	697a      	ldr	r2, [r7, #20]
 8002fd6:	68bb      	ldr	r3, [r7, #8]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	693a      	ldr	r2, [r7, #16]
 8002fe0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	697a      	ldr	r2, [r7, #20]
 8002fe6:	621a      	str	r2, [r3, #32]
}
 8002fe8:	bf00      	nop
 8002fea:	371c      	adds	r7, #28
 8002fec:	46bd      	mov	sp, r7
 8002fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff2:	4770      	bx	lr

08002ff4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	60b9      	str	r1, [r7, #8]
 8002ffe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	6a1b      	ldr	r3, [r3, #32]
 8003004:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6a1b      	ldr	r3, [r3, #32]
 800300a:	f023 0210 	bic.w	r2, r3, #16
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	699b      	ldr	r3, [r3, #24]
 8003016:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800301e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	031b      	lsls	r3, r3, #12
 8003024:	693a      	ldr	r2, [r7, #16]
 8003026:	4313      	orrs	r3, r2
 8003028:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003030:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	011b      	lsls	r3, r3, #4
 8003036:	697a      	ldr	r2, [r7, #20]
 8003038:	4313      	orrs	r3, r2
 800303a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	693a      	ldr	r2, [r7, #16]
 8003040:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	697a      	ldr	r2, [r7, #20]
 8003046:	621a      	str	r2, [r3, #32]
}
 8003048:	bf00      	nop
 800304a:	371c      	adds	r7, #28
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003054:	b480      	push	{r7}
 8003056:	b085      	sub	sp, #20
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	689b      	ldr	r3, [r3, #8]
 8003062:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800306a:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800306c:	683a      	ldr	r2, [r7, #0]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	4313      	orrs	r3, r2
 8003072:	f043 0307 	orr.w	r3, r3, #7
 8003076:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	68fa      	ldr	r2, [r7, #12]
 800307c:	609a      	str	r2, [r3, #8]
}
 800307e:	bf00      	nop
 8003080:	3714      	adds	r7, #20
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr

0800308a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800308a:	b480      	push	{r7}
 800308c:	b087      	sub	sp, #28
 800308e:	af00      	add	r7, sp, #0
 8003090:	60f8      	str	r0, [r7, #12]
 8003092:	60b9      	str	r1, [r7, #8]
 8003094:	607a      	str	r2, [r7, #4]
 8003096:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80030a4:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	021a      	lsls	r2, r3, #8
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	431a      	orrs	r2, r3
 80030ae:	68bb      	ldr	r3, [r7, #8]
 80030b0:	4313      	orrs	r3, r2
 80030b2:	697a      	ldr	r2, [r7, #20]
 80030b4:	4313      	orrs	r3, r2
 80030b6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	697a      	ldr	r2, [r7, #20]
 80030bc:	609a      	str	r2, [r3, #8]
}
 80030be:	bf00      	nop
 80030c0:	371c      	adds	r7, #28
 80030c2:	46bd      	mov	sp, r7
 80030c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c8:	4770      	bx	lr
	...

080030cc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030cc:	b480      	push	{r7}
 80030ce:	b085      	sub	sp, #20
 80030d0:	af00      	add	r7, sp, #0
 80030d2:	6078      	str	r0, [r7, #4]
 80030d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80030dc:	2b01      	cmp	r3, #1
 80030de:	d101      	bne.n	80030e4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030e0:	2302      	movs	r3, #2
 80030e2:	e05a      	b.n	800319a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2202      	movs	r2, #2
 80030f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	685b      	ldr	r3, [r3, #4]
 80030fa:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	689b      	ldr	r3, [r3, #8]
 8003102:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800310a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	68fa      	ldr	r2, [r7, #12]
 8003112:	4313      	orrs	r3, r2
 8003114:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	68fa      	ldr	r2, [r7, #12]
 800311c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4a21      	ldr	r2, [pc, #132]	@ (80031a8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003124:	4293      	cmp	r3, r2
 8003126:	d022      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003130:	d01d      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a1d      	ldr	r2, [pc, #116]	@ (80031ac <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d018      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	4a1b      	ldr	r2, [pc, #108]	@ (80031b0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d013      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1a      	ldr	r2, [pc, #104]	@ (80031b4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d00e      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a18      	ldr	r2, [pc, #96]	@ (80031b8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d009      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a17      	ldr	r2, [pc, #92]	@ (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d004      	beq.n	800316e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a15      	ldr	r2, [pc, #84]	@ (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d10c      	bne.n	8003188 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003174:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	68ba      	ldr	r2, [r7, #8]
 800317c:	4313      	orrs	r3, r2
 800317e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	68ba      	ldr	r2, [r7, #8]
 8003186:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003198:	2300      	movs	r3, #0
}
 800319a:	4618      	mov	r0, r3
 800319c:	3714      	adds	r7, #20
 800319e:	46bd      	mov	sp, r7
 80031a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	40010000 	.word	0x40010000
 80031ac:	40000400 	.word	0x40000400
 80031b0:	40000800 	.word	0x40000800
 80031b4:	40000c00 	.word	0x40000c00
 80031b8:	40010400 	.word	0x40010400
 80031bc:	40014000 	.word	0x40014000
 80031c0:	40001800 	.word	0x40001800

080031c4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031c4:	b480      	push	{r7}
 80031c6:	b083      	sub	sp, #12
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031cc:	bf00      	nop
 80031ce:	370c      	adds	r7, #12
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b082      	sub	sp, #8
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d101      	bne.n	80031fe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	e042      	b.n	8003284 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003204:	b2db      	uxtb	r3, r3
 8003206:	2b00      	cmp	r3, #0
 8003208:	d106      	bne.n	8003218 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	2200      	movs	r2, #0
 800320e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f7fd fdf2 	bl	8000dfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2224      	movs	r2, #36	@ 0x24
 800321c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	68da      	ldr	r2, [r3, #12]
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800322e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003230:	6878      	ldr	r0, [r7, #4]
 8003232:	f000 fd11 	bl	8003c58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	691a      	ldr	r2, [r3, #16]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003244:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	695a      	ldr	r2, [r3, #20]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003254:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	68da      	ldr	r2, [r3, #12]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003264:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2200      	movs	r2, #0
 800326a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	2220      	movs	r2, #32
 8003270:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2220      	movs	r2, #32
 8003278:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003282:	2300      	movs	r3, #0
}
 8003284:	4618      	mov	r0, r3
 8003286:	3708      	adds	r7, #8
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800328c:	b480      	push	{r7}
 800328e:	b085      	sub	sp, #20
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	4613      	mov	r3, r2
 8003298:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b20      	cmp	r3, #32
 80032a4:	d121      	bne.n	80032ea <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 80032a6:	68bb      	ldr	r3, [r7, #8]
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d002      	beq.n	80032b2 <HAL_UART_Transmit_IT+0x26>
 80032ac:	88fb      	ldrh	r3, [r7, #6]
 80032ae:	2b00      	cmp	r3, #0
 80032b0:	d101      	bne.n	80032b6 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	e01a      	b.n	80032ec <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	68ba      	ldr	r2, [r7, #8]
 80032ba:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	88fa      	ldrh	r2, [r7, #6]
 80032c0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	88fa      	ldrh	r2, [r7, #6]
 80032c6:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	2200      	movs	r2, #0
 80032cc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	2221      	movs	r2, #33	@ 0x21
 80032d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	68da      	ldr	r2, [r3, #12]
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80032e4:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80032e6:	2300      	movs	r3, #0
 80032e8:	e000      	b.n	80032ec <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80032ea:	2302      	movs	r3, #2
  }
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b084      	sub	sp, #16
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	60f8      	str	r0, [r7, #12]
 8003300:	60b9      	str	r1, [r7, #8]
 8003302:	4613      	mov	r3, r2
 8003304:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b20      	cmp	r3, #32
 8003310:	d112      	bne.n	8003338 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d002      	beq.n	800331e <HAL_UART_Receive_IT+0x26>
 8003318:	88fb      	ldrh	r3, [r7, #6]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d101      	bne.n	8003322 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e00b      	b.n	800333a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	2200      	movs	r2, #0
 8003326:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003328:	88fb      	ldrh	r3, [r7, #6]
 800332a:	461a      	mov	r2, r3
 800332c:	68b9      	ldr	r1, [r7, #8]
 800332e:	68f8      	ldr	r0, [r7, #12]
 8003330:	f000 faba 	bl	80038a8 <UART_Start_Receive_IT>
 8003334:	4603      	mov	r3, r0
 8003336:	e000      	b.n	800333a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003338:	2302      	movs	r3, #2
  }
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}
	...

08003344 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b0ba      	sub	sp, #232	@ 0xe8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68db      	ldr	r3, [r3, #12]
 800335c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	695b      	ldr	r3, [r3, #20]
 8003366:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800336a:	2300      	movs	r3, #0
 800336c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003370:	2300      	movs	r3, #0
 8003372:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800337a:	f003 030f 	and.w	r3, r3, #15
 800337e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003382:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10f      	bne.n	80033aa <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800338a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800338e:	f003 0320 	and.w	r3, r3, #32
 8003392:	2b00      	cmp	r3, #0
 8003394:	d009      	beq.n	80033aa <HAL_UART_IRQHandler+0x66>
 8003396:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800339a:	f003 0320 	and.w	r3, r3, #32
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d003      	beq.n	80033aa <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f000 fb99 	bl	8003ada <UART_Receive_IT>
      return;
 80033a8:	e25b      	b.n	8003862 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80033aa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	f000 80de 	beq.w	8003570 <HAL_UART_IRQHandler+0x22c>
 80033b4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80033b8:	f003 0301 	and.w	r3, r3, #1
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d106      	bne.n	80033ce <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80033c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033c4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	f000 80d1 	beq.w	8003570 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80033ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00b      	beq.n	80033f2 <HAL_UART_IRQHandler+0xae>
 80033da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d005      	beq.n	80033f2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80033ea:	f043 0201 	orr.w	r2, r3, #1
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80033f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033f6:	f003 0304 	and.w	r3, r3, #4
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00b      	beq.n	8003416 <HAL_UART_IRQHandler+0xd2>
 80033fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003402:	f003 0301 	and.w	r3, r3, #1
 8003406:	2b00      	cmp	r3, #0
 8003408:	d005      	beq.n	8003416 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800340e:	f043 0202 	orr.w	r2, r3, #2
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003416:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800341a:	f003 0302 	and.w	r3, r3, #2
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00b      	beq.n	800343a <HAL_UART_IRQHandler+0xf6>
 8003422:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003426:	f003 0301 	and.w	r3, r3, #1
 800342a:	2b00      	cmp	r3, #0
 800342c:	d005      	beq.n	800343a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003432:	f043 0204 	orr.w	r2, r3, #4
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800343a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800343e:	f003 0308 	and.w	r3, r3, #8
 8003442:	2b00      	cmp	r3, #0
 8003444:	d011      	beq.n	800346a <HAL_UART_IRQHandler+0x126>
 8003446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800344a:	f003 0320 	and.w	r3, r3, #32
 800344e:	2b00      	cmp	r3, #0
 8003450:	d105      	bne.n	800345e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003452:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003456:	f003 0301 	and.w	r3, r3, #1
 800345a:	2b00      	cmp	r3, #0
 800345c:	d005      	beq.n	800346a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003462:	f043 0208 	orr.w	r2, r3, #8
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800346e:	2b00      	cmp	r3, #0
 8003470:	f000 81f2 	beq.w	8003858 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003478:	f003 0320 	and.w	r3, r3, #32
 800347c:	2b00      	cmp	r3, #0
 800347e:	d008      	beq.n	8003492 <HAL_UART_IRQHandler+0x14e>
 8003480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003484:	f003 0320 	and.w	r3, r3, #32
 8003488:	2b00      	cmp	r3, #0
 800348a:	d002      	beq.n	8003492 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800348c:	6878      	ldr	r0, [r7, #4]
 800348e:	f000 fb24 	bl	8003ada <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800349c:	2b40      	cmp	r3, #64	@ 0x40
 800349e:	bf0c      	ite	eq
 80034a0:	2301      	moveq	r3, #1
 80034a2:	2300      	movne	r3, #0
 80034a4:	b2db      	uxtb	r3, r3
 80034a6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80034ae:	f003 0308 	and.w	r3, r3, #8
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d103      	bne.n	80034be <HAL_UART_IRQHandler+0x17a>
 80034b6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d04f      	beq.n	800355e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80034be:	6878      	ldr	r0, [r7, #4]
 80034c0:	f000 fa2c 	bl	800391c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	695b      	ldr	r3, [r3, #20]
 80034ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80034ce:	2b40      	cmp	r3, #64	@ 0x40
 80034d0:	d141      	bne.n	8003556 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	3314      	adds	r3, #20
 80034d8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034dc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80034e0:	e853 3f00 	ldrex	r3, [r3]
 80034e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80034e8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80034ec:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80034f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	3314      	adds	r3, #20
 80034fa:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80034fe:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003502:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003506:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800350a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800350e:	e841 2300 	strex	r3, r2, [r1]
 8003512:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003516:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800351a:	2b00      	cmp	r3, #0
 800351c:	d1d9      	bne.n	80034d2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d013      	beq.n	800354e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800352a:	4a7e      	ldr	r2, [pc, #504]	@ (8003724 <HAL_UART_IRQHandler+0x3e0>)
 800352c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003532:	4618      	mov	r0, r3
 8003534:	f7fd fecf 	bl	80012d6 <HAL_DMA_Abort_IT>
 8003538:	4603      	mov	r3, r0
 800353a:	2b00      	cmp	r3, #0
 800353c:	d016      	beq.n	800356c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003542:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003548:	4610      	mov	r0, r2
 800354a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800354c:	e00e      	b.n	800356c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800354e:	6878      	ldr	r0, [r7, #4]
 8003550:	f000 f994 	bl	800387c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003554:	e00a      	b.n	800356c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003556:	6878      	ldr	r0, [r7, #4]
 8003558:	f000 f990 	bl	800387c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800355c:	e006      	b.n	800356c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800355e:	6878      	ldr	r0, [r7, #4]
 8003560:	f000 f98c 	bl	800387c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	2200      	movs	r2, #0
 8003568:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800356a:	e175      	b.n	8003858 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800356c:	bf00      	nop
    return;
 800356e:	e173      	b.n	8003858 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003574:	2b01      	cmp	r3, #1
 8003576:	f040 814f 	bne.w	8003818 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800357a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800357e:	f003 0310 	and.w	r3, r3, #16
 8003582:	2b00      	cmp	r3, #0
 8003584:	f000 8148 	beq.w	8003818 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 8141 	beq.w	8003818 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003596:	2300      	movs	r3, #0
 8003598:	60bb      	str	r3, [r7, #8]
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	60bb      	str	r3, [r7, #8]
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	685b      	ldr	r3, [r3, #4]
 80035a8:	60bb      	str	r3, [r7, #8]
 80035aa:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035b6:	2b40      	cmp	r3, #64	@ 0x40
 80035b8:	f040 80b6 	bne.w	8003728 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80035c8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 8145 	beq.w	800385c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80035d6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035da:	429a      	cmp	r2, r3
 80035dc:	f080 813e 	bcs.w	800385c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80035e6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80035ec:	69db      	ldr	r3, [r3, #28]
 80035ee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035f2:	f000 8088 	beq.w	8003706 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	330c      	adds	r3, #12
 80035fc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003600:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003604:	e853 3f00 	ldrex	r3, [r3]
 8003608:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800360c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003610:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003614:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	330c      	adds	r3, #12
 800361e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003622:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003626:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800362a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800362e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003632:	e841 2300 	strex	r3, r2, [r1]
 8003636:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800363a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1d9      	bne.n	80035f6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	3314      	adds	r3, #20
 8003648:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800364c:	e853 3f00 	ldrex	r3, [r3]
 8003650:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003652:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003654:	f023 0301 	bic.w	r3, r3, #1
 8003658:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	3314      	adds	r3, #20
 8003662:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003666:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800366a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800366e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003672:	e841 2300 	strex	r3, r2, [r1]
 8003676:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003678:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800367a:	2b00      	cmp	r3, #0
 800367c:	d1e1      	bne.n	8003642 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	3314      	adds	r3, #20
 8003684:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003686:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003688:	e853 3f00 	ldrex	r3, [r3]
 800368c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800368e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003690:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003694:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	3314      	adds	r3, #20
 800369e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80036a2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80036a4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036a6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80036a8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80036aa:	e841 2300 	strex	r3, r2, [r1]
 80036ae:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80036b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d1e3      	bne.n	800367e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2220      	movs	r2, #32
 80036ba:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	330c      	adds	r3, #12
 80036ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036cc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80036ce:	e853 3f00 	ldrex	r3, [r3]
 80036d2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80036d4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80036d6:	f023 0310 	bic.w	r3, r3, #16
 80036da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	330c      	adds	r3, #12
 80036e4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80036e8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80036ea:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036ec:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80036ee:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80036f0:	e841 2300 	strex	r3, r2, [r1]
 80036f4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80036f6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1e3      	bne.n	80036c4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003700:	4618      	mov	r0, r3
 8003702:	f7fd fd78 	bl	80011f6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2202      	movs	r2, #2
 800370a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003714:	b29b      	uxth	r3, r3
 8003716:	1ad3      	subs	r3, r2, r3
 8003718:	b29b      	uxth	r3, r3
 800371a:	4619      	mov	r1, r3
 800371c:	6878      	ldr	r0, [r7, #4]
 800371e:	f000 f8b7 	bl	8003890 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003722:	e09b      	b.n	800385c <HAL_UART_IRQHandler+0x518>
 8003724:	080039e3 	.word	0x080039e3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003730:	b29b      	uxth	r3, r3
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800373c:	b29b      	uxth	r3, r3
 800373e:	2b00      	cmp	r3, #0
 8003740:	f000 808e 	beq.w	8003860 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003744:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003748:	2b00      	cmp	r3, #0
 800374a:	f000 8089 	beq.w	8003860 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	330c      	adds	r3, #12
 8003754:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003756:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003758:	e853 3f00 	ldrex	r3, [r3]
 800375c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800375e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003760:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003764:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	330c      	adds	r3, #12
 800376e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003772:	647a      	str	r2, [r7, #68]	@ 0x44
 8003774:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003776:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003778:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800377a:	e841 2300 	strex	r3, r2, [r1]
 800377e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003780:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1e3      	bne.n	800374e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	3314      	adds	r3, #20
 800378c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	e853 3f00 	ldrex	r3, [r3]
 8003794:	623b      	str	r3, [r7, #32]
   return(result);
 8003796:	6a3b      	ldr	r3, [r7, #32]
 8003798:	f023 0301 	bic.w	r3, r3, #1
 800379c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3314      	adds	r3, #20
 80037a6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80037aa:	633a      	str	r2, [r7, #48]	@ 0x30
 80037ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ae:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037b0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037b2:	e841 2300 	strex	r3, r2, [r1]
 80037b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d1e3      	bne.n	8003786 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2220      	movs	r2, #32
 80037c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	2200      	movs	r2, #0
 80037ca:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	e853 3f00 	ldrex	r3, [r3]
 80037da:	60fb      	str	r3, [r7, #12]
   return(result);
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	f023 0310 	bic.w	r3, r3, #16
 80037e2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	330c      	adds	r3, #12
 80037ec:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80037f0:	61fa      	str	r2, [r7, #28]
 80037f2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037f4:	69b9      	ldr	r1, [r7, #24]
 80037f6:	69fa      	ldr	r2, [r7, #28]
 80037f8:	e841 2300 	strex	r3, r2, [r1]
 80037fc:	617b      	str	r3, [r7, #20]
   return(result);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	2b00      	cmp	r3, #0
 8003802:	d1e3      	bne.n	80037cc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	2202      	movs	r2, #2
 8003808:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800380a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800380e:	4619      	mov	r1, r3
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 f83d 	bl	8003890 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003816:	e023      	b.n	8003860 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003818:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800381c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003820:	2b00      	cmp	r3, #0
 8003822:	d009      	beq.n	8003838 <HAL_UART_IRQHandler+0x4f4>
 8003824:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003828:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800382c:	2b00      	cmp	r3, #0
 800382e:	d003      	beq.n	8003838 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003830:	6878      	ldr	r0, [r7, #4]
 8003832:	f000 f8ea 	bl	8003a0a <UART_Transmit_IT>
    return;
 8003836:	e014      	b.n	8003862 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800383c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003840:	2b00      	cmp	r3, #0
 8003842:	d00e      	beq.n	8003862 <HAL_UART_IRQHandler+0x51e>
 8003844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003848:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800384c:	2b00      	cmp	r3, #0
 800384e:	d008      	beq.n	8003862 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	f000 f92a 	bl	8003aaa <UART_EndTransmit_IT>
    return;
 8003856:	e004      	b.n	8003862 <HAL_UART_IRQHandler+0x51e>
    return;
 8003858:	bf00      	nop
 800385a:	e002      	b.n	8003862 <HAL_UART_IRQHandler+0x51e>
      return;
 800385c:	bf00      	nop
 800385e:	e000      	b.n	8003862 <HAL_UART_IRQHandler+0x51e>
      return;
 8003860:	bf00      	nop
  }
}
 8003862:	37e8      	adds	r7, #232	@ 0xe8
 8003864:	46bd      	mov	sp, r7
 8003866:	bd80      	pop	{r7, pc}

08003868 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
 8003898:	460b      	mov	r3, r1
 800389a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800389c:	bf00      	nop
 800389e:	370c      	adds	r7, #12
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80038a8:	b480      	push	{r7}
 80038aa:	b085      	sub	sp, #20
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	60f8      	str	r0, [r7, #12]
 80038b0:	60b9      	str	r1, [r7, #8]
 80038b2:	4613      	mov	r3, r2
 80038b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	68ba      	ldr	r2, [r7, #8]
 80038ba:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	88fa      	ldrh	r2, [r7, #6]
 80038c0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	88fa      	ldrh	r2, [r7, #6]
 80038c6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	2200      	movs	r2, #0
 80038cc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	2222      	movs	r2, #34	@ 0x22
 80038d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d007      	beq.n	80038ee <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	68da      	ldr	r2, [r3, #12]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80038ec:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	695a      	ldr	r2, [r3, #20]
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f042 0201 	orr.w	r2, r2, #1
 80038fc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	68da      	ldr	r2, [r3, #12]
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f042 0220 	orr.w	r2, r2, #32
 800390c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800390e:	2300      	movs	r3, #0
}
 8003910:	4618      	mov	r0, r3
 8003912:	3714      	adds	r7, #20
 8003914:	46bd      	mov	sp, r7
 8003916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800391a:	4770      	bx	lr

0800391c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800391c:	b480      	push	{r7}
 800391e:	b095      	sub	sp, #84	@ 0x54
 8003920:	af00      	add	r7, sp, #0
 8003922:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	330c      	adds	r3, #12
 800392a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800392c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800392e:	e853 3f00 	ldrex	r3, [r3]
 8003932:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003934:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003936:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800393a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	330c      	adds	r3, #12
 8003942:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003944:	643a      	str	r2, [r7, #64]	@ 0x40
 8003946:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003948:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800394a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800394c:	e841 2300 	strex	r3, r2, [r1]
 8003950:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003952:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003954:	2b00      	cmp	r3, #0
 8003956:	d1e5      	bne.n	8003924 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	3314      	adds	r3, #20
 800395e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003960:	6a3b      	ldr	r3, [r7, #32]
 8003962:	e853 3f00 	ldrex	r3, [r3]
 8003966:	61fb      	str	r3, [r7, #28]
   return(result);
 8003968:	69fb      	ldr	r3, [r7, #28]
 800396a:	f023 0301 	bic.w	r3, r3, #1
 800396e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3314      	adds	r3, #20
 8003976:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003978:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800397a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800397e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e5      	bne.n	8003958 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003990:	2b01      	cmp	r3, #1
 8003992:	d119      	bne.n	80039c8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	330c      	adds	r3, #12
 800399a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	e853 3f00 	ldrex	r3, [r3]
 80039a2:	60bb      	str	r3, [r7, #8]
   return(result);
 80039a4:	68bb      	ldr	r3, [r7, #8]
 80039a6:	f023 0310 	bic.w	r3, r3, #16
 80039aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	330c      	adds	r3, #12
 80039b2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80039b4:	61ba      	str	r2, [r7, #24]
 80039b6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b8:	6979      	ldr	r1, [r7, #20]
 80039ba:	69ba      	ldr	r2, [r7, #24]
 80039bc:	e841 2300 	strex	r3, r2, [r1]
 80039c0:	613b      	str	r3, [r7, #16]
   return(result);
 80039c2:	693b      	ldr	r3, [r7, #16]
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d1e5      	bne.n	8003994 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2220      	movs	r2, #32
 80039cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2200      	movs	r2, #0
 80039d4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80039d6:	bf00      	nop
 80039d8:	3754      	adds	r7, #84	@ 0x54
 80039da:	46bd      	mov	sp, r7
 80039dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e0:	4770      	bx	lr

080039e2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80039e2:	b580      	push	{r7, lr}
 80039e4:	b084      	sub	sp, #16
 80039e6:	af00      	add	r7, sp, #0
 80039e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039ee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2200      	movs	r2, #0
 80039f4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2200      	movs	r2, #0
 80039fa:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80039fc:	68f8      	ldr	r0, [r7, #12]
 80039fe:	f7ff ff3d 	bl	800387c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003a02:	bf00      	nop
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}

08003a0a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003a0a:	b480      	push	{r7}
 8003a0c:	b085      	sub	sp, #20
 8003a0e:	af00      	add	r7, sp, #0
 8003a10:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003a12:	687b      	ldr	r3, [r7, #4]
 8003a14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003a18:	b2db      	uxtb	r3, r3
 8003a1a:	2b21      	cmp	r3, #33	@ 0x21
 8003a1c:	d13e      	bne.n	8003a9c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	689b      	ldr	r3, [r3, #8]
 8003a22:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a26:	d114      	bne.n	8003a52 <UART_Transmit_IT+0x48>
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	691b      	ldr	r3, [r3, #16]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d110      	bne.n	8003a52 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	6a1b      	ldr	r3, [r3, #32]
 8003a34:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	881b      	ldrh	r3, [r3, #0]
 8003a3a:	461a      	mov	r2, r3
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003a44:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	6a1b      	ldr	r3, [r3, #32]
 8003a4a:	1c9a      	adds	r2, r3, #2
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	621a      	str	r2, [r3, #32]
 8003a50:	e008      	b.n	8003a64 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	6a1b      	ldr	r3, [r3, #32]
 8003a56:	1c59      	adds	r1, r3, #1
 8003a58:	687a      	ldr	r2, [r7, #4]
 8003a5a:	6211      	str	r1, [r2, #32]
 8003a5c:	781a      	ldrb	r2, [r3, #0]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003a68:	b29b      	uxth	r3, r3
 8003a6a:	3b01      	subs	r3, #1
 8003a6c:	b29b      	uxth	r3, r3
 8003a6e:	687a      	ldr	r2, [r7, #4]
 8003a70:	4619      	mov	r1, r3
 8003a72:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d10f      	bne.n	8003a98 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	68da      	ldr	r2, [r3, #12]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003a86:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	68da      	ldr	r2, [r3, #12]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a96:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003a98:	2300      	movs	r3, #0
 8003a9a:	e000      	b.n	8003a9e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003a9c:	2302      	movs	r3, #2
  }
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3714      	adds	r7, #20
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa8:	4770      	bx	lr

08003aaa <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003aaa:	b580      	push	{r7, lr}
 8003aac:	b082      	sub	sp, #8
 8003aae:	af00      	add	r7, sp, #0
 8003ab0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68da      	ldr	r2, [r3, #12]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ac0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2220      	movs	r2, #32
 8003ac6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003aca:	6878      	ldr	r0, [r7, #4]
 8003acc:	f7ff fecc 	bl	8003868 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003ad0:	2300      	movs	r3, #0
}
 8003ad2:	4618      	mov	r0, r3
 8003ad4:	3708      	adds	r7, #8
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	bd80      	pop	{r7, pc}

08003ada <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ada:	b580      	push	{r7, lr}
 8003adc:	b08c      	sub	sp, #48	@ 0x30
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b22      	cmp	r3, #34	@ 0x22
 8003aec:	f040 80ae 	bne.w	8003c4c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	689b      	ldr	r3, [r3, #8]
 8003af4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003af8:	d117      	bne.n	8003b2a <UART_Receive_IT+0x50>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d113      	bne.n	8003b2a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003b02:	2300      	movs	r3, #0
 8003b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b0a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	b29b      	uxth	r3, r3
 8003b14:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b18:	b29a      	uxth	r2, r3
 8003b1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b22:	1c9a      	adds	r2, r3, #2
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	629a      	str	r2, [r3, #40]	@ 0x28
 8003b28:	e026      	b.n	8003b78 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b2e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003b30:	2300      	movs	r3, #0
 8003b32:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003b3c:	d007      	beq.n	8003b4e <UART_Receive_IT+0x74>
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d10a      	bne.n	8003b5c <UART_Receive_IT+0x82>
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	691b      	ldr	r3, [r3, #16]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d106      	bne.n	8003b5c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	b2da      	uxtb	r2, r3
 8003b56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b58:	701a      	strb	r2, [r3, #0]
 8003b5a:	e008      	b.n	8003b6e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	685b      	ldr	r3, [r3, #4]
 8003b62:	b2db      	uxtb	r3, r3
 8003b64:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003b68:	b2da      	uxtb	r2, r3
 8003b6a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003b6c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b72:	1c5a      	adds	r2, r3, #1
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003b7c:	b29b      	uxth	r3, r3
 8003b7e:	3b01      	subs	r3, #1
 8003b80:	b29b      	uxth	r3, r3
 8003b82:	687a      	ldr	r2, [r7, #4]
 8003b84:	4619      	mov	r1, r3
 8003b86:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d15d      	bne.n	8003c48 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68da      	ldr	r2, [r3, #12]
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	f022 0220 	bic.w	r2, r2, #32
 8003b9a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68da      	ldr	r2, [r3, #12]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003baa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	695a      	ldr	r2, [r3, #20]
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f022 0201 	bic.w	r2, r2, #1
 8003bba:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2220      	movs	r2, #32
 8003bc0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003bce:	2b01      	cmp	r3, #1
 8003bd0:	d135      	bne.n	8003c3e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	330c      	adds	r3, #12
 8003bde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003be0:	697b      	ldr	r3, [r7, #20]
 8003be2:	e853 3f00 	ldrex	r3, [r3]
 8003be6:	613b      	str	r3, [r7, #16]
   return(result);
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	f023 0310 	bic.w	r3, r3, #16
 8003bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	330c      	adds	r3, #12
 8003bf6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003bf8:	623a      	str	r2, [r7, #32]
 8003bfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bfc:	69f9      	ldr	r1, [r7, #28]
 8003bfe:	6a3a      	ldr	r2, [r7, #32]
 8003c00:	e841 2300 	strex	r3, r2, [r1]
 8003c04:	61bb      	str	r3, [r7, #24]
   return(result);
 8003c06:	69bb      	ldr	r3, [r7, #24]
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	d1e5      	bne.n	8003bd8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f003 0310 	and.w	r3, r3, #16
 8003c16:	2b10      	cmp	r3, #16
 8003c18:	d10a      	bne.n	8003c30 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	60fb      	str	r3, [r7, #12]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	685b      	ldr	r3, [r3, #4]
 8003c2c:	60fb      	str	r3, [r7, #12]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003c34:	4619      	mov	r1, r3
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	f7ff fe2a 	bl	8003890 <HAL_UARTEx_RxEventCallback>
 8003c3c:	e002      	b.n	8003c44 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f7fc fe76 	bl	8000930 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003c44:	2300      	movs	r3, #0
 8003c46:	e002      	b.n	8003c4e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8003c48:	2300      	movs	r3, #0
 8003c4a:	e000      	b.n	8003c4e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003c4c:	2302      	movs	r3, #2
  }
}
 8003c4e:	4618      	mov	r0, r3
 8003c50:	3730      	adds	r7, #48	@ 0x30
 8003c52:	46bd      	mov	sp, r7
 8003c54:	bd80      	pop	{r7, pc}
	...

08003c58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c5c:	b0c0      	sub	sp, #256	@ 0x100
 8003c5e:	af00      	add	r7, sp, #0
 8003c60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c74:	68d9      	ldr	r1, [r3, #12]
 8003c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c7a:	681a      	ldr	r2, [r3, #0]
 8003c7c:	ea40 0301 	orr.w	r3, r0, r1
 8003c80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c86:	689a      	ldr	r2, [r3, #8]
 8003c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	431a      	orrs	r2, r3
 8003c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c94:	695b      	ldr	r3, [r3, #20]
 8003c96:	431a      	orrs	r2, r3
 8003c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003c9c:	69db      	ldr	r3, [r3, #28]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	68db      	ldr	r3, [r3, #12]
 8003cac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003cb0:	f021 010c 	bic.w	r1, r1, #12
 8003cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd2:	6999      	ldr	r1, [r3, #24]
 8003cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cd8:	681a      	ldr	r2, [r3, #0]
 8003cda:	ea40 0301 	orr.w	r3, r0, r1
 8003cde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ce4:	681a      	ldr	r2, [r3, #0]
 8003ce6:	4b8f      	ldr	r3, [pc, #572]	@ (8003f24 <UART_SetConfig+0x2cc>)
 8003ce8:	429a      	cmp	r2, r3
 8003cea:	d005      	beq.n	8003cf8 <UART_SetConfig+0xa0>
 8003cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	4b8d      	ldr	r3, [pc, #564]	@ (8003f28 <UART_SetConfig+0x2d0>)
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d104      	bne.n	8003d02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003cf8:	f7fd fde8 	bl	80018cc <HAL_RCC_GetPCLK2Freq>
 8003cfc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003d00:	e003      	b.n	8003d0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003d02:	f7fd fdcf 	bl	80018a4 <HAL_RCC_GetPCLK1Freq>
 8003d06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d0e:	69db      	ldr	r3, [r3, #28]
 8003d10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003d14:	f040 810c 	bne.w	8003f30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003d1c:	2200      	movs	r2, #0
 8003d1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003d22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003d26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003d2a:	4622      	mov	r2, r4
 8003d2c:	462b      	mov	r3, r5
 8003d2e:	1891      	adds	r1, r2, r2
 8003d30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003d32:	415b      	adcs	r3, r3
 8003d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003d36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003d3a:	4621      	mov	r1, r4
 8003d3c:	eb12 0801 	adds.w	r8, r2, r1
 8003d40:	4629      	mov	r1, r5
 8003d42:	eb43 0901 	adc.w	r9, r3, r1
 8003d46:	f04f 0200 	mov.w	r2, #0
 8003d4a:	f04f 0300 	mov.w	r3, #0
 8003d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d5a:	4690      	mov	r8, r2
 8003d5c:	4699      	mov	r9, r3
 8003d5e:	4623      	mov	r3, r4
 8003d60:	eb18 0303 	adds.w	r3, r8, r3
 8003d64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003d68:	462b      	mov	r3, r5
 8003d6a:	eb49 0303 	adc.w	r3, r9, r3
 8003d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003d7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003d82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003d86:	460b      	mov	r3, r1
 8003d88:	18db      	adds	r3, r3, r3
 8003d8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	eb42 0303 	adc.w	r3, r2, r3
 8003d92:	657b      	str	r3, [r7, #84]	@ 0x54
 8003d94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003d98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003d9c:	f7fc fa90 	bl	80002c0 <__aeabi_uldivmod>
 8003da0:	4602      	mov	r2, r0
 8003da2:	460b      	mov	r3, r1
 8003da4:	4b61      	ldr	r3, [pc, #388]	@ (8003f2c <UART_SetConfig+0x2d4>)
 8003da6:	fba3 2302 	umull	r2, r3, r3, r2
 8003daa:	095b      	lsrs	r3, r3, #5
 8003dac:	011c      	lsls	r4, r3, #4
 8003dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003db2:	2200      	movs	r2, #0
 8003db4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003db8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003dbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003dc0:	4642      	mov	r2, r8
 8003dc2:	464b      	mov	r3, r9
 8003dc4:	1891      	adds	r1, r2, r2
 8003dc6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003dc8:	415b      	adcs	r3, r3
 8003dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003dcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003dd0:	4641      	mov	r1, r8
 8003dd2:	eb12 0a01 	adds.w	sl, r2, r1
 8003dd6:	4649      	mov	r1, r9
 8003dd8:	eb43 0b01 	adc.w	fp, r3, r1
 8003ddc:	f04f 0200 	mov.w	r2, #0
 8003de0:	f04f 0300 	mov.w	r3, #0
 8003de4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003de8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003dec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003df0:	4692      	mov	sl, r2
 8003df2:	469b      	mov	fp, r3
 8003df4:	4643      	mov	r3, r8
 8003df6:	eb1a 0303 	adds.w	r3, sl, r3
 8003dfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003dfe:	464b      	mov	r3, r9
 8003e00:	eb4b 0303 	adc.w	r3, fp, r3
 8003e04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e0c:	685b      	ldr	r3, [r3, #4]
 8003e0e:	2200      	movs	r2, #0
 8003e10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003e14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003e18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003e1c:	460b      	mov	r3, r1
 8003e1e:	18db      	adds	r3, r3, r3
 8003e20:	643b      	str	r3, [r7, #64]	@ 0x40
 8003e22:	4613      	mov	r3, r2
 8003e24:	eb42 0303 	adc.w	r3, r2, r3
 8003e28:	647b      	str	r3, [r7, #68]	@ 0x44
 8003e2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003e2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003e32:	f7fc fa45 	bl	80002c0 <__aeabi_uldivmod>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8003f2c <UART_SetConfig+0x2d4>)
 8003e3e:	fba3 2301 	umull	r2, r3, r3, r1
 8003e42:	095b      	lsrs	r3, r3, #5
 8003e44:	2264      	movs	r2, #100	@ 0x64
 8003e46:	fb02 f303 	mul.w	r3, r2, r3
 8003e4a:	1acb      	subs	r3, r1, r3
 8003e4c:	00db      	lsls	r3, r3, #3
 8003e4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003e52:	4b36      	ldr	r3, [pc, #216]	@ (8003f2c <UART_SetConfig+0x2d4>)
 8003e54:	fba3 2302 	umull	r2, r3, r3, r2
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	005b      	lsls	r3, r3, #1
 8003e5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003e60:	441c      	add	r4, r3
 8003e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e66:	2200      	movs	r2, #0
 8003e68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003e6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003e70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003e74:	4642      	mov	r2, r8
 8003e76:	464b      	mov	r3, r9
 8003e78:	1891      	adds	r1, r2, r2
 8003e7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003e7c:	415b      	adcs	r3, r3
 8003e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003e80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003e84:	4641      	mov	r1, r8
 8003e86:	1851      	adds	r1, r2, r1
 8003e88:	6339      	str	r1, [r7, #48]	@ 0x30
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	414b      	adcs	r3, r1
 8003e8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8003e90:	f04f 0200 	mov.w	r2, #0
 8003e94:	f04f 0300 	mov.w	r3, #0
 8003e98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003e9c:	4659      	mov	r1, fp
 8003e9e:	00cb      	lsls	r3, r1, #3
 8003ea0:	4651      	mov	r1, sl
 8003ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003ea6:	4651      	mov	r1, sl
 8003ea8:	00ca      	lsls	r2, r1, #3
 8003eaa:	4610      	mov	r0, r2
 8003eac:	4619      	mov	r1, r3
 8003eae:	4603      	mov	r3, r0
 8003eb0:	4642      	mov	r2, r8
 8003eb2:	189b      	adds	r3, r3, r2
 8003eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003eb8:	464b      	mov	r3, r9
 8003eba:	460a      	mov	r2, r1
 8003ebc:	eb42 0303 	adc.w	r3, r2, r3
 8003ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	2200      	movs	r2, #0
 8003ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003ed0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003ed4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003ed8:	460b      	mov	r3, r1
 8003eda:	18db      	adds	r3, r3, r3
 8003edc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003ede:	4613      	mov	r3, r2
 8003ee0:	eb42 0303 	adc.w	r3, r2, r3
 8003ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003eea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003eee:	f7fc f9e7 	bl	80002c0 <__aeabi_uldivmod>
 8003ef2:	4602      	mov	r2, r0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8003f2c <UART_SetConfig+0x2d4>)
 8003ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8003efc:	095b      	lsrs	r3, r3, #5
 8003efe:	2164      	movs	r1, #100	@ 0x64
 8003f00:	fb01 f303 	mul.w	r3, r1, r3
 8003f04:	1ad3      	subs	r3, r2, r3
 8003f06:	00db      	lsls	r3, r3, #3
 8003f08:	3332      	adds	r3, #50	@ 0x32
 8003f0a:	4a08      	ldr	r2, [pc, #32]	@ (8003f2c <UART_SetConfig+0x2d4>)
 8003f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f10:	095b      	lsrs	r3, r3, #5
 8003f12:	f003 0207 	and.w	r2, r3, #7
 8003f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	4422      	add	r2, r4
 8003f1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003f20:	e106      	b.n	8004130 <UART_SetConfig+0x4d8>
 8003f22:	bf00      	nop
 8003f24:	40011000 	.word	0x40011000
 8003f28:	40011400 	.word	0x40011400
 8003f2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f34:	2200      	movs	r2, #0
 8003f36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8003f3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8003f3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8003f42:	4642      	mov	r2, r8
 8003f44:	464b      	mov	r3, r9
 8003f46:	1891      	adds	r1, r2, r2
 8003f48:	6239      	str	r1, [r7, #32]
 8003f4a:	415b      	adcs	r3, r3
 8003f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8003f4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003f52:	4641      	mov	r1, r8
 8003f54:	1854      	adds	r4, r2, r1
 8003f56:	4649      	mov	r1, r9
 8003f58:	eb43 0501 	adc.w	r5, r3, r1
 8003f5c:	f04f 0200 	mov.w	r2, #0
 8003f60:	f04f 0300 	mov.w	r3, #0
 8003f64:	00eb      	lsls	r3, r5, #3
 8003f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003f6a:	00e2      	lsls	r2, r4, #3
 8003f6c:	4614      	mov	r4, r2
 8003f6e:	461d      	mov	r5, r3
 8003f70:	4643      	mov	r3, r8
 8003f72:	18e3      	adds	r3, r4, r3
 8003f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8003f78:	464b      	mov	r3, r9
 8003f7a:	eb45 0303 	adc.w	r3, r5, r3
 8003f7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8003f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2200      	movs	r2, #0
 8003f8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003f8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003f92:	f04f 0200 	mov.w	r2, #0
 8003f96:	f04f 0300 	mov.w	r3, #0
 8003f9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8003f9e:	4629      	mov	r1, r5
 8003fa0:	008b      	lsls	r3, r1, #2
 8003fa2:	4621      	mov	r1, r4
 8003fa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003fa8:	4621      	mov	r1, r4
 8003faa:	008a      	lsls	r2, r1, #2
 8003fac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8003fb0:	f7fc f986 	bl	80002c0 <__aeabi_uldivmod>
 8003fb4:	4602      	mov	r2, r0
 8003fb6:	460b      	mov	r3, r1
 8003fb8:	4b60      	ldr	r3, [pc, #384]	@ (800413c <UART_SetConfig+0x4e4>)
 8003fba:	fba3 2302 	umull	r2, r3, r3, r2
 8003fbe:	095b      	lsrs	r3, r3, #5
 8003fc0:	011c      	lsls	r4, r3, #4
 8003fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fc6:	2200      	movs	r2, #0
 8003fc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8003fcc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8003fd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8003fd4:	4642      	mov	r2, r8
 8003fd6:	464b      	mov	r3, r9
 8003fd8:	1891      	adds	r1, r2, r2
 8003fda:	61b9      	str	r1, [r7, #24]
 8003fdc:	415b      	adcs	r3, r3
 8003fde:	61fb      	str	r3, [r7, #28]
 8003fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003fe4:	4641      	mov	r1, r8
 8003fe6:	1851      	adds	r1, r2, r1
 8003fe8:	6139      	str	r1, [r7, #16]
 8003fea:	4649      	mov	r1, r9
 8003fec:	414b      	adcs	r3, r1
 8003fee:	617b      	str	r3, [r7, #20]
 8003ff0:	f04f 0200 	mov.w	r2, #0
 8003ff4:	f04f 0300 	mov.w	r3, #0
 8003ff8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003ffc:	4659      	mov	r1, fp
 8003ffe:	00cb      	lsls	r3, r1, #3
 8004000:	4651      	mov	r1, sl
 8004002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004006:	4651      	mov	r1, sl
 8004008:	00ca      	lsls	r2, r1, #3
 800400a:	4610      	mov	r0, r2
 800400c:	4619      	mov	r1, r3
 800400e:	4603      	mov	r3, r0
 8004010:	4642      	mov	r2, r8
 8004012:	189b      	adds	r3, r3, r2
 8004014:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004018:	464b      	mov	r3, r9
 800401a:	460a      	mov	r2, r1
 800401c:	eb42 0303 	adc.w	r3, r2, r3
 8004020:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004028:	685b      	ldr	r3, [r3, #4]
 800402a:	2200      	movs	r2, #0
 800402c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800402e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004030:	f04f 0200 	mov.w	r2, #0
 8004034:	f04f 0300 	mov.w	r3, #0
 8004038:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800403c:	4649      	mov	r1, r9
 800403e:	008b      	lsls	r3, r1, #2
 8004040:	4641      	mov	r1, r8
 8004042:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004046:	4641      	mov	r1, r8
 8004048:	008a      	lsls	r2, r1, #2
 800404a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800404e:	f7fc f937 	bl	80002c0 <__aeabi_uldivmod>
 8004052:	4602      	mov	r2, r0
 8004054:	460b      	mov	r3, r1
 8004056:	4611      	mov	r1, r2
 8004058:	4b38      	ldr	r3, [pc, #224]	@ (800413c <UART_SetConfig+0x4e4>)
 800405a:	fba3 2301 	umull	r2, r3, r3, r1
 800405e:	095b      	lsrs	r3, r3, #5
 8004060:	2264      	movs	r2, #100	@ 0x64
 8004062:	fb02 f303 	mul.w	r3, r2, r3
 8004066:	1acb      	subs	r3, r1, r3
 8004068:	011b      	lsls	r3, r3, #4
 800406a:	3332      	adds	r3, #50	@ 0x32
 800406c:	4a33      	ldr	r2, [pc, #204]	@ (800413c <UART_SetConfig+0x4e4>)
 800406e:	fba2 2303 	umull	r2, r3, r2, r3
 8004072:	095b      	lsrs	r3, r3, #5
 8004074:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004078:	441c      	add	r4, r3
 800407a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800407e:	2200      	movs	r2, #0
 8004080:	673b      	str	r3, [r7, #112]	@ 0x70
 8004082:	677a      	str	r2, [r7, #116]	@ 0x74
 8004084:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004088:	4642      	mov	r2, r8
 800408a:	464b      	mov	r3, r9
 800408c:	1891      	adds	r1, r2, r2
 800408e:	60b9      	str	r1, [r7, #8]
 8004090:	415b      	adcs	r3, r3
 8004092:	60fb      	str	r3, [r7, #12]
 8004094:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004098:	4641      	mov	r1, r8
 800409a:	1851      	adds	r1, r2, r1
 800409c:	6039      	str	r1, [r7, #0]
 800409e:	4649      	mov	r1, r9
 80040a0:	414b      	adcs	r3, r1
 80040a2:	607b      	str	r3, [r7, #4]
 80040a4:	f04f 0200 	mov.w	r2, #0
 80040a8:	f04f 0300 	mov.w	r3, #0
 80040ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80040b0:	4659      	mov	r1, fp
 80040b2:	00cb      	lsls	r3, r1, #3
 80040b4:	4651      	mov	r1, sl
 80040b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040ba:	4651      	mov	r1, sl
 80040bc:	00ca      	lsls	r2, r1, #3
 80040be:	4610      	mov	r0, r2
 80040c0:	4619      	mov	r1, r3
 80040c2:	4603      	mov	r3, r0
 80040c4:	4642      	mov	r2, r8
 80040c6:	189b      	adds	r3, r3, r2
 80040c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80040ca:	464b      	mov	r3, r9
 80040cc:	460a      	mov	r2, r1
 80040ce:	eb42 0303 	adc.w	r3, r2, r3
 80040d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80040d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040d8:	685b      	ldr	r3, [r3, #4]
 80040da:	2200      	movs	r2, #0
 80040dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80040de:	667a      	str	r2, [r7, #100]	@ 0x64
 80040e0:	f04f 0200 	mov.w	r2, #0
 80040e4:	f04f 0300 	mov.w	r3, #0
 80040e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80040ec:	4649      	mov	r1, r9
 80040ee:	008b      	lsls	r3, r1, #2
 80040f0:	4641      	mov	r1, r8
 80040f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040f6:	4641      	mov	r1, r8
 80040f8:	008a      	lsls	r2, r1, #2
 80040fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80040fe:	f7fc f8df 	bl	80002c0 <__aeabi_uldivmod>
 8004102:	4602      	mov	r2, r0
 8004104:	460b      	mov	r3, r1
 8004106:	4b0d      	ldr	r3, [pc, #52]	@ (800413c <UART_SetConfig+0x4e4>)
 8004108:	fba3 1302 	umull	r1, r3, r3, r2
 800410c:	095b      	lsrs	r3, r3, #5
 800410e:	2164      	movs	r1, #100	@ 0x64
 8004110:	fb01 f303 	mul.w	r3, r1, r3
 8004114:	1ad3      	subs	r3, r2, r3
 8004116:	011b      	lsls	r3, r3, #4
 8004118:	3332      	adds	r3, #50	@ 0x32
 800411a:	4a08      	ldr	r2, [pc, #32]	@ (800413c <UART_SetConfig+0x4e4>)
 800411c:	fba2 2303 	umull	r2, r3, r2, r3
 8004120:	095b      	lsrs	r3, r3, #5
 8004122:	f003 020f 	and.w	r2, r3, #15
 8004126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4422      	add	r2, r4
 800412e:	609a      	str	r2, [r3, #8]
}
 8004130:	bf00      	nop
 8004132:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004136:	46bd      	mov	sp, r7
 8004138:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800413c:	51eb851f 	.word	0x51eb851f

08004140 <siscanf>:
 8004140:	b40e      	push	{r1, r2, r3}
 8004142:	b530      	push	{r4, r5, lr}
 8004144:	b09c      	sub	sp, #112	@ 0x70
 8004146:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004148:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800414c:	f854 5b04 	ldr.w	r5, [r4], #4
 8004150:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004154:	9002      	str	r0, [sp, #8]
 8004156:	9006      	str	r0, [sp, #24]
 8004158:	f7fc f85a 	bl	8000210 <strlen>
 800415c:	4b0b      	ldr	r3, [pc, #44]	@ (800418c <siscanf+0x4c>)
 800415e:	9003      	str	r0, [sp, #12]
 8004160:	9007      	str	r0, [sp, #28]
 8004162:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004164:	480a      	ldr	r0, [pc, #40]	@ (8004190 <siscanf+0x50>)
 8004166:	9401      	str	r4, [sp, #4]
 8004168:	2300      	movs	r3, #0
 800416a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800416c:	9314      	str	r3, [sp, #80]	@ 0x50
 800416e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004172:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004176:	462a      	mov	r2, r5
 8004178:	4623      	mov	r3, r4
 800417a:	a902      	add	r1, sp, #8
 800417c:	6800      	ldr	r0, [r0, #0]
 800417e:	f000 f997 	bl	80044b0 <__ssvfiscanf_r>
 8004182:	b01c      	add	sp, #112	@ 0x70
 8004184:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004188:	b003      	add	sp, #12
 800418a:	4770      	bx	lr
 800418c:	08004195 	.word	0x08004195
 8004190:	20000088 	.word	0x20000088

08004194 <__seofread>:
 8004194:	2000      	movs	r0, #0
 8004196:	4770      	bx	lr

08004198 <memset>:
 8004198:	4402      	add	r2, r0
 800419a:	4603      	mov	r3, r0
 800419c:	4293      	cmp	r3, r2
 800419e:	d100      	bne.n	80041a2 <memset+0xa>
 80041a0:	4770      	bx	lr
 80041a2:	f803 1b01 	strb.w	r1, [r3], #1
 80041a6:	e7f9      	b.n	800419c <memset+0x4>

080041a8 <__errno>:
 80041a8:	4b01      	ldr	r3, [pc, #4]	@ (80041b0 <__errno+0x8>)
 80041aa:	6818      	ldr	r0, [r3, #0]
 80041ac:	4770      	bx	lr
 80041ae:	bf00      	nop
 80041b0:	20000088 	.word	0x20000088

080041b4 <__libc_init_array>:
 80041b4:	b570      	push	{r4, r5, r6, lr}
 80041b6:	4d0d      	ldr	r5, [pc, #52]	@ (80041ec <__libc_init_array+0x38>)
 80041b8:	4c0d      	ldr	r4, [pc, #52]	@ (80041f0 <__libc_init_array+0x3c>)
 80041ba:	1b64      	subs	r4, r4, r5
 80041bc:	10a4      	asrs	r4, r4, #2
 80041be:	2600      	movs	r6, #0
 80041c0:	42a6      	cmp	r6, r4
 80041c2:	d109      	bne.n	80041d8 <__libc_init_array+0x24>
 80041c4:	4d0b      	ldr	r5, [pc, #44]	@ (80041f4 <__libc_init_array+0x40>)
 80041c6:	4c0c      	ldr	r4, [pc, #48]	@ (80041f8 <__libc_init_array+0x44>)
 80041c8:	f000 fde8 	bl	8004d9c <_init>
 80041cc:	1b64      	subs	r4, r4, r5
 80041ce:	10a4      	asrs	r4, r4, #2
 80041d0:	2600      	movs	r6, #0
 80041d2:	42a6      	cmp	r6, r4
 80041d4:	d105      	bne.n	80041e2 <__libc_init_array+0x2e>
 80041d6:	bd70      	pop	{r4, r5, r6, pc}
 80041d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80041dc:	4798      	blx	r3
 80041de:	3601      	adds	r6, #1
 80041e0:	e7ee      	b.n	80041c0 <__libc_init_array+0xc>
 80041e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80041e6:	4798      	blx	r3
 80041e8:	3601      	adds	r6, #1
 80041ea:	e7f2      	b.n	80041d2 <__libc_init_array+0x1e>
 80041ec:	08004f0c 	.word	0x08004f0c
 80041f0:	08004f0c 	.word	0x08004f0c
 80041f4:	08004f0c 	.word	0x08004f0c
 80041f8:	08004f10 	.word	0x08004f10

080041fc <__retarget_lock_acquire_recursive>:
 80041fc:	4770      	bx	lr

080041fe <__retarget_lock_release_recursive>:
 80041fe:	4770      	bx	lr

08004200 <strcpy>:
 8004200:	4603      	mov	r3, r0
 8004202:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004206:	f803 2b01 	strb.w	r2, [r3], #1
 800420a:	2a00      	cmp	r2, #0
 800420c:	d1f9      	bne.n	8004202 <strcpy+0x2>
 800420e:	4770      	bx	lr

08004210 <_free_r>:
 8004210:	b538      	push	{r3, r4, r5, lr}
 8004212:	4605      	mov	r5, r0
 8004214:	2900      	cmp	r1, #0
 8004216:	d041      	beq.n	800429c <_free_r+0x8c>
 8004218:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800421c:	1f0c      	subs	r4, r1, #4
 800421e:	2b00      	cmp	r3, #0
 8004220:	bfb8      	it	lt
 8004222:	18e4      	addlt	r4, r4, r3
 8004224:	f000 f8e0 	bl	80043e8 <__malloc_lock>
 8004228:	4a1d      	ldr	r2, [pc, #116]	@ (80042a0 <_free_r+0x90>)
 800422a:	6813      	ldr	r3, [r2, #0]
 800422c:	b933      	cbnz	r3, 800423c <_free_r+0x2c>
 800422e:	6063      	str	r3, [r4, #4]
 8004230:	6014      	str	r4, [r2, #0]
 8004232:	4628      	mov	r0, r5
 8004234:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004238:	f000 b8dc 	b.w	80043f4 <__malloc_unlock>
 800423c:	42a3      	cmp	r3, r4
 800423e:	d908      	bls.n	8004252 <_free_r+0x42>
 8004240:	6820      	ldr	r0, [r4, #0]
 8004242:	1821      	adds	r1, r4, r0
 8004244:	428b      	cmp	r3, r1
 8004246:	bf01      	itttt	eq
 8004248:	6819      	ldreq	r1, [r3, #0]
 800424a:	685b      	ldreq	r3, [r3, #4]
 800424c:	1809      	addeq	r1, r1, r0
 800424e:	6021      	streq	r1, [r4, #0]
 8004250:	e7ed      	b.n	800422e <_free_r+0x1e>
 8004252:	461a      	mov	r2, r3
 8004254:	685b      	ldr	r3, [r3, #4]
 8004256:	b10b      	cbz	r3, 800425c <_free_r+0x4c>
 8004258:	42a3      	cmp	r3, r4
 800425a:	d9fa      	bls.n	8004252 <_free_r+0x42>
 800425c:	6811      	ldr	r1, [r2, #0]
 800425e:	1850      	adds	r0, r2, r1
 8004260:	42a0      	cmp	r0, r4
 8004262:	d10b      	bne.n	800427c <_free_r+0x6c>
 8004264:	6820      	ldr	r0, [r4, #0]
 8004266:	4401      	add	r1, r0
 8004268:	1850      	adds	r0, r2, r1
 800426a:	4283      	cmp	r3, r0
 800426c:	6011      	str	r1, [r2, #0]
 800426e:	d1e0      	bne.n	8004232 <_free_r+0x22>
 8004270:	6818      	ldr	r0, [r3, #0]
 8004272:	685b      	ldr	r3, [r3, #4]
 8004274:	6053      	str	r3, [r2, #4]
 8004276:	4408      	add	r0, r1
 8004278:	6010      	str	r0, [r2, #0]
 800427a:	e7da      	b.n	8004232 <_free_r+0x22>
 800427c:	d902      	bls.n	8004284 <_free_r+0x74>
 800427e:	230c      	movs	r3, #12
 8004280:	602b      	str	r3, [r5, #0]
 8004282:	e7d6      	b.n	8004232 <_free_r+0x22>
 8004284:	6820      	ldr	r0, [r4, #0]
 8004286:	1821      	adds	r1, r4, r0
 8004288:	428b      	cmp	r3, r1
 800428a:	bf04      	itt	eq
 800428c:	6819      	ldreq	r1, [r3, #0]
 800428e:	685b      	ldreq	r3, [r3, #4]
 8004290:	6063      	str	r3, [r4, #4]
 8004292:	bf04      	itt	eq
 8004294:	1809      	addeq	r1, r1, r0
 8004296:	6021      	streq	r1, [r4, #0]
 8004298:	6054      	str	r4, [r2, #4]
 800429a:	e7ca      	b.n	8004232 <_free_r+0x22>
 800429c:	bd38      	pop	{r3, r4, r5, pc}
 800429e:	bf00      	nop
 80042a0:	20000354 	.word	0x20000354

080042a4 <sbrk_aligned>:
 80042a4:	b570      	push	{r4, r5, r6, lr}
 80042a6:	4e0f      	ldr	r6, [pc, #60]	@ (80042e4 <sbrk_aligned+0x40>)
 80042a8:	460c      	mov	r4, r1
 80042aa:	6831      	ldr	r1, [r6, #0]
 80042ac:	4605      	mov	r5, r0
 80042ae:	b911      	cbnz	r1, 80042b6 <sbrk_aligned+0x12>
 80042b0:	f000 fc34 	bl	8004b1c <_sbrk_r>
 80042b4:	6030      	str	r0, [r6, #0]
 80042b6:	4621      	mov	r1, r4
 80042b8:	4628      	mov	r0, r5
 80042ba:	f000 fc2f 	bl	8004b1c <_sbrk_r>
 80042be:	1c43      	adds	r3, r0, #1
 80042c0:	d103      	bne.n	80042ca <sbrk_aligned+0x26>
 80042c2:	f04f 34ff 	mov.w	r4, #4294967295
 80042c6:	4620      	mov	r0, r4
 80042c8:	bd70      	pop	{r4, r5, r6, pc}
 80042ca:	1cc4      	adds	r4, r0, #3
 80042cc:	f024 0403 	bic.w	r4, r4, #3
 80042d0:	42a0      	cmp	r0, r4
 80042d2:	d0f8      	beq.n	80042c6 <sbrk_aligned+0x22>
 80042d4:	1a21      	subs	r1, r4, r0
 80042d6:	4628      	mov	r0, r5
 80042d8:	f000 fc20 	bl	8004b1c <_sbrk_r>
 80042dc:	3001      	adds	r0, #1
 80042de:	d1f2      	bne.n	80042c6 <sbrk_aligned+0x22>
 80042e0:	e7ef      	b.n	80042c2 <sbrk_aligned+0x1e>
 80042e2:	bf00      	nop
 80042e4:	20000350 	.word	0x20000350

080042e8 <_malloc_r>:
 80042e8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80042ec:	1ccd      	adds	r5, r1, #3
 80042ee:	f025 0503 	bic.w	r5, r5, #3
 80042f2:	3508      	adds	r5, #8
 80042f4:	2d0c      	cmp	r5, #12
 80042f6:	bf38      	it	cc
 80042f8:	250c      	movcc	r5, #12
 80042fa:	2d00      	cmp	r5, #0
 80042fc:	4606      	mov	r6, r0
 80042fe:	db01      	blt.n	8004304 <_malloc_r+0x1c>
 8004300:	42a9      	cmp	r1, r5
 8004302:	d904      	bls.n	800430e <_malloc_r+0x26>
 8004304:	230c      	movs	r3, #12
 8004306:	6033      	str	r3, [r6, #0]
 8004308:	2000      	movs	r0, #0
 800430a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800430e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80043e4 <_malloc_r+0xfc>
 8004312:	f000 f869 	bl	80043e8 <__malloc_lock>
 8004316:	f8d8 3000 	ldr.w	r3, [r8]
 800431a:	461c      	mov	r4, r3
 800431c:	bb44      	cbnz	r4, 8004370 <_malloc_r+0x88>
 800431e:	4629      	mov	r1, r5
 8004320:	4630      	mov	r0, r6
 8004322:	f7ff ffbf 	bl	80042a4 <sbrk_aligned>
 8004326:	1c43      	adds	r3, r0, #1
 8004328:	4604      	mov	r4, r0
 800432a:	d158      	bne.n	80043de <_malloc_r+0xf6>
 800432c:	f8d8 4000 	ldr.w	r4, [r8]
 8004330:	4627      	mov	r7, r4
 8004332:	2f00      	cmp	r7, #0
 8004334:	d143      	bne.n	80043be <_malloc_r+0xd6>
 8004336:	2c00      	cmp	r4, #0
 8004338:	d04b      	beq.n	80043d2 <_malloc_r+0xea>
 800433a:	6823      	ldr	r3, [r4, #0]
 800433c:	4639      	mov	r1, r7
 800433e:	4630      	mov	r0, r6
 8004340:	eb04 0903 	add.w	r9, r4, r3
 8004344:	f000 fbea 	bl	8004b1c <_sbrk_r>
 8004348:	4581      	cmp	r9, r0
 800434a:	d142      	bne.n	80043d2 <_malloc_r+0xea>
 800434c:	6821      	ldr	r1, [r4, #0]
 800434e:	1a6d      	subs	r5, r5, r1
 8004350:	4629      	mov	r1, r5
 8004352:	4630      	mov	r0, r6
 8004354:	f7ff ffa6 	bl	80042a4 <sbrk_aligned>
 8004358:	3001      	adds	r0, #1
 800435a:	d03a      	beq.n	80043d2 <_malloc_r+0xea>
 800435c:	6823      	ldr	r3, [r4, #0]
 800435e:	442b      	add	r3, r5
 8004360:	6023      	str	r3, [r4, #0]
 8004362:	f8d8 3000 	ldr.w	r3, [r8]
 8004366:	685a      	ldr	r2, [r3, #4]
 8004368:	bb62      	cbnz	r2, 80043c4 <_malloc_r+0xdc>
 800436a:	f8c8 7000 	str.w	r7, [r8]
 800436e:	e00f      	b.n	8004390 <_malloc_r+0xa8>
 8004370:	6822      	ldr	r2, [r4, #0]
 8004372:	1b52      	subs	r2, r2, r5
 8004374:	d420      	bmi.n	80043b8 <_malloc_r+0xd0>
 8004376:	2a0b      	cmp	r2, #11
 8004378:	d917      	bls.n	80043aa <_malloc_r+0xc2>
 800437a:	1961      	adds	r1, r4, r5
 800437c:	42a3      	cmp	r3, r4
 800437e:	6025      	str	r5, [r4, #0]
 8004380:	bf18      	it	ne
 8004382:	6059      	strne	r1, [r3, #4]
 8004384:	6863      	ldr	r3, [r4, #4]
 8004386:	bf08      	it	eq
 8004388:	f8c8 1000 	streq.w	r1, [r8]
 800438c:	5162      	str	r2, [r4, r5]
 800438e:	604b      	str	r3, [r1, #4]
 8004390:	4630      	mov	r0, r6
 8004392:	f000 f82f 	bl	80043f4 <__malloc_unlock>
 8004396:	f104 000b 	add.w	r0, r4, #11
 800439a:	1d23      	adds	r3, r4, #4
 800439c:	f020 0007 	bic.w	r0, r0, #7
 80043a0:	1ac2      	subs	r2, r0, r3
 80043a2:	bf1c      	itt	ne
 80043a4:	1a1b      	subne	r3, r3, r0
 80043a6:	50a3      	strne	r3, [r4, r2]
 80043a8:	e7af      	b.n	800430a <_malloc_r+0x22>
 80043aa:	6862      	ldr	r2, [r4, #4]
 80043ac:	42a3      	cmp	r3, r4
 80043ae:	bf0c      	ite	eq
 80043b0:	f8c8 2000 	streq.w	r2, [r8]
 80043b4:	605a      	strne	r2, [r3, #4]
 80043b6:	e7eb      	b.n	8004390 <_malloc_r+0xa8>
 80043b8:	4623      	mov	r3, r4
 80043ba:	6864      	ldr	r4, [r4, #4]
 80043bc:	e7ae      	b.n	800431c <_malloc_r+0x34>
 80043be:	463c      	mov	r4, r7
 80043c0:	687f      	ldr	r7, [r7, #4]
 80043c2:	e7b6      	b.n	8004332 <_malloc_r+0x4a>
 80043c4:	461a      	mov	r2, r3
 80043c6:	685b      	ldr	r3, [r3, #4]
 80043c8:	42a3      	cmp	r3, r4
 80043ca:	d1fb      	bne.n	80043c4 <_malloc_r+0xdc>
 80043cc:	2300      	movs	r3, #0
 80043ce:	6053      	str	r3, [r2, #4]
 80043d0:	e7de      	b.n	8004390 <_malloc_r+0xa8>
 80043d2:	230c      	movs	r3, #12
 80043d4:	6033      	str	r3, [r6, #0]
 80043d6:	4630      	mov	r0, r6
 80043d8:	f000 f80c 	bl	80043f4 <__malloc_unlock>
 80043dc:	e794      	b.n	8004308 <_malloc_r+0x20>
 80043de:	6005      	str	r5, [r0, #0]
 80043e0:	e7d6      	b.n	8004390 <_malloc_r+0xa8>
 80043e2:	bf00      	nop
 80043e4:	20000354 	.word	0x20000354

080043e8 <__malloc_lock>:
 80043e8:	4801      	ldr	r0, [pc, #4]	@ (80043f0 <__malloc_lock+0x8>)
 80043ea:	f7ff bf07 	b.w	80041fc <__retarget_lock_acquire_recursive>
 80043ee:	bf00      	nop
 80043f0:	2000034c 	.word	0x2000034c

080043f4 <__malloc_unlock>:
 80043f4:	4801      	ldr	r0, [pc, #4]	@ (80043fc <__malloc_unlock+0x8>)
 80043f6:	f7ff bf02 	b.w	80041fe <__retarget_lock_release_recursive>
 80043fa:	bf00      	nop
 80043fc:	2000034c 	.word	0x2000034c

08004400 <_sungetc_r>:
 8004400:	b538      	push	{r3, r4, r5, lr}
 8004402:	1c4b      	adds	r3, r1, #1
 8004404:	4614      	mov	r4, r2
 8004406:	d103      	bne.n	8004410 <_sungetc_r+0x10>
 8004408:	f04f 35ff 	mov.w	r5, #4294967295
 800440c:	4628      	mov	r0, r5
 800440e:	bd38      	pop	{r3, r4, r5, pc}
 8004410:	8993      	ldrh	r3, [r2, #12]
 8004412:	f023 0320 	bic.w	r3, r3, #32
 8004416:	8193      	strh	r3, [r2, #12]
 8004418:	6853      	ldr	r3, [r2, #4]
 800441a:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800441c:	b2cd      	uxtb	r5, r1
 800441e:	b18a      	cbz	r2, 8004444 <_sungetc_r+0x44>
 8004420:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004422:	429a      	cmp	r2, r3
 8004424:	dd08      	ble.n	8004438 <_sungetc_r+0x38>
 8004426:	6823      	ldr	r3, [r4, #0]
 8004428:	1e5a      	subs	r2, r3, #1
 800442a:	6022      	str	r2, [r4, #0]
 800442c:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004430:	6863      	ldr	r3, [r4, #4]
 8004432:	3301      	adds	r3, #1
 8004434:	6063      	str	r3, [r4, #4]
 8004436:	e7e9      	b.n	800440c <_sungetc_r+0xc>
 8004438:	4621      	mov	r1, r4
 800443a:	f000 fb34 	bl	8004aa6 <__submore>
 800443e:	2800      	cmp	r0, #0
 8004440:	d0f1      	beq.n	8004426 <_sungetc_r+0x26>
 8004442:	e7e1      	b.n	8004408 <_sungetc_r+0x8>
 8004444:	6921      	ldr	r1, [r4, #16]
 8004446:	6822      	ldr	r2, [r4, #0]
 8004448:	b141      	cbz	r1, 800445c <_sungetc_r+0x5c>
 800444a:	4291      	cmp	r1, r2
 800444c:	d206      	bcs.n	800445c <_sungetc_r+0x5c>
 800444e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8004452:	42a9      	cmp	r1, r5
 8004454:	d102      	bne.n	800445c <_sungetc_r+0x5c>
 8004456:	3a01      	subs	r2, #1
 8004458:	6022      	str	r2, [r4, #0]
 800445a:	e7ea      	b.n	8004432 <_sungetc_r+0x32>
 800445c:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004460:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004464:	6363      	str	r3, [r4, #52]	@ 0x34
 8004466:	2303      	movs	r3, #3
 8004468:	63a3      	str	r3, [r4, #56]	@ 0x38
 800446a:	4623      	mov	r3, r4
 800446c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004470:	6023      	str	r3, [r4, #0]
 8004472:	2301      	movs	r3, #1
 8004474:	e7de      	b.n	8004434 <_sungetc_r+0x34>

08004476 <__ssrefill_r>:
 8004476:	b510      	push	{r4, lr}
 8004478:	460c      	mov	r4, r1
 800447a:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800447c:	b169      	cbz	r1, 800449a <__ssrefill_r+0x24>
 800447e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004482:	4299      	cmp	r1, r3
 8004484:	d001      	beq.n	800448a <__ssrefill_r+0x14>
 8004486:	f7ff fec3 	bl	8004210 <_free_r>
 800448a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800448c:	6063      	str	r3, [r4, #4]
 800448e:	2000      	movs	r0, #0
 8004490:	6360      	str	r0, [r4, #52]	@ 0x34
 8004492:	b113      	cbz	r3, 800449a <__ssrefill_r+0x24>
 8004494:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004496:	6023      	str	r3, [r4, #0]
 8004498:	bd10      	pop	{r4, pc}
 800449a:	6923      	ldr	r3, [r4, #16]
 800449c:	6023      	str	r3, [r4, #0]
 800449e:	2300      	movs	r3, #0
 80044a0:	6063      	str	r3, [r4, #4]
 80044a2:	89a3      	ldrh	r3, [r4, #12]
 80044a4:	f043 0320 	orr.w	r3, r3, #32
 80044a8:	81a3      	strh	r3, [r4, #12]
 80044aa:	f04f 30ff 	mov.w	r0, #4294967295
 80044ae:	e7f3      	b.n	8004498 <__ssrefill_r+0x22>

080044b0 <__ssvfiscanf_r>:
 80044b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80044b4:	460c      	mov	r4, r1
 80044b6:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80044ba:	2100      	movs	r1, #0
 80044bc:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80044c0:	49a5      	ldr	r1, [pc, #660]	@ (8004758 <__ssvfiscanf_r+0x2a8>)
 80044c2:	91a0      	str	r1, [sp, #640]	@ 0x280
 80044c4:	f10d 0804 	add.w	r8, sp, #4
 80044c8:	49a4      	ldr	r1, [pc, #656]	@ (800475c <__ssvfiscanf_r+0x2ac>)
 80044ca:	4fa5      	ldr	r7, [pc, #660]	@ (8004760 <__ssvfiscanf_r+0x2b0>)
 80044cc:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80044d0:	4606      	mov	r6, r0
 80044d2:	91a1      	str	r1, [sp, #644]	@ 0x284
 80044d4:	9300      	str	r3, [sp, #0]
 80044d6:	7813      	ldrb	r3, [r2, #0]
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 8158 	beq.w	800478e <__ssvfiscanf_r+0x2de>
 80044de:	5cf9      	ldrb	r1, [r7, r3]
 80044e0:	f011 0108 	ands.w	r1, r1, #8
 80044e4:	f102 0501 	add.w	r5, r2, #1
 80044e8:	d019      	beq.n	800451e <__ssvfiscanf_r+0x6e>
 80044ea:	6863      	ldr	r3, [r4, #4]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	dd0f      	ble.n	8004510 <__ssvfiscanf_r+0x60>
 80044f0:	6823      	ldr	r3, [r4, #0]
 80044f2:	781a      	ldrb	r2, [r3, #0]
 80044f4:	5cba      	ldrb	r2, [r7, r2]
 80044f6:	0712      	lsls	r2, r2, #28
 80044f8:	d401      	bmi.n	80044fe <__ssvfiscanf_r+0x4e>
 80044fa:	462a      	mov	r2, r5
 80044fc:	e7eb      	b.n	80044d6 <__ssvfiscanf_r+0x26>
 80044fe:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004500:	3201      	adds	r2, #1
 8004502:	9245      	str	r2, [sp, #276]	@ 0x114
 8004504:	6862      	ldr	r2, [r4, #4]
 8004506:	3301      	adds	r3, #1
 8004508:	3a01      	subs	r2, #1
 800450a:	6062      	str	r2, [r4, #4]
 800450c:	6023      	str	r3, [r4, #0]
 800450e:	e7ec      	b.n	80044ea <__ssvfiscanf_r+0x3a>
 8004510:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004512:	4621      	mov	r1, r4
 8004514:	4630      	mov	r0, r6
 8004516:	4798      	blx	r3
 8004518:	2800      	cmp	r0, #0
 800451a:	d0e9      	beq.n	80044f0 <__ssvfiscanf_r+0x40>
 800451c:	e7ed      	b.n	80044fa <__ssvfiscanf_r+0x4a>
 800451e:	2b25      	cmp	r3, #37	@ 0x25
 8004520:	d012      	beq.n	8004548 <__ssvfiscanf_r+0x98>
 8004522:	4699      	mov	r9, r3
 8004524:	6863      	ldr	r3, [r4, #4]
 8004526:	2b00      	cmp	r3, #0
 8004528:	f340 8093 	ble.w	8004652 <__ssvfiscanf_r+0x1a2>
 800452c:	6822      	ldr	r2, [r4, #0]
 800452e:	7813      	ldrb	r3, [r2, #0]
 8004530:	454b      	cmp	r3, r9
 8004532:	f040 812c 	bne.w	800478e <__ssvfiscanf_r+0x2de>
 8004536:	6863      	ldr	r3, [r4, #4]
 8004538:	3b01      	subs	r3, #1
 800453a:	6063      	str	r3, [r4, #4]
 800453c:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800453e:	3201      	adds	r2, #1
 8004540:	3301      	adds	r3, #1
 8004542:	6022      	str	r2, [r4, #0]
 8004544:	9345      	str	r3, [sp, #276]	@ 0x114
 8004546:	e7d8      	b.n	80044fa <__ssvfiscanf_r+0x4a>
 8004548:	9141      	str	r1, [sp, #260]	@ 0x104
 800454a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800454c:	7853      	ldrb	r3, [r2, #1]
 800454e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004550:	bf02      	ittt	eq
 8004552:	2310      	moveq	r3, #16
 8004554:	1c95      	addeq	r5, r2, #2
 8004556:	9341      	streq	r3, [sp, #260]	@ 0x104
 8004558:	220a      	movs	r2, #10
 800455a:	46a9      	mov	r9, r5
 800455c:	f819 1b01 	ldrb.w	r1, [r9], #1
 8004560:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8004564:	2b09      	cmp	r3, #9
 8004566:	d91e      	bls.n	80045a6 <__ssvfiscanf_r+0xf6>
 8004568:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8004764 <__ssvfiscanf_r+0x2b4>
 800456c:	2203      	movs	r2, #3
 800456e:	4650      	mov	r0, sl
 8004570:	f7fb fe56 	bl	8000220 <memchr>
 8004574:	b138      	cbz	r0, 8004586 <__ssvfiscanf_r+0xd6>
 8004576:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004578:	eba0 000a 	sub.w	r0, r0, sl
 800457c:	2301      	movs	r3, #1
 800457e:	4083      	lsls	r3, r0
 8004580:	4313      	orrs	r3, r2
 8004582:	9341      	str	r3, [sp, #260]	@ 0x104
 8004584:	464d      	mov	r5, r9
 8004586:	f815 3b01 	ldrb.w	r3, [r5], #1
 800458a:	2b78      	cmp	r3, #120	@ 0x78
 800458c:	d806      	bhi.n	800459c <__ssvfiscanf_r+0xec>
 800458e:	2b57      	cmp	r3, #87	@ 0x57
 8004590:	d810      	bhi.n	80045b4 <__ssvfiscanf_r+0x104>
 8004592:	2b25      	cmp	r3, #37	@ 0x25
 8004594:	d0c5      	beq.n	8004522 <__ssvfiscanf_r+0x72>
 8004596:	d857      	bhi.n	8004648 <__ssvfiscanf_r+0x198>
 8004598:	2b00      	cmp	r3, #0
 800459a:	d065      	beq.n	8004668 <__ssvfiscanf_r+0x1b8>
 800459c:	2303      	movs	r3, #3
 800459e:	9347      	str	r3, [sp, #284]	@ 0x11c
 80045a0:	230a      	movs	r3, #10
 80045a2:	9342      	str	r3, [sp, #264]	@ 0x108
 80045a4:	e078      	b.n	8004698 <__ssvfiscanf_r+0x1e8>
 80045a6:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80045a8:	fb02 1103 	mla	r1, r2, r3, r1
 80045ac:	3930      	subs	r1, #48	@ 0x30
 80045ae:	9143      	str	r1, [sp, #268]	@ 0x10c
 80045b0:	464d      	mov	r5, r9
 80045b2:	e7d2      	b.n	800455a <__ssvfiscanf_r+0xaa>
 80045b4:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80045b8:	2a20      	cmp	r2, #32
 80045ba:	d8ef      	bhi.n	800459c <__ssvfiscanf_r+0xec>
 80045bc:	a101      	add	r1, pc, #4	@ (adr r1, 80045c4 <__ssvfiscanf_r+0x114>)
 80045be:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80045c2:	bf00      	nop
 80045c4:	08004677 	.word	0x08004677
 80045c8:	0800459d 	.word	0x0800459d
 80045cc:	0800459d 	.word	0x0800459d
 80045d0:	080046d1 	.word	0x080046d1
 80045d4:	0800459d 	.word	0x0800459d
 80045d8:	0800459d 	.word	0x0800459d
 80045dc:	0800459d 	.word	0x0800459d
 80045e0:	0800459d 	.word	0x0800459d
 80045e4:	0800459d 	.word	0x0800459d
 80045e8:	0800459d 	.word	0x0800459d
 80045ec:	0800459d 	.word	0x0800459d
 80045f0:	080046e7 	.word	0x080046e7
 80045f4:	080046cd 	.word	0x080046cd
 80045f8:	0800464f 	.word	0x0800464f
 80045fc:	0800464f 	.word	0x0800464f
 8004600:	0800464f 	.word	0x0800464f
 8004604:	0800459d 	.word	0x0800459d
 8004608:	08004689 	.word	0x08004689
 800460c:	0800459d 	.word	0x0800459d
 8004610:	0800459d 	.word	0x0800459d
 8004614:	0800459d 	.word	0x0800459d
 8004618:	0800459d 	.word	0x0800459d
 800461c:	080046f7 	.word	0x080046f7
 8004620:	08004691 	.word	0x08004691
 8004624:	0800466f 	.word	0x0800466f
 8004628:	0800459d 	.word	0x0800459d
 800462c:	0800459d 	.word	0x0800459d
 8004630:	080046f3 	.word	0x080046f3
 8004634:	0800459d 	.word	0x0800459d
 8004638:	080046cd 	.word	0x080046cd
 800463c:	0800459d 	.word	0x0800459d
 8004640:	0800459d 	.word	0x0800459d
 8004644:	08004677 	.word	0x08004677
 8004648:	3b45      	subs	r3, #69	@ 0x45
 800464a:	2b02      	cmp	r3, #2
 800464c:	d8a6      	bhi.n	800459c <__ssvfiscanf_r+0xec>
 800464e:	2305      	movs	r3, #5
 8004650:	e021      	b.n	8004696 <__ssvfiscanf_r+0x1e6>
 8004652:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004654:	4621      	mov	r1, r4
 8004656:	4630      	mov	r0, r6
 8004658:	4798      	blx	r3
 800465a:	2800      	cmp	r0, #0
 800465c:	f43f af66 	beq.w	800452c <__ssvfiscanf_r+0x7c>
 8004660:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004662:	2800      	cmp	r0, #0
 8004664:	f040 808b 	bne.w	800477e <__ssvfiscanf_r+0x2ce>
 8004668:	f04f 30ff 	mov.w	r0, #4294967295
 800466c:	e08b      	b.n	8004786 <__ssvfiscanf_r+0x2d6>
 800466e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004670:	f042 0220 	orr.w	r2, r2, #32
 8004674:	9241      	str	r2, [sp, #260]	@ 0x104
 8004676:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8004678:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800467c:	9241      	str	r2, [sp, #260]	@ 0x104
 800467e:	2210      	movs	r2, #16
 8004680:	2b6e      	cmp	r3, #110	@ 0x6e
 8004682:	9242      	str	r2, [sp, #264]	@ 0x108
 8004684:	d902      	bls.n	800468c <__ssvfiscanf_r+0x1dc>
 8004686:	e005      	b.n	8004694 <__ssvfiscanf_r+0x1e4>
 8004688:	2300      	movs	r3, #0
 800468a:	9342      	str	r3, [sp, #264]	@ 0x108
 800468c:	2303      	movs	r3, #3
 800468e:	e002      	b.n	8004696 <__ssvfiscanf_r+0x1e6>
 8004690:	2308      	movs	r3, #8
 8004692:	9342      	str	r3, [sp, #264]	@ 0x108
 8004694:	2304      	movs	r3, #4
 8004696:	9347      	str	r3, [sp, #284]	@ 0x11c
 8004698:	6863      	ldr	r3, [r4, #4]
 800469a:	2b00      	cmp	r3, #0
 800469c:	dd39      	ble.n	8004712 <__ssvfiscanf_r+0x262>
 800469e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80046a0:	0659      	lsls	r1, r3, #25
 80046a2:	d404      	bmi.n	80046ae <__ssvfiscanf_r+0x1fe>
 80046a4:	6823      	ldr	r3, [r4, #0]
 80046a6:	781a      	ldrb	r2, [r3, #0]
 80046a8:	5cba      	ldrb	r2, [r7, r2]
 80046aa:	0712      	lsls	r2, r2, #28
 80046ac:	d438      	bmi.n	8004720 <__ssvfiscanf_r+0x270>
 80046ae:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80046b0:	2b02      	cmp	r3, #2
 80046b2:	dc47      	bgt.n	8004744 <__ssvfiscanf_r+0x294>
 80046b4:	466b      	mov	r3, sp
 80046b6:	4622      	mov	r2, r4
 80046b8:	a941      	add	r1, sp, #260	@ 0x104
 80046ba:	4630      	mov	r0, r6
 80046bc:	f000 f86c 	bl	8004798 <_scanf_chars>
 80046c0:	2801      	cmp	r0, #1
 80046c2:	d064      	beq.n	800478e <__ssvfiscanf_r+0x2de>
 80046c4:	2802      	cmp	r0, #2
 80046c6:	f47f af18 	bne.w	80044fa <__ssvfiscanf_r+0x4a>
 80046ca:	e7c9      	b.n	8004660 <__ssvfiscanf_r+0x1b0>
 80046cc:	220a      	movs	r2, #10
 80046ce:	e7d7      	b.n	8004680 <__ssvfiscanf_r+0x1d0>
 80046d0:	4629      	mov	r1, r5
 80046d2:	4640      	mov	r0, r8
 80046d4:	f000 f9ae 	bl	8004a34 <__sccl>
 80046d8:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80046da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046de:	9341      	str	r3, [sp, #260]	@ 0x104
 80046e0:	4605      	mov	r5, r0
 80046e2:	2301      	movs	r3, #1
 80046e4:	e7d7      	b.n	8004696 <__ssvfiscanf_r+0x1e6>
 80046e6:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80046e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80046ec:	9341      	str	r3, [sp, #260]	@ 0x104
 80046ee:	2300      	movs	r3, #0
 80046f0:	e7d1      	b.n	8004696 <__ssvfiscanf_r+0x1e6>
 80046f2:	2302      	movs	r3, #2
 80046f4:	e7cf      	b.n	8004696 <__ssvfiscanf_r+0x1e6>
 80046f6:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80046f8:	06c3      	lsls	r3, r0, #27
 80046fa:	f53f aefe 	bmi.w	80044fa <__ssvfiscanf_r+0x4a>
 80046fe:	9b00      	ldr	r3, [sp, #0]
 8004700:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004702:	1d19      	adds	r1, r3, #4
 8004704:	9100      	str	r1, [sp, #0]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	07c0      	lsls	r0, r0, #31
 800470a:	bf4c      	ite	mi
 800470c:	801a      	strhmi	r2, [r3, #0]
 800470e:	601a      	strpl	r2, [r3, #0]
 8004710:	e6f3      	b.n	80044fa <__ssvfiscanf_r+0x4a>
 8004712:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004714:	4621      	mov	r1, r4
 8004716:	4630      	mov	r0, r6
 8004718:	4798      	blx	r3
 800471a:	2800      	cmp	r0, #0
 800471c:	d0bf      	beq.n	800469e <__ssvfiscanf_r+0x1ee>
 800471e:	e79f      	b.n	8004660 <__ssvfiscanf_r+0x1b0>
 8004720:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004722:	3201      	adds	r2, #1
 8004724:	9245      	str	r2, [sp, #276]	@ 0x114
 8004726:	6862      	ldr	r2, [r4, #4]
 8004728:	3a01      	subs	r2, #1
 800472a:	2a00      	cmp	r2, #0
 800472c:	6062      	str	r2, [r4, #4]
 800472e:	dd02      	ble.n	8004736 <__ssvfiscanf_r+0x286>
 8004730:	3301      	adds	r3, #1
 8004732:	6023      	str	r3, [r4, #0]
 8004734:	e7b6      	b.n	80046a4 <__ssvfiscanf_r+0x1f4>
 8004736:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004738:	4621      	mov	r1, r4
 800473a:	4630      	mov	r0, r6
 800473c:	4798      	blx	r3
 800473e:	2800      	cmp	r0, #0
 8004740:	d0b0      	beq.n	80046a4 <__ssvfiscanf_r+0x1f4>
 8004742:	e78d      	b.n	8004660 <__ssvfiscanf_r+0x1b0>
 8004744:	2b04      	cmp	r3, #4
 8004746:	dc0f      	bgt.n	8004768 <__ssvfiscanf_r+0x2b8>
 8004748:	466b      	mov	r3, sp
 800474a:	4622      	mov	r2, r4
 800474c:	a941      	add	r1, sp, #260	@ 0x104
 800474e:	4630      	mov	r0, r6
 8004750:	f000 f87c 	bl	800484c <_scanf_i>
 8004754:	e7b4      	b.n	80046c0 <__ssvfiscanf_r+0x210>
 8004756:	bf00      	nop
 8004758:	08004401 	.word	0x08004401
 800475c:	08004477 	.word	0x08004477
 8004760:	08004e04 	.word	0x08004e04
 8004764:	08004de4 	.word	0x08004de4
 8004768:	4b0a      	ldr	r3, [pc, #40]	@ (8004794 <__ssvfiscanf_r+0x2e4>)
 800476a:	2b00      	cmp	r3, #0
 800476c:	f43f aec5 	beq.w	80044fa <__ssvfiscanf_r+0x4a>
 8004770:	466b      	mov	r3, sp
 8004772:	4622      	mov	r2, r4
 8004774:	a941      	add	r1, sp, #260	@ 0x104
 8004776:	4630      	mov	r0, r6
 8004778:	f3af 8000 	nop.w
 800477c:	e7a0      	b.n	80046c0 <__ssvfiscanf_r+0x210>
 800477e:	89a3      	ldrh	r3, [r4, #12]
 8004780:	065b      	lsls	r3, r3, #25
 8004782:	f53f af71 	bmi.w	8004668 <__ssvfiscanf_r+0x1b8>
 8004786:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800478a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800478e:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8004790:	e7f9      	b.n	8004786 <__ssvfiscanf_r+0x2d6>
 8004792:	bf00      	nop
 8004794:	00000000 	.word	0x00000000

08004798 <_scanf_chars>:
 8004798:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800479c:	4615      	mov	r5, r2
 800479e:	688a      	ldr	r2, [r1, #8]
 80047a0:	4680      	mov	r8, r0
 80047a2:	460c      	mov	r4, r1
 80047a4:	b932      	cbnz	r2, 80047b4 <_scanf_chars+0x1c>
 80047a6:	698a      	ldr	r2, [r1, #24]
 80047a8:	2a00      	cmp	r2, #0
 80047aa:	bf14      	ite	ne
 80047ac:	f04f 32ff 	movne.w	r2, #4294967295
 80047b0:	2201      	moveq	r2, #1
 80047b2:	608a      	str	r2, [r1, #8]
 80047b4:	6822      	ldr	r2, [r4, #0]
 80047b6:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8004848 <_scanf_chars+0xb0>
 80047ba:	06d1      	lsls	r1, r2, #27
 80047bc:	bf5f      	itttt	pl
 80047be:	681a      	ldrpl	r2, [r3, #0]
 80047c0:	1d11      	addpl	r1, r2, #4
 80047c2:	6019      	strpl	r1, [r3, #0]
 80047c4:	6816      	ldrpl	r6, [r2, #0]
 80047c6:	2700      	movs	r7, #0
 80047c8:	69a0      	ldr	r0, [r4, #24]
 80047ca:	b188      	cbz	r0, 80047f0 <_scanf_chars+0x58>
 80047cc:	2801      	cmp	r0, #1
 80047ce:	d107      	bne.n	80047e0 <_scanf_chars+0x48>
 80047d0:	682b      	ldr	r3, [r5, #0]
 80047d2:	781a      	ldrb	r2, [r3, #0]
 80047d4:	6963      	ldr	r3, [r4, #20]
 80047d6:	5c9b      	ldrb	r3, [r3, r2]
 80047d8:	b953      	cbnz	r3, 80047f0 <_scanf_chars+0x58>
 80047da:	2f00      	cmp	r7, #0
 80047dc:	d031      	beq.n	8004842 <_scanf_chars+0xaa>
 80047de:	e022      	b.n	8004826 <_scanf_chars+0x8e>
 80047e0:	2802      	cmp	r0, #2
 80047e2:	d120      	bne.n	8004826 <_scanf_chars+0x8e>
 80047e4:	682b      	ldr	r3, [r5, #0]
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80047ec:	071b      	lsls	r3, r3, #28
 80047ee:	d41a      	bmi.n	8004826 <_scanf_chars+0x8e>
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	06da      	lsls	r2, r3, #27
 80047f4:	bf5e      	ittt	pl
 80047f6:	682b      	ldrpl	r3, [r5, #0]
 80047f8:	781b      	ldrbpl	r3, [r3, #0]
 80047fa:	f806 3b01 	strbpl.w	r3, [r6], #1
 80047fe:	682a      	ldr	r2, [r5, #0]
 8004800:	686b      	ldr	r3, [r5, #4]
 8004802:	3201      	adds	r2, #1
 8004804:	602a      	str	r2, [r5, #0]
 8004806:	68a2      	ldr	r2, [r4, #8]
 8004808:	3b01      	subs	r3, #1
 800480a:	3a01      	subs	r2, #1
 800480c:	606b      	str	r3, [r5, #4]
 800480e:	3701      	adds	r7, #1
 8004810:	60a2      	str	r2, [r4, #8]
 8004812:	b142      	cbz	r2, 8004826 <_scanf_chars+0x8e>
 8004814:	2b00      	cmp	r3, #0
 8004816:	dcd7      	bgt.n	80047c8 <_scanf_chars+0x30>
 8004818:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800481c:	4629      	mov	r1, r5
 800481e:	4640      	mov	r0, r8
 8004820:	4798      	blx	r3
 8004822:	2800      	cmp	r0, #0
 8004824:	d0d0      	beq.n	80047c8 <_scanf_chars+0x30>
 8004826:	6823      	ldr	r3, [r4, #0]
 8004828:	f013 0310 	ands.w	r3, r3, #16
 800482c:	d105      	bne.n	800483a <_scanf_chars+0xa2>
 800482e:	68e2      	ldr	r2, [r4, #12]
 8004830:	3201      	adds	r2, #1
 8004832:	60e2      	str	r2, [r4, #12]
 8004834:	69a2      	ldr	r2, [r4, #24]
 8004836:	b102      	cbz	r2, 800483a <_scanf_chars+0xa2>
 8004838:	7033      	strb	r3, [r6, #0]
 800483a:	6923      	ldr	r3, [r4, #16]
 800483c:	443b      	add	r3, r7
 800483e:	6123      	str	r3, [r4, #16]
 8004840:	2000      	movs	r0, #0
 8004842:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004846:	bf00      	nop
 8004848:	08004e04 	.word	0x08004e04

0800484c <_scanf_i>:
 800484c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004850:	4698      	mov	r8, r3
 8004852:	4b74      	ldr	r3, [pc, #464]	@ (8004a24 <_scanf_i+0x1d8>)
 8004854:	460c      	mov	r4, r1
 8004856:	4682      	mov	sl, r0
 8004858:	4616      	mov	r6, r2
 800485a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800485e:	b087      	sub	sp, #28
 8004860:	ab03      	add	r3, sp, #12
 8004862:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004866:	4b70      	ldr	r3, [pc, #448]	@ (8004a28 <_scanf_i+0x1dc>)
 8004868:	69a1      	ldr	r1, [r4, #24]
 800486a:	4a70      	ldr	r2, [pc, #448]	@ (8004a2c <_scanf_i+0x1e0>)
 800486c:	2903      	cmp	r1, #3
 800486e:	bf08      	it	eq
 8004870:	461a      	moveq	r2, r3
 8004872:	68a3      	ldr	r3, [r4, #8]
 8004874:	9201      	str	r2, [sp, #4]
 8004876:	1e5a      	subs	r2, r3, #1
 8004878:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800487c:	bf88      	it	hi
 800487e:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8004882:	4627      	mov	r7, r4
 8004884:	bf82      	ittt	hi
 8004886:	eb03 0905 	addhi.w	r9, r3, r5
 800488a:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800488e:	60a3      	strhi	r3, [r4, #8]
 8004890:	f857 3b1c 	ldr.w	r3, [r7], #28
 8004894:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8004898:	bf98      	it	ls
 800489a:	f04f 0900 	movls.w	r9, #0
 800489e:	6023      	str	r3, [r4, #0]
 80048a0:	463d      	mov	r5, r7
 80048a2:	f04f 0b00 	mov.w	fp, #0
 80048a6:	6831      	ldr	r1, [r6, #0]
 80048a8:	ab03      	add	r3, sp, #12
 80048aa:	7809      	ldrb	r1, [r1, #0]
 80048ac:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80048b0:	2202      	movs	r2, #2
 80048b2:	f7fb fcb5 	bl	8000220 <memchr>
 80048b6:	b328      	cbz	r0, 8004904 <_scanf_i+0xb8>
 80048b8:	f1bb 0f01 	cmp.w	fp, #1
 80048bc:	d159      	bne.n	8004972 <_scanf_i+0x126>
 80048be:	6862      	ldr	r2, [r4, #4]
 80048c0:	b92a      	cbnz	r2, 80048ce <_scanf_i+0x82>
 80048c2:	6822      	ldr	r2, [r4, #0]
 80048c4:	2108      	movs	r1, #8
 80048c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80048ca:	6061      	str	r1, [r4, #4]
 80048cc:	6022      	str	r2, [r4, #0]
 80048ce:	6822      	ldr	r2, [r4, #0]
 80048d0:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80048d4:	6022      	str	r2, [r4, #0]
 80048d6:	68a2      	ldr	r2, [r4, #8]
 80048d8:	1e51      	subs	r1, r2, #1
 80048da:	60a1      	str	r1, [r4, #8]
 80048dc:	b192      	cbz	r2, 8004904 <_scanf_i+0xb8>
 80048de:	6832      	ldr	r2, [r6, #0]
 80048e0:	1c51      	adds	r1, r2, #1
 80048e2:	6031      	str	r1, [r6, #0]
 80048e4:	7812      	ldrb	r2, [r2, #0]
 80048e6:	f805 2b01 	strb.w	r2, [r5], #1
 80048ea:	6872      	ldr	r2, [r6, #4]
 80048ec:	3a01      	subs	r2, #1
 80048ee:	2a00      	cmp	r2, #0
 80048f0:	6072      	str	r2, [r6, #4]
 80048f2:	dc07      	bgt.n	8004904 <_scanf_i+0xb8>
 80048f4:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80048f8:	4631      	mov	r1, r6
 80048fa:	4650      	mov	r0, sl
 80048fc:	4790      	blx	r2
 80048fe:	2800      	cmp	r0, #0
 8004900:	f040 8085 	bne.w	8004a0e <_scanf_i+0x1c2>
 8004904:	f10b 0b01 	add.w	fp, fp, #1
 8004908:	f1bb 0f03 	cmp.w	fp, #3
 800490c:	d1cb      	bne.n	80048a6 <_scanf_i+0x5a>
 800490e:	6863      	ldr	r3, [r4, #4]
 8004910:	b90b      	cbnz	r3, 8004916 <_scanf_i+0xca>
 8004912:	230a      	movs	r3, #10
 8004914:	6063      	str	r3, [r4, #4]
 8004916:	6863      	ldr	r3, [r4, #4]
 8004918:	4945      	ldr	r1, [pc, #276]	@ (8004a30 <_scanf_i+0x1e4>)
 800491a:	6960      	ldr	r0, [r4, #20]
 800491c:	1ac9      	subs	r1, r1, r3
 800491e:	f000 f889 	bl	8004a34 <__sccl>
 8004922:	f04f 0b00 	mov.w	fp, #0
 8004926:	68a3      	ldr	r3, [r4, #8]
 8004928:	6822      	ldr	r2, [r4, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d03d      	beq.n	80049aa <_scanf_i+0x15e>
 800492e:	6831      	ldr	r1, [r6, #0]
 8004930:	6960      	ldr	r0, [r4, #20]
 8004932:	f891 c000 	ldrb.w	ip, [r1]
 8004936:	f810 000c 	ldrb.w	r0, [r0, ip]
 800493a:	2800      	cmp	r0, #0
 800493c:	d035      	beq.n	80049aa <_scanf_i+0x15e>
 800493e:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8004942:	d124      	bne.n	800498e <_scanf_i+0x142>
 8004944:	0510      	lsls	r0, r2, #20
 8004946:	d522      	bpl.n	800498e <_scanf_i+0x142>
 8004948:	f10b 0b01 	add.w	fp, fp, #1
 800494c:	f1b9 0f00 	cmp.w	r9, #0
 8004950:	d003      	beq.n	800495a <_scanf_i+0x10e>
 8004952:	3301      	adds	r3, #1
 8004954:	f109 39ff 	add.w	r9, r9, #4294967295
 8004958:	60a3      	str	r3, [r4, #8]
 800495a:	6873      	ldr	r3, [r6, #4]
 800495c:	3b01      	subs	r3, #1
 800495e:	2b00      	cmp	r3, #0
 8004960:	6073      	str	r3, [r6, #4]
 8004962:	dd1b      	ble.n	800499c <_scanf_i+0x150>
 8004964:	6833      	ldr	r3, [r6, #0]
 8004966:	3301      	adds	r3, #1
 8004968:	6033      	str	r3, [r6, #0]
 800496a:	68a3      	ldr	r3, [r4, #8]
 800496c:	3b01      	subs	r3, #1
 800496e:	60a3      	str	r3, [r4, #8]
 8004970:	e7d9      	b.n	8004926 <_scanf_i+0xda>
 8004972:	f1bb 0f02 	cmp.w	fp, #2
 8004976:	d1ae      	bne.n	80048d6 <_scanf_i+0x8a>
 8004978:	6822      	ldr	r2, [r4, #0]
 800497a:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800497e:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8004982:	d1bf      	bne.n	8004904 <_scanf_i+0xb8>
 8004984:	2110      	movs	r1, #16
 8004986:	6061      	str	r1, [r4, #4]
 8004988:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800498c:	e7a2      	b.n	80048d4 <_scanf_i+0x88>
 800498e:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8004992:	6022      	str	r2, [r4, #0]
 8004994:	780b      	ldrb	r3, [r1, #0]
 8004996:	f805 3b01 	strb.w	r3, [r5], #1
 800499a:	e7de      	b.n	800495a <_scanf_i+0x10e>
 800499c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80049a0:	4631      	mov	r1, r6
 80049a2:	4650      	mov	r0, sl
 80049a4:	4798      	blx	r3
 80049a6:	2800      	cmp	r0, #0
 80049a8:	d0df      	beq.n	800496a <_scanf_i+0x11e>
 80049aa:	6823      	ldr	r3, [r4, #0]
 80049ac:	05d9      	lsls	r1, r3, #23
 80049ae:	d50d      	bpl.n	80049cc <_scanf_i+0x180>
 80049b0:	42bd      	cmp	r5, r7
 80049b2:	d909      	bls.n	80049c8 <_scanf_i+0x17c>
 80049b4:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80049b8:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80049bc:	4632      	mov	r2, r6
 80049be:	4650      	mov	r0, sl
 80049c0:	4798      	blx	r3
 80049c2:	f105 39ff 	add.w	r9, r5, #4294967295
 80049c6:	464d      	mov	r5, r9
 80049c8:	42bd      	cmp	r5, r7
 80049ca:	d028      	beq.n	8004a1e <_scanf_i+0x1d2>
 80049cc:	6822      	ldr	r2, [r4, #0]
 80049ce:	f012 0210 	ands.w	r2, r2, #16
 80049d2:	d113      	bne.n	80049fc <_scanf_i+0x1b0>
 80049d4:	702a      	strb	r2, [r5, #0]
 80049d6:	6863      	ldr	r3, [r4, #4]
 80049d8:	9e01      	ldr	r6, [sp, #4]
 80049da:	4639      	mov	r1, r7
 80049dc:	4650      	mov	r0, sl
 80049de:	47b0      	blx	r6
 80049e0:	f8d8 3000 	ldr.w	r3, [r8]
 80049e4:	6821      	ldr	r1, [r4, #0]
 80049e6:	1d1a      	adds	r2, r3, #4
 80049e8:	f8c8 2000 	str.w	r2, [r8]
 80049ec:	f011 0f20 	tst.w	r1, #32
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	d00f      	beq.n	8004a14 <_scanf_i+0x1c8>
 80049f4:	6018      	str	r0, [r3, #0]
 80049f6:	68e3      	ldr	r3, [r4, #12]
 80049f8:	3301      	adds	r3, #1
 80049fa:	60e3      	str	r3, [r4, #12]
 80049fc:	6923      	ldr	r3, [r4, #16]
 80049fe:	1bed      	subs	r5, r5, r7
 8004a00:	445d      	add	r5, fp
 8004a02:	442b      	add	r3, r5
 8004a04:	6123      	str	r3, [r4, #16]
 8004a06:	2000      	movs	r0, #0
 8004a08:	b007      	add	sp, #28
 8004a0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a0e:	f04f 0b00 	mov.w	fp, #0
 8004a12:	e7ca      	b.n	80049aa <_scanf_i+0x15e>
 8004a14:	07ca      	lsls	r2, r1, #31
 8004a16:	bf4c      	ite	mi
 8004a18:	8018      	strhmi	r0, [r3, #0]
 8004a1a:	6018      	strpl	r0, [r3, #0]
 8004a1c:	e7eb      	b.n	80049f6 <_scanf_i+0x1aa>
 8004a1e:	2001      	movs	r0, #1
 8004a20:	e7f2      	b.n	8004a08 <_scanf_i+0x1bc>
 8004a22:	bf00      	nop
 8004a24:	08004dc0 	.word	0x08004dc0
 8004a28:	08004ca9 	.word	0x08004ca9
 8004a2c:	08004d89 	.word	0x08004d89
 8004a30:	08004df8 	.word	0x08004df8

08004a34 <__sccl>:
 8004a34:	b570      	push	{r4, r5, r6, lr}
 8004a36:	780b      	ldrb	r3, [r1, #0]
 8004a38:	4604      	mov	r4, r0
 8004a3a:	2b5e      	cmp	r3, #94	@ 0x5e
 8004a3c:	bf0b      	itete	eq
 8004a3e:	784b      	ldrbeq	r3, [r1, #1]
 8004a40:	1c4a      	addne	r2, r1, #1
 8004a42:	1c8a      	addeq	r2, r1, #2
 8004a44:	2100      	movne	r1, #0
 8004a46:	bf08      	it	eq
 8004a48:	2101      	moveq	r1, #1
 8004a4a:	3801      	subs	r0, #1
 8004a4c:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8004a50:	f800 1f01 	strb.w	r1, [r0, #1]!
 8004a54:	42a8      	cmp	r0, r5
 8004a56:	d1fb      	bne.n	8004a50 <__sccl+0x1c>
 8004a58:	b90b      	cbnz	r3, 8004a5e <__sccl+0x2a>
 8004a5a:	1e50      	subs	r0, r2, #1
 8004a5c:	bd70      	pop	{r4, r5, r6, pc}
 8004a5e:	f081 0101 	eor.w	r1, r1, #1
 8004a62:	54e1      	strb	r1, [r4, r3]
 8004a64:	4610      	mov	r0, r2
 8004a66:	4602      	mov	r2, r0
 8004a68:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004a6c:	2d2d      	cmp	r5, #45	@ 0x2d
 8004a6e:	d005      	beq.n	8004a7c <__sccl+0x48>
 8004a70:	2d5d      	cmp	r5, #93	@ 0x5d
 8004a72:	d016      	beq.n	8004aa2 <__sccl+0x6e>
 8004a74:	2d00      	cmp	r5, #0
 8004a76:	d0f1      	beq.n	8004a5c <__sccl+0x28>
 8004a78:	462b      	mov	r3, r5
 8004a7a:	e7f2      	b.n	8004a62 <__sccl+0x2e>
 8004a7c:	7846      	ldrb	r6, [r0, #1]
 8004a7e:	2e5d      	cmp	r6, #93	@ 0x5d
 8004a80:	d0fa      	beq.n	8004a78 <__sccl+0x44>
 8004a82:	42b3      	cmp	r3, r6
 8004a84:	dcf8      	bgt.n	8004a78 <__sccl+0x44>
 8004a86:	3002      	adds	r0, #2
 8004a88:	461a      	mov	r2, r3
 8004a8a:	3201      	adds	r2, #1
 8004a8c:	4296      	cmp	r6, r2
 8004a8e:	54a1      	strb	r1, [r4, r2]
 8004a90:	dcfb      	bgt.n	8004a8a <__sccl+0x56>
 8004a92:	1af2      	subs	r2, r6, r3
 8004a94:	3a01      	subs	r2, #1
 8004a96:	1c5d      	adds	r5, r3, #1
 8004a98:	42b3      	cmp	r3, r6
 8004a9a:	bfa8      	it	ge
 8004a9c:	2200      	movge	r2, #0
 8004a9e:	18ab      	adds	r3, r5, r2
 8004aa0:	e7e1      	b.n	8004a66 <__sccl+0x32>
 8004aa2:	4610      	mov	r0, r2
 8004aa4:	e7da      	b.n	8004a5c <__sccl+0x28>

08004aa6 <__submore>:
 8004aa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004aaa:	460c      	mov	r4, r1
 8004aac:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004aae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ab2:	4299      	cmp	r1, r3
 8004ab4:	d11d      	bne.n	8004af2 <__submore+0x4c>
 8004ab6:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004aba:	f7ff fc15 	bl	80042e8 <_malloc_r>
 8004abe:	b918      	cbnz	r0, 8004ac8 <__submore+0x22>
 8004ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ac8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004acc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004ace:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 8004ad2:	6360      	str	r0, [r4, #52]	@ 0x34
 8004ad4:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8004ad8:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8004adc:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8004ae0:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 8004ae4:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 8004ae8:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 8004aec:	6020      	str	r0, [r4, #0]
 8004aee:	2000      	movs	r0, #0
 8004af0:	e7e8      	b.n	8004ac4 <__submore+0x1e>
 8004af2:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8004af4:	0077      	lsls	r7, r6, #1
 8004af6:	463a      	mov	r2, r7
 8004af8:	f000 f82e 	bl	8004b58 <_realloc_r>
 8004afc:	4605      	mov	r5, r0
 8004afe:	2800      	cmp	r0, #0
 8004b00:	d0de      	beq.n	8004ac0 <__submore+0x1a>
 8004b02:	eb00 0806 	add.w	r8, r0, r6
 8004b06:	4601      	mov	r1, r0
 8004b08:	4632      	mov	r2, r6
 8004b0a:	4640      	mov	r0, r8
 8004b0c:	f000 f816 	bl	8004b3c <memcpy>
 8004b10:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8004b14:	f8c4 8000 	str.w	r8, [r4]
 8004b18:	e7e9      	b.n	8004aee <__submore+0x48>
	...

08004b1c <_sbrk_r>:
 8004b1c:	b538      	push	{r3, r4, r5, lr}
 8004b1e:	4d06      	ldr	r5, [pc, #24]	@ (8004b38 <_sbrk_r+0x1c>)
 8004b20:	2300      	movs	r3, #0
 8004b22:	4604      	mov	r4, r0
 8004b24:	4608      	mov	r0, r1
 8004b26:	602b      	str	r3, [r5, #0]
 8004b28:	f7fb ffbe 	bl	8000aa8 <_sbrk>
 8004b2c:	1c43      	adds	r3, r0, #1
 8004b2e:	d102      	bne.n	8004b36 <_sbrk_r+0x1a>
 8004b30:	682b      	ldr	r3, [r5, #0]
 8004b32:	b103      	cbz	r3, 8004b36 <_sbrk_r+0x1a>
 8004b34:	6023      	str	r3, [r4, #0]
 8004b36:	bd38      	pop	{r3, r4, r5, pc}
 8004b38:	20000348 	.word	0x20000348

08004b3c <memcpy>:
 8004b3c:	440a      	add	r2, r1
 8004b3e:	4291      	cmp	r1, r2
 8004b40:	f100 33ff 	add.w	r3, r0, #4294967295
 8004b44:	d100      	bne.n	8004b48 <memcpy+0xc>
 8004b46:	4770      	bx	lr
 8004b48:	b510      	push	{r4, lr}
 8004b4a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004b4e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004b52:	4291      	cmp	r1, r2
 8004b54:	d1f9      	bne.n	8004b4a <memcpy+0xe>
 8004b56:	bd10      	pop	{r4, pc}

08004b58 <_realloc_r>:
 8004b58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004b5c:	4680      	mov	r8, r0
 8004b5e:	4615      	mov	r5, r2
 8004b60:	460c      	mov	r4, r1
 8004b62:	b921      	cbnz	r1, 8004b6e <_realloc_r+0x16>
 8004b64:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004b68:	4611      	mov	r1, r2
 8004b6a:	f7ff bbbd 	b.w	80042e8 <_malloc_r>
 8004b6e:	b92a      	cbnz	r2, 8004b7c <_realloc_r+0x24>
 8004b70:	f7ff fb4e 	bl	8004210 <_free_r>
 8004b74:	2400      	movs	r4, #0
 8004b76:	4620      	mov	r0, r4
 8004b78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004b7c:	f000 f906 	bl	8004d8c <_malloc_usable_size_r>
 8004b80:	4285      	cmp	r5, r0
 8004b82:	4606      	mov	r6, r0
 8004b84:	d802      	bhi.n	8004b8c <_realloc_r+0x34>
 8004b86:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004b8a:	d8f4      	bhi.n	8004b76 <_realloc_r+0x1e>
 8004b8c:	4629      	mov	r1, r5
 8004b8e:	4640      	mov	r0, r8
 8004b90:	f7ff fbaa 	bl	80042e8 <_malloc_r>
 8004b94:	4607      	mov	r7, r0
 8004b96:	2800      	cmp	r0, #0
 8004b98:	d0ec      	beq.n	8004b74 <_realloc_r+0x1c>
 8004b9a:	42b5      	cmp	r5, r6
 8004b9c:	462a      	mov	r2, r5
 8004b9e:	4621      	mov	r1, r4
 8004ba0:	bf28      	it	cs
 8004ba2:	4632      	movcs	r2, r6
 8004ba4:	f7ff ffca 	bl	8004b3c <memcpy>
 8004ba8:	4621      	mov	r1, r4
 8004baa:	4640      	mov	r0, r8
 8004bac:	f7ff fb30 	bl	8004210 <_free_r>
 8004bb0:	463c      	mov	r4, r7
 8004bb2:	e7e0      	b.n	8004b76 <_realloc_r+0x1e>

08004bb4 <_strtol_l.constprop.0>:
 8004bb4:	2b24      	cmp	r3, #36	@ 0x24
 8004bb6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004bba:	4686      	mov	lr, r0
 8004bbc:	4690      	mov	r8, r2
 8004bbe:	d801      	bhi.n	8004bc4 <_strtol_l.constprop.0+0x10>
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	d106      	bne.n	8004bd2 <_strtol_l.constprop.0+0x1e>
 8004bc4:	f7ff faf0 	bl	80041a8 <__errno>
 8004bc8:	2316      	movs	r3, #22
 8004bca:	6003      	str	r3, [r0, #0]
 8004bcc:	2000      	movs	r0, #0
 8004bce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bd2:	4834      	ldr	r0, [pc, #208]	@ (8004ca4 <_strtol_l.constprop.0+0xf0>)
 8004bd4:	460d      	mov	r5, r1
 8004bd6:	462a      	mov	r2, r5
 8004bd8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004bdc:	5d06      	ldrb	r6, [r0, r4]
 8004bde:	f016 0608 	ands.w	r6, r6, #8
 8004be2:	d1f8      	bne.n	8004bd6 <_strtol_l.constprop.0+0x22>
 8004be4:	2c2d      	cmp	r4, #45	@ 0x2d
 8004be6:	d12d      	bne.n	8004c44 <_strtol_l.constprop.0+0x90>
 8004be8:	782c      	ldrb	r4, [r5, #0]
 8004bea:	2601      	movs	r6, #1
 8004bec:	1c95      	adds	r5, r2, #2
 8004bee:	f033 0210 	bics.w	r2, r3, #16
 8004bf2:	d109      	bne.n	8004c08 <_strtol_l.constprop.0+0x54>
 8004bf4:	2c30      	cmp	r4, #48	@ 0x30
 8004bf6:	d12a      	bne.n	8004c4e <_strtol_l.constprop.0+0x9a>
 8004bf8:	782a      	ldrb	r2, [r5, #0]
 8004bfa:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8004bfe:	2a58      	cmp	r2, #88	@ 0x58
 8004c00:	d125      	bne.n	8004c4e <_strtol_l.constprop.0+0x9a>
 8004c02:	786c      	ldrb	r4, [r5, #1]
 8004c04:	2310      	movs	r3, #16
 8004c06:	3502      	adds	r5, #2
 8004c08:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8004c0c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8004c10:	2200      	movs	r2, #0
 8004c12:	fbbc f9f3 	udiv	r9, ip, r3
 8004c16:	4610      	mov	r0, r2
 8004c18:	fb03 ca19 	mls	sl, r3, r9, ip
 8004c1c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8004c20:	2f09      	cmp	r7, #9
 8004c22:	d81b      	bhi.n	8004c5c <_strtol_l.constprop.0+0xa8>
 8004c24:	463c      	mov	r4, r7
 8004c26:	42a3      	cmp	r3, r4
 8004c28:	dd27      	ble.n	8004c7a <_strtol_l.constprop.0+0xc6>
 8004c2a:	1c57      	adds	r7, r2, #1
 8004c2c:	d007      	beq.n	8004c3e <_strtol_l.constprop.0+0x8a>
 8004c2e:	4581      	cmp	r9, r0
 8004c30:	d320      	bcc.n	8004c74 <_strtol_l.constprop.0+0xc0>
 8004c32:	d101      	bne.n	8004c38 <_strtol_l.constprop.0+0x84>
 8004c34:	45a2      	cmp	sl, r4
 8004c36:	db1d      	blt.n	8004c74 <_strtol_l.constprop.0+0xc0>
 8004c38:	fb00 4003 	mla	r0, r0, r3, r4
 8004c3c:	2201      	movs	r2, #1
 8004c3e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004c42:	e7eb      	b.n	8004c1c <_strtol_l.constprop.0+0x68>
 8004c44:	2c2b      	cmp	r4, #43	@ 0x2b
 8004c46:	bf04      	itt	eq
 8004c48:	782c      	ldrbeq	r4, [r5, #0]
 8004c4a:	1c95      	addeq	r5, r2, #2
 8004c4c:	e7cf      	b.n	8004bee <_strtol_l.constprop.0+0x3a>
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d1da      	bne.n	8004c08 <_strtol_l.constprop.0+0x54>
 8004c52:	2c30      	cmp	r4, #48	@ 0x30
 8004c54:	bf0c      	ite	eq
 8004c56:	2308      	moveq	r3, #8
 8004c58:	230a      	movne	r3, #10
 8004c5a:	e7d5      	b.n	8004c08 <_strtol_l.constprop.0+0x54>
 8004c5c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8004c60:	2f19      	cmp	r7, #25
 8004c62:	d801      	bhi.n	8004c68 <_strtol_l.constprop.0+0xb4>
 8004c64:	3c37      	subs	r4, #55	@ 0x37
 8004c66:	e7de      	b.n	8004c26 <_strtol_l.constprop.0+0x72>
 8004c68:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8004c6c:	2f19      	cmp	r7, #25
 8004c6e:	d804      	bhi.n	8004c7a <_strtol_l.constprop.0+0xc6>
 8004c70:	3c57      	subs	r4, #87	@ 0x57
 8004c72:	e7d8      	b.n	8004c26 <_strtol_l.constprop.0+0x72>
 8004c74:	f04f 32ff 	mov.w	r2, #4294967295
 8004c78:	e7e1      	b.n	8004c3e <_strtol_l.constprop.0+0x8a>
 8004c7a:	1c53      	adds	r3, r2, #1
 8004c7c:	d108      	bne.n	8004c90 <_strtol_l.constprop.0+0xdc>
 8004c7e:	2322      	movs	r3, #34	@ 0x22
 8004c80:	f8ce 3000 	str.w	r3, [lr]
 8004c84:	4660      	mov	r0, ip
 8004c86:	f1b8 0f00 	cmp.w	r8, #0
 8004c8a:	d0a0      	beq.n	8004bce <_strtol_l.constprop.0+0x1a>
 8004c8c:	1e69      	subs	r1, r5, #1
 8004c8e:	e006      	b.n	8004c9e <_strtol_l.constprop.0+0xea>
 8004c90:	b106      	cbz	r6, 8004c94 <_strtol_l.constprop.0+0xe0>
 8004c92:	4240      	negs	r0, r0
 8004c94:	f1b8 0f00 	cmp.w	r8, #0
 8004c98:	d099      	beq.n	8004bce <_strtol_l.constprop.0+0x1a>
 8004c9a:	2a00      	cmp	r2, #0
 8004c9c:	d1f6      	bne.n	8004c8c <_strtol_l.constprop.0+0xd8>
 8004c9e:	f8c8 1000 	str.w	r1, [r8]
 8004ca2:	e794      	b.n	8004bce <_strtol_l.constprop.0+0x1a>
 8004ca4:	08004e04 	.word	0x08004e04

08004ca8 <_strtol_r>:
 8004ca8:	f7ff bf84 	b.w	8004bb4 <_strtol_l.constprop.0>

08004cac <_strtoul_l.constprop.0>:
 8004cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004cb0:	4e34      	ldr	r6, [pc, #208]	@ (8004d84 <_strtoul_l.constprop.0+0xd8>)
 8004cb2:	4686      	mov	lr, r0
 8004cb4:	460d      	mov	r5, r1
 8004cb6:	4628      	mov	r0, r5
 8004cb8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004cbc:	5d37      	ldrb	r7, [r6, r4]
 8004cbe:	f017 0708 	ands.w	r7, r7, #8
 8004cc2:	d1f8      	bne.n	8004cb6 <_strtoul_l.constprop.0+0xa>
 8004cc4:	2c2d      	cmp	r4, #45	@ 0x2d
 8004cc6:	d12f      	bne.n	8004d28 <_strtoul_l.constprop.0+0x7c>
 8004cc8:	782c      	ldrb	r4, [r5, #0]
 8004cca:	2701      	movs	r7, #1
 8004ccc:	1c85      	adds	r5, r0, #2
 8004cce:	f033 0010 	bics.w	r0, r3, #16
 8004cd2:	d109      	bne.n	8004ce8 <_strtoul_l.constprop.0+0x3c>
 8004cd4:	2c30      	cmp	r4, #48	@ 0x30
 8004cd6:	d12c      	bne.n	8004d32 <_strtoul_l.constprop.0+0x86>
 8004cd8:	7828      	ldrb	r0, [r5, #0]
 8004cda:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8004cde:	2858      	cmp	r0, #88	@ 0x58
 8004ce0:	d127      	bne.n	8004d32 <_strtoul_l.constprop.0+0x86>
 8004ce2:	786c      	ldrb	r4, [r5, #1]
 8004ce4:	2310      	movs	r3, #16
 8004ce6:	3502      	adds	r5, #2
 8004ce8:	f04f 38ff 	mov.w	r8, #4294967295
 8004cec:	2600      	movs	r6, #0
 8004cee:	fbb8 f8f3 	udiv	r8, r8, r3
 8004cf2:	fb03 f908 	mul.w	r9, r3, r8
 8004cf6:	ea6f 0909 	mvn.w	r9, r9
 8004cfa:	4630      	mov	r0, r6
 8004cfc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8004d00:	f1bc 0f09 	cmp.w	ip, #9
 8004d04:	d81c      	bhi.n	8004d40 <_strtoul_l.constprop.0+0x94>
 8004d06:	4664      	mov	r4, ip
 8004d08:	42a3      	cmp	r3, r4
 8004d0a:	dd2a      	ble.n	8004d62 <_strtoul_l.constprop.0+0xb6>
 8004d0c:	f1b6 3fff 	cmp.w	r6, #4294967295
 8004d10:	d007      	beq.n	8004d22 <_strtoul_l.constprop.0+0x76>
 8004d12:	4580      	cmp	r8, r0
 8004d14:	d322      	bcc.n	8004d5c <_strtoul_l.constprop.0+0xb0>
 8004d16:	d101      	bne.n	8004d1c <_strtoul_l.constprop.0+0x70>
 8004d18:	45a1      	cmp	r9, r4
 8004d1a:	db1f      	blt.n	8004d5c <_strtoul_l.constprop.0+0xb0>
 8004d1c:	fb00 4003 	mla	r0, r0, r3, r4
 8004d20:	2601      	movs	r6, #1
 8004d22:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004d26:	e7e9      	b.n	8004cfc <_strtoul_l.constprop.0+0x50>
 8004d28:	2c2b      	cmp	r4, #43	@ 0x2b
 8004d2a:	bf04      	itt	eq
 8004d2c:	782c      	ldrbeq	r4, [r5, #0]
 8004d2e:	1c85      	addeq	r5, r0, #2
 8004d30:	e7cd      	b.n	8004cce <_strtoul_l.constprop.0+0x22>
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d1d8      	bne.n	8004ce8 <_strtoul_l.constprop.0+0x3c>
 8004d36:	2c30      	cmp	r4, #48	@ 0x30
 8004d38:	bf0c      	ite	eq
 8004d3a:	2308      	moveq	r3, #8
 8004d3c:	230a      	movne	r3, #10
 8004d3e:	e7d3      	b.n	8004ce8 <_strtoul_l.constprop.0+0x3c>
 8004d40:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8004d44:	f1bc 0f19 	cmp.w	ip, #25
 8004d48:	d801      	bhi.n	8004d4e <_strtoul_l.constprop.0+0xa2>
 8004d4a:	3c37      	subs	r4, #55	@ 0x37
 8004d4c:	e7dc      	b.n	8004d08 <_strtoul_l.constprop.0+0x5c>
 8004d4e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8004d52:	f1bc 0f19 	cmp.w	ip, #25
 8004d56:	d804      	bhi.n	8004d62 <_strtoul_l.constprop.0+0xb6>
 8004d58:	3c57      	subs	r4, #87	@ 0x57
 8004d5a:	e7d5      	b.n	8004d08 <_strtoul_l.constprop.0+0x5c>
 8004d5c:	f04f 36ff 	mov.w	r6, #4294967295
 8004d60:	e7df      	b.n	8004d22 <_strtoul_l.constprop.0+0x76>
 8004d62:	1c73      	adds	r3, r6, #1
 8004d64:	d106      	bne.n	8004d74 <_strtoul_l.constprop.0+0xc8>
 8004d66:	2322      	movs	r3, #34	@ 0x22
 8004d68:	f8ce 3000 	str.w	r3, [lr]
 8004d6c:	4630      	mov	r0, r6
 8004d6e:	b932      	cbnz	r2, 8004d7e <_strtoul_l.constprop.0+0xd2>
 8004d70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8004d74:	b107      	cbz	r7, 8004d78 <_strtoul_l.constprop.0+0xcc>
 8004d76:	4240      	negs	r0, r0
 8004d78:	2a00      	cmp	r2, #0
 8004d7a:	d0f9      	beq.n	8004d70 <_strtoul_l.constprop.0+0xc4>
 8004d7c:	b106      	cbz	r6, 8004d80 <_strtoul_l.constprop.0+0xd4>
 8004d7e:	1e69      	subs	r1, r5, #1
 8004d80:	6011      	str	r1, [r2, #0]
 8004d82:	e7f5      	b.n	8004d70 <_strtoul_l.constprop.0+0xc4>
 8004d84:	08004e04 	.word	0x08004e04

08004d88 <_strtoul_r>:
 8004d88:	f7ff bf90 	b.w	8004cac <_strtoul_l.constprop.0>

08004d8c <_malloc_usable_size_r>:
 8004d8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d90:	1f18      	subs	r0, r3, #4
 8004d92:	2b00      	cmp	r3, #0
 8004d94:	bfbc      	itt	lt
 8004d96:	580b      	ldrlt	r3, [r1, r0]
 8004d98:	18c0      	addlt	r0, r0, r3
 8004d9a:	4770      	bx	lr

08004d9c <_init>:
 8004d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d9e:	bf00      	nop
 8004da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004da2:	bc08      	pop	{r3}
 8004da4:	469e      	mov	lr, r3
 8004da6:	4770      	bx	lr

08004da8 <_fini>:
 8004da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004daa:	bf00      	nop
 8004dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004dae:	bc08      	pop	{r3}
 8004db0:	469e      	mov	lr, r3
 8004db2:	4770      	bx	lr
