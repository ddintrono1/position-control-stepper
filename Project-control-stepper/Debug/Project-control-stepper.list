
Project-control-stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057f0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  080059c0  080059c0  000069c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b10  08005b10  00007138  2**0
                  CONTENTS
  4 .ARM          00000008  08005b10  08005b10  00006b10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b18  08005b18  00007138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b18  08005b18  00006b18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b1c  08005b1c  00006b1c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000138  20000000  08005b20  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000324  20000138  08005c58  00007138  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000045c  08005c58  0000745c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007138  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010998  00000000  00000000  00007168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c4  00000000  00000000  00017b00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e08  00000000  00000000  0001a1c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000ae6  00000000  00000000  0001afd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a26  00000000  00000000  0001bab6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00012364  00000000  00000000  0003e4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d14ea  00000000  00000000  00050840  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00121d2a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004090  00000000  00000000  00121d70  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00125e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000138 	.word	0x20000138
 80001ec:	00000000 	.word	0x00000000
 80001f0:	080059a8 	.word	0x080059a8

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000013c 	.word	0x2000013c
 800020c:	080059a8 	.word	0x080059a8

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Command_Init>:
uint8_t m204_message[] = "M204 command launched\r\n";
uint8_t m205_message_clockwise[] = "M205 command launched: clockwise rotation\r\n";
uint8_t m205_message_anticlockwise[] = "M205 command launched: anti-clockwise rotation\r\n";


void Command_Init(Command *command, Stepper *stepper){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	command->stepper = stepper;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	601a      	str	r2, [r3, #0]

	// Setting default speeds and accelerations
	command->travelSpeed = 40;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2228      	movs	r2, #40	@ 0x28
 80005c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	command->workSpeed = 20;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2214      	movs	r2, #20
 80005ca:	631a      	str	r2, [r3, #48]	@ 0x30
	command->travelAcceleration = 30;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	221e      	movs	r2, #30
 80005d0:	635a      	str	r2, [r3, #52]	@ 0x34
	command->workAcceleration = 15;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	220f      	movs	r2, #15
 80005d6:	639a      	str	r2, [r3, #56]	@ 0x38

}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <Command_Parse>:

void Command_Parse(Command *command, uint8_t string[]){
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	// String setting
	strcpy((char *) command->string, (char *) string);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3304      	adds	r3, #4
 80005f2:	6839      	ldr	r1, [r7, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 fc09 	bl	8004e0c <strcpy>

	// String parsing
	sscanf((char *) command->string, "%c %d %c %d", &(command->command_id), &(command->command_num), &(command->flag_id), &(command->flag_num));
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	1d18      	adds	r0, r3, #4
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f103 0118 	add.w	r1, r3, #24
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f103 041c 	add.w	r4, r3, #28
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3320      	adds	r3, #32
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	3224      	adds	r2, #36	@ 0x24
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	4623      	mov	r3, r4
 8000618:	460a      	mov	r2, r1
 800061a:	4903      	ldr	r1, [pc, #12]	@ (8000628 <Command_Parse+0x44>)
 800061c:	f004 fb96 	bl	8004d4c <siscanf>
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	080059c0 	.word	0x080059c0

0800062c <Command_Clear>:

void Command_Clear(Command *command){
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	memset(command->string, 0, sizeof(command->string));
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3304      	adds	r3, #4
 8000638:	2214      	movs	r2, #20
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f004 fbb1 	bl	8004da4 <memset>
	command->command_id = 0;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	761a      	strb	r2, [r3, #24]
	command->command_num = 0;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
	command->flag_id = 0;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2020 	strb.w	r2, [r3, #32]
	command->flag_num = 0;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <Command_Execute>:

void Command_Execute(Command *command){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	if (command->command_id == 'G' && command-> command_num == 0){
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	7e1b      	ldrb	r3, [r3, #24]
 8000670:	2b47      	cmp	r3, #71	@ 0x47
 8000672:	d107      	bne.n	8000684 <Command_Execute+0x20>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d103      	bne.n	8000684 <Command_Execute+0x20>
		Command_G0(command);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 f83f 	bl	8000700 <Command_G0>
 8000682:	e035      	b.n	80006f0 <Command_Execute+0x8c>
	}
	else if (command->command_id == 'G' && command->command_num == 1){
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7e1b      	ldrb	r3, [r3, #24]
 8000688:	2b47      	cmp	r3, #71	@ 0x47
 800068a:	d107      	bne.n	800069c <Command_Execute+0x38>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	69db      	ldr	r3, [r3, #28]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d103      	bne.n	800069c <Command_Execute+0x38>
		Command_G1(command);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 f875 	bl	8000784 <Command_G1>
 800069a:	e029      	b.n	80006f0 <Command_Execute+0x8c>
	}
	else if (command->command_id == 'M' && command->command_num == 203){
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7e1b      	ldrb	r3, [r3, #24]
 80006a0:	2b4d      	cmp	r3, #77	@ 0x4d
 80006a2:	d107      	bne.n	80006b4 <Command_Execute+0x50>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	69db      	ldr	r3, [r3, #28]
 80006a8:	2bcb      	cmp	r3, #203	@ 0xcb
 80006aa:	d103      	bne.n	80006b4 <Command_Execute+0x50>
		Command_M203(command);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f8ab 	bl	8000808 <Command_M203>
 80006b2:	e01d      	b.n	80006f0 <Command_Execute+0x8c>
	}
	else if (command->command_id == 'M' && command->command_num == 204){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7e1b      	ldrb	r3, [r3, #24]
 80006b8:	2b4d      	cmp	r3, #77	@ 0x4d
 80006ba:	d107      	bne.n	80006cc <Command_Execute+0x68>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	2bcc      	cmp	r3, #204	@ 0xcc
 80006c2:	d103      	bne.n	80006cc <Command_Execute+0x68>
		Command_M204(command);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f000 f8d1 	bl	800086c <Command_M204>
 80006ca:	e011      	b.n	80006f0 <Command_Execute+0x8c>
	}
	else if (command->command_id == 'M' && command->command_num == 205){
 80006cc:	687b      	ldr	r3, [r7, #4]
 80006ce:	7e1b      	ldrb	r3, [r3, #24]
 80006d0:	2b4d      	cmp	r3, #77	@ 0x4d
 80006d2:	d107      	bne.n	80006e4 <Command_Execute+0x80>
 80006d4:	687b      	ldr	r3, [r7, #4]
 80006d6:	69db      	ldr	r3, [r3, #28]
 80006d8:	2bcd      	cmp	r3, #205	@ 0xcd
 80006da:	d103      	bne.n	80006e4 <Command_Execute+0x80>
		Command_M205(command);
 80006dc:	6878      	ldr	r0, [r7, #4]
 80006de:	f000 f8f7 	bl	80008d0 <Command_M205>
 80006e2:	e005      	b.n	80006f0 <Command_Execute+0x8c>
	}
	else {
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));
 80006e4:	2219      	movs	r2, #25
 80006e6:	4904      	ldr	r1, [pc, #16]	@ (80006f8 <Command_Execute+0x94>)
 80006e8:	4804      	ldr	r0, [pc, #16]	@ (80006fc <Command_Execute+0x98>)
 80006ea:	f003 fbd5 	bl	8003e98 <HAL_UART_Transmit_IT>
	}
}
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
 80006f2:	3708      	adds	r7, #8
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	20000000 	.word	0x20000000
 80006fc:	200002c8 	.word	0x200002c8

08000700 <Command_G0>:

void Command_G0(Command *command){
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	// This command handles the pulses number before stopping
	__HAL_TIM_SET_AUTORELOAD(&htim3, command->flag_num);
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800070c:	4b1a      	ldr	r3, [pc, #104]	@ (8000778 <Command_G0+0x78>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000716:	461a      	mov	r2, r3
 8000718:	4b17      	ldr	r3, [pc, #92]	@ (8000778 <Command_G0+0x78>)
 800071a:	60da      	str	r2, [r3, #12]
	Stepper_SetSpeedLimit(command->stepper, command->travelSpeed);
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	681a      	ldr	r2, [r3, #0]
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000724:	ee07 3a90 	vmov	s15, r3
 8000728:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800072c:	eeb0 0a67 	vmov.f32	s0, s15
 8000730:	4610      	mov	r0, r2
 8000732:	f000 fc67 	bl	8001004 <Stepper_SetSpeedLimit>
	Stepper_SetAcceleration(command->stepper, command->travelAcceleration);
 8000736:	687b      	ldr	r3, [r7, #4]
 8000738:	681a      	ldr	r2, [r3, #0]
 800073a:	687b      	ldr	r3, [r7, #4]
 800073c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800073e:	ee07 3a90 	vmov	s15, r3
 8000742:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000746:	eeb0 0a67 	vmov.f32	s0, s15
 800074a:	4610      	mov	r0, r2
 800074c:	f000 fcdc 	bl	8001108 <Stepper_SetAcceleration>
	HAL_UART_Transmit_IT(&huart2, g0_message, sizeof(g0_message));
 8000750:	2216      	movs	r2, #22
 8000752:	490a      	ldr	r1, [pc, #40]	@ (800077c <Command_G0+0x7c>)
 8000754:	480a      	ldr	r0, [pc, #40]	@ (8000780 <Command_G0+0x80>)
 8000756:	f003 fb9f 	bl	8003e98 <HAL_UART_Transmit_IT>
	Stepper_Enable(command->stepper);
 800075a:	687b      	ldr	r3, [r7, #4]
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	4618      	mov	r0, r3
 8000760:	f000 fb5a 	bl	8000e18 <Stepper_Enable>
	Stepper_Start(command->stepper);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4618      	mov	r0, r3
 800076a:	f000 fb75 	bl	8000e58 <Stepper_Start>
}
 800076e:	bf00      	nop
 8000770:	3708      	adds	r7, #8
 8000772:	46bd      	mov	sp, r7
 8000774:	bd80      	pop	{r7, pc}
 8000776:	bf00      	nop
 8000778:	20000238 	.word	0x20000238
 800077c:	2000001c 	.word	0x2000001c
 8000780:	200002c8 	.word	0x200002c8

08000784 <Command_G1>:

void Command_G1(Command *command){
 8000784:	b580      	push	{r7, lr}
 8000786:	b082      	sub	sp, #8
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
	// This command handles the pulses number before stopping
	__HAL_TIM_SET_AUTORELOAD(&htim3, command->flag_num);
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000790:	4b1a      	ldr	r3, [pc, #104]	@ (80007fc <Command_G1+0x78>)
 8000792:	681b      	ldr	r3, [r3, #0]
 8000794:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000796:	687b      	ldr	r3, [r7, #4]
 8000798:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800079a:	461a      	mov	r2, r3
 800079c:	4b17      	ldr	r3, [pc, #92]	@ (80007fc <Command_G1+0x78>)
 800079e:	60da      	str	r2, [r3, #12]
	Stepper_SetSpeedLimit(command->stepper, command->workSpeed);
 80007a0:	687b      	ldr	r3, [r7, #4]
 80007a2:	681a      	ldr	r2, [r3, #0]
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007a8:	ee07 3a90 	vmov	s15, r3
 80007ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007b0:	eeb0 0a67 	vmov.f32	s0, s15
 80007b4:	4610      	mov	r0, r2
 80007b6:	f000 fc25 	bl	8001004 <Stepper_SetSpeedLimit>
	Stepper_SetAcceleration(command->stepper, command->workAcceleration);
 80007ba:	687b      	ldr	r3, [r7, #4]
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	687b      	ldr	r3, [r7, #4]
 80007c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007c2:	ee07 3a90 	vmov	s15, r3
 80007c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007ca:	eeb0 0a67 	vmov.f32	s0, s15
 80007ce:	4610      	mov	r0, r2
 80007d0:	f000 fc9a 	bl	8001108 <Stepper_SetAcceleration>
	HAL_UART_Transmit_IT(&huart2, g1_message, sizeof(g1_message));
 80007d4:	2216      	movs	r2, #22
 80007d6:	490a      	ldr	r1, [pc, #40]	@ (8000800 <Command_G1+0x7c>)
 80007d8:	480a      	ldr	r0, [pc, #40]	@ (8000804 <Command_G1+0x80>)
 80007da:	f003 fb5d 	bl	8003e98 <HAL_UART_Transmit_IT>
	Stepper_Enable(command->stepper);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	4618      	mov	r0, r3
 80007e4:	f000 fb18 	bl	8000e18 <Stepper_Enable>
	Stepper_Start(command->stepper);
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	4618      	mov	r0, r3
 80007ee:	f000 fb33 	bl	8000e58 <Stepper_Start>
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	20000238 	.word	0x20000238
 8000800:	20000034 	.word	0x20000034
 8000804:	200002c8 	.word	0x200002c8

08000808 <Command_M203>:

void Command_M203(Command *command){
 8000808:	b580      	push	{r7, lr}
 800080a:	b082      	sub	sp, #8
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
	// This command sets the travelling or working speed
	if (command->flag_id == 'T'){
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000816:	2b54      	cmp	r3, #84	@ 0x54
 8000818:	d109      	bne.n	800082e <Command_M203+0x26>
		// Modify travelling speed
		command->travelSpeed = command->flag_num;
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	62da      	str	r2, [r3, #44]	@ 0x2c
		HAL_UART_Transmit_IT(&huart2, m203_message, sizeof(m203_message));
 8000822:	2218      	movs	r2, #24
 8000824:	490e      	ldr	r1, [pc, #56]	@ (8000860 <Command_M203+0x58>)
 8000826:	480f      	ldr	r0, [pc, #60]	@ (8000864 <Command_M203+0x5c>)
 8000828:	f003 fb36 	bl	8003e98 <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart2, m203_message, sizeof(m203_message));
	}
	else {
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));
	}
}
 800082c:	e013      	b.n	8000856 <Command_M203+0x4e>
	else if (command->flag_id == 'S'){
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000834:	2b53      	cmp	r3, #83	@ 0x53
 8000836:	d109      	bne.n	800084c <Command_M203+0x44>
		command->workSpeed = command->flag_num;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	631a      	str	r2, [r3, #48]	@ 0x30
		HAL_UART_Transmit_IT(&huart2, m203_message, sizeof(m203_message));
 8000840:	2218      	movs	r2, #24
 8000842:	4907      	ldr	r1, [pc, #28]	@ (8000860 <Command_M203+0x58>)
 8000844:	4807      	ldr	r0, [pc, #28]	@ (8000864 <Command_M203+0x5c>)
 8000846:	f003 fb27 	bl	8003e98 <HAL_UART_Transmit_IT>
}
 800084a:	e004      	b.n	8000856 <Command_M203+0x4e>
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));
 800084c:	2219      	movs	r2, #25
 800084e:	4906      	ldr	r1, [pc, #24]	@ (8000868 <Command_M203+0x60>)
 8000850:	4804      	ldr	r0, [pc, #16]	@ (8000864 <Command_M203+0x5c>)
 8000852:	f003 fb21 	bl	8003e98 <HAL_UART_Transmit_IT>
}
 8000856:	bf00      	nop
 8000858:	3708      	adds	r7, #8
 800085a:	46bd      	mov	sp, r7
 800085c:	bd80      	pop	{r7, pc}
 800085e:	bf00      	nop
 8000860:	2000004c 	.word	0x2000004c
 8000864:	200002c8 	.word	0x200002c8
 8000868:	20000000 	.word	0x20000000

0800086c <Command_M204>:

void Command_M204(Command *command){
 800086c:	b580      	push	{r7, lr}
 800086e:	b082      	sub	sp, #8
 8000870:	af00      	add	r7, sp, #0
 8000872:	6078      	str	r0, [r7, #4]
	if (command->flag_id == 'T'){
 8000874:	687b      	ldr	r3, [r7, #4]
 8000876:	f893 3020 	ldrb.w	r3, [r3, #32]
 800087a:	2b54      	cmp	r3, #84	@ 0x54
 800087c:	d109      	bne.n	8000892 <Command_M204+0x26>
		// Modify traveling acceleration
		command->travelAcceleration = command->flag_num;
 800087e:	687b      	ldr	r3, [r7, #4]
 8000880:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000882:	687b      	ldr	r3, [r7, #4]
 8000884:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_UART_Transmit_IT(&huart2, m204_message, sizeof(m204_message));
 8000886:	2218      	movs	r2, #24
 8000888:	490e      	ldr	r1, [pc, #56]	@ (80008c4 <Command_M204+0x58>)
 800088a:	480f      	ldr	r0, [pc, #60]	@ (80008c8 <Command_M204+0x5c>)
 800088c:	f003 fb04 	bl	8003e98 <HAL_UART_Transmit_IT>
	}
	else {
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));

	}
}
 8000890:	e013      	b.n	80008ba <Command_M204+0x4e>
	else if (command->flag_id == 'S'){
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000898:	2b53      	cmp	r3, #83	@ 0x53
 800089a:	d109      	bne.n	80008b0 <Command_M204+0x44>
		command->workAcceleration = command->flag_num;
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_UART_Transmit_IT(&huart2, m204_message, sizeof(m204_message));
 80008a4:	2218      	movs	r2, #24
 80008a6:	4907      	ldr	r1, [pc, #28]	@ (80008c4 <Command_M204+0x58>)
 80008a8:	4807      	ldr	r0, [pc, #28]	@ (80008c8 <Command_M204+0x5c>)
 80008aa:	f003 faf5 	bl	8003e98 <HAL_UART_Transmit_IT>
}
 80008ae:	e004      	b.n	80008ba <Command_M204+0x4e>
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));
 80008b0:	2219      	movs	r2, #25
 80008b2:	4906      	ldr	r1, [pc, #24]	@ (80008cc <Command_M204+0x60>)
 80008b4:	4804      	ldr	r0, [pc, #16]	@ (80008c8 <Command_M204+0x5c>)
 80008b6:	f003 faef 	bl	8003e98 <HAL_UART_Transmit_IT>
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	20000064 	.word	0x20000064
 80008c8:	200002c8 	.word	0x200002c8
 80008cc:	20000000 	.word	0x20000000

080008d0 <Command_M205>:

void Command_M205(Command *command){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
	if (command->flag_num == 1){
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008dc:	2b01      	cmp	r3, #1
 80008de:	d10b      	bne.n	80008f8 <Command_M205+0x28>
		Stepper_SetDirection(command->stepper, CLOCKWISE);
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	2101      	movs	r1, #1
 80008e6:	4618      	mov	r0, r3
 80008e8:	f000 fae4 	bl	8000eb4 <Stepper_SetDirection>
		HAL_UART_Transmit_IT(&huart2, m205_message_clockwise, sizeof(m205_message_clockwise));
 80008ec:	222c      	movs	r2, #44	@ 0x2c
 80008ee:	490f      	ldr	r1, [pc, #60]	@ (800092c <Command_M205+0x5c>)
 80008f0:	480f      	ldr	r0, [pc, #60]	@ (8000930 <Command_M205+0x60>)
 80008f2:	f003 fad1 	bl	8003e98 <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart2, m205_message_anticlockwise, sizeof(m205_message_anticlockwise));
	}
	else {
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));
	}
}
 80008f6:	e014      	b.n	8000922 <Command_M205+0x52>
	else if (command->flag_num == 2){
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80008fc:	2b02      	cmp	r3, #2
 80008fe:	d10b      	bne.n	8000918 <Command_M205+0x48>
		Stepper_SetDirection(command->stepper, ANTI_CLOCKWISE);
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	2100      	movs	r1, #0
 8000906:	4618      	mov	r0, r3
 8000908:	f000 fad4 	bl	8000eb4 <Stepper_SetDirection>
		HAL_UART_Transmit_IT(&huart2, m205_message_anticlockwise, sizeof(m205_message_anticlockwise));
 800090c:	2231      	movs	r2, #49	@ 0x31
 800090e:	4909      	ldr	r1, [pc, #36]	@ (8000934 <Command_M205+0x64>)
 8000910:	4807      	ldr	r0, [pc, #28]	@ (8000930 <Command_M205+0x60>)
 8000912:	f003 fac1 	bl	8003e98 <HAL_UART_Transmit_IT>
}
 8000916:	e004      	b.n	8000922 <Command_M205+0x52>
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));
 8000918:	2219      	movs	r2, #25
 800091a:	4907      	ldr	r1, [pc, #28]	@ (8000938 <Command_M205+0x68>)
 800091c:	4804      	ldr	r0, [pc, #16]	@ (8000930 <Command_M205+0x60>)
 800091e:	f003 fabb 	bl	8003e98 <HAL_UART_Transmit_IT>
}
 8000922:	bf00      	nop
 8000924:	3708      	adds	r7, #8
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	2000007c 	.word	0x2000007c
 8000930:	200002c8 	.word	0x200002c8
 8000934:	200000a8 	.word	0x200000a8
 8000938:	20000000 	.word	0x20000000

0800093c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b08a      	sub	sp, #40	@ 0x28
 8000940:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
 800094a:	605a      	str	r2, [r3, #4]
 800094c:	609a      	str	r2, [r3, #8]
 800094e:	60da      	str	r2, [r3, #12]
 8000950:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000952:	2300      	movs	r3, #0
 8000954:	613b      	str	r3, [r7, #16]
 8000956:	4b47      	ldr	r3, [pc, #284]	@ (8000a74 <MX_GPIO_Init+0x138>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800095a:	4a46      	ldr	r2, [pc, #280]	@ (8000a74 <MX_GPIO_Init+0x138>)
 800095c:	f043 0304 	orr.w	r3, r3, #4
 8000960:	6313      	str	r3, [r2, #48]	@ 0x30
 8000962:	4b44      	ldr	r3, [pc, #272]	@ (8000a74 <MX_GPIO_Init+0x138>)
 8000964:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000966:	f003 0304 	and.w	r3, r3, #4
 800096a:	613b      	str	r3, [r7, #16]
 800096c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800096e:	2300      	movs	r3, #0
 8000970:	60fb      	str	r3, [r7, #12]
 8000972:	4b40      	ldr	r3, [pc, #256]	@ (8000a74 <MX_GPIO_Init+0x138>)
 8000974:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000976:	4a3f      	ldr	r2, [pc, #252]	@ (8000a74 <MX_GPIO_Init+0x138>)
 8000978:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800097c:	6313      	str	r3, [r2, #48]	@ 0x30
 800097e:	4b3d      	ldr	r3, [pc, #244]	@ (8000a74 <MX_GPIO_Init+0x138>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000982:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000986:	60fb      	str	r3, [r7, #12]
 8000988:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800098a:	2300      	movs	r3, #0
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	4b39      	ldr	r3, [pc, #228]	@ (8000a74 <MX_GPIO_Init+0x138>)
 8000990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000992:	4a38      	ldr	r2, [pc, #224]	@ (8000a74 <MX_GPIO_Init+0x138>)
 8000994:	f043 0301 	orr.w	r3, r3, #1
 8000998:	6313      	str	r3, [r2, #48]	@ 0x30
 800099a:	4b36      	ldr	r3, [pc, #216]	@ (8000a74 <MX_GPIO_Init+0x138>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800099e:	f003 0301 	and.w	r3, r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
 80009a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009a6:	2300      	movs	r3, #0
 80009a8:	607b      	str	r3, [r7, #4]
 80009aa:	4b32      	ldr	r3, [pc, #200]	@ (8000a74 <MX_GPIO_Init+0x138>)
 80009ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ae:	4a31      	ldr	r2, [pc, #196]	@ (8000a74 <MX_GPIO_Init+0x138>)
 80009b0:	f043 0302 	orr.w	r3, r3, #2
 80009b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80009b6:	4b2f      	ldr	r3, [pc, #188]	@ (8000a74 <MX_GPIO_Init+0x138>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009ba:	f003 0302 	and.w	r3, r3, #2
 80009be:	607b      	str	r3, [r7, #4]
 80009c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MS2_Pin|MS1_Pin, GPIO_PIN_RESET);
 80009c2:	2200      	movs	r2, #0
 80009c4:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 80009c8:	482b      	ldr	r0, [pc, #172]	@ (8000a78 <MX_GPIO_Init+0x13c>)
 80009ca:	f001 fa4f 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 80009ce:	2200      	movs	r2, #0
 80009d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80009d4:	4829      	ldr	r0, [pc, #164]	@ (8000a7c <MX_GPIO_Init+0x140>)
 80009d6:	f001 fa49 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ENABLE_Pin|DIR_Pin, GPIO_PIN_RESET);
 80009da:	2200      	movs	r2, #0
 80009dc:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 80009e0:	4827      	ldr	r0, [pc, #156]	@ (8000a80 <MX_GPIO_Init+0x144>)
 80009e2:	f001 fa43 	bl	8001e6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009e6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009ec:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 80009f0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f2:	2300      	movs	r3, #0
 80009f4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009f6:	f107 0314 	add.w	r3, r7, #20
 80009fa:	4619      	mov	r1, r3
 80009fc:	4820      	ldr	r0, [pc, #128]	@ (8000a80 <MX_GPIO_Init+0x144>)
 80009fe:	f001 f8a1 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|MS2_Pin|MS1_Pin;
 8000a02:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000a06:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a08:	2301      	movs	r3, #1
 8000a0a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a10:	2300      	movs	r3, #0
 8000a12:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a14:	f107 0314 	add.w	r3, r7, #20
 8000a18:	4619      	mov	r1, r3
 8000a1a:	4817      	ldr	r0, [pc, #92]	@ (8000a78 <MX_GPIO_Init+0x13c>)
 8000a1c:	f001 f892 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS3_Pin;
 8000a20:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000a24:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a26:	2301      	movs	r3, #1
 8000a28:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MS3_GPIO_Port, &GPIO_InitStruct);
 8000a32:	f107 0314 	add.w	r3, r7, #20
 8000a36:	4619      	mov	r1, r3
 8000a38:	4810      	ldr	r0, [pc, #64]	@ (8000a7c <MX_GPIO_Init+0x140>)
 8000a3a:	f001 f883 	bl	8001b44 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENABLE_Pin|DIR_Pin;
 8000a3e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a44:	2301      	movs	r3, #1
 8000a46:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	480a      	ldr	r0, [pc, #40]	@ (8000a80 <MX_GPIO_Init+0x144>)
 8000a58:	f001 f874 	bl	8001b44 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	2100      	movs	r1, #0
 8000a60:	2028      	movs	r0, #40	@ 0x28
 8000a62:	f000 ffa6 	bl	80019b2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000a66:	2028      	movs	r0, #40	@ 0x28
 8000a68:	f000 ffbf 	bl	80019ea <HAL_NVIC_EnableIRQ>

}
 8000a6c:	bf00      	nop
 8000a6e:	3728      	adds	r7, #40	@ 0x28
 8000a70:	46bd      	mov	sp, r7
 8000a72:	bd80      	pop	{r7, pc}
 8000a74:	40023800 	.word	0x40023800
 8000a78:	40020000 	.word	0x40020000
 8000a7c:	40020400 	.word	0x40020400
 8000a80:	40020800 	.word	0x40020800

08000a84 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b08a      	sub	sp, #40	@ 0x28
 8000a88:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a8a:	f000 fe45 	bl	8001718 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a8e:	f000 f857 	bl	8000b40 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a92:	f7ff ff53 	bl	800093c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000a96:	f000 fd9b 	bl	80015d0 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000a9a:	f000 fc0b 	bl	80012b4 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000a9e:	f000 fc81 	bl	80013a4 <MX_TIM3_Init>
  MX_TIM6_Init();
 8000aa2:	f000 fccd 	bl	8001440 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Reset interrupt flags before starting the timers
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000aa6:	4b1c      	ldr	r3, [pc, #112]	@ (8000b18 <main+0x94>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	f06f 0201 	mvn.w	r2, #1
 8000aae:	611a      	str	r2, [r3, #16]

  // Start slave timer
  HAL_TIM_Base_Start_IT(&htim3);
 8000ab0:	4819      	ldr	r0, [pc, #100]	@ (8000b18 <main+0x94>)
 8000ab2:	f002 f851 	bl	8002b58 <HAL_TIM_Base_Start_IT>

  // Create stepper instance
  Stepper_Init(&nema_17, 0.05, GPIOC, GPIO_PIN_10, &htim2, GPIOA, GPIO_PIN_0, GPIOC, GPIO_PIN_12, GPIOA, GPIO_PIN_12, GPIOA, GPIO_PIN_11, GPIOB, GPIO_PIN_12);
 8000ab6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000aba:	9309      	str	r3, [sp, #36]	@ 0x24
 8000abc:	4b17      	ldr	r3, [pc, #92]	@ (8000b1c <main+0x98>)
 8000abe:	9308      	str	r3, [sp, #32]
 8000ac0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000ac4:	9307      	str	r3, [sp, #28]
 8000ac6:	4b16      	ldr	r3, [pc, #88]	@ (8000b20 <main+0x9c>)
 8000ac8:	9306      	str	r3, [sp, #24]
 8000aca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ace:	9305      	str	r3, [sp, #20]
 8000ad0:	4b13      	ldr	r3, [pc, #76]	@ (8000b20 <main+0x9c>)
 8000ad2:	9304      	str	r3, [sp, #16]
 8000ad4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ad8:	9303      	str	r3, [sp, #12]
 8000ada:	4b12      	ldr	r3, [pc, #72]	@ (8000b24 <main+0xa0>)
 8000adc:	9302      	str	r3, [sp, #8]
 8000ade:	2301      	movs	r3, #1
 8000ae0:	9301      	str	r3, [sp, #4]
 8000ae2:	4b0f      	ldr	r3, [pc, #60]	@ (8000b20 <main+0x9c>)
 8000ae4:	9300      	str	r3, [sp, #0]
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <main+0xa4>)
 8000ae8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000aec:	490d      	ldr	r1, [pc, #52]	@ (8000b24 <main+0xa0>)
 8000aee:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000b2c <main+0xa8>
 8000af2:	480f      	ldr	r0, [pc, #60]	@ (8000b30 <main+0xac>)
 8000af4:	f000 f922 	bl	8000d3c <Stepper_Init>

  // Create command instance
  Command_Init(&g_command, &nema_17);
 8000af8:	490d      	ldr	r1, [pc, #52]	@ (8000b30 <main+0xac>)
 8000afa:	480e      	ldr	r0, [pc, #56]	@ (8000b34 <main+0xb0>)
 8000afc:	f7ff fd58 	bl	80005b0 <Command_Init>

  // Start uart connection
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000b00:	2201      	movs	r2, #1
 8000b02:	490d      	ldr	r1, [pc, #52]	@ (8000b38 <main+0xb4>)
 8000b04:	480d      	ldr	r0, [pc, #52]	@ (8000b3c <main+0xb8>)
 8000b06:	f003 f9fd 	bl	8003f04 <HAL_UART_Receive_IT>

  // Set microstep
  Stepper_SetMicroStep(&nema_17, QUARTER_STEP);
 8000b0a:	2104      	movs	r1, #4
 8000b0c:	4808      	ldr	r0, [pc, #32]	@ (8000b30 <main+0xac>)
 8000b0e:	f000 f9e3 	bl	8000ed8 <Stepper_SetMicroStep>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b12:	bf00      	nop
 8000b14:	e7fd      	b.n	8000b12 <main+0x8e>
 8000b16:	bf00      	nop
 8000b18:	20000238 	.word	0x20000238
 8000b1c:	40020400 	.word	0x40020400
 8000b20:	40020000 	.word	0x40020000
 8000b24:	40020800 	.word	0x40020800
 8000b28:	200001f0 	.word	0x200001f0
 8000b2c:	3d4ccccd 	.word	0x3d4ccccd
 8000b30:	20000154 	.word	0x20000154
 8000b34:	20000198 	.word	0x20000198
 8000b38:	200001d4 	.word	0x200001d4
 8000b3c:	200002c8 	.word	0x200002c8

08000b40 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b40:	b580      	push	{r7, lr}
 8000b42:	b094      	sub	sp, #80	@ 0x50
 8000b44:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b46:	f107 031c 	add.w	r3, r7, #28
 8000b4a:	2234      	movs	r2, #52	@ 0x34
 8000b4c:	2100      	movs	r1, #0
 8000b4e:	4618      	mov	r0, r3
 8000b50:	f004 f928 	bl	8004da4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b54:	f107 0308 	add.w	r3, r7, #8
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b64:	2300      	movs	r3, #0
 8000b66:	607b      	str	r3, [r7, #4]
 8000b68:	4b2a      	ldr	r3, [pc, #168]	@ (8000c14 <SystemClock_Config+0xd4>)
 8000b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b6c:	4a29      	ldr	r2, [pc, #164]	@ (8000c14 <SystemClock_Config+0xd4>)
 8000b6e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b72:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b74:	4b27      	ldr	r3, [pc, #156]	@ (8000c14 <SystemClock_Config+0xd4>)
 8000b76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000b78:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000b80:	2300      	movs	r3, #0
 8000b82:	603b      	str	r3, [r7, #0]
 8000b84:	4b24      	ldr	r3, [pc, #144]	@ (8000c18 <SystemClock_Config+0xd8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000b8c:	4a22      	ldr	r2, [pc, #136]	@ (8000c18 <SystemClock_Config+0xd8>)
 8000b8e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b92:	6013      	str	r3, [r2, #0]
 8000b94:	4b20      	ldr	r3, [pc, #128]	@ (8000c18 <SystemClock_Config+0xd8>)
 8000b96:	681b      	ldr	r3, [r3, #0]
 8000b98:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000b9c:	603b      	str	r3, [r7, #0]
 8000b9e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ba0:	2302      	movs	r3, #2
 8000ba2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ba8:	2310      	movs	r3, #16
 8000baa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bac:	2302      	movs	r3, #2
 8000bae:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bb0:	2300      	movs	r3, #0
 8000bb2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bb4:	2310      	movs	r3, #16
 8000bb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bb8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000bbc:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bbe:	2304      	movs	r3, #4
 8000bc0:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	f107 031c 	add.w	r3, r7, #28
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fcd4 	bl	800257c <HAL_RCC_OscConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000bda:	f000 f8a9 	bl	8000d30 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bde:	230f      	movs	r3, #15
 8000be0:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be2:	2302      	movs	r3, #2
 8000be4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000bea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000bee:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bf0:	2300      	movs	r3, #0
 8000bf2:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000bf4:	f107 0308 	add.w	r3, r7, #8
 8000bf8:	2102      	movs	r1, #2
 8000bfa:	4618      	mov	r0, r3
 8000bfc:	f001 f974 	bl	8001ee8 <HAL_RCC_ClockConfig>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c06:	f000 f893 	bl	8000d30 <Error_Handler>
  }
}
 8000c0a:	bf00      	nop
 8000c0c:	3750      	adds	r7, #80	@ 0x50
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40023800 	.word	0x40023800
 8000c18:	40007000 	.word	0x40007000

08000c1c <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	b082      	sub	sp, #8
 8000c20:	af00      	add	r7, sp, #0
 8000c22:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	681b      	ldr	r3, [r3, #0]
 8000c28:	4a18      	ldr	r2, [pc, #96]	@ (8000c8c <HAL_UART_RxCpltCallback+0x70>)
 8000c2a:	4293      	cmp	r3, r2
 8000c2c:	d129      	bne.n	8000c82 <HAL_UART_RxCpltCallback+0x66>

		if (*(rx_data+cnt) == '\r'){
 8000c2e:	4b18      	ldr	r3, [pc, #96]	@ (8000c90 <HAL_UART_RxCpltCallback+0x74>)
 8000c30:	781b      	ldrb	r3, [r3, #0]
 8000c32:	461a      	mov	r2, r3
 8000c34:	4b17      	ldr	r3, [pc, #92]	@ (8000c94 <HAL_UART_RxCpltCallback+0x78>)
 8000c36:	4413      	add	r3, r2
 8000c38:	781b      	ldrb	r3, [r3, #0]
 8000c3a:	2b0d      	cmp	r3, #13
 8000c3c:	d111      	bne.n	8000c62 <HAL_UART_RxCpltCallback+0x46>
			Command_Parse(&g_command, rx_data);
 8000c3e:	4915      	ldr	r1, [pc, #84]	@ (8000c94 <HAL_UART_RxCpltCallback+0x78>)
 8000c40:	4815      	ldr	r0, [pc, #84]	@ (8000c98 <HAL_UART_RxCpltCallback+0x7c>)
 8000c42:	f7ff fccf 	bl	80005e4 <Command_Parse>
			Command_Execute(&g_command);
 8000c46:	4814      	ldr	r0, [pc, #80]	@ (8000c98 <HAL_UART_RxCpltCallback+0x7c>)
 8000c48:	f7ff fd0c 	bl	8000664 <Command_Execute>
			cnt = -1;
 8000c4c:	4b10      	ldr	r3, [pc, #64]	@ (8000c90 <HAL_UART_RxCpltCallback+0x74>)
 8000c4e:	22ff      	movs	r2, #255	@ 0xff
 8000c50:	701a      	strb	r2, [r3, #0]
			memset(rx_data,0,sizeof(rx_data));
 8000c52:	2214      	movs	r2, #20
 8000c54:	2100      	movs	r1, #0
 8000c56:	480f      	ldr	r0, [pc, #60]	@ (8000c94 <HAL_UART_RxCpltCallback+0x78>)
 8000c58:	f004 f8a4 	bl	8004da4 <memset>
			Command_Clear(&g_command);
 8000c5c:	480e      	ldr	r0, [pc, #56]	@ (8000c98 <HAL_UART_RxCpltCallback+0x7c>)
 8000c5e:	f7ff fce5 	bl	800062c <Command_Clear>
		}
		cnt++;
 8000c62:	4b0b      	ldr	r3, [pc, #44]	@ (8000c90 <HAL_UART_RxCpltCallback+0x74>)
 8000c64:	781b      	ldrb	r3, [r3, #0]
 8000c66:	3301      	adds	r3, #1
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	4b09      	ldr	r3, [pc, #36]	@ (8000c90 <HAL_UART_RxCpltCallback+0x74>)
 8000c6c:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, rx_data+cnt, 1);
 8000c6e:	4b08      	ldr	r3, [pc, #32]	@ (8000c90 <HAL_UART_RxCpltCallback+0x74>)
 8000c70:	781b      	ldrb	r3, [r3, #0]
 8000c72:	461a      	mov	r2, r3
 8000c74:	4b07      	ldr	r3, [pc, #28]	@ (8000c94 <HAL_UART_RxCpltCallback+0x78>)
 8000c76:	4413      	add	r3, r2
 8000c78:	2201      	movs	r2, #1
 8000c7a:	4619      	mov	r1, r3
 8000c7c:	4807      	ldr	r0, [pc, #28]	@ (8000c9c <HAL_UART_RxCpltCallback+0x80>)
 8000c7e:	f003 f941 	bl	8003f04 <HAL_UART_Receive_IT>
	}
}
 8000c82:	bf00      	nop
 8000c84:	3708      	adds	r7, #8
 8000c86:	46bd      	mov	sp, r7
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	bf00      	nop
 8000c8c:	40004400 	.word	0x40004400
 8000c90:	200001e8 	.word	0x200001e8
 8000c94:	200001d4 	.word	0x200001d4
 8000c98:	20000198 	.word	0x20000198
 8000c9c:	200002c8 	.word	0x200002c8

08000ca0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b082      	sub	sp, #8
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]

	// Tim3 handles distances
	if (htim->Instance == TIM3){
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	681b      	ldr	r3, [r3, #0]
 8000cac:	4a1a      	ldr	r2, [pc, #104]	@ (8000d18 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000cae:	4293      	cmp	r3, r2
 8000cb0:	d105      	bne.n	8000cbe <HAL_TIM_PeriodElapsedCallback+0x1e>
		Stepper_Stop(&nema_17);
 8000cb2:	481a      	ldr	r0, [pc, #104]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000cb4:	f000 f8ea 	bl	8000e8c <Stepper_Stop>
		Stepper_Disable(&nema_17);
 8000cb8:	4818      	ldr	r0, [pc, #96]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000cba:	f000 f8bd 	bl	8000e38 <Stepper_Disable>
	}

	// Tim6 handles accelerations
	if (htim->Instance == TIM6){
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a17      	ldr	r2, [pc, #92]	@ (8000d20 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d123      	bne.n	8000d10 <HAL_TIM_PeriodElapsedCallback+0x70>

		if (nema_17.speed < nema_17.speedLimit){
 8000cc8:	4b14      	ldr	r3, [pc, #80]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000cca:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8000cce:	4b13      	ldr	r3, [pc, #76]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000cd0:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000cd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000cd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000cdc:	d50c      	bpl.n	8000cf8 <HAL_TIM_PeriodElapsedCallback+0x58>
			// The division by 100 is due to 100 interrupts per sec
			Stepper_SpeedUp(&nema_17, (float) nema_17.acceleration / 100);
 8000cde:	4b0f      	ldr	r3, [pc, #60]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000ce0:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000ce4:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000d24 <HAL_TIM_PeriodElapsedCallback+0x84>
 8000ce8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000cec:	eeb0 0a47 	vmov.f32	s0, s14
 8000cf0:	480a      	ldr	r0, [pc, #40]	@ (8000d1c <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000cf2:	f000 f9f3 	bl	80010dc <Stepper_SpeedUp>
			HAL_TIM_Base_Stop_IT(&htim6);
			__HAL_TIM_SET_COUNTER(&htim6, 0);
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
		}
	}
}
 8000cf6:	e00b      	b.n	8000d10 <HAL_TIM_PeriodElapsedCallback+0x70>
			HAL_TIM_Base_Stop_IT(&htim6);
 8000cf8:	480b      	ldr	r0, [pc, #44]	@ (8000d28 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000cfa:	f001 ff9d 	bl	8002c38 <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000cfe:	4b0a      	ldr	r3, [pc, #40]	@ (8000d28 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d00:	681b      	ldr	r3, [r3, #0]
 8000d02:	2200      	movs	r2, #0
 8000d04:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000d06:	2201      	movs	r2, #1
 8000d08:	2120      	movs	r1, #32
 8000d0a:	4808      	ldr	r0, [pc, #32]	@ (8000d2c <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000d0c:	f001 f8ae 	bl	8001e6c <HAL_GPIO_WritePin>
}
 8000d10:	bf00      	nop
 8000d12:	3708      	adds	r7, #8
 8000d14:	46bd      	mov	sp, r7
 8000d16:	bd80      	pop	{r7, pc}
 8000d18:	40000400 	.word	0x40000400
 8000d1c:	20000154 	.word	0x20000154
 8000d20:	40001000 	.word	0x40001000
 8000d24:	42c80000 	.word	0x42c80000
 8000d28:	20000280 	.word	0x20000280
 8000d2c:	40020000 	.word	0x40020000

08000d30 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d34:	b672      	cpsid	i
}
 8000d36:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <Error_Handler+0x8>

08000d3c <Stepper_Init>:

extern TIM_HandleTypeDef htim6;


void Stepper_Init(Stepper* stepper, float stepDist, GPIO_TypeDef* enablePort, uint16_t enablePin, TIM_HandleTypeDef* htim, GPIO_TypeDef* stepPort, uint16_t stepPin, GPIO_TypeDef* dirPort, uint16_t dirPin,
		GPIO_TypeDef* ms1Port, uint16_t ms1Pin, GPIO_TypeDef* ms2Port, uint16_t ms2Pin, GPIO_TypeDef* ms3Port, uint16_t ms3Pin){
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b086      	sub	sp, #24
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6178      	str	r0, [r7, #20]
 8000d44:	ed87 0a04 	vstr	s0, [r7, #16]
 8000d48:	60f9      	str	r1, [r7, #12]
 8000d4a:	607b      	str	r3, [r7, #4]
 8000d4c:	4613      	mov	r3, r2
 8000d4e:	817b      	strh	r3, [r7, #10]
	stepper->htim = htim;
 8000d50:	697b      	ldr	r3, [r7, #20]
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	601a      	str	r2, [r3, #0]
	stepper->stepDist = stepDist;
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	693a      	ldr	r2, [r7, #16]
 8000d5a:	605a      	str	r2, [r3, #4]
	stepper->enablePort = enablePort;
 8000d5c:	697b      	ldr	r3, [r7, #20]
 8000d5e:	68fa      	ldr	r2, [r7, #12]
 8000d60:	609a      	str	r2, [r3, #8]
	stepper->enablePin = enablePin;
 8000d62:	697b      	ldr	r3, [r7, #20]
 8000d64:	897a      	ldrh	r2, [r7, #10]
 8000d66:	819a      	strh	r2, [r3, #12]
	stepper->stepPort = stepPort;
 8000d68:	697b      	ldr	r3, [r7, #20]
 8000d6a:	6a3a      	ldr	r2, [r7, #32]
 8000d6c:	611a      	str	r2, [r3, #16]
	stepper->stepPin = stepPin;
 8000d6e:	697b      	ldr	r3, [r7, #20]
 8000d70:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000d72:	829a      	strh	r2, [r3, #20]
	stepper->dirPort = dirPort;
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000d78:	619a      	str	r2, [r3, #24]
	stepper->dirPin = dirPin;
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000d7e:	839a      	strh	r2, [r3, #28]
	stepper->ms1Port = ms1Port;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000d84:	621a      	str	r2, [r3, #32]
	stepper->ms1Pin = ms1Pin;
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8000d8a:	849a      	strh	r2, [r3, #36]	@ 0x24
	stepper->ms2Port = ms2Port;
 8000d8c:	697b      	ldr	r3, [r7, #20]
 8000d8e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000d90:	629a      	str	r2, [r3, #40]	@ 0x28
	stepper->ms2Pin = ms2Pin;
 8000d92:	697b      	ldr	r3, [r7, #20]
 8000d94:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8000d96:	859a      	strh	r2, [r3, #44]	@ 0x2c
	stepper->ms3Port = ms3Port;
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000d9c:	631a      	str	r2, [r3, #48]	@ 0x30
	stepper->ms3Pin = ms3Pin;
 8000d9e:	697b      	ldr	r3, [r7, #20]
 8000da0:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8000da4:	869a      	strh	r2, [r3, #52]	@ 0x34

	// Set default not enabled (NOT ENABLED = HIGH)
	HAL_GPIO_WritePin(enablePort, enablePin, GPIO_PIN_SET);
 8000da6:	897b      	ldrh	r3, [r7, #10]
 8000da8:	2201      	movs	r2, #1
 8000daa:	4619      	mov	r1, r3
 8000dac:	68f8      	ldr	r0, [r7, #12]
 8000dae:	f001 f85d 	bl	8001e6c <HAL_GPIO_WritePin>

	// Set default speed
	stepper->htim->Instance->ARR = 839999;
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	4a14      	ldr	r2, [pc, #80]	@ (8000e0c <Stepper_Init+0xd0>)
 8000dba:	62da      	str	r2, [r3, #44]	@ 0x2c
	stepper->htim->Instance->PSC = 0;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	681b      	ldr	r3, [r3, #0]
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	629a      	str	r2, [r3, #40]	@ 0x28
	stepper->speed = (float) clk_freq*stepper->stepDist/((stepper->htim->Instance->ARR+1)*(stepper->htim->Instance->PSC+1));
 8000dc6:	697b      	ldr	r3, [r7, #20]
 8000dc8:	edd3 7a01 	vldr	s15, [r3, #4]
 8000dcc:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000e10 <Stepper_Init+0xd4>
 8000dd0:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ddc:	3301      	adds	r3, #1
 8000dde:	697a      	ldr	r2, [r7, #20]
 8000de0:	6812      	ldr	r2, [r2, #0]
 8000de2:	6812      	ldr	r2, [r2, #0]
 8000de4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000de6:	3201      	adds	r2, #1
 8000de8:	fb02 f303 	mul.w	r3, r2, r3
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000df4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	// Set default acceleration
	stepper->acceleration = 30;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	4a04      	ldr	r2, [pc, #16]	@ (8000e14 <Stepper_Init+0xd8>)
 8000e02:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000e04:	bf00      	nop
 8000e06:	3718      	adds	r7, #24
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	000cd13f 	.word	0x000cd13f
 8000e10:	4ca037a0 	.word	0x4ca037a0
 8000e14:	41f00000 	.word	0x41f00000

08000e18 <Stepper_Enable>:

void Stepper_Enable(Stepper* stepper){
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b082      	sub	sp, #8
 8000e1c:	af00      	add	r7, sp, #0
 8000e1e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(stepper->enablePort, stepper->enablePin, GPIO_PIN_RESET);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	6898      	ldr	r0, [r3, #8]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	899b      	ldrh	r3, [r3, #12]
 8000e28:	2200      	movs	r2, #0
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	f001 f81e 	bl	8001e6c <HAL_GPIO_WritePin>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <Stepper_Disable>:

void Stepper_Disable(Stepper *stepper){
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b082      	sub	sp, #8
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(stepper->enablePort, stepper->enablePin, GPIO_PIN_SET);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	6898      	ldr	r0, [r3, #8]
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	899b      	ldrh	r3, [r3, #12]
 8000e48:	2201      	movs	r2, #1
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	f001 f80e 	bl	8001e6c <HAL_GPIO_WritePin>
}
 8000e50:	bf00      	nop
 8000e52:	3708      	adds	r7, #8
 8000e54:	46bd      	mov	sp, r7
 8000e56:	bd80      	pop	{r7, pc}

08000e58 <Stepper_Start>:

void Stepper_Start(Stepper* stepper){
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b082      	sub	sp, #8
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]

	// Reset speed at launching
	Stepper_SetSpeed(stepper, 0);
 8000e60:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8000e84 <Stepper_Start+0x2c>
 8000e64:	6878      	ldr	r0, [r7, #4]
 8000e66:	f000 f8dd 	bl	8001024 <Stepper_SetSpeed>

	// Start PWM timer which pulses the stepper
	HAL_TIM_PWM_Start(stepper->htim, TIM_CHANNEL_1);
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f001 ff69 	bl	8002d48 <HAL_TIM_PWM_Start>

	// Start timer responsible for accelerating the stepper
	HAL_TIM_Base_Start_IT(&htim6);
 8000e76:	4804      	ldr	r0, [pc, #16]	@ (8000e88 <Stepper_Start+0x30>)
 8000e78:	f001 fe6e 	bl	8002b58 <HAL_TIM_Base_Start_IT>

}
 8000e7c:	bf00      	nop
 8000e7e:	3708      	adds	r7, #8
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	00000000 	.word	0x00000000
 8000e88:	20000280 	.word	0x20000280

08000e8c <Stepper_Stop>:

void Stepper_Stop(Stepper* stepper){
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	6078      	str	r0, [r7, #4]

	// Start PWM timer which pulses the stepper
	HAL_TIM_PWM_Stop(stepper->htim, TIM_CHANNEL_1);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	2100      	movs	r1, #0
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f002 f81c 	bl	8002ed8 <HAL_TIM_PWM_Stop>

	// Stop the timer responsible for accelerating the motor
	HAL_TIM_Base_Stop_IT(&htim6);
 8000ea0:	4803      	ldr	r0, [pc, #12]	@ (8000eb0 <Stepper_Stop+0x24>)
 8000ea2:	f001 fec9 	bl	8002c38 <HAL_TIM_Base_Stop_IT>
}
 8000ea6:	bf00      	nop
 8000ea8:	3708      	adds	r7, #8
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	20000280 	.word	0x20000280

08000eb4 <Stepper_SetDirection>:

void Stepper_ToggleDirection(Stepper* stepper){
	HAL_GPIO_TogglePin(stepper->dirPort, stepper->dirPin);
}

void Stepper_SetDirection(Stepper* stepper, Direction direction){
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
 8000ebc:	460b      	mov	r3, r1
 8000ebe:	70fb      	strb	r3, [r7, #3]
	HAL_GPIO_WritePin(stepper->dirPort, stepper->dirPin, direction);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	6998      	ldr	r0, [r3, #24]
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	8b9b      	ldrh	r3, [r3, #28]
 8000ec8:	78fa      	ldrb	r2, [r7, #3]
 8000eca:	4619      	mov	r1, r3
 8000ecc:	f000 ffce 	bl	8001e6c <HAL_GPIO_WritePin>
}
 8000ed0:	bf00      	nop
 8000ed2:	3708      	adds	r7, #8
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	bd80      	pop	{r7, pc}

08000ed8 <Stepper_SetMicroStep>:

void Stepper_SetMicroStep(Stepper* stepper, MicrosteppingMode divider){
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b082      	sub	sp, #8
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	6078      	str	r0, [r7, #4]
 8000ee0:	460b      	mov	r3, r1
 8000ee2:	70fb      	strb	r3, [r7, #3]
	switch (divider){
 8000ee4:	78fb      	ldrb	r3, [r7, #3]
 8000ee6:	3b01      	subs	r3, #1
 8000ee8:	2b0f      	cmp	r3, #15
 8000eea:	f200 8082 	bhi.w	8000ff2 <Stepper_SetMicroStep+0x11a>
 8000eee:	a201      	add	r2, pc, #4	@ (adr r2, 8000ef4 <Stepper_SetMicroStep+0x1c>)
 8000ef0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ef4:	08000f35 	.word	0x08000f35
 8000ef8:	08000f5b 	.word	0x08000f5b
 8000efc:	08000ff3 	.word	0x08000ff3
 8000f00:	08000f81 	.word	0x08000f81
 8000f04:	08000ff3 	.word	0x08000ff3
 8000f08:	08000ff3 	.word	0x08000ff3
 8000f0c:	08000ff3 	.word	0x08000ff3
 8000f10:	08000fa7 	.word	0x08000fa7
 8000f14:	08000ff3 	.word	0x08000ff3
 8000f18:	08000ff3 	.word	0x08000ff3
 8000f1c:	08000ff3 	.word	0x08000ff3
 8000f20:	08000ff3 	.word	0x08000ff3
 8000f24:	08000ff3 	.word	0x08000ff3
 8000f28:	08000ff3 	.word	0x08000ff3
 8000f2c:	08000ff3 	.word	0x08000ff3
 8000f30:	08000fcd 	.word	0x08000fcd

	case FULL_STEP:
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET);
 8000f34:	2200      	movs	r2, #0
 8000f36:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f3a:	4830      	ldr	r0, [pc, #192]	@ (8000ffc <Stepper_SetMicroStep+0x124>)
 8000f3c:	f000 ff96 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_RESET);
 8000f40:	2200      	movs	r2, #0
 8000f42:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f46:	482d      	ldr	r0, [pc, #180]	@ (8000ffc <Stepper_SetMicroStep+0x124>)
 8000f48:	f000 ff90 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f52:	482b      	ldr	r0, [pc, #172]	@ (8001000 <Stepper_SetMicroStep+0x128>)
 8000f54:	f000 ff8a 	bl	8001e6c <HAL_GPIO_WritePin>
		break;
 8000f58:	e04c      	b.n	8000ff4 <Stepper_SetMicroStep+0x11c>
	case HALF_STEP:
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_SET);
 8000f5a:	2201      	movs	r2, #1
 8000f5c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f60:	4826      	ldr	r0, [pc, #152]	@ (8000ffc <Stepper_SetMicroStep+0x124>)
 8000f62:	f000 ff83 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_RESET);
 8000f66:	2200      	movs	r2, #0
 8000f68:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f6c:	4823      	ldr	r0, [pc, #140]	@ (8000ffc <Stepper_SetMicroStep+0x124>)
 8000f6e:	f000 ff7d 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 8000f72:	2200      	movs	r2, #0
 8000f74:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f78:	4821      	ldr	r0, [pc, #132]	@ (8001000 <Stepper_SetMicroStep+0x128>)
 8000f7a:	f000 ff77 	bl	8001e6c <HAL_GPIO_WritePin>
		break;
 8000f7e:	e039      	b.n	8000ff4 <Stepper_SetMicroStep+0x11c>
	case QUARTER_STEP:
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET);
 8000f80:	2200      	movs	r2, #0
 8000f82:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f86:	481d      	ldr	r0, [pc, #116]	@ (8000ffc <Stepper_SetMicroStep+0x124>)
 8000f88:	f000 ff70 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f92:	481a      	ldr	r0, [pc, #104]	@ (8000ffc <Stepper_SetMicroStep+0x124>)
 8000f94:	f000 ff6a 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f9e:	4818      	ldr	r0, [pc, #96]	@ (8001000 <Stepper_SetMicroStep+0x128>)
 8000fa0:	f000 ff64 	bl	8001e6c <HAL_GPIO_WritePin>
		break;
 8000fa4:	e026      	b.n	8000ff4 <Stepper_SetMicroStep+0x11c>
	case EIGHTH_STEP:
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_SET);
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fac:	4813      	ldr	r0, [pc, #76]	@ (8000ffc <Stepper_SetMicroStep+0x124>)
 8000fae:	f000 ff5d 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fb8:	4810      	ldr	r0, [pc, #64]	@ (8000ffc <Stepper_SetMicroStep+0x124>)
 8000fba:	f000 ff57 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fc4:	480e      	ldr	r0, [pc, #56]	@ (8001000 <Stepper_SetMicroStep+0x128>)
 8000fc6:	f000 ff51 	bl	8001e6c <HAL_GPIO_WritePin>
		break;
 8000fca:	e013      	b.n	8000ff4 <Stepper_SetMicroStep+0x11c>
	case SIXTEENTH_STEP:
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_SET);
 8000fcc:	2201      	movs	r2, #1
 8000fce:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fd2:	480a      	ldr	r0, [pc, #40]	@ (8000ffc <Stepper_SetMicroStep+0x124>)
 8000fd4:	f000 ff4a 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 8000fd8:	2201      	movs	r2, #1
 8000fda:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fde:	4807      	ldr	r0, [pc, #28]	@ (8000ffc <Stepper_SetMicroStep+0x124>)
 8000fe0:	f000 ff44 	bl	8001e6c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_SET);
 8000fe4:	2201      	movs	r2, #1
 8000fe6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fea:	4805      	ldr	r0, [pc, #20]	@ (8001000 <Stepper_SetMicroStep+0x128>)
 8000fec:	f000 ff3e 	bl	8001e6c <HAL_GPIO_WritePin>
		break;
 8000ff0:	e000      	b.n	8000ff4 <Stepper_SetMicroStep+0x11c>
	default:
		break;
 8000ff2:	bf00      	nop
	}
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	40020000 	.word	0x40020000
 8001000:	40020400 	.word	0x40020400

08001004 <Stepper_SetSpeedLimit>:

void Stepper_SetSpeedLimit(Stepper* stepper, float speedLimit){
 8001004:	b480      	push	{r7}
 8001006:	b083      	sub	sp, #12
 8001008:	af00      	add	r7, sp, #0
 800100a:	6078      	str	r0, [r7, #4]
 800100c:	ed87 0a00 	vstr	s0, [r7]
	stepper->speedLimit = speedLimit;
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	683a      	ldr	r2, [r7, #0]
 8001014:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8001016:	bf00      	nop
 8001018:	370c      	adds	r7, #12
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr
	...

08001024 <Stepper_SetSpeed>:

void Stepper_SetSpeed(Stepper* stepper, float speed){
 8001024:	b480      	push	{r7}
 8001026:	b083      	sub	sp, #12
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	ed87 0a00 	vstr	s0, [r7]
	stepper->speed = speed;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	683a      	ldr	r2, [r7, #0]
 8001034:	639a      	str	r2, [r3, #56]	@ 0x38
	// resetting the CNT to avoid CNT>ARR when speeding up (ARR decreases)
	__HAL_TIM_SET_COUNTER(stepper->htim,0);
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_AUTORELOAD(stepper->htim, (uint32_t) clk_freq*stepper->stepDist/(stepper->speed*(stepper->htim->Instance->PSC+1))-1);
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	edd3 7a01 	vldr	s15, [r3, #4]
 8001046:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 80010d8 <Stepper_SetSpeed+0xb4>
 800104a:	ee67 6a87 	vmul.f32	s13, s15, s14
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800105c:	3301      	adds	r3, #1
 800105e:	ee07 3a90 	vmov	s15, r3
 8001062:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001066:	ee27 7a27 	vmul.f32	s14, s14, s15
 800106a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800106e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001072:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001080:	ee17 2a90 	vmov	r2, s15
 8001084:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	edd3 7a01 	vldr	s15, [r3, #4]
 800108c:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80010d8 <Stepper_SetSpeed+0xb4>
 8001090:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a2:	3301      	adds	r3, #1
 80010a4:	ee07 3a90 	vmov	s15, r3
 80010a8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ac:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010b8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c4:	ee17 2a90 	vmov	r2, s15
 80010c8:	60da      	str	r2, [r3, #12]
}
 80010ca:	bf00      	nop
 80010cc:	370c      	adds	r7, #12
 80010ce:	46bd      	mov	sp, r7
 80010d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d4:	4770      	bx	lr
 80010d6:	bf00      	nop
 80010d8:	4ca037a0 	.word	0x4ca037a0

080010dc <Stepper_SpeedUp>:

void Stepper_SpeedUp(Stepper *stepper, float deltaSpeed){
 80010dc:	b580      	push	{r7, lr}
 80010de:	b082      	sub	sp, #8
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
 80010e4:	ed87 0a00 	vstr	s0, [r7]
	Stepper_SetSpeed(stepper, stepper->speed + deltaSpeed);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80010ee:	edd7 7a00 	vldr	s15, [r7]
 80010f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010f6:	eeb0 0a67 	vmov.f32	s0, s15
 80010fa:	6878      	ldr	r0, [r7, #4]
 80010fc:	f7ff ff92 	bl	8001024 <Stepper_SetSpeed>
}
 8001100:	bf00      	nop
 8001102:	3708      	adds	r7, #8
 8001104:	46bd      	mov	sp, r7
 8001106:	bd80      	pop	{r7, pc}

08001108 <Stepper_SetAcceleration>:

void Stepper_SetAcceleration(Stepper *stepper, float acceleration){
 8001108:	b480      	push	{r7}
 800110a:	b083      	sub	sp, #12
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]
 8001110:	ed87 0a00 	vstr	s0, [r7]
	stepper->acceleration = acceleration;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	683a      	ldr	r2, [r7, #0]
 8001118:	641a      	str	r2, [r3, #64]	@ 0x40
}
 800111a:	bf00      	nop
 800111c:	370c      	adds	r7, #12
 800111e:	46bd      	mov	sp, r7
 8001120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001124:	4770      	bx	lr
	...

08001128 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b082      	sub	sp, #8
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800112e:	2300      	movs	r3, #0
 8001130:	607b      	str	r3, [r7, #4]
 8001132:	4b10      	ldr	r3, [pc, #64]	@ (8001174 <HAL_MspInit+0x4c>)
 8001134:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001136:	4a0f      	ldr	r2, [pc, #60]	@ (8001174 <HAL_MspInit+0x4c>)
 8001138:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800113c:	6453      	str	r3, [r2, #68]	@ 0x44
 800113e:	4b0d      	ldr	r3, [pc, #52]	@ (8001174 <HAL_MspInit+0x4c>)
 8001140:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001142:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001146:	607b      	str	r3, [r7, #4]
 8001148:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800114a:	2300      	movs	r3, #0
 800114c:	603b      	str	r3, [r7, #0]
 800114e:	4b09      	ldr	r3, [pc, #36]	@ (8001174 <HAL_MspInit+0x4c>)
 8001150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001152:	4a08      	ldr	r2, [pc, #32]	@ (8001174 <HAL_MspInit+0x4c>)
 8001154:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001158:	6413      	str	r3, [r2, #64]	@ 0x40
 800115a:	4b06      	ldr	r3, [pc, #24]	@ (8001174 <HAL_MspInit+0x4c>)
 800115c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800115e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001166:	2007      	movs	r0, #7
 8001168:	f000 fc18 	bl	800199c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800116c:	bf00      	nop
 800116e:	3708      	adds	r7, #8
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	40023800 	.word	0x40023800

08001178 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001178:	b480      	push	{r7}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800117c:	bf00      	nop
 800117e:	e7fd      	b.n	800117c <NMI_Handler+0x4>

08001180 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001180:	b480      	push	{r7}
 8001182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001184:	bf00      	nop
 8001186:	e7fd      	b.n	8001184 <HardFault_Handler+0x4>

08001188 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001188:	b480      	push	{r7}
 800118a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800118c:	bf00      	nop
 800118e:	e7fd      	b.n	800118c <MemManage_Handler+0x4>

08001190 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001190:	b480      	push	{r7}
 8001192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001194:	bf00      	nop
 8001196:	e7fd      	b.n	8001194 <BusFault_Handler+0x4>

08001198 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001198:	b480      	push	{r7}
 800119a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800119c:	bf00      	nop
 800119e:	e7fd      	b.n	800119c <UsageFault_Handler+0x4>

080011a0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011a0:	b480      	push	{r7}
 80011a2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011a4:	bf00      	nop
 80011a6:	46bd      	mov	sp, r7
 80011a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ac:	4770      	bx	lr

080011ae <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011b2:	bf00      	nop
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr

080011ca <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011ca:	b580      	push	{r7, lr}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011ce:	f000 faf5 	bl	80017bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011d2:	bf00      	nop
 80011d4:	bd80      	pop	{r7, pc}
	...

080011d8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80011dc:	4802      	ldr	r0, [pc, #8]	@ (80011e8 <TIM3_IRQHandler+0x10>)
 80011de:	f001 feeb 	bl	8002fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80011e2:	bf00      	nop
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	20000238 	.word	0x20000238

080011ec <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80011f0:	4802      	ldr	r0, [pc, #8]	@ (80011fc <USART2_IRQHandler+0x10>)
 80011f2:	f002 fead 	bl	8003f50 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	200002c8 	.word	0x200002c8

08001200 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001204:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001208:	f000 fe4a 	bl	8001ea0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}

08001210 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001214:	4802      	ldr	r0, [pc, #8]	@ (8001220 <TIM6_DAC_IRQHandler+0x10>)
 8001216:	f001 fecf 	bl	8002fb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	20000280 	.word	0x20000280

08001224 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b086      	sub	sp, #24
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800122c:	4a14      	ldr	r2, [pc, #80]	@ (8001280 <_sbrk+0x5c>)
 800122e:	4b15      	ldr	r3, [pc, #84]	@ (8001284 <_sbrk+0x60>)
 8001230:	1ad3      	subs	r3, r2, r3
 8001232:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001234:	697b      	ldr	r3, [r7, #20]
 8001236:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001238:	4b13      	ldr	r3, [pc, #76]	@ (8001288 <_sbrk+0x64>)
 800123a:	681b      	ldr	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d102      	bne.n	8001246 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001240:	4b11      	ldr	r3, [pc, #68]	@ (8001288 <_sbrk+0x64>)
 8001242:	4a12      	ldr	r2, [pc, #72]	@ (800128c <_sbrk+0x68>)
 8001244:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001246:	4b10      	ldr	r3, [pc, #64]	@ (8001288 <_sbrk+0x64>)
 8001248:	681a      	ldr	r2, [r3, #0]
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	4413      	add	r3, r2
 800124e:	693a      	ldr	r2, [r7, #16]
 8001250:	429a      	cmp	r2, r3
 8001252:	d207      	bcs.n	8001264 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001254:	f003 fdae 	bl	8004db4 <__errno>
 8001258:	4603      	mov	r3, r0
 800125a:	220c      	movs	r2, #12
 800125c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125e:	f04f 33ff 	mov.w	r3, #4294967295
 8001262:	e009      	b.n	8001278 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001264:	4b08      	ldr	r3, [pc, #32]	@ (8001288 <_sbrk+0x64>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <_sbrk+0x64>)
 800126c:	681a      	ldr	r2, [r3, #0]
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	4413      	add	r3, r2
 8001272:	4a05      	ldr	r2, [pc, #20]	@ (8001288 <_sbrk+0x64>)
 8001274:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001276:	68fb      	ldr	r3, [r7, #12]
}
 8001278:	4618      	mov	r0, r3
 800127a:	3718      	adds	r7, #24
 800127c:	46bd      	mov	sp, r7
 800127e:	bd80      	pop	{r7, pc}
 8001280:	20020000 	.word	0x20020000
 8001284:	00000400 	.word	0x00000400
 8001288:	200001ec 	.word	0x200001ec
 800128c:	20000460 	.word	0x20000460

08001290 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001294:	4b06      	ldr	r3, [pc, #24]	@ (80012b0 <SystemInit+0x20>)
 8001296:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800129a:	4a05      	ldr	r2, [pc, #20]	@ (80012b0 <SystemInit+0x20>)
 800129c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012a0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a4:	bf00      	nop
 80012a6:	46bd      	mov	sp, r7
 80012a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ac:	4770      	bx	lr
 80012ae:	bf00      	nop
 80012b0:	e000ed00 	.word	0xe000ed00

080012b4 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08e      	sub	sp, #56	@ 0x38
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ba:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80012be:	2200      	movs	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]
 80012c2:	605a      	str	r2, [r3, #4]
 80012c4:	609a      	str	r2, [r3, #8]
 80012c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c8:	f107 0320 	add.w	r3, r7, #32
 80012cc:	2200      	movs	r2, #0
 80012ce:	601a      	str	r2, [r3, #0]
 80012d0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	2200      	movs	r2, #0
 80012d6:	601a      	str	r2, [r3, #0]
 80012d8:	605a      	str	r2, [r3, #4]
 80012da:	609a      	str	r2, [r3, #8]
 80012dc:	60da      	str	r2, [r3, #12]
 80012de:	611a      	str	r2, [r3, #16]
 80012e0:	615a      	str	r2, [r3, #20]
 80012e2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80012e4:	4b2d      	ldr	r3, [pc, #180]	@ (800139c <MX_TIM2_Init+0xe8>)
 80012e6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80012ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80012ec:	4b2b      	ldr	r3, [pc, #172]	@ (800139c <MX_TIM2_Init+0xe8>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f2:	4b2a      	ldr	r3, [pc, #168]	@ (800139c <MX_TIM2_Init+0xe8>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 839999;
 80012f8:	4b28      	ldr	r3, [pc, #160]	@ (800139c <MX_TIM2_Init+0xe8>)
 80012fa:	4a29      	ldr	r2, [pc, #164]	@ (80013a0 <MX_TIM2_Init+0xec>)
 80012fc:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fe:	4b27      	ldr	r3, [pc, #156]	@ (800139c <MX_TIM2_Init+0xe8>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001304:	4b25      	ldr	r3, [pc, #148]	@ (800139c <MX_TIM2_Init+0xe8>)
 8001306:	2200      	movs	r2, #0
 8001308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800130a:	4824      	ldr	r0, [pc, #144]	@ (800139c <MX_TIM2_Init+0xe8>)
 800130c:	f001 fbd4 	bl	8002ab8 <HAL_TIM_Base_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 8001316:	f7ff fd0b 	bl	8000d30 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001320:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001324:	4619      	mov	r1, r3
 8001326:	481d      	ldr	r0, [pc, #116]	@ (800139c <MX_TIM2_Init+0xe8>)
 8001328:	f001 fff8 	bl	800331c <HAL_TIM_ConfigClockSource>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 8001332:	f7ff fcfd 	bl	8000d30 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001336:	4819      	ldr	r0, [pc, #100]	@ (800139c <MX_TIM2_Init+0xe8>)
 8001338:	f001 fcad 	bl	8002c96 <HAL_TIM_PWM_Init>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 8001342:	f7ff fcf5 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001346:	2320      	movs	r3, #32
 8001348:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 800134a:	2380      	movs	r3, #128	@ 0x80
 800134c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800134e:	f107 0320 	add.w	r3, r7, #32
 8001352:	4619      	mov	r1, r3
 8001354:	4811      	ldr	r0, [pc, #68]	@ (800139c <MX_TIM2_Init+0xe8>)
 8001356:	f002 fcbf 	bl	8003cd8 <HAL_TIMEx_MasterConfigSynchronization>
 800135a:	4603      	mov	r3, r0
 800135c:	2b00      	cmp	r3, #0
 800135e:	d001      	beq.n	8001364 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8001360:	f7ff fce6 	bl	8000d30 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001364:	2360      	movs	r3, #96	@ 0x60
 8001366:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8001368:	f242 7310 	movw	r3, #10000	@ 0x2710
 800136c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800136e:	2300      	movs	r3, #0
 8001370:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001376:	1d3b      	adds	r3, r7, #4
 8001378:	2200      	movs	r2, #0
 800137a:	4619      	mov	r1, r3
 800137c:	4807      	ldr	r0, [pc, #28]	@ (800139c <MX_TIM2_Init+0xe8>)
 800137e:	f001 ff0b 	bl	8003198 <HAL_TIM_PWM_ConfigChannel>
 8001382:	4603      	mov	r3, r0
 8001384:	2b00      	cmp	r3, #0
 8001386:	d001      	beq.n	800138c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001388:	f7ff fcd2 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800138c:	4803      	ldr	r0, [pc, #12]	@ (800139c <MX_TIM2_Init+0xe8>)
 800138e:	f000 f8e7 	bl	8001560 <HAL_TIM_MspPostInit>

}
 8001392:	bf00      	nop
 8001394:	3738      	adds	r7, #56	@ 0x38
 8001396:	46bd      	mov	sp, r7
 8001398:	bd80      	pop	{r7, pc}
 800139a:	bf00      	nop
 800139c:	200001f0 	.word	0x200001f0
 80013a0:	000cd13f 	.word	0x000cd13f

080013a4 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b088      	sub	sp, #32
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013ba:	1d3b      	adds	r3, r7, #4
 80013bc:	2200      	movs	r2, #0
 80013be:	601a      	str	r2, [r3, #0]
 80013c0:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c2:	4b1d      	ldr	r3, [pc, #116]	@ (8001438 <MX_TIM3_Init+0x94>)
 80013c4:	4a1d      	ldr	r2, [pc, #116]	@ (800143c <MX_TIM3_Init+0x98>)
 80013c6:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013c8:	4b1b      	ldr	r3, [pc, #108]	@ (8001438 <MX_TIM3_Init+0x94>)
 80013ca:	2200      	movs	r2, #0
 80013cc:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013ce:	4b1a      	ldr	r3, [pc, #104]	@ (8001438 <MX_TIM3_Init+0x94>)
 80013d0:	2200      	movs	r2, #0
 80013d2:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 80013d4:	4b18      	ldr	r3, [pc, #96]	@ (8001438 <MX_TIM3_Init+0x94>)
 80013d6:	22c8      	movs	r2, #200	@ 0xc8
 80013d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <MX_TIM3_Init+0x94>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b15      	ldr	r3, [pc, #84]	@ (8001438 <MX_TIM3_Init+0x94>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013e6:	4814      	ldr	r0, [pc, #80]	@ (8001438 <MX_TIM3_Init+0x94>)
 80013e8:	f001 fb66 	bl	8002ab8 <HAL_TIM_Base_Init>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80013f2:	f7ff fc9d 	bl	8000d30 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80013f6:	2307      	movs	r3, #7
 80013f8:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80013fa:	2310      	movs	r3, #16
 80013fc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80013fe:	f107 030c 	add.w	r3, r7, #12
 8001402:	4619      	mov	r1, r3
 8001404:	480c      	ldr	r0, [pc, #48]	@ (8001438 <MX_TIM3_Init+0x94>)
 8001406:	f002 f850 	bl	80034aa <HAL_TIM_SlaveConfigSynchro>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001410:	f7ff fc8e 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001414:	2300      	movs	r3, #0
 8001416:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800141c:	1d3b      	adds	r3, r7, #4
 800141e:	4619      	mov	r1, r3
 8001420:	4805      	ldr	r0, [pc, #20]	@ (8001438 <MX_TIM3_Init+0x94>)
 8001422:	f002 fc59 	bl	8003cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 800142c:	f7ff fc80 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001430:	bf00      	nop
 8001432:	3720      	adds	r7, #32
 8001434:	46bd      	mov	sp, r7
 8001436:	bd80      	pop	{r7, pc}
 8001438:	20000238 	.word	0x20000238
 800143c:	40000400 	.word	0x40000400

08001440 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001446:	463b      	mov	r3, r7
 8001448:	2200      	movs	r2, #0
 800144a:	601a      	str	r2, [r3, #0]
 800144c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800144e:	4b15      	ldr	r3, [pc, #84]	@ (80014a4 <MX_TIM6_Init+0x64>)
 8001450:	4a15      	ldr	r2, [pc, #84]	@ (80014a8 <MX_TIM6_Init+0x68>)
 8001452:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 8001454:	4b13      	ldr	r3, [pc, #76]	@ (80014a4 <MX_TIM6_Init+0x64>)
 8001456:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 800145a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800145c:	4b11      	ldr	r3, [pc, #68]	@ (80014a4 <MX_TIM6_Init+0x64>)
 800145e:	2200      	movs	r2, #0
 8001460:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8400;
 8001462:	4b10      	ldr	r3, [pc, #64]	@ (80014a4 <MX_TIM6_Init+0x64>)
 8001464:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8001468:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b0e      	ldr	r3, [pc, #56]	@ (80014a4 <MX_TIM6_Init+0x64>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001470:	480c      	ldr	r0, [pc, #48]	@ (80014a4 <MX_TIM6_Init+0x64>)
 8001472:	f001 fb21 	bl	8002ab8 <HAL_TIM_Base_Init>
 8001476:	4603      	mov	r3, r0
 8001478:	2b00      	cmp	r3, #0
 800147a:	d001      	beq.n	8001480 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800147c:	f7ff fc58 	bl	8000d30 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001480:	2300      	movs	r3, #0
 8001482:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001488:	463b      	mov	r3, r7
 800148a:	4619      	mov	r1, r3
 800148c:	4805      	ldr	r0, [pc, #20]	@ (80014a4 <MX_TIM6_Init+0x64>)
 800148e:	f002 fc23 	bl	8003cd8 <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001498:	f7ff fc4a 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800149c:	bf00      	nop
 800149e:	3708      	adds	r7, #8
 80014a0:	46bd      	mov	sp, r7
 80014a2:	bd80      	pop	{r7, pc}
 80014a4:	20000280 	.word	0x20000280
 80014a8:	40001000 	.word	0x40001000

080014ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014ac:	b580      	push	{r7, lr}
 80014ae:	b086      	sub	sp, #24
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80014bc:	d10e      	bne.n	80014dc <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	617b      	str	r3, [r7, #20]
 80014c2:	4b24      	ldr	r3, [pc, #144]	@ (8001554 <HAL_TIM_Base_MspInit+0xa8>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c6:	4a23      	ldr	r2, [pc, #140]	@ (8001554 <HAL_TIM_Base_MspInit+0xa8>)
 80014c8:	f043 0301 	orr.w	r3, r3, #1
 80014cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014ce:	4b21      	ldr	r3, [pc, #132]	@ (8001554 <HAL_TIM_Base_MspInit+0xa8>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014d2:	f003 0301 	and.w	r3, r3, #1
 80014d6:	617b      	str	r3, [r7, #20]
 80014d8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 80014da:	e036      	b.n	800154a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a1d      	ldr	r2, [pc, #116]	@ (8001558 <HAL_TIM_Base_MspInit+0xac>)
 80014e2:	4293      	cmp	r3, r2
 80014e4:	d116      	bne.n	8001514 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80014e6:	2300      	movs	r3, #0
 80014e8:	613b      	str	r3, [r7, #16]
 80014ea:	4b1a      	ldr	r3, [pc, #104]	@ (8001554 <HAL_TIM_Base_MspInit+0xa8>)
 80014ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014ee:	4a19      	ldr	r2, [pc, #100]	@ (8001554 <HAL_TIM_Base_MspInit+0xa8>)
 80014f0:	f043 0302 	orr.w	r3, r3, #2
 80014f4:	6413      	str	r3, [r2, #64]	@ 0x40
 80014f6:	4b17      	ldr	r3, [pc, #92]	@ (8001554 <HAL_TIM_Base_MspInit+0xa8>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	f003 0302 	and.w	r3, r3, #2
 80014fe:	613b      	str	r3, [r7, #16]
 8001500:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001502:	2200      	movs	r2, #0
 8001504:	2100      	movs	r1, #0
 8001506:	201d      	movs	r0, #29
 8001508:	f000 fa53 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800150c:	201d      	movs	r0, #29
 800150e:	f000 fa6c 	bl	80019ea <HAL_NVIC_EnableIRQ>
}
 8001512:	e01a      	b.n	800154a <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM6)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a10      	ldr	r2, [pc, #64]	@ (800155c <HAL_TIM_Base_MspInit+0xb0>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d115      	bne.n	800154a <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60fb      	str	r3, [r7, #12]
 8001522:	4b0c      	ldr	r3, [pc, #48]	@ (8001554 <HAL_TIM_Base_MspInit+0xa8>)
 8001524:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001526:	4a0b      	ldr	r2, [pc, #44]	@ (8001554 <HAL_TIM_Base_MspInit+0xa8>)
 8001528:	f043 0310 	orr.w	r3, r3, #16
 800152c:	6413      	str	r3, [r2, #64]	@ 0x40
 800152e:	4b09      	ldr	r3, [pc, #36]	@ (8001554 <HAL_TIM_Base_MspInit+0xa8>)
 8001530:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001532:	f003 0310 	and.w	r3, r3, #16
 8001536:	60fb      	str	r3, [r7, #12]
 8001538:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800153a:	2200      	movs	r2, #0
 800153c:	2100      	movs	r1, #0
 800153e:	2036      	movs	r0, #54	@ 0x36
 8001540:	f000 fa37 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001544:	2036      	movs	r0, #54	@ 0x36
 8001546:	f000 fa50 	bl	80019ea <HAL_NVIC_EnableIRQ>
}
 800154a:	bf00      	nop
 800154c:	3718      	adds	r7, #24
 800154e:	46bd      	mov	sp, r7
 8001550:	bd80      	pop	{r7, pc}
 8001552:	bf00      	nop
 8001554:	40023800 	.word	0x40023800
 8001558:	40000400 	.word	0x40000400
 800155c:	40001000 	.word	0x40001000

08001560 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b088      	sub	sp, #32
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001568:	f107 030c 	add.w	r3, r7, #12
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
 8001570:	605a      	str	r2, [r3, #4]
 8001572:	609a      	str	r2, [r3, #8]
 8001574:	60da      	str	r2, [r3, #12]
 8001576:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001580:	d11d      	bne.n	80015be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001582:	2300      	movs	r3, #0
 8001584:	60bb      	str	r3, [r7, #8]
 8001586:	4b10      	ldr	r3, [pc, #64]	@ (80015c8 <HAL_TIM_MspPostInit+0x68>)
 8001588:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800158a:	4a0f      	ldr	r2, [pc, #60]	@ (80015c8 <HAL_TIM_MspPostInit+0x68>)
 800158c:	f043 0301 	orr.w	r3, r3, #1
 8001590:	6313      	str	r3, [r2, #48]	@ 0x30
 8001592:	4b0d      	ldr	r3, [pc, #52]	@ (80015c8 <HAL_TIM_MspPostInit+0x68>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001596:	f003 0301 	and.w	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
 800159c:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800159e:	2301      	movs	r3, #1
 80015a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015a2:	2302      	movs	r3, #2
 80015a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015ae:	2301      	movs	r3, #1
 80015b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4619      	mov	r1, r3
 80015b8:	4804      	ldr	r0, [pc, #16]	@ (80015cc <HAL_TIM_MspPostInit+0x6c>)
 80015ba:	f000 fac3 	bl	8001b44 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80015be:	bf00      	nop
 80015c0:	3720      	adds	r7, #32
 80015c2:	46bd      	mov	sp, r7
 80015c4:	bd80      	pop	{r7, pc}
 80015c6:	bf00      	nop
 80015c8:	40023800 	.word	0x40023800
 80015cc:	40020000 	.word	0x40020000

080015d0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80015d4:	4b11      	ldr	r3, [pc, #68]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 80015d6:	4a12      	ldr	r2, [pc, #72]	@ (8001620 <MX_USART2_UART_Init+0x50>)
 80015d8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80015da:	4b10      	ldr	r3, [pc, #64]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 80015dc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80015e0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015e8:	4b0c      	ldr	r3, [pc, #48]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015ee:	4b0b      	ldr	r3, [pc, #44]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015f4:	4b09      	ldr	r3, [pc, #36]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 80015f6:	220c      	movs	r2, #12
 80015f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015fa:	4b08      	ldr	r3, [pc, #32]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 80015fc:	2200      	movs	r2, #0
 80015fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001600:	4b06      	ldr	r3, [pc, #24]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 8001602:	2200      	movs	r2, #0
 8001604:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001606:	4805      	ldr	r0, [pc, #20]	@ (800161c <MX_USART2_UART_Init+0x4c>)
 8001608:	f002 fbf6 	bl	8003df8 <HAL_UART_Init>
 800160c:	4603      	mov	r3, r0
 800160e:	2b00      	cmp	r3, #0
 8001610:	d001      	beq.n	8001616 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001612:	f7ff fb8d 	bl	8000d30 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001616:	bf00      	nop
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	200002c8 	.word	0x200002c8
 8001620:	40004400 	.word	0x40004400

08001624 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	@ 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a1d      	ldr	r2, [pc, #116]	@ (80016b8 <HAL_UART_MspInit+0x94>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d133      	bne.n	80016ae <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b1c      	ldr	r3, [pc, #112]	@ (80016bc <HAL_UART_MspInit+0x98>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800164e:	4a1b      	ldr	r2, [pc, #108]	@ (80016bc <HAL_UART_MspInit+0x98>)
 8001650:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001654:	6413      	str	r3, [r2, #64]	@ 0x40
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <HAL_UART_MspInit+0x98>)
 8001658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800165a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b15      	ldr	r3, [pc, #84]	@ (80016bc <HAL_UART_MspInit+0x98>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800166a:	4a14      	ldr	r2, [pc, #80]	@ (80016bc <HAL_UART_MspInit+0x98>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	@ 0x30
 8001672:	4b12      	ldr	r3, [pc, #72]	@ (80016bc <HAL_UART_MspInit+0x98>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800167e:	230c      	movs	r3, #12
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800168e:	2307      	movs	r3, #7
 8001690:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	4809      	ldr	r0, [pc, #36]	@ (80016c0 <HAL_UART_MspInit+0x9c>)
 800169a:	f000 fa53 	bl	8001b44 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800169e:	2200      	movs	r2, #0
 80016a0:	2100      	movs	r1, #0
 80016a2:	2026      	movs	r0, #38	@ 0x26
 80016a4:	f000 f985 	bl	80019b2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016a8:	2026      	movs	r0, #38	@ 0x26
 80016aa:	f000 f99e 	bl	80019ea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016ae:	bf00      	nop
 80016b0:	3728      	adds	r7, #40	@ 0x28
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	40004400 	.word	0x40004400
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000

080016c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80016c4:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016fc <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80016c8:	f7ff fde2 	bl	8001290 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016cc:	480c      	ldr	r0, [pc, #48]	@ (8001700 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016ce:	490d      	ldr	r1, [pc, #52]	@ (8001704 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016d0:	4a0d      	ldr	r2, [pc, #52]	@ (8001708 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016d4:	e002      	b.n	80016dc <LoopCopyDataInit>

080016d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016da:	3304      	adds	r3, #4

080016dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016e0:	d3f9      	bcc.n	80016d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016e2:	4a0a      	ldr	r2, [pc, #40]	@ (800170c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016e4:	4c0a      	ldr	r4, [pc, #40]	@ (8001710 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016e8:	e001      	b.n	80016ee <LoopFillZerobss>

080016ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ec:	3204      	adds	r2, #4

080016ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016f0:	d3fb      	bcc.n	80016ea <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016f2:	f003 fb65 	bl	8004dc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016f6:	f7ff f9c5 	bl	8000a84 <main>
  bx  lr    
 80016fa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016fc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001700:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001704:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8001708:	08005b20 	.word	0x08005b20
  ldr r2, =_sbss
 800170c:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8001710:	2000045c 	.word	0x2000045c

08001714 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001714:	e7fe      	b.n	8001714 <ADC_IRQHandler>
	...

08001718 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001718:	b580      	push	{r7, lr}
 800171a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800171c:	4b0e      	ldr	r3, [pc, #56]	@ (8001758 <HAL_Init+0x40>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a0d      	ldr	r2, [pc, #52]	@ (8001758 <HAL_Init+0x40>)
 8001722:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001726:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001728:	4b0b      	ldr	r3, [pc, #44]	@ (8001758 <HAL_Init+0x40>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a0a      	ldr	r2, [pc, #40]	@ (8001758 <HAL_Init+0x40>)
 800172e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001732:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001734:	4b08      	ldr	r3, [pc, #32]	@ (8001758 <HAL_Init+0x40>)
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	4a07      	ldr	r2, [pc, #28]	@ (8001758 <HAL_Init+0x40>)
 800173a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800173e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001740:	2003      	movs	r0, #3
 8001742:	f000 f92b 	bl	800199c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001746:	2000      	movs	r0, #0
 8001748:	f000 f808 	bl	800175c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800174c:	f7ff fcec 	bl	8001128 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001750:	2300      	movs	r3, #0
}
 8001752:	4618      	mov	r0, r3
 8001754:	bd80      	pop	{r7, pc}
 8001756:	bf00      	nop
 8001758:	40023c00 	.word	0x40023c00

0800175c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b082      	sub	sp, #8
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001764:	4b12      	ldr	r3, [pc, #72]	@ (80017b0 <HAL_InitTick+0x54>)
 8001766:	681a      	ldr	r2, [r3, #0]
 8001768:	4b12      	ldr	r3, [pc, #72]	@ (80017b4 <HAL_InitTick+0x58>)
 800176a:	781b      	ldrb	r3, [r3, #0]
 800176c:	4619      	mov	r1, r3
 800176e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001772:	fbb3 f3f1 	udiv	r3, r3, r1
 8001776:	fbb2 f3f3 	udiv	r3, r2, r3
 800177a:	4618      	mov	r0, r3
 800177c:	f000 f943 	bl	8001a06 <HAL_SYSTICK_Config>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d001      	beq.n	800178a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e00e      	b.n	80017a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	2b0f      	cmp	r3, #15
 800178e:	d80a      	bhi.n	80017a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001790:	2200      	movs	r2, #0
 8001792:	6879      	ldr	r1, [r7, #4]
 8001794:	f04f 30ff 	mov.w	r0, #4294967295
 8001798:	f000 f90b 	bl	80019b2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800179c:	4a06      	ldr	r2, [pc, #24]	@ (80017b8 <HAL_InitTick+0x5c>)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017a2:	2300      	movs	r3, #0
 80017a4:	e000      	b.n	80017a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017a6:	2301      	movs	r3, #1
}
 80017a8:	4618      	mov	r0, r3
 80017aa:	3708      	adds	r7, #8
 80017ac:	46bd      	mov	sp, r7
 80017ae:	bd80      	pop	{r7, pc}
 80017b0:	200000dc 	.word	0x200000dc
 80017b4:	200000e4 	.word	0x200000e4
 80017b8:	200000e0 	.word	0x200000e0

080017bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80017c0:	4b06      	ldr	r3, [pc, #24]	@ (80017dc <HAL_IncTick+0x20>)
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	461a      	mov	r2, r3
 80017c6:	4b06      	ldr	r3, [pc, #24]	@ (80017e0 <HAL_IncTick+0x24>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4413      	add	r3, r2
 80017cc:	4a04      	ldr	r2, [pc, #16]	@ (80017e0 <HAL_IncTick+0x24>)
 80017ce:	6013      	str	r3, [r2, #0]
}
 80017d0:	bf00      	nop
 80017d2:	46bd      	mov	sp, r7
 80017d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017d8:	4770      	bx	lr
 80017da:	bf00      	nop
 80017dc:	200000e4 	.word	0x200000e4
 80017e0:	20000310 	.word	0x20000310

080017e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017e4:	b480      	push	{r7}
 80017e6:	af00      	add	r7, sp, #0
  return uwTick;
 80017e8:	4b03      	ldr	r3, [pc, #12]	@ (80017f8 <HAL_GetTick+0x14>)
 80017ea:	681b      	ldr	r3, [r3, #0]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	46bd      	mov	sp, r7
 80017f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017f4:	4770      	bx	lr
 80017f6:	bf00      	nop
 80017f8:	20000310 	.word	0x20000310

080017fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017fc:	b480      	push	{r7}
 80017fe:	b085      	sub	sp, #20
 8001800:	af00      	add	r7, sp, #0
 8001802:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	f003 0307 	and.w	r3, r3, #7
 800180a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800180c:	4b0c      	ldr	r3, [pc, #48]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001812:	68ba      	ldr	r2, [r7, #8]
 8001814:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001818:	4013      	ands	r3, r2
 800181a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001824:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001828:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800182c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800182e:	4a04      	ldr	r2, [pc, #16]	@ (8001840 <__NVIC_SetPriorityGrouping+0x44>)
 8001830:	68bb      	ldr	r3, [r7, #8]
 8001832:	60d3      	str	r3, [r2, #12]
}
 8001834:	bf00      	nop
 8001836:	3714      	adds	r7, #20
 8001838:	46bd      	mov	sp, r7
 800183a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183e:	4770      	bx	lr
 8001840:	e000ed00 	.word	0xe000ed00

08001844 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001848:	4b04      	ldr	r3, [pc, #16]	@ (800185c <__NVIC_GetPriorityGrouping+0x18>)
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	0a1b      	lsrs	r3, r3, #8
 800184e:	f003 0307 	and.w	r3, r3, #7
}
 8001852:	4618      	mov	r0, r3
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800186e:	2b00      	cmp	r3, #0
 8001870:	db0b      	blt.n	800188a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001872:	79fb      	ldrb	r3, [r7, #7]
 8001874:	f003 021f 	and.w	r2, r3, #31
 8001878:	4907      	ldr	r1, [pc, #28]	@ (8001898 <__NVIC_EnableIRQ+0x38>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	095b      	lsrs	r3, r3, #5
 8001880:	2001      	movs	r0, #1
 8001882:	fa00 f202 	lsl.w	r2, r0, r2
 8001886:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800188a:	bf00      	nop
 800188c:	370c      	adds	r7, #12
 800188e:	46bd      	mov	sp, r7
 8001890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001894:	4770      	bx	lr
 8001896:	bf00      	nop
 8001898:	e000e100 	.word	0xe000e100

0800189c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800189c:	b480      	push	{r7}
 800189e:	b083      	sub	sp, #12
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	6039      	str	r1, [r7, #0]
 80018a6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018a8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ac:	2b00      	cmp	r3, #0
 80018ae:	db0a      	blt.n	80018c6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	490c      	ldr	r1, [pc, #48]	@ (80018e8 <__NVIC_SetPriority+0x4c>)
 80018b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ba:	0112      	lsls	r2, r2, #4
 80018bc:	b2d2      	uxtb	r2, r2
 80018be:	440b      	add	r3, r1
 80018c0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018c4:	e00a      	b.n	80018dc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	b2da      	uxtb	r2, r3
 80018ca:	4908      	ldr	r1, [pc, #32]	@ (80018ec <__NVIC_SetPriority+0x50>)
 80018cc:	79fb      	ldrb	r3, [r7, #7]
 80018ce:	f003 030f 	and.w	r3, r3, #15
 80018d2:	3b04      	subs	r3, #4
 80018d4:	0112      	lsls	r2, r2, #4
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	440b      	add	r3, r1
 80018da:	761a      	strb	r2, [r3, #24]
}
 80018dc:	bf00      	nop
 80018de:	370c      	adds	r7, #12
 80018e0:	46bd      	mov	sp, r7
 80018e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e6:	4770      	bx	lr
 80018e8:	e000e100 	.word	0xe000e100
 80018ec:	e000ed00 	.word	0xe000ed00

080018f0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018f0:	b480      	push	{r7}
 80018f2:	b089      	sub	sp, #36	@ 0x24
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	60f8      	str	r0, [r7, #12]
 80018f8:	60b9      	str	r1, [r7, #8]
 80018fa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018fc:	68fb      	ldr	r3, [r7, #12]
 80018fe:	f003 0307 	and.w	r3, r3, #7
 8001902:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001904:	69fb      	ldr	r3, [r7, #28]
 8001906:	f1c3 0307 	rsb	r3, r3, #7
 800190a:	2b04      	cmp	r3, #4
 800190c:	bf28      	it	cs
 800190e:	2304      	movcs	r3, #4
 8001910:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001912:	69fb      	ldr	r3, [r7, #28]
 8001914:	3304      	adds	r3, #4
 8001916:	2b06      	cmp	r3, #6
 8001918:	d902      	bls.n	8001920 <NVIC_EncodePriority+0x30>
 800191a:	69fb      	ldr	r3, [r7, #28]
 800191c:	3b03      	subs	r3, #3
 800191e:	e000      	b.n	8001922 <NVIC_EncodePriority+0x32>
 8001920:	2300      	movs	r3, #0
 8001922:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001924:	f04f 32ff 	mov.w	r2, #4294967295
 8001928:	69bb      	ldr	r3, [r7, #24]
 800192a:	fa02 f303 	lsl.w	r3, r2, r3
 800192e:	43da      	mvns	r2, r3
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	401a      	ands	r2, r3
 8001934:	697b      	ldr	r3, [r7, #20]
 8001936:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001938:	f04f 31ff 	mov.w	r1, #4294967295
 800193c:	697b      	ldr	r3, [r7, #20]
 800193e:	fa01 f303 	lsl.w	r3, r1, r3
 8001942:	43d9      	mvns	r1, r3
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001948:	4313      	orrs	r3, r2
         );
}
 800194a:	4618      	mov	r0, r3
 800194c:	3724      	adds	r7, #36	@ 0x24
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
	...

08001958 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	3b01      	subs	r3, #1
 8001964:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001968:	d301      	bcc.n	800196e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800196a:	2301      	movs	r3, #1
 800196c:	e00f      	b.n	800198e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800196e:	4a0a      	ldr	r2, [pc, #40]	@ (8001998 <SysTick_Config+0x40>)
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	3b01      	subs	r3, #1
 8001974:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001976:	210f      	movs	r1, #15
 8001978:	f04f 30ff 	mov.w	r0, #4294967295
 800197c:	f7ff ff8e 	bl	800189c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001980:	4b05      	ldr	r3, [pc, #20]	@ (8001998 <SysTick_Config+0x40>)
 8001982:	2200      	movs	r2, #0
 8001984:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001986:	4b04      	ldr	r3, [pc, #16]	@ (8001998 <SysTick_Config+0x40>)
 8001988:	2207      	movs	r2, #7
 800198a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800198c:	2300      	movs	r3, #0
}
 800198e:	4618      	mov	r0, r3
 8001990:	3708      	adds	r7, #8
 8001992:	46bd      	mov	sp, r7
 8001994:	bd80      	pop	{r7, pc}
 8001996:	bf00      	nop
 8001998:	e000e010 	.word	0xe000e010

0800199c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800199c:	b580      	push	{r7, lr}
 800199e:	b082      	sub	sp, #8
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019a4:	6878      	ldr	r0, [r7, #4]
 80019a6:	f7ff ff29 	bl	80017fc <__NVIC_SetPriorityGrouping>
}
 80019aa:	bf00      	nop
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}

080019b2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019b2:	b580      	push	{r7, lr}
 80019b4:	b086      	sub	sp, #24
 80019b6:	af00      	add	r7, sp, #0
 80019b8:	4603      	mov	r3, r0
 80019ba:	60b9      	str	r1, [r7, #8]
 80019bc:	607a      	str	r2, [r7, #4]
 80019be:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019c4:	f7ff ff3e 	bl	8001844 <__NVIC_GetPriorityGrouping>
 80019c8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019ca:	687a      	ldr	r2, [r7, #4]
 80019cc:	68b9      	ldr	r1, [r7, #8]
 80019ce:	6978      	ldr	r0, [r7, #20]
 80019d0:	f7ff ff8e 	bl	80018f0 <NVIC_EncodePriority>
 80019d4:	4602      	mov	r2, r0
 80019d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019da:	4611      	mov	r1, r2
 80019dc:	4618      	mov	r0, r3
 80019de:	f7ff ff5d 	bl	800189c <__NVIC_SetPriority>
}
 80019e2:	bf00      	nop
 80019e4:	3718      	adds	r7, #24
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b082      	sub	sp, #8
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	4603      	mov	r3, r0
 80019f2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019f4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff31 	bl	8001860 <__NVIC_EnableIRQ>
}
 80019fe:	bf00      	nop
 8001a00:	3708      	adds	r7, #8
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a0e:	6878      	ldr	r0, [r7, #4]
 8001a10:	f7ff ffa2 	bl	8001958 <SysTick_Config>
 8001a14:	4603      	mov	r3, r0
}
 8001a16:	4618      	mov	r0, r3
 8001a18:	3708      	adds	r7, #8
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b084      	sub	sp, #16
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a2a:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a2c:	f7ff feda 	bl	80017e4 <HAL_GetTick>
 8001a30:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d008      	beq.n	8001a50 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	2280      	movs	r2, #128	@ 0x80
 8001a42:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	2200      	movs	r2, #0
 8001a48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a4c:	2301      	movs	r3, #1
 8001a4e:	e052      	b.n	8001af6 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	681a      	ldr	r2, [r3, #0]
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	f022 0216 	bic.w	r2, r2, #22
 8001a5e:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	695a      	ldr	r2, [r3, #20]
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001a6e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d103      	bne.n	8001a80 <HAL_DMA_Abort+0x62>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	d007      	beq.n	8001a90 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	681a      	ldr	r2, [r3, #0]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f022 0208 	bic.w	r2, r2, #8
 8001a8e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	681a      	ldr	r2, [r3, #0]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f022 0201 	bic.w	r2, r2, #1
 8001a9e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aa0:	e013      	b.n	8001aca <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aa2:	f7ff fe9f 	bl	80017e4 <HAL_GetTick>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	68bb      	ldr	r3, [r7, #8]
 8001aaa:	1ad3      	subs	r3, r2, r3
 8001aac:	2b05      	cmp	r3, #5
 8001aae:	d90c      	bls.n	8001aca <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	2220      	movs	r2, #32
 8001ab4:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	2203      	movs	r2, #3
 8001aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	2200      	movs	r2, #0
 8001ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001ac6:	2303      	movs	r3, #3
 8001ac8:	e015      	b.n	8001af6 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	681b      	ldr	r3, [r3, #0]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	f003 0301 	and.w	r3, r3, #1
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d1e4      	bne.n	8001aa2 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001adc:	223f      	movs	r2, #63	@ 0x3f
 8001ade:	409a      	lsls	r2, r3
 8001ae0:	68fb      	ldr	r3, [r7, #12]
 8001ae2:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	2201      	movs	r2, #1
 8001ae8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	2200      	movs	r2, #0
 8001af0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001af4:	2300      	movs	r3, #0
}
 8001af6:	4618      	mov	r0, r3
 8001af8:	3710      	adds	r7, #16
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001afe:	b480      	push	{r7}
 8001b00:	b083      	sub	sp, #12
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b0c:	b2db      	uxtb	r3, r3
 8001b0e:	2b02      	cmp	r3, #2
 8001b10:	d004      	beq.n	8001b1c <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	2280      	movs	r2, #128	@ 0x80
 8001b16:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e00c      	b.n	8001b36 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2205      	movs	r2, #5
 8001b20:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681a      	ldr	r2, [r3, #0]
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f022 0201 	bic.w	r2, r2, #1
 8001b32:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b34:	2300      	movs	r3, #0
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	370c      	adds	r7, #12
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b089      	sub	sp, #36	@ 0x24
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
 8001b4c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b4e:	2300      	movs	r3, #0
 8001b50:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b52:	2300      	movs	r3, #0
 8001b54:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b56:	2300      	movs	r3, #0
 8001b58:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	61fb      	str	r3, [r7, #28]
 8001b5e:	e165      	b.n	8001e2c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001b60:	2201      	movs	r2, #1
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	fa02 f303 	lsl.w	r3, r2, r3
 8001b68:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b6a:	683b      	ldr	r3, [r7, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	697a      	ldr	r2, [r7, #20]
 8001b70:	4013      	ands	r3, r2
 8001b72:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	429a      	cmp	r2, r3
 8001b7a:	f040 8154 	bne.w	8001e26 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f003 0303 	and.w	r3, r3, #3
 8001b86:	2b01      	cmp	r3, #1
 8001b88:	d005      	beq.n	8001b96 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d130      	bne.n	8001bf8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	689b      	ldr	r3, [r3, #8]
 8001b9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	005b      	lsls	r3, r3, #1
 8001ba0:	2203      	movs	r2, #3
 8001ba2:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4013      	ands	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	005b      	lsls	r3, r3, #1
 8001bb6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bba:	69ba      	ldr	r2, [r7, #24]
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	69ba      	ldr	r2, [r7, #24]
 8001bc4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001bcc:	2201      	movs	r2, #1
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8001bd4:	43db      	mvns	r3, r3
 8001bd6:	69ba      	ldr	r2, [r7, #24]
 8001bd8:	4013      	ands	r3, r2
 8001bda:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001bdc:	683b      	ldr	r3, [r7, #0]
 8001bde:	685b      	ldr	r3, [r3, #4]
 8001be0:	091b      	lsrs	r3, r3, #4
 8001be2:	f003 0201 	and.w	r2, r3, #1
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bec:	69ba      	ldr	r2, [r7, #24]
 8001bee:	4313      	orrs	r3, r2
 8001bf0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	69ba      	ldr	r2, [r7, #24]
 8001bf6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001bf8:	683b      	ldr	r3, [r7, #0]
 8001bfa:	685b      	ldr	r3, [r3, #4]
 8001bfc:	f003 0303 	and.w	r3, r3, #3
 8001c00:	2b03      	cmp	r3, #3
 8001c02:	d017      	beq.n	8001c34 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	68db      	ldr	r3, [r3, #12]
 8001c08:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	005b      	lsls	r3, r3, #1
 8001c0e:	2203      	movs	r2, #3
 8001c10:	fa02 f303 	lsl.w	r3, r2, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4013      	ands	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	689a      	ldr	r2, [r3, #8]
 8001c20:	69fb      	ldr	r3, [r7, #28]
 8001c22:	005b      	lsls	r3, r3, #1
 8001c24:	fa02 f303 	lsl.w	r3, r2, r3
 8001c28:	69ba      	ldr	r2, [r7, #24]
 8001c2a:	4313      	orrs	r3, r2
 8001c2c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c34:	683b      	ldr	r3, [r7, #0]
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f003 0303 	and.w	r3, r3, #3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d123      	bne.n	8001c88 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c40:	69fb      	ldr	r3, [r7, #28]
 8001c42:	08da      	lsrs	r2, r3, #3
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3208      	adds	r2, #8
 8001c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c4c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c4e:	69fb      	ldr	r3, [r7, #28]
 8001c50:	f003 0307 	and.w	r3, r3, #7
 8001c54:	009b      	lsls	r3, r3, #2
 8001c56:	220f      	movs	r2, #15
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	691a      	ldr	r2, [r3, #16]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	f003 0307 	and.w	r3, r3, #7
 8001c6e:	009b      	lsls	r3, r3, #2
 8001c70:	fa02 f303 	lsl.w	r3, r2, r3
 8001c74:	69ba      	ldr	r2, [r7, #24]
 8001c76:	4313      	orrs	r3, r2
 8001c78:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001c7a:	69fb      	ldr	r3, [r7, #28]
 8001c7c:	08da      	lsrs	r2, r3, #3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	3208      	adds	r2, #8
 8001c82:	69b9      	ldr	r1, [r7, #24]
 8001c84:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	005b      	lsls	r3, r3, #1
 8001c92:	2203      	movs	r2, #3
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	43db      	mvns	r3, r3
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	f003 0203 	and.w	r2, r3, #3
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	005b      	lsls	r3, r3, #1
 8001cac:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb0:	69ba      	ldr	r2, [r7, #24]
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	685b      	ldr	r3, [r3, #4]
 8001cc0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	f000 80ae 	beq.w	8001e26 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001cca:	2300      	movs	r3, #0
 8001ccc:	60fb      	str	r3, [r7, #12]
 8001cce:	4b5d      	ldr	r3, [pc, #372]	@ (8001e44 <HAL_GPIO_Init+0x300>)
 8001cd0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cd2:	4a5c      	ldr	r2, [pc, #368]	@ (8001e44 <HAL_GPIO_Init+0x300>)
 8001cd4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001cd8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001cda:	4b5a      	ldr	r3, [pc, #360]	@ (8001e44 <HAL_GPIO_Init+0x300>)
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cde:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ce2:	60fb      	str	r3, [r7, #12]
 8001ce4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ce6:	4a58      	ldr	r2, [pc, #352]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	089b      	lsrs	r3, r3, #2
 8001cec:	3302      	adds	r3, #2
 8001cee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001cf4:	69fb      	ldr	r3, [r7, #28]
 8001cf6:	f003 0303 	and.w	r3, r3, #3
 8001cfa:	009b      	lsls	r3, r3, #2
 8001cfc:	220f      	movs	r2, #15
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	43db      	mvns	r3, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4013      	ands	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a4f      	ldr	r2, [pc, #316]	@ (8001e4c <HAL_GPIO_Init+0x308>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d025      	beq.n	8001d5e <HAL_GPIO_Init+0x21a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	4a4e      	ldr	r2, [pc, #312]	@ (8001e50 <HAL_GPIO_Init+0x30c>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d01f      	beq.n	8001d5a <HAL_GPIO_Init+0x216>
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	4a4d      	ldr	r2, [pc, #308]	@ (8001e54 <HAL_GPIO_Init+0x310>)
 8001d1e:	4293      	cmp	r3, r2
 8001d20:	d019      	beq.n	8001d56 <HAL_GPIO_Init+0x212>
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	4a4c      	ldr	r2, [pc, #304]	@ (8001e58 <HAL_GPIO_Init+0x314>)
 8001d26:	4293      	cmp	r3, r2
 8001d28:	d013      	beq.n	8001d52 <HAL_GPIO_Init+0x20e>
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	4a4b      	ldr	r2, [pc, #300]	@ (8001e5c <HAL_GPIO_Init+0x318>)
 8001d2e:	4293      	cmp	r3, r2
 8001d30:	d00d      	beq.n	8001d4e <HAL_GPIO_Init+0x20a>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	4a4a      	ldr	r2, [pc, #296]	@ (8001e60 <HAL_GPIO_Init+0x31c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d007      	beq.n	8001d4a <HAL_GPIO_Init+0x206>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	4a49      	ldr	r2, [pc, #292]	@ (8001e64 <HAL_GPIO_Init+0x320>)
 8001d3e:	4293      	cmp	r3, r2
 8001d40:	d101      	bne.n	8001d46 <HAL_GPIO_Init+0x202>
 8001d42:	2306      	movs	r3, #6
 8001d44:	e00c      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d46:	2307      	movs	r3, #7
 8001d48:	e00a      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d4a:	2305      	movs	r3, #5
 8001d4c:	e008      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d4e:	2304      	movs	r3, #4
 8001d50:	e006      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d52:	2303      	movs	r3, #3
 8001d54:	e004      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d56:	2302      	movs	r3, #2
 8001d58:	e002      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	e000      	b.n	8001d60 <HAL_GPIO_Init+0x21c>
 8001d5e:	2300      	movs	r3, #0
 8001d60:	69fa      	ldr	r2, [r7, #28]
 8001d62:	f002 0203 	and.w	r2, r2, #3
 8001d66:	0092      	lsls	r2, r2, #2
 8001d68:	4093      	lsls	r3, r2
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	4313      	orrs	r3, r2
 8001d6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001d70:	4935      	ldr	r1, [pc, #212]	@ (8001e48 <HAL_GPIO_Init+0x304>)
 8001d72:	69fb      	ldr	r3, [r7, #28]
 8001d74:	089b      	lsrs	r3, r3, #2
 8001d76:	3302      	adds	r3, #2
 8001d78:	69ba      	ldr	r2, [r7, #24]
 8001d7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001d7e:	4b3a      	ldr	r3, [pc, #232]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	43db      	mvns	r3, r3
 8001d88:	69ba      	ldr	r2, [r7, #24]
 8001d8a:	4013      	ands	r3, r2
 8001d8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001d9a:	69ba      	ldr	r2, [r7, #24]
 8001d9c:	693b      	ldr	r3, [r7, #16]
 8001d9e:	4313      	orrs	r3, r2
 8001da0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001da2:	4a31      	ldr	r2, [pc, #196]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001da8:	4b2f      	ldr	r3, [pc, #188]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001daa:	68db      	ldr	r3, [r3, #12]
 8001dac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dae:	693b      	ldr	r3, [r7, #16]
 8001db0:	43db      	mvns	r3, r3
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4013      	ands	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001db8:	683b      	ldr	r3, [r7, #0]
 8001dba:	685b      	ldr	r3, [r3, #4]
 8001dbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d003      	beq.n	8001dcc <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001dc4:	69ba      	ldr	r2, [r7, #24]
 8001dc6:	693b      	ldr	r3, [r7, #16]
 8001dc8:	4313      	orrs	r3, r2
 8001dca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001dcc:	4a26      	ldr	r2, [pc, #152]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001dce:	69bb      	ldr	r3, [r7, #24]
 8001dd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001dd2:	4b25      	ldr	r3, [pc, #148]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001dd4:	685b      	ldr	r3, [r3, #4]
 8001dd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	43db      	mvns	r3, r3
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	4013      	ands	r3, r2
 8001de0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d003      	beq.n	8001df6 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001dee:	69ba      	ldr	r2, [r7, #24]
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	4313      	orrs	r3, r2
 8001df4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001df6:	4a1c      	ldr	r2, [pc, #112]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dfc:	4b1a      	ldr	r3, [pc, #104]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e02:	693b      	ldr	r3, [r7, #16]
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	685b      	ldr	r3, [r3, #4]
 8001e10:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e20:	4a11      	ldr	r2, [pc, #68]	@ (8001e68 <HAL_GPIO_Init+0x324>)
 8001e22:	69bb      	ldr	r3, [r7, #24]
 8001e24:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	3301      	adds	r3, #1
 8001e2a:	61fb      	str	r3, [r7, #28]
 8001e2c:	69fb      	ldr	r3, [r7, #28]
 8001e2e:	2b0f      	cmp	r3, #15
 8001e30:	f67f ae96 	bls.w	8001b60 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	3724      	adds	r7, #36	@ 0x24
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr
 8001e42:	bf00      	nop
 8001e44:	40023800 	.word	0x40023800
 8001e48:	40013800 	.word	0x40013800
 8001e4c:	40020000 	.word	0x40020000
 8001e50:	40020400 	.word	0x40020400
 8001e54:	40020800 	.word	0x40020800
 8001e58:	40020c00 	.word	0x40020c00
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40021400 	.word	0x40021400
 8001e64:	40021800 	.word	0x40021800
 8001e68:	40013c00 	.word	0x40013c00

08001e6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e6c:	b480      	push	{r7}
 8001e6e:	b083      	sub	sp, #12
 8001e70:	af00      	add	r7, sp, #0
 8001e72:	6078      	str	r0, [r7, #4]
 8001e74:	460b      	mov	r3, r1
 8001e76:	807b      	strh	r3, [r7, #2]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001e7c:	787b      	ldrb	r3, [r7, #1]
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d003      	beq.n	8001e8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e82:	887a      	ldrh	r2, [r7, #2]
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001e88:	e003      	b.n	8001e92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001e8a:	887b      	ldrh	r3, [r7, #2]
 8001e8c:	041a      	lsls	r2, r3, #16
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	619a      	str	r2, [r3, #24]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001eaa:	4b08      	ldr	r3, [pc, #32]	@ (8001ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eac:	695a      	ldr	r2, [r3, #20]
 8001eae:	88fb      	ldrh	r3, [r7, #6]
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d006      	beq.n	8001ec4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001eb6:	4a05      	ldr	r2, [pc, #20]	@ (8001ecc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001eb8:	88fb      	ldrh	r3, [r7, #6]
 8001eba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001ebc:	88fb      	ldrh	r3, [r7, #6]
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f000 f806 	bl	8001ed0 <HAL_GPIO_EXTI_Callback>
  }
}
 8001ec4:	bf00      	nop
 8001ec6:	3708      	adds	r7, #8
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd80      	pop	{r7, pc}
 8001ecc:	40013c00 	.word	0x40013c00

08001ed0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b084      	sub	sp, #16
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
 8001ef0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d101      	bne.n	8001efc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ef8:	2301      	movs	r3, #1
 8001efa:	e0cc      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001efc:	4b68      	ldr	r3, [pc, #416]	@ (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f003 030f 	and.w	r3, r3, #15
 8001f04:	683a      	ldr	r2, [r7, #0]
 8001f06:	429a      	cmp	r2, r3
 8001f08:	d90c      	bls.n	8001f24 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f0a:	4b65      	ldr	r3, [pc, #404]	@ (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f0c:	683a      	ldr	r2, [r7, #0]
 8001f0e:	b2d2      	uxtb	r2, r2
 8001f10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f12:	4b63      	ldr	r3, [pc, #396]	@ (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	f003 030f 	and.w	r3, r3, #15
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d001      	beq.n	8001f24 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e0b8      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d020      	beq.n	8001f72 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0304 	and.w	r3, r3, #4
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d005      	beq.n	8001f48 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001f3c:	4b59      	ldr	r3, [pc, #356]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f3e:	689b      	ldr	r3, [r3, #8]
 8001f40:	4a58      	ldr	r2, [pc, #352]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f42:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001f46:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 0308 	and.w	r3, r3, #8
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d005      	beq.n	8001f60 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001f54:	4b53      	ldr	r3, [pc, #332]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	4a52      	ldr	r2, [pc, #328]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001f5e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f60:	4b50      	ldr	r3, [pc, #320]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	494d      	ldr	r1, [pc, #308]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f6e:	4313      	orrs	r3, r2
 8001f70:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f003 0301 	and.w	r3, r3, #1
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d044      	beq.n	8002008 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	685b      	ldr	r3, [r3, #4]
 8001f82:	2b01      	cmp	r3, #1
 8001f84:	d107      	bne.n	8001f96 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f86:	4b47      	ldr	r3, [pc, #284]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f8e:	2b00      	cmp	r3, #0
 8001f90:	d119      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001f92:	2301      	movs	r3, #1
 8001f94:	e07f      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d003      	beq.n	8001fa6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001fa2:	2b03      	cmp	r3, #3
 8001fa4:	d107      	bne.n	8001fb6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001fa6:	4b3f      	ldr	r3, [pc, #252]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d109      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e06f      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb6:	4b3b      	ldr	r3, [pc, #236]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 0302 	and.w	r3, r3, #2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d101      	bne.n	8001fc6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e067      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001fc6:	4b37      	ldr	r3, [pc, #220]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fc8:	689b      	ldr	r3, [r3, #8]
 8001fca:	f023 0203 	bic.w	r2, r3, #3
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	4934      	ldr	r1, [pc, #208]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001fd8:	f7ff fc04 	bl	80017e4 <HAL_GetTick>
 8001fdc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fde:	e00a      	b.n	8001ff6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001fe0:	f7ff fc00 	bl	80017e4 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e04f      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ff6:	4b2b      	ldr	r3, [pc, #172]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8001ff8:	689b      	ldr	r3, [r3, #8]
 8001ffa:	f003 020c 	and.w	r2, r3, #12
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	685b      	ldr	r3, [r3, #4]
 8002002:	009b      	lsls	r3, r3, #2
 8002004:	429a      	cmp	r2, r3
 8002006:	d1eb      	bne.n	8001fe0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002008:	4b25      	ldr	r3, [pc, #148]	@ (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	f003 030f 	and.w	r3, r3, #15
 8002010:	683a      	ldr	r2, [r7, #0]
 8002012:	429a      	cmp	r2, r3
 8002014:	d20c      	bcs.n	8002030 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002016:	4b22      	ldr	r3, [pc, #136]	@ (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	b2d2      	uxtb	r2, r2
 800201c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800201e:	4b20      	ldr	r3, [pc, #128]	@ (80020a0 <HAL_RCC_ClockConfig+0x1b8>)
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f003 030f 	and.w	r3, r3, #15
 8002026:	683a      	ldr	r2, [r7, #0]
 8002028:	429a      	cmp	r2, r3
 800202a:	d001      	beq.n	8002030 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800202c:	2301      	movs	r3, #1
 800202e:	e032      	b.n	8002096 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0304 	and.w	r3, r3, #4
 8002038:	2b00      	cmp	r3, #0
 800203a:	d008      	beq.n	800204e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800203c:	4b19      	ldr	r3, [pc, #100]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 800203e:	689b      	ldr	r3, [r3, #8]
 8002040:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	68db      	ldr	r3, [r3, #12]
 8002048:	4916      	ldr	r1, [pc, #88]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 800204a:	4313      	orrs	r3, r2
 800204c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f003 0308 	and.w	r3, r3, #8
 8002056:	2b00      	cmp	r3, #0
 8002058:	d009      	beq.n	800206e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800205a:	4b12      	ldr	r3, [pc, #72]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	691b      	ldr	r3, [r3, #16]
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	490e      	ldr	r1, [pc, #56]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 800206a:	4313      	orrs	r3, r2
 800206c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800206e:	f000 f855 	bl	800211c <HAL_RCC_GetSysClockFreq>
 8002072:	4602      	mov	r2, r0
 8002074:	4b0b      	ldr	r3, [pc, #44]	@ (80020a4 <HAL_RCC_ClockConfig+0x1bc>)
 8002076:	689b      	ldr	r3, [r3, #8]
 8002078:	091b      	lsrs	r3, r3, #4
 800207a:	f003 030f 	and.w	r3, r3, #15
 800207e:	490a      	ldr	r1, [pc, #40]	@ (80020a8 <HAL_RCC_ClockConfig+0x1c0>)
 8002080:	5ccb      	ldrb	r3, [r1, r3]
 8002082:	fa22 f303 	lsr.w	r3, r2, r3
 8002086:	4a09      	ldr	r2, [pc, #36]	@ (80020ac <HAL_RCC_ClockConfig+0x1c4>)
 8002088:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800208a:	4b09      	ldr	r3, [pc, #36]	@ (80020b0 <HAL_RCC_ClockConfig+0x1c8>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4618      	mov	r0, r3
 8002090:	f7ff fb64 	bl	800175c <HAL_InitTick>

  return HAL_OK;
 8002094:	2300      	movs	r3, #0
}
 8002096:	4618      	mov	r0, r3
 8002098:	3710      	adds	r7, #16
 800209a:	46bd      	mov	sp, r7
 800209c:	bd80      	pop	{r7, pc}
 800209e:	bf00      	nop
 80020a0:	40023c00 	.word	0x40023c00
 80020a4:	40023800 	.word	0x40023800
 80020a8:	080059d8 	.word	0x080059d8
 80020ac:	200000dc 	.word	0x200000dc
 80020b0:	200000e0 	.word	0x200000e0

080020b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020b4:	b480      	push	{r7}
 80020b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020b8:	4b03      	ldr	r3, [pc, #12]	@ (80020c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80020ba:	681b      	ldr	r3, [r3, #0]
}
 80020bc:	4618      	mov	r0, r3
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	200000dc 	.word	0x200000dc

080020cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80020d0:	f7ff fff0 	bl	80020b4 <HAL_RCC_GetHCLKFreq>
 80020d4:	4602      	mov	r2, r0
 80020d6:	4b05      	ldr	r3, [pc, #20]	@ (80020ec <HAL_RCC_GetPCLK1Freq+0x20>)
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	0a9b      	lsrs	r3, r3, #10
 80020dc:	f003 0307 	and.w	r3, r3, #7
 80020e0:	4903      	ldr	r1, [pc, #12]	@ (80020f0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020e2:	5ccb      	ldrb	r3, [r1, r3]
 80020e4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80020e8:	4618      	mov	r0, r3
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	40023800 	.word	0x40023800
 80020f0:	080059e8 	.word	0x080059e8

080020f4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80020f4:	b580      	push	{r7, lr}
 80020f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80020f8:	f7ff ffdc 	bl	80020b4 <HAL_RCC_GetHCLKFreq>
 80020fc:	4602      	mov	r2, r0
 80020fe:	4b05      	ldr	r3, [pc, #20]	@ (8002114 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002100:	689b      	ldr	r3, [r3, #8]
 8002102:	0b5b      	lsrs	r3, r3, #13
 8002104:	f003 0307 	and.w	r3, r3, #7
 8002108:	4903      	ldr	r1, [pc, #12]	@ (8002118 <HAL_RCC_GetPCLK2Freq+0x24>)
 800210a:	5ccb      	ldrb	r3, [r1, r3]
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40023800 	.word	0x40023800
 8002118:	080059e8 	.word	0x080059e8

0800211c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800211c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002120:	b0ae      	sub	sp, #184	@ 0xb8
 8002122:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 800212a:	2300      	movs	r3, #0
 800212c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002130:	2300      	movs	r3, #0
 8002132:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002136:	2300      	movs	r3, #0
 8002138:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002142:	4bcb      	ldr	r3, [pc, #812]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f003 030c 	and.w	r3, r3, #12
 800214a:	2b0c      	cmp	r3, #12
 800214c:	f200 8206 	bhi.w	800255c <HAL_RCC_GetSysClockFreq+0x440>
 8002150:	a201      	add	r2, pc, #4	@ (adr r2, 8002158 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002152:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002156:	bf00      	nop
 8002158:	0800218d 	.word	0x0800218d
 800215c:	0800255d 	.word	0x0800255d
 8002160:	0800255d 	.word	0x0800255d
 8002164:	0800255d 	.word	0x0800255d
 8002168:	08002195 	.word	0x08002195
 800216c:	0800255d 	.word	0x0800255d
 8002170:	0800255d 	.word	0x0800255d
 8002174:	0800255d 	.word	0x0800255d
 8002178:	0800219d 	.word	0x0800219d
 800217c:	0800255d 	.word	0x0800255d
 8002180:	0800255d 	.word	0x0800255d
 8002184:	0800255d 	.word	0x0800255d
 8002188:	0800238d 	.word	0x0800238d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800218c:	4bb9      	ldr	r3, [pc, #740]	@ (8002474 <HAL_RCC_GetSysClockFreq+0x358>)
 800218e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002192:	e1e7      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002194:	4bb8      	ldr	r3, [pc, #736]	@ (8002478 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002196:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800219a:	e1e3      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800219c:	4bb4      	ldr	r3, [pc, #720]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 800219e:	685b      	ldr	r3, [r3, #4]
 80021a0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80021a4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80021a8:	4bb1      	ldr	r3, [pc, #708]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d071      	beq.n	8002298 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80021b4:	4bae      	ldr	r3, [pc, #696]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	099b      	lsrs	r3, r3, #6
 80021ba:	2200      	movs	r2, #0
 80021bc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80021c0:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 80021c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80021c8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80021cc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80021d0:	2300      	movs	r3, #0
 80021d2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80021d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80021da:	4622      	mov	r2, r4
 80021dc:	462b      	mov	r3, r5
 80021de:	f04f 0000 	mov.w	r0, #0
 80021e2:	f04f 0100 	mov.w	r1, #0
 80021e6:	0159      	lsls	r1, r3, #5
 80021e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80021ec:	0150      	lsls	r0, r2, #5
 80021ee:	4602      	mov	r2, r0
 80021f0:	460b      	mov	r3, r1
 80021f2:	4621      	mov	r1, r4
 80021f4:	1a51      	subs	r1, r2, r1
 80021f6:	6439      	str	r1, [r7, #64]	@ 0x40
 80021f8:	4629      	mov	r1, r5
 80021fa:	eb63 0301 	sbc.w	r3, r3, r1
 80021fe:	647b      	str	r3, [r7, #68]	@ 0x44
 8002200:	f04f 0200 	mov.w	r2, #0
 8002204:	f04f 0300 	mov.w	r3, #0
 8002208:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 800220c:	4649      	mov	r1, r9
 800220e:	018b      	lsls	r3, r1, #6
 8002210:	4641      	mov	r1, r8
 8002212:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002216:	4641      	mov	r1, r8
 8002218:	018a      	lsls	r2, r1, #6
 800221a:	4641      	mov	r1, r8
 800221c:	1a51      	subs	r1, r2, r1
 800221e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002220:	4649      	mov	r1, r9
 8002222:	eb63 0301 	sbc.w	r3, r3, r1
 8002226:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002228:	f04f 0200 	mov.w	r2, #0
 800222c:	f04f 0300 	mov.w	r3, #0
 8002230:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002234:	4649      	mov	r1, r9
 8002236:	00cb      	lsls	r3, r1, #3
 8002238:	4641      	mov	r1, r8
 800223a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800223e:	4641      	mov	r1, r8
 8002240:	00ca      	lsls	r2, r1, #3
 8002242:	4610      	mov	r0, r2
 8002244:	4619      	mov	r1, r3
 8002246:	4603      	mov	r3, r0
 8002248:	4622      	mov	r2, r4
 800224a:	189b      	adds	r3, r3, r2
 800224c:	633b      	str	r3, [r7, #48]	@ 0x30
 800224e:	462b      	mov	r3, r5
 8002250:	460a      	mov	r2, r1
 8002252:	eb42 0303 	adc.w	r3, r2, r3
 8002256:	637b      	str	r3, [r7, #52]	@ 0x34
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002264:	4629      	mov	r1, r5
 8002266:	024b      	lsls	r3, r1, #9
 8002268:	4621      	mov	r1, r4
 800226a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800226e:	4621      	mov	r1, r4
 8002270:	024a      	lsls	r2, r1, #9
 8002272:	4610      	mov	r0, r2
 8002274:	4619      	mov	r1, r3
 8002276:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800227a:	2200      	movs	r2, #0
 800227c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002280:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002284:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002288:	f7fe f81a 	bl	80002c0 <__aeabi_uldivmod>
 800228c:	4602      	mov	r2, r0
 800228e:	460b      	mov	r3, r1
 8002290:	4613      	mov	r3, r2
 8002292:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002296:	e067      	b.n	8002368 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002298:	4b75      	ldr	r3, [pc, #468]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	099b      	lsrs	r3, r3, #6
 800229e:	2200      	movs	r2, #0
 80022a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80022a4:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 80022a8:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80022ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80022b0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80022b2:	2300      	movs	r3, #0
 80022b4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80022b6:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80022ba:	4622      	mov	r2, r4
 80022bc:	462b      	mov	r3, r5
 80022be:	f04f 0000 	mov.w	r0, #0
 80022c2:	f04f 0100 	mov.w	r1, #0
 80022c6:	0159      	lsls	r1, r3, #5
 80022c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80022cc:	0150      	lsls	r0, r2, #5
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4621      	mov	r1, r4
 80022d4:	1a51      	subs	r1, r2, r1
 80022d6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80022d8:	4629      	mov	r1, r5
 80022da:	eb63 0301 	sbc.w	r3, r3, r1
 80022de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80022ec:	4649      	mov	r1, r9
 80022ee:	018b      	lsls	r3, r1, #6
 80022f0:	4641      	mov	r1, r8
 80022f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022f6:	4641      	mov	r1, r8
 80022f8:	018a      	lsls	r2, r1, #6
 80022fa:	4641      	mov	r1, r8
 80022fc:	ebb2 0a01 	subs.w	sl, r2, r1
 8002300:	4649      	mov	r1, r9
 8002302:	eb63 0b01 	sbc.w	fp, r3, r1
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002312:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002316:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800231a:	4692      	mov	sl, r2
 800231c:	469b      	mov	fp, r3
 800231e:	4623      	mov	r3, r4
 8002320:	eb1a 0303 	adds.w	r3, sl, r3
 8002324:	623b      	str	r3, [r7, #32]
 8002326:	462b      	mov	r3, r5
 8002328:	eb4b 0303 	adc.w	r3, fp, r3
 800232c:	627b      	str	r3, [r7, #36]	@ 0x24
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800233a:	4629      	mov	r1, r5
 800233c:	028b      	lsls	r3, r1, #10
 800233e:	4621      	mov	r1, r4
 8002340:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002344:	4621      	mov	r1, r4
 8002346:	028a      	lsls	r2, r1, #10
 8002348:	4610      	mov	r0, r2
 800234a:	4619      	mov	r1, r3
 800234c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002350:	2200      	movs	r2, #0
 8002352:	673b      	str	r3, [r7, #112]	@ 0x70
 8002354:	677a      	str	r2, [r7, #116]	@ 0x74
 8002356:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800235a:	f7fd ffb1 	bl	80002c0 <__aeabi_uldivmod>
 800235e:	4602      	mov	r2, r0
 8002360:	460b      	mov	r3, r1
 8002362:	4613      	mov	r3, r2
 8002364:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002368:	4b41      	ldr	r3, [pc, #260]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 800236a:	685b      	ldr	r3, [r3, #4]
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	f003 0303 	and.w	r3, r3, #3
 8002372:	3301      	adds	r3, #1
 8002374:	005b      	lsls	r3, r3, #1
 8002376:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800237a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800237e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002382:	fbb2 f3f3 	udiv	r3, r2, r3
 8002386:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800238a:	e0eb      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800238c:	4b38      	ldr	r3, [pc, #224]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002394:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002398:	4b35      	ldr	r3, [pc, #212]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d06b      	beq.n	800247c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80023a4:	4b32      	ldr	r3, [pc, #200]	@ (8002470 <HAL_RCC_GetSysClockFreq+0x354>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	099b      	lsrs	r3, r3, #6
 80023aa:	2200      	movs	r2, #0
 80023ac:	66bb      	str	r3, [r7, #104]	@ 0x68
 80023ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80023b0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80023b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023b6:	663b      	str	r3, [r7, #96]	@ 0x60
 80023b8:	2300      	movs	r3, #0
 80023ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80023bc:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80023c0:	4622      	mov	r2, r4
 80023c2:	462b      	mov	r3, r5
 80023c4:	f04f 0000 	mov.w	r0, #0
 80023c8:	f04f 0100 	mov.w	r1, #0
 80023cc:	0159      	lsls	r1, r3, #5
 80023ce:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80023d2:	0150      	lsls	r0, r2, #5
 80023d4:	4602      	mov	r2, r0
 80023d6:	460b      	mov	r3, r1
 80023d8:	4621      	mov	r1, r4
 80023da:	1a51      	subs	r1, r2, r1
 80023dc:	61b9      	str	r1, [r7, #24]
 80023de:	4629      	mov	r1, r5
 80023e0:	eb63 0301 	sbc.w	r3, r3, r1
 80023e4:	61fb      	str	r3, [r7, #28]
 80023e6:	f04f 0200 	mov.w	r2, #0
 80023ea:	f04f 0300 	mov.w	r3, #0
 80023ee:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80023f2:	4659      	mov	r1, fp
 80023f4:	018b      	lsls	r3, r1, #6
 80023f6:	4651      	mov	r1, sl
 80023f8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80023fc:	4651      	mov	r1, sl
 80023fe:	018a      	lsls	r2, r1, #6
 8002400:	4651      	mov	r1, sl
 8002402:	ebb2 0801 	subs.w	r8, r2, r1
 8002406:	4659      	mov	r1, fp
 8002408:	eb63 0901 	sbc.w	r9, r3, r1
 800240c:	f04f 0200 	mov.w	r2, #0
 8002410:	f04f 0300 	mov.w	r3, #0
 8002414:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002418:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800241c:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002420:	4690      	mov	r8, r2
 8002422:	4699      	mov	r9, r3
 8002424:	4623      	mov	r3, r4
 8002426:	eb18 0303 	adds.w	r3, r8, r3
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	462b      	mov	r3, r5
 800242e:	eb49 0303 	adc.w	r3, r9, r3
 8002432:	617b      	str	r3, [r7, #20]
 8002434:	f04f 0200 	mov.w	r2, #0
 8002438:	f04f 0300 	mov.w	r3, #0
 800243c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002440:	4629      	mov	r1, r5
 8002442:	024b      	lsls	r3, r1, #9
 8002444:	4621      	mov	r1, r4
 8002446:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800244a:	4621      	mov	r1, r4
 800244c:	024a      	lsls	r2, r1, #9
 800244e:	4610      	mov	r0, r2
 8002450:	4619      	mov	r1, r3
 8002452:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002456:	2200      	movs	r2, #0
 8002458:	65bb      	str	r3, [r7, #88]	@ 0x58
 800245a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800245c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002460:	f7fd ff2e 	bl	80002c0 <__aeabi_uldivmod>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4613      	mov	r3, r2
 800246a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800246e:	e065      	b.n	800253c <HAL_RCC_GetSysClockFreq+0x420>
 8002470:	40023800 	.word	0x40023800
 8002474:	00f42400 	.word	0x00f42400
 8002478:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800247c:	4b3d      	ldr	r3, [pc, #244]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x458>)
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	099b      	lsrs	r3, r3, #6
 8002482:	2200      	movs	r2, #0
 8002484:	4618      	mov	r0, r3
 8002486:	4611      	mov	r1, r2
 8002488:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800248c:	653b      	str	r3, [r7, #80]	@ 0x50
 800248e:	2300      	movs	r3, #0
 8002490:	657b      	str	r3, [r7, #84]	@ 0x54
 8002492:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002496:	4642      	mov	r2, r8
 8002498:	464b      	mov	r3, r9
 800249a:	f04f 0000 	mov.w	r0, #0
 800249e:	f04f 0100 	mov.w	r1, #0
 80024a2:	0159      	lsls	r1, r3, #5
 80024a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024a8:	0150      	lsls	r0, r2, #5
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	4641      	mov	r1, r8
 80024b0:	1a51      	subs	r1, r2, r1
 80024b2:	60b9      	str	r1, [r7, #8]
 80024b4:	4649      	mov	r1, r9
 80024b6:	eb63 0301 	sbc.w	r3, r3, r1
 80024ba:	60fb      	str	r3, [r7, #12]
 80024bc:	f04f 0200 	mov.w	r2, #0
 80024c0:	f04f 0300 	mov.w	r3, #0
 80024c4:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 80024c8:	4659      	mov	r1, fp
 80024ca:	018b      	lsls	r3, r1, #6
 80024cc:	4651      	mov	r1, sl
 80024ce:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024d2:	4651      	mov	r1, sl
 80024d4:	018a      	lsls	r2, r1, #6
 80024d6:	4651      	mov	r1, sl
 80024d8:	1a54      	subs	r4, r2, r1
 80024da:	4659      	mov	r1, fp
 80024dc:	eb63 0501 	sbc.w	r5, r3, r1
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	f04f 0300 	mov.w	r3, #0
 80024e8:	00eb      	lsls	r3, r5, #3
 80024ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80024ee:	00e2      	lsls	r2, r4, #3
 80024f0:	4614      	mov	r4, r2
 80024f2:	461d      	mov	r5, r3
 80024f4:	4643      	mov	r3, r8
 80024f6:	18e3      	adds	r3, r4, r3
 80024f8:	603b      	str	r3, [r7, #0]
 80024fa:	464b      	mov	r3, r9
 80024fc:	eb45 0303 	adc.w	r3, r5, r3
 8002500:	607b      	str	r3, [r7, #4]
 8002502:	f04f 0200 	mov.w	r2, #0
 8002506:	f04f 0300 	mov.w	r3, #0
 800250a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800250e:	4629      	mov	r1, r5
 8002510:	028b      	lsls	r3, r1, #10
 8002512:	4621      	mov	r1, r4
 8002514:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002518:	4621      	mov	r1, r4
 800251a:	028a      	lsls	r2, r1, #10
 800251c:	4610      	mov	r0, r2
 800251e:	4619      	mov	r1, r3
 8002520:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002524:	2200      	movs	r2, #0
 8002526:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002528:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800252a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800252e:	f7fd fec7 	bl	80002c0 <__aeabi_uldivmod>
 8002532:	4602      	mov	r2, r0
 8002534:	460b      	mov	r3, r1
 8002536:	4613      	mov	r3, r2
 8002538:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800253c:	4b0d      	ldr	r3, [pc, #52]	@ (8002574 <HAL_RCC_GetSysClockFreq+0x458>)
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	0f1b      	lsrs	r3, r3, #28
 8002542:	f003 0307 	and.w	r3, r3, #7
 8002546:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800254a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800254e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002552:	fbb2 f3f3 	udiv	r3, r2, r3
 8002556:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800255a:	e003      	b.n	8002564 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800255c:	4b06      	ldr	r3, [pc, #24]	@ (8002578 <HAL_RCC_GetSysClockFreq+0x45c>)
 800255e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002562:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002564:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002568:	4618      	mov	r0, r3
 800256a:	37b8      	adds	r7, #184	@ 0xb8
 800256c:	46bd      	mov	sp, r7
 800256e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002572:	bf00      	nop
 8002574:	40023800 	.word	0x40023800
 8002578:	00f42400 	.word	0x00f42400

0800257c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800257c:	b580      	push	{r7, lr}
 800257e:	b086      	sub	sp, #24
 8002580:	af00      	add	r7, sp, #0
 8002582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2b00      	cmp	r3, #0
 8002588:	d101      	bne.n	800258e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800258a:	2301      	movs	r3, #1
 800258c:	e28d      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0301 	and.w	r3, r3, #1
 8002596:	2b00      	cmp	r3, #0
 8002598:	f000 8083 	beq.w	80026a2 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800259c:	4b94      	ldr	r3, [pc, #592]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	f003 030c 	and.w	r3, r3, #12
 80025a4:	2b04      	cmp	r3, #4
 80025a6:	d019      	beq.n	80025dc <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025a8:	4b91      	ldr	r3, [pc, #580]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f003 030c 	and.w	r3, r3, #12
        || \
 80025b0:	2b08      	cmp	r3, #8
 80025b2:	d106      	bne.n	80025c2 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025b4:	4b8e      	ldr	r3, [pc, #568]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025bc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025c0:	d00c      	beq.n	80025dc <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025c2:	4b8b      	ldr	r3, [pc, #556]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 80025c4:	689b      	ldr	r3, [r3, #8]
 80025c6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 80025ca:	2b0c      	cmp	r3, #12
 80025cc:	d112      	bne.n	80025f4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80025ce:	4b88      	ldr	r3, [pc, #544]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 80025d0:	685b      	ldr	r3, [r3, #4]
 80025d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80025d6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80025da:	d10b      	bne.n	80025f4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025dc:	4b84      	ldr	r3, [pc, #528]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	d05b      	beq.n	80026a0 <HAL_RCC_OscConfig+0x124>
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	685b      	ldr	r3, [r3, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d157      	bne.n	80026a0 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80025f0:	2301      	movs	r3, #1
 80025f2:	e25a      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	685b      	ldr	r3, [r3, #4]
 80025f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80025fc:	d106      	bne.n	800260c <HAL_RCC_OscConfig+0x90>
 80025fe:	4b7c      	ldr	r3, [pc, #496]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	4a7b      	ldr	r2, [pc, #492]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002604:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002608:	6013      	str	r3, [r2, #0]
 800260a:	e01d      	b.n	8002648 <HAL_RCC_OscConfig+0xcc>
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002614:	d10c      	bne.n	8002630 <HAL_RCC_OscConfig+0xb4>
 8002616:	4b76      	ldr	r3, [pc, #472]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4a75      	ldr	r2, [pc, #468]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 800261c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	4b73      	ldr	r3, [pc, #460]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a72      	ldr	r2, [pc, #456]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002628:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800262c:	6013      	str	r3, [r2, #0]
 800262e:	e00b      	b.n	8002648 <HAL_RCC_OscConfig+0xcc>
 8002630:	4b6f      	ldr	r3, [pc, #444]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a6e      	ldr	r2, [pc, #440]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002636:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800263a:	6013      	str	r3, [r2, #0]
 800263c:	4b6c      	ldr	r3, [pc, #432]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	4a6b      	ldr	r2, [pc, #428]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002642:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002646:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	685b      	ldr	r3, [r3, #4]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d013      	beq.n	8002678 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002650:	f7ff f8c8 	bl	80017e4 <HAL_GetTick>
 8002654:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002656:	e008      	b.n	800266a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002658:	f7ff f8c4 	bl	80017e4 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	693b      	ldr	r3, [r7, #16]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	2b64      	cmp	r3, #100	@ 0x64
 8002664:	d901      	bls.n	800266a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002666:	2303      	movs	r3, #3
 8002668:	e21f      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800266a:	4b61      	ldr	r3, [pc, #388]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002672:	2b00      	cmp	r3, #0
 8002674:	d0f0      	beq.n	8002658 <HAL_RCC_OscConfig+0xdc>
 8002676:	e014      	b.n	80026a2 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002678:	f7ff f8b4 	bl	80017e4 <HAL_GetTick>
 800267c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800267e:	e008      	b.n	8002692 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002680:	f7ff f8b0 	bl	80017e4 <HAL_GetTick>
 8002684:	4602      	mov	r2, r0
 8002686:	693b      	ldr	r3, [r7, #16]
 8002688:	1ad3      	subs	r3, r2, r3
 800268a:	2b64      	cmp	r3, #100	@ 0x64
 800268c:	d901      	bls.n	8002692 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800268e:	2303      	movs	r3, #3
 8002690:	e20b      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002692:	4b57      	ldr	r3, [pc, #348]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800269a:	2b00      	cmp	r3, #0
 800269c:	d1f0      	bne.n	8002680 <HAL_RCC_OscConfig+0x104>
 800269e:	e000      	b.n	80026a2 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80026a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	f003 0302 	and.w	r3, r3, #2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d06f      	beq.n	800278e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80026ae:	4b50      	ldr	r3, [pc, #320]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 80026b0:	689b      	ldr	r3, [r3, #8]
 80026b2:	f003 030c 	and.w	r3, r3, #12
 80026b6:	2b00      	cmp	r3, #0
 80026b8:	d017      	beq.n	80026ea <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026ba:	4b4d      	ldr	r3, [pc, #308]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 80026bc:	689b      	ldr	r3, [r3, #8]
 80026be:	f003 030c 	and.w	r3, r3, #12
        || \
 80026c2:	2b08      	cmp	r3, #8
 80026c4:	d105      	bne.n	80026d2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026c6:	4b4a      	ldr	r3, [pc, #296]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 80026c8:	685b      	ldr	r3, [r3, #4]
 80026ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d00b      	beq.n	80026ea <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026d2:	4b47      	ldr	r3, [pc, #284]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 80026d4:	689b      	ldr	r3, [r3, #8]
 80026d6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80026da:	2b0c      	cmp	r3, #12
 80026dc:	d11c      	bne.n	8002718 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80026de:	4b44      	ldr	r3, [pc, #272]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 80026e0:	685b      	ldr	r3, [r3, #4]
 80026e2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d116      	bne.n	8002718 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80026ea:	4b41      	ldr	r3, [pc, #260]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f003 0302 	and.w	r3, r3, #2
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d005      	beq.n	8002702 <HAL_RCC_OscConfig+0x186>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	68db      	ldr	r3, [r3, #12]
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	d001      	beq.n	8002702 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80026fe:	2301      	movs	r3, #1
 8002700:	e1d3      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002702:	4b3b      	ldr	r3, [pc, #236]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	691b      	ldr	r3, [r3, #16]
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4937      	ldr	r1, [pc, #220]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002712:	4313      	orrs	r3, r2
 8002714:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002716:	e03a      	b.n	800278e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	68db      	ldr	r3, [r3, #12]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d020      	beq.n	8002762 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002720:	4b34      	ldr	r3, [pc, #208]	@ (80027f4 <HAL_RCC_OscConfig+0x278>)
 8002722:	2201      	movs	r2, #1
 8002724:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002726:	f7ff f85d 	bl	80017e4 <HAL_GetTick>
 800272a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800272c:	e008      	b.n	8002740 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800272e:	f7ff f859 	bl	80017e4 <HAL_GetTick>
 8002732:	4602      	mov	r2, r0
 8002734:	693b      	ldr	r3, [r7, #16]
 8002736:	1ad3      	subs	r3, r2, r3
 8002738:	2b02      	cmp	r3, #2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e1b4      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002740:	4b2b      	ldr	r3, [pc, #172]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d0f0      	beq.n	800272e <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800274c:	4b28      	ldr	r3, [pc, #160]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	691b      	ldr	r3, [r3, #16]
 8002758:	00db      	lsls	r3, r3, #3
 800275a:	4925      	ldr	r1, [pc, #148]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 800275c:	4313      	orrs	r3, r2
 800275e:	600b      	str	r3, [r1, #0]
 8002760:	e015      	b.n	800278e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002762:	4b24      	ldr	r3, [pc, #144]	@ (80027f4 <HAL_RCC_OscConfig+0x278>)
 8002764:	2200      	movs	r2, #0
 8002766:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002768:	f7ff f83c 	bl	80017e4 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002770:	f7ff f838 	bl	80017e4 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e193      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002782:	4b1b      	ldr	r3, [pc, #108]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b00      	cmp	r3, #0
 800278c:	d1f0      	bne.n	8002770 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 0308 	and.w	r3, r3, #8
 8002796:	2b00      	cmp	r3, #0
 8002798:	d036      	beq.n	8002808 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	695b      	ldr	r3, [r3, #20]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d016      	beq.n	80027d0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027a2:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <HAL_RCC_OscConfig+0x27c>)
 80027a4:	2201      	movs	r2, #1
 80027a6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027a8:	f7ff f81c 	bl	80017e4 <HAL_GetTick>
 80027ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027ae:	e008      	b.n	80027c2 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027b0:	f7ff f818 	bl	80017e4 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	693b      	ldr	r3, [r7, #16]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d901      	bls.n	80027c2 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	e173      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80027c2:	4b0b      	ldr	r3, [pc, #44]	@ (80027f0 <HAL_RCC_OscConfig+0x274>)
 80027c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027c6:	f003 0302 	and.w	r3, r3, #2
 80027ca:	2b00      	cmp	r3, #0
 80027cc:	d0f0      	beq.n	80027b0 <HAL_RCC_OscConfig+0x234>
 80027ce:	e01b      	b.n	8002808 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80027d0:	4b09      	ldr	r3, [pc, #36]	@ (80027f8 <HAL_RCC_OscConfig+0x27c>)
 80027d2:	2200      	movs	r2, #0
 80027d4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027d6:	f7ff f805 	bl	80017e4 <HAL_GetTick>
 80027da:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027dc:	e00e      	b.n	80027fc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027de:	f7ff f801 	bl	80017e4 <HAL_GetTick>
 80027e2:	4602      	mov	r2, r0
 80027e4:	693b      	ldr	r3, [r7, #16]
 80027e6:	1ad3      	subs	r3, r2, r3
 80027e8:	2b02      	cmp	r3, #2
 80027ea:	d907      	bls.n	80027fc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 80027ec:	2303      	movs	r3, #3
 80027ee:	e15c      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
 80027f0:	40023800 	.word	0x40023800
 80027f4:	42470000 	.word	0x42470000
 80027f8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80027fc:	4b8a      	ldr	r3, [pc, #552]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80027fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002800:	f003 0302 	and.w	r3, r3, #2
 8002804:	2b00      	cmp	r3, #0
 8002806:	d1ea      	bne.n	80027de <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	f003 0304 	and.w	r3, r3, #4
 8002810:	2b00      	cmp	r3, #0
 8002812:	f000 8097 	beq.w	8002944 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002816:	2300      	movs	r3, #0
 8002818:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800281a:	4b83      	ldr	r3, [pc, #524]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800281e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002822:	2b00      	cmp	r3, #0
 8002824:	d10f      	bne.n	8002846 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002826:	2300      	movs	r3, #0
 8002828:	60bb      	str	r3, [r7, #8]
 800282a:	4b7f      	ldr	r3, [pc, #508]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 800282c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800282e:	4a7e      	ldr	r2, [pc, #504]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 8002830:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002834:	6413      	str	r3, [r2, #64]	@ 0x40
 8002836:	4b7c      	ldr	r3, [pc, #496]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 8002838:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800283a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800283e:	60bb      	str	r3, [r7, #8]
 8002840:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002842:	2301      	movs	r3, #1
 8002844:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002846:	4b79      	ldr	r3, [pc, #484]	@ (8002a2c <HAL_RCC_OscConfig+0x4b0>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800284e:	2b00      	cmp	r3, #0
 8002850:	d118      	bne.n	8002884 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002852:	4b76      	ldr	r3, [pc, #472]	@ (8002a2c <HAL_RCC_OscConfig+0x4b0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a75      	ldr	r2, [pc, #468]	@ (8002a2c <HAL_RCC_OscConfig+0x4b0>)
 8002858:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800285c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800285e:	f7fe ffc1 	bl	80017e4 <HAL_GetTick>
 8002862:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002864:	e008      	b.n	8002878 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002866:	f7fe ffbd 	bl	80017e4 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	693b      	ldr	r3, [r7, #16]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	2b02      	cmp	r3, #2
 8002872:	d901      	bls.n	8002878 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002874:	2303      	movs	r3, #3
 8002876:	e118      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002878:	4b6c      	ldr	r3, [pc, #432]	@ (8002a2c <HAL_RCC_OscConfig+0x4b0>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d0f0      	beq.n	8002866 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	2b01      	cmp	r3, #1
 800288a:	d106      	bne.n	800289a <HAL_RCC_OscConfig+0x31e>
 800288c:	4b66      	ldr	r3, [pc, #408]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 800288e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002890:	4a65      	ldr	r2, [pc, #404]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 8002892:	f043 0301 	orr.w	r3, r3, #1
 8002896:	6713      	str	r3, [r2, #112]	@ 0x70
 8002898:	e01c      	b.n	80028d4 <HAL_RCC_OscConfig+0x358>
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	689b      	ldr	r3, [r3, #8]
 800289e:	2b05      	cmp	r3, #5
 80028a0:	d10c      	bne.n	80028bc <HAL_RCC_OscConfig+0x340>
 80028a2:	4b61      	ldr	r3, [pc, #388]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028a6:	4a60      	ldr	r2, [pc, #384]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028a8:	f043 0304 	orr.w	r3, r3, #4
 80028ac:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ae:	4b5e      	ldr	r3, [pc, #376]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028b2:	4a5d      	ldr	r2, [pc, #372]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028b4:	f043 0301 	orr.w	r3, r3, #1
 80028b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80028ba:	e00b      	b.n	80028d4 <HAL_RCC_OscConfig+0x358>
 80028bc:	4b5a      	ldr	r3, [pc, #360]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028be:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028c0:	4a59      	ldr	r2, [pc, #356]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028c2:	f023 0301 	bic.w	r3, r3, #1
 80028c6:	6713      	str	r3, [r2, #112]	@ 0x70
 80028c8:	4b57      	ldr	r3, [pc, #348]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028cc:	4a56      	ldr	r2, [pc, #344]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028ce:	f023 0304 	bic.w	r3, r3, #4
 80028d2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d015      	beq.n	8002908 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028dc:	f7fe ff82 	bl	80017e4 <HAL_GetTick>
 80028e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028e2:	e00a      	b.n	80028fa <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028e4:	f7fe ff7e 	bl	80017e4 <HAL_GetTick>
 80028e8:	4602      	mov	r2, r0
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	1ad3      	subs	r3, r2, r3
 80028ee:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d901      	bls.n	80028fa <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80028f6:	2303      	movs	r3, #3
 80028f8:	e0d7      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80028fa:	4b4b      	ldr	r3, [pc, #300]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80028fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d0ee      	beq.n	80028e4 <HAL_RCC_OscConfig+0x368>
 8002906:	e014      	b.n	8002932 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002908:	f7fe ff6c 	bl	80017e4 <HAL_GetTick>
 800290c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800290e:	e00a      	b.n	8002926 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002910:	f7fe ff68 	bl	80017e4 <HAL_GetTick>
 8002914:	4602      	mov	r2, r0
 8002916:	693b      	ldr	r3, [r7, #16]
 8002918:	1ad3      	subs	r3, r2, r3
 800291a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800291e:	4293      	cmp	r3, r2
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e0c1      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002926:	4b40      	ldr	r3, [pc, #256]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 8002928:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800292a:	f003 0302 	and.w	r3, r3, #2
 800292e:	2b00      	cmp	r3, #0
 8002930:	d1ee      	bne.n	8002910 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002932:	7dfb      	ldrb	r3, [r7, #23]
 8002934:	2b01      	cmp	r3, #1
 8002936:	d105      	bne.n	8002944 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002938:	4b3b      	ldr	r3, [pc, #236]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 800293a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800293c:	4a3a      	ldr	r2, [pc, #232]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 800293e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002942:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	699b      	ldr	r3, [r3, #24]
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 80ad 	beq.w	8002aa8 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800294e:	4b36      	ldr	r3, [pc, #216]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f003 030c 	and.w	r3, r3, #12
 8002956:	2b08      	cmp	r3, #8
 8002958:	d060      	beq.n	8002a1c <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	699b      	ldr	r3, [r3, #24]
 800295e:	2b02      	cmp	r3, #2
 8002960:	d145      	bne.n	80029ee <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002962:	4b33      	ldr	r3, [pc, #204]	@ (8002a30 <HAL_RCC_OscConfig+0x4b4>)
 8002964:	2200      	movs	r2, #0
 8002966:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002968:	f7fe ff3c 	bl	80017e4 <HAL_GetTick>
 800296c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800296e:	e008      	b.n	8002982 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002970:	f7fe ff38 	bl	80017e4 <HAL_GetTick>
 8002974:	4602      	mov	r2, r0
 8002976:	693b      	ldr	r3, [r7, #16]
 8002978:	1ad3      	subs	r3, r2, r3
 800297a:	2b02      	cmp	r3, #2
 800297c:	d901      	bls.n	8002982 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800297e:	2303      	movs	r3, #3
 8002980:	e093      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002982:	4b29      	ldr	r3, [pc, #164]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800298a:	2b00      	cmp	r3, #0
 800298c:	d1f0      	bne.n	8002970 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	69da      	ldr	r2, [r3, #28]
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a1b      	ldr	r3, [r3, #32]
 8002996:	431a      	orrs	r2, r3
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800299c:	019b      	lsls	r3, r3, #6
 800299e:	431a      	orrs	r2, r3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029a4:	085b      	lsrs	r3, r3, #1
 80029a6:	3b01      	subs	r3, #1
 80029a8:	041b      	lsls	r3, r3, #16
 80029aa:	431a      	orrs	r2, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029b0:	061b      	lsls	r3, r3, #24
 80029b2:	431a      	orrs	r2, r3
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029b8:	071b      	lsls	r3, r3, #28
 80029ba:	491b      	ldr	r1, [pc, #108]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80029bc:	4313      	orrs	r3, r2
 80029be:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80029c0:	4b1b      	ldr	r3, [pc, #108]	@ (8002a30 <HAL_RCC_OscConfig+0x4b4>)
 80029c2:	2201      	movs	r2, #1
 80029c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029c6:	f7fe ff0d 	bl	80017e4 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029cc:	e008      	b.n	80029e0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029ce:	f7fe ff09 	bl	80017e4 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d901      	bls.n	80029e0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e064      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029e0:	4b11      	ldr	r3, [pc, #68]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d0f0      	beq.n	80029ce <HAL_RCC_OscConfig+0x452>
 80029ec:	e05c      	b.n	8002aa8 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029ee:	4b10      	ldr	r3, [pc, #64]	@ (8002a30 <HAL_RCC_OscConfig+0x4b4>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f4:	f7fe fef6 	bl	80017e4 <HAL_GetTick>
 80029f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80029fa:	e008      	b.n	8002a0e <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80029fc:	f7fe fef2 	bl	80017e4 <HAL_GetTick>
 8002a00:	4602      	mov	r2, r0
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	1ad3      	subs	r3, r2, r3
 8002a06:	2b02      	cmp	r3, #2
 8002a08:	d901      	bls.n	8002a0e <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002a0a:	2303      	movs	r3, #3
 8002a0c:	e04d      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002a0e:	4b06      	ldr	r3, [pc, #24]	@ (8002a28 <HAL_RCC_OscConfig+0x4ac>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a16:	2b00      	cmp	r3, #0
 8002a18:	d1f0      	bne.n	80029fc <HAL_RCC_OscConfig+0x480>
 8002a1a:	e045      	b.n	8002aa8 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	699b      	ldr	r3, [r3, #24]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d107      	bne.n	8002a34 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e040      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
 8002a28:	40023800 	.word	0x40023800
 8002a2c:	40007000 	.word	0x40007000
 8002a30:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002a34:	4b1f      	ldr	r3, [pc, #124]	@ (8002ab4 <HAL_RCC_OscConfig+0x538>)
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d030      	beq.n	8002aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002a4c:	429a      	cmp	r2, r3
 8002a4e:	d129      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002a5a:	429a      	cmp	r2, r3
 8002a5c:	d122      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a5e:	68fa      	ldr	r2, [r7, #12]
 8002a60:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002a64:	4013      	ands	r3, r2
 8002a66:	687a      	ldr	r2, [r7, #4]
 8002a68:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002a6a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d119      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a7a:	085b      	lsrs	r3, r3, #1
 8002a7c:	3b01      	subs	r3, #1
 8002a7e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d10f      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a8e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002a90:	429a      	cmp	r2, r3
 8002a92:	d107      	bne.n	8002aa4 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a9e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d001      	beq.n	8002aa8 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002aa4:	2301      	movs	r3, #1
 8002aa6:	e000      	b.n	8002aaa <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3718      	adds	r7, #24
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	40023800 	.word	0x40023800

08002ab8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e041      	b.n	8002b4e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d106      	bne.n	8002ae4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002ade:	6878      	ldr	r0, [r7, #4]
 8002ae0:	f7fe fce4 	bl	80014ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	2202      	movs	r2, #2
 8002ae8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681a      	ldr	r2, [r3, #0]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	3304      	adds	r3, #4
 8002af4:	4619      	mov	r1, r3
 8002af6:	4610      	mov	r0, r2
 8002af8:	f000 fd42 	bl	8003580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2201      	movs	r2, #1
 8002b00:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2201      	movs	r2, #1
 8002b08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2201      	movs	r2, #1
 8002b10:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2201      	movs	r2, #1
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	2201      	movs	r2, #1
 8002b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2201      	movs	r2, #1
 8002b28:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2201      	movs	r2, #1
 8002b40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	2201      	movs	r2, #1
 8002b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002b4c:	2300      	movs	r3, #0
}
 8002b4e:	4618      	mov	r0, r3
 8002b50:	3708      	adds	r7, #8
 8002b52:	46bd      	mov	sp, r7
 8002b54:	bd80      	pop	{r7, pc}
	...

08002b58 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002b58:	b480      	push	{r7}
 8002b5a:	b085      	sub	sp, #20
 8002b5c:	af00      	add	r7, sp, #0
 8002b5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b66:	b2db      	uxtb	r3, r3
 8002b68:	2b01      	cmp	r3, #1
 8002b6a:	d001      	beq.n	8002b70 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e04e      	b.n	8002c0e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2202      	movs	r2, #2
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	68da      	ldr	r2, [r3, #12]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f042 0201 	orr.w	r2, r2, #1
 8002b86:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	4a23      	ldr	r2, [pc, #140]	@ (8002c1c <HAL_TIM_Base_Start_IT+0xc4>)
 8002b8e:	4293      	cmp	r3, r2
 8002b90:	d022      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x80>
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b9a:	d01d      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x80>
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a1f      	ldr	r2, [pc, #124]	@ (8002c20 <HAL_TIM_Base_Start_IT+0xc8>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d018      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x80>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1e      	ldr	r2, [pc, #120]	@ (8002c24 <HAL_TIM_Base_Start_IT+0xcc>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d013      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x80>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8002c28 <HAL_TIM_Base_Start_IT+0xd0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d00e      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x80>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a1b      	ldr	r2, [pc, #108]	@ (8002c2c <HAL_TIM_Base_Start_IT+0xd4>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d009      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x80>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a19      	ldr	r2, [pc, #100]	@ (8002c30 <HAL_TIM_Base_Start_IT+0xd8>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d004      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x80>
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a18      	ldr	r2, [pc, #96]	@ (8002c34 <HAL_TIM_Base_Start_IT+0xdc>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d111      	bne.n	8002bfc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	689b      	ldr	r3, [r3, #8]
 8002bde:	f003 0307 	and.w	r3, r3, #7
 8002be2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2b06      	cmp	r3, #6
 8002be8:	d010      	beq.n	8002c0c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	681a      	ldr	r2, [r3, #0]
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	f042 0201 	orr.w	r2, r2, #1
 8002bf8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bfa:	e007      	b.n	8002c0c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c0c:	2300      	movs	r3, #0
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3714      	adds	r7, #20
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr
 8002c1a:	bf00      	nop
 8002c1c:	40010000 	.word	0x40010000
 8002c20:	40000400 	.word	0x40000400
 8002c24:	40000800 	.word	0x40000800
 8002c28:	40000c00 	.word	0x40000c00
 8002c2c:	40010400 	.word	0x40010400
 8002c30:	40014000 	.word	0x40014000
 8002c34:	40001800 	.word	0x40001800

08002c38 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	b083      	sub	sp, #12
 8002c3c:	af00      	add	r7, sp, #0
 8002c3e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	68da      	ldr	r2, [r3, #12]
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f022 0201 	bic.w	r2, r2, #1
 8002c4e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	6a1a      	ldr	r2, [r3, #32]
 8002c56:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002c5a:	4013      	ands	r3, r2
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d10f      	bne.n	8002c80 <HAL_TIM_Base_Stop_IT+0x48>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	6a1a      	ldr	r2, [r3, #32]
 8002c66:	f240 4344 	movw	r3, #1092	@ 0x444
 8002c6a:	4013      	ands	r3, r2
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d107      	bne.n	8002c80 <HAL_TIM_Base_Stop_IT+0x48>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0201 	bic.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	370c      	adds	r7, #12
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c94:	4770      	bx	lr

08002c96 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c96:	b580      	push	{r7, lr}
 8002c98:	b082      	sub	sp, #8
 8002c9a:	af00      	add	r7, sp, #0
 8002c9c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d101      	bne.n	8002ca8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ca4:	2301      	movs	r3, #1
 8002ca6:	e041      	b.n	8002d2c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002cae:	b2db      	uxtb	r3, r3
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d106      	bne.n	8002cc2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2200      	movs	r2, #0
 8002cb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 f839 	bl	8002d34 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2202      	movs	r2, #2
 8002cc6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	4610      	mov	r0, r2
 8002cd6:	f000 fc53 	bl	8003580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2201      	movs	r2, #1
 8002cfe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2201      	movs	r2, #1
 8002d06:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2201      	movs	r2, #1
 8002d0e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2201      	movs	r2, #1
 8002d16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2201      	movs	r2, #1
 8002d1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d2a:	2300      	movs	r3, #0
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3708      	adds	r7, #8
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}

08002d34 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d52:	683b      	ldr	r3, [r7, #0]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d109      	bne.n	8002d6c <HAL_TIM_PWM_Start+0x24>
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002d5e:	b2db      	uxtb	r3, r3
 8002d60:	2b01      	cmp	r3, #1
 8002d62:	bf14      	ite	ne
 8002d64:	2301      	movne	r3, #1
 8002d66:	2300      	moveq	r3, #0
 8002d68:	b2db      	uxtb	r3, r3
 8002d6a:	e022      	b.n	8002db2 <HAL_TIM_PWM_Start+0x6a>
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	2b04      	cmp	r3, #4
 8002d70:	d109      	bne.n	8002d86 <HAL_TIM_PWM_Start+0x3e>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	bf14      	ite	ne
 8002d7e:	2301      	movne	r3, #1
 8002d80:	2300      	moveq	r3, #0
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	e015      	b.n	8002db2 <HAL_TIM_PWM_Start+0x6a>
 8002d86:	683b      	ldr	r3, [r7, #0]
 8002d88:	2b08      	cmp	r3, #8
 8002d8a:	d109      	bne.n	8002da0 <HAL_TIM_PWM_Start+0x58>
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002d92:	b2db      	uxtb	r3, r3
 8002d94:	2b01      	cmp	r3, #1
 8002d96:	bf14      	ite	ne
 8002d98:	2301      	movne	r3, #1
 8002d9a:	2300      	moveq	r3, #0
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	e008      	b.n	8002db2 <HAL_TIM_PWM_Start+0x6a>
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002da6:	b2db      	uxtb	r3, r3
 8002da8:	2b01      	cmp	r3, #1
 8002daa:	bf14      	ite	ne
 8002dac:	2301      	movne	r3, #1
 8002dae:	2300      	moveq	r3, #0
 8002db0:	b2db      	uxtb	r3, r3
 8002db2:	2b00      	cmp	r3, #0
 8002db4:	d001      	beq.n	8002dba <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002db6:	2301      	movs	r3, #1
 8002db8:	e07c      	b.n	8002eb4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d104      	bne.n	8002dca <HAL_TIM_PWM_Start+0x82>
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2202      	movs	r2, #2
 8002dc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002dc8:	e013      	b.n	8002df2 <HAL_TIM_PWM_Start+0xaa>
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	2b04      	cmp	r3, #4
 8002dce:	d104      	bne.n	8002dda <HAL_TIM_PWM_Start+0x92>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2202      	movs	r2, #2
 8002dd4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002dd8:	e00b      	b.n	8002df2 <HAL_TIM_PWM_Start+0xaa>
 8002dda:	683b      	ldr	r3, [r7, #0]
 8002ddc:	2b08      	cmp	r3, #8
 8002dde:	d104      	bne.n	8002dea <HAL_TIM_PWM_Start+0xa2>
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2202      	movs	r2, #2
 8002de4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002de8:	e003      	b.n	8002df2 <HAL_TIM_PWM_Start+0xaa>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2202      	movs	r2, #2
 8002dee:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	2201      	movs	r2, #1
 8002df8:	6839      	ldr	r1, [r7, #0]
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	f000 ff47 	bl	8003c8e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a2d      	ldr	r2, [pc, #180]	@ (8002ebc <HAL_TIM_PWM_Start+0x174>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d004      	beq.n	8002e14 <HAL_TIM_PWM_Start+0xcc>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4a2c      	ldr	r2, [pc, #176]	@ (8002ec0 <HAL_TIM_PWM_Start+0x178>)
 8002e10:	4293      	cmp	r3, r2
 8002e12:	d101      	bne.n	8002e18 <HAL_TIM_PWM_Start+0xd0>
 8002e14:	2301      	movs	r3, #1
 8002e16:	e000      	b.n	8002e1a <HAL_TIM_PWM_Start+0xd2>
 8002e18:	2300      	movs	r3, #0
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d007      	beq.n	8002e2e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002e2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	4a22      	ldr	r2, [pc, #136]	@ (8002ebc <HAL_TIM_PWM_Start+0x174>)
 8002e34:	4293      	cmp	r3, r2
 8002e36:	d022      	beq.n	8002e7e <HAL_TIM_PWM_Start+0x136>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e40:	d01d      	beq.n	8002e7e <HAL_TIM_PWM_Start+0x136>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a1f      	ldr	r2, [pc, #124]	@ (8002ec4 <HAL_TIM_PWM_Start+0x17c>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d018      	beq.n	8002e7e <HAL_TIM_PWM_Start+0x136>
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4a1d      	ldr	r2, [pc, #116]	@ (8002ec8 <HAL_TIM_PWM_Start+0x180>)
 8002e52:	4293      	cmp	r3, r2
 8002e54:	d013      	beq.n	8002e7e <HAL_TIM_PWM_Start+0x136>
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8002ecc <HAL_TIM_PWM_Start+0x184>)
 8002e5c:	4293      	cmp	r3, r2
 8002e5e:	d00e      	beq.n	8002e7e <HAL_TIM_PWM_Start+0x136>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4a16      	ldr	r2, [pc, #88]	@ (8002ec0 <HAL_TIM_PWM_Start+0x178>)
 8002e66:	4293      	cmp	r3, r2
 8002e68:	d009      	beq.n	8002e7e <HAL_TIM_PWM_Start+0x136>
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4a18      	ldr	r2, [pc, #96]	@ (8002ed0 <HAL_TIM_PWM_Start+0x188>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d004      	beq.n	8002e7e <HAL_TIM_PWM_Start+0x136>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a16      	ldr	r2, [pc, #88]	@ (8002ed4 <HAL_TIM_PWM_Start+0x18c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d111      	bne.n	8002ea2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	689b      	ldr	r3, [r3, #8]
 8002e84:	f003 0307 	and.w	r3, r3, #7
 8002e88:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2b06      	cmp	r3, #6
 8002e8e:	d010      	beq.n	8002eb2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	681a      	ldr	r2, [r3, #0]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f042 0201 	orr.w	r2, r2, #1
 8002e9e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ea0:	e007      	b.n	8002eb2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	681a      	ldr	r2, [r3, #0]
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	f042 0201 	orr.w	r2, r2, #1
 8002eb0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	4618      	mov	r0, r3
 8002eb6:	3710      	adds	r7, #16
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	bd80      	pop	{r7, pc}
 8002ebc:	40010000 	.word	0x40010000
 8002ec0:	40010400 	.word	0x40010400
 8002ec4:	40000400 	.word	0x40000400
 8002ec8:	40000800 	.word	0x40000800
 8002ecc:	40000c00 	.word	0x40000c00
 8002ed0:	40014000 	.word	0x40014000
 8002ed4:	40001800 	.word	0x40001800

08002ed8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b082      	sub	sp, #8
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	6839      	ldr	r1, [r7, #0]
 8002eea:	4618      	mov	r0, r3
 8002eec:	f000 fecf 	bl	8003c8e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4a2e      	ldr	r2, [pc, #184]	@ (8002fb0 <HAL_TIM_PWM_Stop+0xd8>)
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d004      	beq.n	8002f04 <HAL_TIM_PWM_Stop+0x2c>
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	4a2d      	ldr	r2, [pc, #180]	@ (8002fb4 <HAL_TIM_PWM_Stop+0xdc>)
 8002f00:	4293      	cmp	r3, r2
 8002f02:	d101      	bne.n	8002f08 <HAL_TIM_PWM_Stop+0x30>
 8002f04:	2301      	movs	r3, #1
 8002f06:	e000      	b.n	8002f0a <HAL_TIM_PWM_Stop+0x32>
 8002f08:	2300      	movs	r3, #0
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d017      	beq.n	8002f3e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6a1a      	ldr	r2, [r3, #32]
 8002f14:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002f18:	4013      	ands	r3, r2
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d10f      	bne.n	8002f3e <HAL_TIM_PWM_Stop+0x66>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	6a1a      	ldr	r2, [r3, #32]
 8002f24:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f28:	4013      	ands	r3, r2
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d107      	bne.n	8002f3e <HAL_TIM_PWM_Stop+0x66>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002f3c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	6a1a      	ldr	r2, [r3, #32]
 8002f44:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002f48:	4013      	ands	r3, r2
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d10f      	bne.n	8002f6e <HAL_TIM_PWM_Stop+0x96>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	6a1a      	ldr	r2, [r3, #32]
 8002f54:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f58:	4013      	ands	r3, r2
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d107      	bne.n	8002f6e <HAL_TIM_PWM_Stop+0x96>
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	681a      	ldr	r2, [r3, #0]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f022 0201 	bic.w	r2, r2, #1
 8002f6c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d104      	bne.n	8002f7e <HAL_TIM_PWM_Stop+0xa6>
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	2201      	movs	r2, #1
 8002f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f7c:	e013      	b.n	8002fa6 <HAL_TIM_PWM_Stop+0xce>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	2b04      	cmp	r3, #4
 8002f82:	d104      	bne.n	8002f8e <HAL_TIM_PWM_Stop+0xb6>
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f8c:	e00b      	b.n	8002fa6 <HAL_TIM_PWM_Stop+0xce>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	2b08      	cmp	r3, #8
 8002f92:	d104      	bne.n	8002f9e <HAL_TIM_PWM_Stop+0xc6>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	2201      	movs	r2, #1
 8002f98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f9c:	e003      	b.n	8002fa6 <HAL_TIM_PWM_Stop+0xce>
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002fa6:	2300      	movs	r3, #0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3708      	adds	r7, #8
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}
 8002fb0:	40010000 	.word	0x40010000
 8002fb4:	40010400 	.word	0x40010400

08002fb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b084      	sub	sp, #16
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	68db      	ldr	r3, [r3, #12]
 8002fc6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	691b      	ldr	r3, [r3, #16]
 8002fce:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d020      	beq.n	800301c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 0302 	and.w	r3, r3, #2
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01b      	beq.n	800301c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0202 	mvn.w	r2, #2
 8002fec:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	699b      	ldr	r3, [r3, #24]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f000 fa9d 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fa8f 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 faa0 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f003 0304 	and.w	r3, r3, #4
 8003022:	2b00      	cmp	r3, #0
 8003024:	d020      	beq.n	8003068 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f003 0304 	and.w	r3, r3, #4
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01b      	beq.n	8003068 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0204 	mvn.w	r2, #4
 8003038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2202      	movs	r2, #2
 800303e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	699b      	ldr	r3, [r3, #24]
 8003046:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f000 fa77 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 8003054:	e005      	b.n	8003062 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fa69 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fa7a 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0308 	and.w	r3, r3, #8
 800306e:	2b00      	cmp	r3, #0
 8003070:	d020      	beq.n	80030b4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 0308 	and.w	r3, r3, #8
 8003078:	2b00      	cmp	r3, #0
 800307a:	d01b      	beq.n	80030b4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0208 	mvn.w	r2, #8
 8003084:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	2204      	movs	r2, #4
 800308a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	69db      	ldr	r3, [r3, #28]
 8003092:	f003 0303 	and.w	r3, r3, #3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d003      	beq.n	80030a2 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800309a:	6878      	ldr	r0, [r7, #4]
 800309c:	f000 fa51 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 80030a0:	e005      	b.n	80030ae <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f000 fa43 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030a8:	6878      	ldr	r0, [r7, #4]
 80030aa:	f000 fa54 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2200      	movs	r2, #0
 80030b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d020      	beq.n	8003100 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	f003 0310 	and.w	r3, r3, #16
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	d01b      	beq.n	8003100 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f06f 0210 	mvn.w	r2, #16
 80030d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2208      	movs	r2, #8
 80030d6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	69db      	ldr	r3, [r3, #28]
 80030de:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d003      	beq.n	80030ee <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030e6:	6878      	ldr	r0, [r7, #4]
 80030e8:	f000 fa2b 	bl	8003542 <HAL_TIM_IC_CaptureCallback>
 80030ec:	e005      	b.n	80030fa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030ee:	6878      	ldr	r0, [r7, #4]
 80030f0:	f000 fa1d 	bl	800352e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030f4:	6878      	ldr	r0, [r7, #4]
 80030f6:	f000 fa2e 	bl	8003556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	2200      	movs	r2, #0
 80030fe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	f003 0301 	and.w	r3, r3, #1
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00c      	beq.n	8003124 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	f003 0301 	and.w	r3, r3, #1
 8003110:	2b00      	cmp	r3, #0
 8003112:	d007      	beq.n	8003124 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f06f 0201 	mvn.w	r2, #1
 800311c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800311e:	6878      	ldr	r0, [r7, #4]
 8003120:	f7fd fdbe 	bl	8000ca0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003124:	68bb      	ldr	r3, [r7, #8]
 8003126:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800312a:	2b00      	cmp	r3, #0
 800312c:	d00c      	beq.n	8003148 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003134:	2b00      	cmp	r3, #0
 8003136:	d007      	beq.n	8003148 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003140:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003142:	6878      	ldr	r0, [r7, #4]
 8003144:	f000 fe4e 	bl	8003de4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003148:	68bb      	ldr	r3, [r7, #8]
 800314a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800314e:	2b00      	cmp	r3, #0
 8003150:	d00c      	beq.n	800316c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d007      	beq.n	800316c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003164:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003166:	6878      	ldr	r0, [r7, #4]
 8003168:	f000 f9ff 	bl	800356a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800316c:	68bb      	ldr	r3, [r7, #8]
 800316e:	f003 0320 	and.w	r3, r3, #32
 8003172:	2b00      	cmp	r3, #0
 8003174:	d00c      	beq.n	8003190 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	f003 0320 	and.w	r3, r3, #32
 800317c:	2b00      	cmp	r3, #0
 800317e:	d007      	beq.n	8003190 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f06f 0220 	mvn.w	r2, #32
 8003188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f000 fe20 	bl	8003dd0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003190:	bf00      	nop
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	60f8      	str	r0, [r7, #12]
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80031a4:	2300      	movs	r3, #0
 80031a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031ae:	2b01      	cmp	r3, #1
 80031b0:	d101      	bne.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80031b2:	2302      	movs	r3, #2
 80031b4:	e0ae      	b.n	8003314 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2201      	movs	r2, #1
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	2b0c      	cmp	r3, #12
 80031c2:	f200 809f 	bhi.w	8003304 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80031c6:	a201      	add	r2, pc, #4	@ (adr r2, 80031cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80031c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031cc:	08003201 	.word	0x08003201
 80031d0:	08003305 	.word	0x08003305
 80031d4:	08003305 	.word	0x08003305
 80031d8:	08003305 	.word	0x08003305
 80031dc:	08003241 	.word	0x08003241
 80031e0:	08003305 	.word	0x08003305
 80031e4:	08003305 	.word	0x08003305
 80031e8:	08003305 	.word	0x08003305
 80031ec:	08003283 	.word	0x08003283
 80031f0:	08003305 	.word	0x08003305
 80031f4:	08003305 	.word	0x08003305
 80031f8:	08003305 	.word	0x08003305
 80031fc:	080032c3 	.word	0x080032c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	4618      	mov	r0, r3
 8003208:	f000 fa66 	bl	80036d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	699a      	ldr	r2, [r3, #24]
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	f042 0208 	orr.w	r2, r2, #8
 800321a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	699a      	ldr	r2, [r3, #24]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f022 0204 	bic.w	r2, r2, #4
 800322a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	6999      	ldr	r1, [r3, #24]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	691a      	ldr	r2, [r3, #16]
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	619a      	str	r2, [r3, #24]
      break;
 800323e:	e064      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003240:	68fb      	ldr	r3, [r7, #12]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	68b9      	ldr	r1, [r7, #8]
 8003246:	4618      	mov	r0, r3
 8003248:	f000 fab6 	bl	80037b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	699a      	ldr	r2, [r3, #24]
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800325a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	699a      	ldr	r2, [r3, #24]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800326a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	6999      	ldr	r1, [r3, #24]
 8003272:	68bb      	ldr	r3, [r7, #8]
 8003274:	691b      	ldr	r3, [r3, #16]
 8003276:	021a      	lsls	r2, r3, #8
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	430a      	orrs	r2, r1
 800327e:	619a      	str	r2, [r3, #24]
      break;
 8003280:	e043      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68b9      	ldr	r1, [r7, #8]
 8003288:	4618      	mov	r0, r3
 800328a:	f000 fb0b 	bl	80038a4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	69da      	ldr	r2, [r3, #28]
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f042 0208 	orr.w	r2, r2, #8
 800329c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f022 0204 	bic.w	r2, r2, #4
 80032ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	69d9      	ldr	r1, [r3, #28]
 80032b4:	68bb      	ldr	r3, [r7, #8]
 80032b6:	691a      	ldr	r2, [r3, #16]
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	430a      	orrs	r2, r1
 80032be:	61da      	str	r2, [r3, #28]
      break;
 80032c0:	e023      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	68b9      	ldr	r1, [r7, #8]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f000 fb5f 	bl	800398c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	69da      	ldr	r2, [r3, #28]
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80032dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	69da      	ldr	r2, [r3, #28]
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80032ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	69d9      	ldr	r1, [r3, #28]
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	691b      	ldr	r3, [r3, #16]
 80032f8:	021a      	lsls	r2, r3, #8
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	430a      	orrs	r2, r1
 8003300:	61da      	str	r2, [r3, #28]
      break;
 8003302:	e002      	b.n	800330a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003304:	2301      	movs	r3, #1
 8003306:	75fb      	strb	r3, [r7, #23]
      break;
 8003308:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2200      	movs	r2, #0
 800330e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003312:	7dfb      	ldrb	r3, [r7, #23]
}
 8003314:	4618      	mov	r0, r3
 8003316:	3718      	adds	r7, #24
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b084      	sub	sp, #16
 8003320:	af00      	add	r7, sp, #0
 8003322:	6078      	str	r0, [r7, #4]
 8003324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003330:	2b01      	cmp	r3, #1
 8003332:	d101      	bne.n	8003338 <HAL_TIM_ConfigClockSource+0x1c>
 8003334:	2302      	movs	r3, #2
 8003336:	e0b4      	b.n	80034a2 <HAL_TIM_ConfigClockSource+0x186>
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2201      	movs	r2, #1
 800333c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2202      	movs	r2, #2
 8003344:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	689b      	ldr	r3, [r3, #8]
 800334e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003350:	68bb      	ldr	r3, [r7, #8]
 8003352:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003356:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003358:	68bb      	ldr	r3, [r7, #8]
 800335a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800335e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	68ba      	ldr	r2, [r7, #8]
 8003366:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003370:	d03e      	beq.n	80033f0 <HAL_TIM_ConfigClockSource+0xd4>
 8003372:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003376:	f200 8087 	bhi.w	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 800337a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800337e:	f000 8086 	beq.w	800348e <HAL_TIM_ConfigClockSource+0x172>
 8003382:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003386:	d87f      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 8003388:	2b70      	cmp	r3, #112	@ 0x70
 800338a:	d01a      	beq.n	80033c2 <HAL_TIM_ConfigClockSource+0xa6>
 800338c:	2b70      	cmp	r3, #112	@ 0x70
 800338e:	d87b      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 8003390:	2b60      	cmp	r3, #96	@ 0x60
 8003392:	d050      	beq.n	8003436 <HAL_TIM_ConfigClockSource+0x11a>
 8003394:	2b60      	cmp	r3, #96	@ 0x60
 8003396:	d877      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 8003398:	2b50      	cmp	r3, #80	@ 0x50
 800339a:	d03c      	beq.n	8003416 <HAL_TIM_ConfigClockSource+0xfa>
 800339c:	2b50      	cmp	r3, #80	@ 0x50
 800339e:	d873      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 80033a0:	2b40      	cmp	r3, #64	@ 0x40
 80033a2:	d058      	beq.n	8003456 <HAL_TIM_ConfigClockSource+0x13a>
 80033a4:	2b40      	cmp	r3, #64	@ 0x40
 80033a6:	d86f      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 80033a8:	2b30      	cmp	r3, #48	@ 0x30
 80033aa:	d064      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x15a>
 80033ac:	2b30      	cmp	r3, #48	@ 0x30
 80033ae:	d86b      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d060      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x15a>
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	d867      	bhi.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d05c      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x15a>
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d05a      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0x15a>
 80033c0:	e062      	b.n	8003488 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033c6:	683b      	ldr	r3, [r7, #0]
 80033c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80033d2:	f000 fc3c 	bl	8003c4e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80033e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68ba      	ldr	r2, [r7, #8]
 80033ec:	609a      	str	r2, [r3, #8]
      break;
 80033ee:	e04f      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033f4:	683b      	ldr	r3, [r7, #0]
 80033f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003400:	f000 fc25 	bl	8003c4e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	689a      	ldr	r2, [r3, #8]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003412:	609a      	str	r2, [r3, #8]
      break;
 8003414:	e03c      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800341a:	683b      	ldr	r3, [r7, #0]
 800341c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003422:	461a      	mov	r2, r3
 8003424:	f000 fb99 	bl	8003b5a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2150      	movs	r1, #80	@ 0x50
 800342e:	4618      	mov	r0, r3
 8003430:	f000 fbf2 	bl	8003c18 <TIM_ITRx_SetConfig>
      break;
 8003434:	e02c      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003442:	461a      	mov	r2, r3
 8003444:	f000 fbb8 	bl	8003bb8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	2160      	movs	r1, #96	@ 0x60
 800344e:	4618      	mov	r0, r3
 8003450:	f000 fbe2 	bl	8003c18 <TIM_ITRx_SetConfig>
      break;
 8003454:	e01c      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003462:	461a      	mov	r2, r3
 8003464:	f000 fb79 	bl	8003b5a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	2140      	movs	r1, #64	@ 0x40
 800346e:	4618      	mov	r0, r3
 8003470:	f000 fbd2 	bl	8003c18 <TIM_ITRx_SetConfig>
      break;
 8003474:	e00c      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681a      	ldr	r2, [r3, #0]
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	4619      	mov	r1, r3
 8003480:	4610      	mov	r0, r2
 8003482:	f000 fbc9 	bl	8003c18 <TIM_ITRx_SetConfig>
      break;
 8003486:	e003      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	73fb      	strb	r3, [r7, #15]
      break;
 800348c:	e000      	b.n	8003490 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800348e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2201      	movs	r2, #1
 8003494:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	2200      	movs	r2, #0
 800349c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80034a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80034a2:	4618      	mov	r0, r3
 80034a4:	3710      	adds	r7, #16
 80034a6:	46bd      	mov	sp, r7
 80034a8:	bd80      	pop	{r7, pc}

080034aa <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80034aa:	b580      	push	{r7, lr}
 80034ac:	b082      	sub	sp, #8
 80034ae:	af00      	add	r7, sp, #0
 80034b0:	6078      	str	r0, [r7, #4]
 80034b2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80034ba:	2b01      	cmp	r3, #1
 80034bc:	d101      	bne.n	80034c2 <HAL_TIM_SlaveConfigSynchro+0x18>
 80034be:	2302      	movs	r3, #2
 80034c0:	e031      	b.n	8003526 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	2201      	movs	r2, #1
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2202      	movs	r2, #2
 80034ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80034d2:	6839      	ldr	r1, [r7, #0]
 80034d4:	6878      	ldr	r0, [r7, #4]
 80034d6:	f000 faaf 	bl	8003a38 <TIM_SlaveTimer_SetConfig>
 80034da:	4603      	mov	r3, r0
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d009      	beq.n	80034f4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2201      	movs	r2, #1
 80034e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80034f0:	2301      	movs	r3, #1
 80034f2:	e018      	b.n	8003526 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	68da      	ldr	r2, [r3, #12]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003502:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	68da      	ldr	r2, [r3, #12]
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8003512:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	2201      	movs	r2, #1
 8003518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	2200      	movs	r2, #0
 8003520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003524:	2300      	movs	r3, #0
}
 8003526:	4618      	mov	r0, r3
 8003528:	3708      	adds	r7, #8
 800352a:	46bd      	mov	sp, r7
 800352c:	bd80      	pop	{r7, pc}

0800352e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800352e:	b480      	push	{r7}
 8003530:	b083      	sub	sp, #12
 8003532:	af00      	add	r7, sp, #0
 8003534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003536:	bf00      	nop
 8003538:	370c      	adds	r7, #12
 800353a:	46bd      	mov	sp, r7
 800353c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003540:	4770      	bx	lr

08003542 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003542:	b480      	push	{r7}
 8003544:	b083      	sub	sp, #12
 8003546:	af00      	add	r7, sp, #0
 8003548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr

08003556 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003556:	b480      	push	{r7}
 8003558:	b083      	sub	sp, #12
 800355a:	af00      	add	r7, sp, #0
 800355c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800355e:	bf00      	nop
 8003560:	370c      	adds	r7, #12
 8003562:	46bd      	mov	sp, r7
 8003564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003568:	4770      	bx	lr

0800356a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800356a:	b480      	push	{r7}
 800356c:	b083      	sub	sp, #12
 800356e:	af00      	add	r7, sp, #0
 8003570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003572:	bf00      	nop
 8003574:	370c      	adds	r7, #12
 8003576:	46bd      	mov	sp, r7
 8003578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800357c:	4770      	bx	lr
	...

08003580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003580:	b480      	push	{r7}
 8003582:	b085      	sub	sp, #20
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
 8003588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	4a46      	ldr	r2, [pc, #280]	@ (80036ac <TIM_Base_SetConfig+0x12c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d013      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800359e:	d00f      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	4a43      	ldr	r2, [pc, #268]	@ (80036b0 <TIM_Base_SetConfig+0x130>)
 80035a4:	4293      	cmp	r3, r2
 80035a6:	d00b      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	4a42      	ldr	r2, [pc, #264]	@ (80036b4 <TIM_Base_SetConfig+0x134>)
 80035ac:	4293      	cmp	r3, r2
 80035ae:	d007      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	4a41      	ldr	r2, [pc, #260]	@ (80036b8 <TIM_Base_SetConfig+0x138>)
 80035b4:	4293      	cmp	r3, r2
 80035b6:	d003      	beq.n	80035c0 <TIM_Base_SetConfig+0x40>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	4a40      	ldr	r2, [pc, #256]	@ (80036bc <TIM_Base_SetConfig+0x13c>)
 80035bc:	4293      	cmp	r3, r2
 80035be:	d108      	bne.n	80035d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035c8:	683b      	ldr	r3, [r7, #0]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	68fa      	ldr	r2, [r7, #12]
 80035ce:	4313      	orrs	r3, r2
 80035d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a35      	ldr	r2, [pc, #212]	@ (80036ac <TIM_Base_SetConfig+0x12c>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d02b      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035e0:	d027      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a32      	ldr	r2, [pc, #200]	@ (80036b0 <TIM_Base_SetConfig+0x130>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d023      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a31      	ldr	r2, [pc, #196]	@ (80036b4 <TIM_Base_SetConfig+0x134>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d01f      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	4a30      	ldr	r2, [pc, #192]	@ (80036b8 <TIM_Base_SetConfig+0x138>)
 80035f6:	4293      	cmp	r3, r2
 80035f8:	d01b      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a2f      	ldr	r2, [pc, #188]	@ (80036bc <TIM_Base_SetConfig+0x13c>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d017      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a2e      	ldr	r2, [pc, #184]	@ (80036c0 <TIM_Base_SetConfig+0x140>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d013      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a2d      	ldr	r2, [pc, #180]	@ (80036c4 <TIM_Base_SetConfig+0x144>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d00f      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a2c      	ldr	r2, [pc, #176]	@ (80036c8 <TIM_Base_SetConfig+0x148>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d00b      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	4a2b      	ldr	r2, [pc, #172]	@ (80036cc <TIM_Base_SetConfig+0x14c>)
 800361e:	4293      	cmp	r3, r2
 8003620:	d007      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	4a2a      	ldr	r2, [pc, #168]	@ (80036d0 <TIM_Base_SetConfig+0x150>)
 8003626:	4293      	cmp	r3, r2
 8003628:	d003      	beq.n	8003632 <TIM_Base_SetConfig+0xb2>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	4a29      	ldr	r2, [pc, #164]	@ (80036d4 <TIM_Base_SetConfig+0x154>)
 800362e:	4293      	cmp	r3, r2
 8003630:	d108      	bne.n	8003644 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	4313      	orrs	r3, r2
 8003642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	695b      	ldr	r3, [r3, #20]
 800364e:	4313      	orrs	r3, r2
 8003650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	689a      	ldr	r2, [r3, #8]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	681a      	ldr	r2, [r3, #0]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	4a10      	ldr	r2, [pc, #64]	@ (80036ac <TIM_Base_SetConfig+0x12c>)
 800366c:	4293      	cmp	r3, r2
 800366e:	d003      	beq.n	8003678 <TIM_Base_SetConfig+0xf8>
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	4a12      	ldr	r2, [pc, #72]	@ (80036bc <TIM_Base_SetConfig+0x13c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d103      	bne.n	8003680 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	691a      	ldr	r2, [r3, #16]
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2201      	movs	r2, #1
 8003684:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b01      	cmp	r3, #1
 8003690:	d105      	bne.n	800369e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	691b      	ldr	r3, [r3, #16]
 8003696:	f023 0201 	bic.w	r2, r3, #1
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	611a      	str	r2, [r3, #16]
  }
}
 800369e:	bf00      	nop
 80036a0:	3714      	adds	r7, #20
 80036a2:	46bd      	mov	sp, r7
 80036a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a8:	4770      	bx	lr
 80036aa:	bf00      	nop
 80036ac:	40010000 	.word	0x40010000
 80036b0:	40000400 	.word	0x40000400
 80036b4:	40000800 	.word	0x40000800
 80036b8:	40000c00 	.word	0x40000c00
 80036bc:	40010400 	.word	0x40010400
 80036c0:	40014000 	.word	0x40014000
 80036c4:	40014400 	.word	0x40014400
 80036c8:	40014800 	.word	0x40014800
 80036cc:	40001800 	.word	0x40001800
 80036d0:	40001c00 	.word	0x40001c00
 80036d4:	40002000 	.word	0x40002000

080036d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
 80036de:	6078      	str	r0, [r7, #4]
 80036e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	6a1b      	ldr	r3, [r3, #32]
 80036e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a1b      	ldr	r3, [r3, #32]
 80036ec:	f023 0201 	bic.w	r2, r3, #1
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	685b      	ldr	r3, [r3, #4]
 80036f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	699b      	ldr	r3, [r3, #24]
 80036fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003706:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	f023 0303 	bic.w	r3, r3, #3
 800370e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	68fa      	ldr	r2, [r7, #12]
 8003716:	4313      	orrs	r3, r2
 8003718:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f023 0302 	bic.w	r3, r3, #2
 8003720:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003722:	683b      	ldr	r3, [r7, #0]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	697a      	ldr	r2, [r7, #20]
 8003728:	4313      	orrs	r3, r2
 800372a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	4a20      	ldr	r2, [pc, #128]	@ (80037b0 <TIM_OC1_SetConfig+0xd8>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d003      	beq.n	800373c <TIM_OC1_SetConfig+0x64>
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	4a1f      	ldr	r2, [pc, #124]	@ (80037b4 <TIM_OC1_SetConfig+0xdc>)
 8003738:	4293      	cmp	r3, r2
 800373a:	d10c      	bne.n	8003756 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800373c:	697b      	ldr	r3, [r7, #20]
 800373e:	f023 0308 	bic.w	r3, r3, #8
 8003742:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	697a      	ldr	r2, [r7, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800374e:	697b      	ldr	r3, [r7, #20]
 8003750:	f023 0304 	bic.w	r3, r3, #4
 8003754:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	4a15      	ldr	r2, [pc, #84]	@ (80037b0 <TIM_OC1_SetConfig+0xd8>)
 800375a:	4293      	cmp	r3, r2
 800375c:	d003      	beq.n	8003766 <TIM_OC1_SetConfig+0x8e>
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	4a14      	ldr	r2, [pc, #80]	@ (80037b4 <TIM_OC1_SetConfig+0xdc>)
 8003762:	4293      	cmp	r3, r2
 8003764:	d111      	bne.n	800378a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800376c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003774:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	695b      	ldr	r3, [r3, #20]
 800377a:	693a      	ldr	r2, [r7, #16]
 800377c:	4313      	orrs	r3, r2
 800377e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	699b      	ldr	r3, [r3, #24]
 8003784:	693a      	ldr	r2, [r7, #16]
 8003786:	4313      	orrs	r3, r2
 8003788:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	693a      	ldr	r2, [r7, #16]
 800378e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003796:	683b      	ldr	r3, [r7, #0]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	621a      	str	r2, [r3, #32]
}
 80037a4:	bf00      	nop
 80037a6:	371c      	adds	r7, #28
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr
 80037b0:	40010000 	.word	0x40010000
 80037b4:	40010400 	.word	0x40010400

080037b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b087      	sub	sp, #28
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
 80037c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a1b      	ldr	r3, [r3, #32]
 80037c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	6a1b      	ldr	r3, [r3, #32]
 80037cc:	f023 0210 	bic.w	r2, r3, #16
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	685b      	ldr	r3, [r3, #4]
 80037d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80037e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80037ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	021b      	lsls	r3, r3, #8
 80037f6:	68fa      	ldr	r2, [r7, #12]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	f023 0320 	bic.w	r3, r3, #32
 8003802:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	689b      	ldr	r3, [r3, #8]
 8003808:	011b      	lsls	r3, r3, #4
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	4313      	orrs	r3, r2
 800380e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	4a22      	ldr	r2, [pc, #136]	@ (800389c <TIM_OC2_SetConfig+0xe4>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d003      	beq.n	8003820 <TIM_OC2_SetConfig+0x68>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	4a21      	ldr	r2, [pc, #132]	@ (80038a0 <TIM_OC2_SetConfig+0xe8>)
 800381c:	4293      	cmp	r3, r2
 800381e:	d10d      	bne.n	800383c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003826:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003828:	683b      	ldr	r3, [r7, #0]
 800382a:	68db      	ldr	r3, [r3, #12]
 800382c:	011b      	lsls	r3, r3, #4
 800382e:	697a      	ldr	r2, [r7, #20]
 8003830:	4313      	orrs	r3, r2
 8003832:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800383a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	4a17      	ldr	r2, [pc, #92]	@ (800389c <TIM_OC2_SetConfig+0xe4>)
 8003840:	4293      	cmp	r3, r2
 8003842:	d003      	beq.n	800384c <TIM_OC2_SetConfig+0x94>
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	4a16      	ldr	r2, [pc, #88]	@ (80038a0 <TIM_OC2_SetConfig+0xe8>)
 8003848:	4293      	cmp	r3, r2
 800384a:	d113      	bne.n	8003874 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003852:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003854:	693b      	ldr	r3, [r7, #16]
 8003856:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800385a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	695b      	ldr	r3, [r3, #20]
 8003860:	009b      	lsls	r3, r3, #2
 8003862:	693a      	ldr	r2, [r7, #16]
 8003864:	4313      	orrs	r3, r2
 8003866:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	699b      	ldr	r3, [r3, #24]
 800386c:	009b      	lsls	r3, r3, #2
 800386e:	693a      	ldr	r2, [r7, #16]
 8003870:	4313      	orrs	r3, r2
 8003872:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	693a      	ldr	r2, [r7, #16]
 8003878:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	685a      	ldr	r2, [r3, #4]
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	697a      	ldr	r2, [r7, #20]
 800388c:	621a      	str	r2, [r3, #32]
}
 800388e:	bf00      	nop
 8003890:	371c      	adds	r7, #28
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr
 800389a:	bf00      	nop
 800389c:	40010000 	.word	0x40010000
 80038a0:	40010400 	.word	0x40010400

080038a4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b087      	sub	sp, #28
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6a1b      	ldr	r3, [r3, #32]
 80038b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6a1b      	ldr	r3, [r3, #32]
 80038b8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	69db      	ldr	r3, [r3, #28]
 80038ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80038d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f023 0303 	bic.w	r3, r3, #3
 80038da:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	68fa      	ldr	r2, [r7, #12]
 80038e2:	4313      	orrs	r3, r2
 80038e4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038e6:	697b      	ldr	r3, [r7, #20]
 80038e8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80038ec:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	021b      	lsls	r3, r3, #8
 80038f4:	697a      	ldr	r2, [r7, #20]
 80038f6:	4313      	orrs	r3, r2
 80038f8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a21      	ldr	r2, [pc, #132]	@ (8003984 <TIM_OC3_SetConfig+0xe0>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d003      	beq.n	800390a <TIM_OC3_SetConfig+0x66>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	4a20      	ldr	r2, [pc, #128]	@ (8003988 <TIM_OC3_SetConfig+0xe4>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d10d      	bne.n	8003926 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003910:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68db      	ldr	r3, [r3, #12]
 8003916:	021b      	lsls	r3, r3, #8
 8003918:	697a      	ldr	r2, [r7, #20]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003924:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a16      	ldr	r2, [pc, #88]	@ (8003984 <TIM_OC3_SetConfig+0xe0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d003      	beq.n	8003936 <TIM_OC3_SetConfig+0x92>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a15      	ldr	r2, [pc, #84]	@ (8003988 <TIM_OC3_SetConfig+0xe4>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d113      	bne.n	800395e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800393c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003944:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	695b      	ldr	r3, [r3, #20]
 800394a:	011b      	lsls	r3, r3, #4
 800394c:	693a      	ldr	r2, [r7, #16]
 800394e:	4313      	orrs	r3, r2
 8003950:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	699b      	ldr	r3, [r3, #24]
 8003956:	011b      	lsls	r3, r3, #4
 8003958:	693a      	ldr	r2, [r7, #16]
 800395a:	4313      	orrs	r3, r2
 800395c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	693a      	ldr	r2, [r7, #16]
 8003962:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	68fa      	ldr	r2, [r7, #12]
 8003968:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	685a      	ldr	r2, [r3, #4]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	621a      	str	r2, [r3, #32]
}
 8003978:	bf00      	nop
 800397a:	371c      	adds	r7, #28
 800397c:	46bd      	mov	sp, r7
 800397e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003982:	4770      	bx	lr
 8003984:	40010000 	.word	0x40010000
 8003988:	40010400 	.word	0x40010400

0800398c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80039ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	021b      	lsls	r3, r3, #8
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80039d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	031b      	lsls	r3, r3, #12
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a12      	ldr	r2, [pc, #72]	@ (8003a30 <TIM_OC4_SetConfig+0xa4>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d003      	beq.n	80039f4 <TIM_OC4_SetConfig+0x68>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a11      	ldr	r2, [pc, #68]	@ (8003a34 <TIM_OC4_SetConfig+0xa8>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d109      	bne.n	8003a08 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80039fa:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	695b      	ldr	r3, [r3, #20]
 8003a00:	019b      	lsls	r3, r3, #6
 8003a02:	697a      	ldr	r2, [r7, #20]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	697a      	ldr	r2, [r7, #20]
 8003a0c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	68fa      	ldr	r2, [r7, #12]
 8003a12:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685a      	ldr	r2, [r3, #4]
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	693a      	ldr	r2, [r7, #16]
 8003a20:	621a      	str	r2, [r3, #32]
}
 8003a22:	bf00      	nop
 8003a24:	371c      	adds	r7, #28
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	40010000 	.word	0x40010000
 8003a34:	40010400 	.word	0x40010400

08003a38 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003a38:	b580      	push	{r7, lr}
 8003a3a:	b086      	sub	sp, #24
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	6078      	str	r0, [r7, #4]
 8003a40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003a42:	2300      	movs	r3, #0
 8003a44:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	689b      	ldr	r3, [r3, #8]
 8003a4c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a54:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003a56:	683b      	ldr	r3, [r7, #0]
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	693a      	ldr	r2, [r7, #16]
 8003a5c:	4313      	orrs	r3, r2
 8003a5e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003a60:	693b      	ldr	r3, [r7, #16]
 8003a62:	f023 0307 	bic.w	r3, r3, #7
 8003a66:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003a68:	683b      	ldr	r3, [r7, #0]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	693a      	ldr	r2, [r7, #16]
 8003a6e:	4313      	orrs	r3, r2
 8003a70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	693a      	ldr	r2, [r7, #16]
 8003a78:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	685b      	ldr	r3, [r3, #4]
 8003a7e:	2b70      	cmp	r3, #112	@ 0x70
 8003a80:	d01a      	beq.n	8003ab8 <TIM_SlaveTimer_SetConfig+0x80>
 8003a82:	2b70      	cmp	r3, #112	@ 0x70
 8003a84:	d860      	bhi.n	8003b48 <TIM_SlaveTimer_SetConfig+0x110>
 8003a86:	2b60      	cmp	r3, #96	@ 0x60
 8003a88:	d054      	beq.n	8003b34 <TIM_SlaveTimer_SetConfig+0xfc>
 8003a8a:	2b60      	cmp	r3, #96	@ 0x60
 8003a8c:	d85c      	bhi.n	8003b48 <TIM_SlaveTimer_SetConfig+0x110>
 8003a8e:	2b50      	cmp	r3, #80	@ 0x50
 8003a90:	d046      	beq.n	8003b20 <TIM_SlaveTimer_SetConfig+0xe8>
 8003a92:	2b50      	cmp	r3, #80	@ 0x50
 8003a94:	d858      	bhi.n	8003b48 <TIM_SlaveTimer_SetConfig+0x110>
 8003a96:	2b40      	cmp	r3, #64	@ 0x40
 8003a98:	d019      	beq.n	8003ace <TIM_SlaveTimer_SetConfig+0x96>
 8003a9a:	2b40      	cmp	r3, #64	@ 0x40
 8003a9c:	d854      	bhi.n	8003b48 <TIM_SlaveTimer_SetConfig+0x110>
 8003a9e:	2b30      	cmp	r3, #48	@ 0x30
 8003aa0:	d055      	beq.n	8003b4e <TIM_SlaveTimer_SetConfig+0x116>
 8003aa2:	2b30      	cmp	r3, #48	@ 0x30
 8003aa4:	d850      	bhi.n	8003b48 <TIM_SlaveTimer_SetConfig+0x110>
 8003aa6:	2b20      	cmp	r3, #32
 8003aa8:	d051      	beq.n	8003b4e <TIM_SlaveTimer_SetConfig+0x116>
 8003aaa:	2b20      	cmp	r3, #32
 8003aac:	d84c      	bhi.n	8003b48 <TIM_SlaveTimer_SetConfig+0x110>
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d04d      	beq.n	8003b4e <TIM_SlaveTimer_SetConfig+0x116>
 8003ab2:	2b10      	cmp	r3, #16
 8003ab4:	d04b      	beq.n	8003b4e <TIM_SlaveTimer_SetConfig+0x116>
 8003ab6:	e047      	b.n	8003b48 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003abc:	683b      	ldr	r3, [r7, #0]
 8003abe:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003ac8:	f000 f8c1 	bl	8003c4e <TIM_ETR_SetConfig>
      break;
 8003acc:	e040      	b.n	8003b50 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003ace:	683b      	ldr	r3, [r7, #0]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	2b05      	cmp	r3, #5
 8003ad4:	d101      	bne.n	8003ada <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003ad6:	2301      	movs	r3, #1
 8003ad8:	e03b      	b.n	8003b52 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	6a1b      	ldr	r3, [r3, #32]
 8003ae0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	6a1a      	ldr	r2, [r3, #32]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0201 	bic.w	r2, r2, #1
 8003af0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	699b      	ldr	r3, [r3, #24]
 8003af8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003afa:	68bb      	ldr	r3, [r7, #8]
 8003afc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b00:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	691b      	ldr	r3, [r3, #16]
 8003b06:	011b      	lsls	r3, r3, #4
 8003b08:	68ba      	ldr	r2, [r7, #8]
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	68ba      	ldr	r2, [r7, #8]
 8003b14:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	621a      	str	r2, [r3, #32]
      break;
 8003b1e:	e017      	b.n	8003b50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003b2c:	461a      	mov	r2, r3
 8003b2e:	f000 f814 	bl	8003b5a <TIM_TI1_ConfigInputStage>
      break;
 8003b32:	e00d      	b.n	8003b50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003b40:	461a      	mov	r2, r3
 8003b42:	f000 f839 	bl	8003bb8 <TIM_TI2_ConfigInputStage>
      break;
 8003b46:	e003      	b.n	8003b50 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003b48:	2301      	movs	r3, #1
 8003b4a:	75fb      	strb	r3, [r7, #23]
      break;
 8003b4c:	e000      	b.n	8003b50 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003b4e:	bf00      	nop
  }

  return status;
 8003b50:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b52:	4618      	mov	r0, r3
 8003b54:	3718      	adds	r7, #24
 8003b56:	46bd      	mov	sp, r7
 8003b58:	bd80      	pop	{r7, pc}

08003b5a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b5a:	b480      	push	{r7}
 8003b5c:	b087      	sub	sp, #28
 8003b5e:	af00      	add	r7, sp, #0
 8003b60:	60f8      	str	r0, [r7, #12]
 8003b62:	60b9      	str	r1, [r7, #8]
 8003b64:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	6a1b      	ldr	r3, [r3, #32]
 8003b6a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a1b      	ldr	r3, [r3, #32]
 8003b70:	f023 0201 	bic.w	r2, r3, #1
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003b84:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	011b      	lsls	r3, r3, #4
 8003b8a:	693a      	ldr	r2, [r7, #16]
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	f023 030a 	bic.w	r3, r3, #10
 8003b96:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4313      	orrs	r3, r2
 8003b9e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	697a      	ldr	r2, [r7, #20]
 8003baa:	621a      	str	r2, [r3, #32]
}
 8003bac:	bf00      	nop
 8003bae:	371c      	adds	r7, #28
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b087      	sub	sp, #28
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	60f8      	str	r0, [r7, #12]
 8003bc0:	60b9      	str	r1, [r7, #8]
 8003bc2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	6a1b      	ldr	r3, [r3, #32]
 8003bc8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a1b      	ldr	r3, [r3, #32]
 8003bce:	f023 0210 	bic.w	r2, r3, #16
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	699b      	ldr	r3, [r3, #24]
 8003bda:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003be2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	031b      	lsls	r3, r3, #12
 8003be8:	693a      	ldr	r2, [r7, #16]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003bf4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	011b      	lsls	r3, r3, #4
 8003bfa:	697a      	ldr	r2, [r7, #20]
 8003bfc:	4313      	orrs	r3, r2
 8003bfe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	693a      	ldr	r2, [r7, #16]
 8003c04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	697a      	ldr	r2, [r7, #20]
 8003c0a:	621a      	str	r2, [r3, #32]
}
 8003c0c:	bf00      	nop
 8003c0e:	371c      	adds	r7, #28
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr

08003c18 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	689b      	ldr	r3, [r3, #8]
 8003c26:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c2e:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c30:	683a      	ldr	r2, [r7, #0]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	f043 0307 	orr.w	r3, r3, #7
 8003c3a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	68fa      	ldr	r2, [r7, #12]
 8003c40:	609a      	str	r2, [r3, #8]
}
 8003c42:	bf00      	nop
 8003c44:	3714      	adds	r7, #20
 8003c46:	46bd      	mov	sp, r7
 8003c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c4c:	4770      	bx	lr

08003c4e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c4e:	b480      	push	{r7}
 8003c50:	b087      	sub	sp, #28
 8003c52:	af00      	add	r7, sp, #0
 8003c54:	60f8      	str	r0, [r7, #12]
 8003c56:	60b9      	str	r1, [r7, #8]
 8003c58:	607a      	str	r2, [r7, #4]
 8003c5a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	689b      	ldr	r3, [r3, #8]
 8003c60:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c62:	697b      	ldr	r3, [r7, #20]
 8003c64:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c68:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c6a:	683b      	ldr	r3, [r7, #0]
 8003c6c:	021a      	lsls	r2, r3, #8
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	431a      	orrs	r2, r3
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	4313      	orrs	r3, r2
 8003c76:	697a      	ldr	r2, [r7, #20]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	697a      	ldr	r2, [r7, #20]
 8003c80:	609a      	str	r2, [r3, #8]
}
 8003c82:	bf00      	nop
 8003c84:	371c      	adds	r7, #28
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr

08003c8e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003c8e:	b480      	push	{r7}
 8003c90:	b087      	sub	sp, #28
 8003c92:	af00      	add	r7, sp, #0
 8003c94:	60f8      	str	r0, [r7, #12]
 8003c96:	60b9      	str	r1, [r7, #8]
 8003c98:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	f003 031f 	and.w	r3, r3, #31
 8003ca0:	2201      	movs	r2, #1
 8003ca2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	6a1a      	ldr	r2, [r3, #32]
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	43db      	mvns	r3, r3
 8003cb0:	401a      	ands	r2, r3
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6a1a      	ldr	r2, [r3, #32]
 8003cba:	68bb      	ldr	r3, [r7, #8]
 8003cbc:	f003 031f 	and.w	r3, r3, #31
 8003cc0:	6879      	ldr	r1, [r7, #4]
 8003cc2:	fa01 f303 	lsl.w	r3, r1, r3
 8003cc6:	431a      	orrs	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	621a      	str	r2, [r3, #32]
}
 8003ccc:	bf00      	nop
 8003cce:	371c      	adds	r7, #28
 8003cd0:	46bd      	mov	sp, r7
 8003cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd6:	4770      	bx	lr

08003cd8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cd8:	b480      	push	{r7}
 8003cda:	b085      	sub	sp, #20
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
 8003ce0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003ce8:	2b01      	cmp	r3, #1
 8003cea:	d101      	bne.n	8003cf0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003cec:	2302      	movs	r3, #2
 8003cee:	e05a      	b.n	8003da6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	689b      	ldr	r3, [r3, #8]
 8003d0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003d18:	683b      	ldr	r3, [r7, #0]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68fa      	ldr	r2, [r7, #12]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	68fa      	ldr	r2, [r7, #12]
 8003d28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a21      	ldr	r2, [pc, #132]	@ (8003db4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d30:	4293      	cmp	r3, r2
 8003d32:	d022      	beq.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d3c:	d01d      	beq.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	4a1d      	ldr	r2, [pc, #116]	@ (8003db8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d44:	4293      	cmp	r3, r2
 8003d46:	d018      	beq.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	4a1b      	ldr	r2, [pc, #108]	@ (8003dbc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d013      	beq.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	4a1a      	ldr	r2, [pc, #104]	@ (8003dc0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d58:	4293      	cmp	r3, r2
 8003d5a:	d00e      	beq.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a18      	ldr	r2, [pc, #96]	@ (8003dc4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d62:	4293      	cmp	r3, r2
 8003d64:	d009      	beq.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	4a17      	ldr	r2, [pc, #92]	@ (8003dc8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d6c:	4293      	cmp	r3, r2
 8003d6e:	d004      	beq.n	8003d7a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a15      	ldr	r2, [pc, #84]	@ (8003dcc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d10c      	bne.n	8003d94 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d7a:	68bb      	ldr	r3, [r7, #8]
 8003d7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	68ba      	ldr	r2, [r7, #8]
 8003d88:	4313      	orrs	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	68ba      	ldr	r2, [r7, #8]
 8003d92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2200      	movs	r2, #0
 8003da0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003da4:	2300      	movs	r3, #0
}
 8003da6:	4618      	mov	r0, r3
 8003da8:	3714      	adds	r7, #20
 8003daa:	46bd      	mov	sp, r7
 8003dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40010000 	.word	0x40010000
 8003db8:	40000400 	.word	0x40000400
 8003dbc:	40000800 	.word	0x40000800
 8003dc0:	40000c00 	.word	0x40000c00
 8003dc4:	40010400 	.word	0x40010400
 8003dc8:	40014000 	.word	0x40014000
 8003dcc:	40001800 	.word	0x40001800

08003dd0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003dd8:	bf00      	nop
 8003dda:	370c      	adds	r7, #12
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr

08003de4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003de4:	b480      	push	{r7}
 8003de6:	b083      	sub	sp, #12
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dec:	bf00      	nop
 8003dee:	370c      	adds	r7, #12
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr

08003df8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003df8:	b580      	push	{r7, lr}
 8003dfa:	b082      	sub	sp, #8
 8003dfc:	af00      	add	r7, sp, #0
 8003dfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d101      	bne.n	8003e0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003e06:	2301      	movs	r3, #1
 8003e08:	e042      	b.n	8003e90 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e10:	b2db      	uxtb	r3, r3
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d106      	bne.n	8003e24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7fd fc00 	bl	8001624 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2224      	movs	r2, #36	@ 0x24
 8003e28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	68da      	ldr	r2, [r3, #12]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003e3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e3c:	6878      	ldr	r0, [r7, #4]
 8003e3e:	f000 fd11 	bl	8004864 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	691a      	ldr	r2, [r3, #16]
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	695a      	ldr	r2, [r3, #20]
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68da      	ldr	r2, [r3, #12]
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2200      	movs	r2, #0
 8003e76:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	2220      	movs	r2, #32
 8003e7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003e98:	b480      	push	{r7}
 8003e9a:	b085      	sub	sp, #20
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	60f8      	str	r0, [r7, #12]
 8003ea0:	60b9      	str	r1, [r7, #8]
 8003ea2:	4613      	mov	r3, r2
 8003ea4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003eac:	b2db      	uxtb	r3, r3
 8003eae:	2b20      	cmp	r3, #32
 8003eb0:	d121      	bne.n	8003ef6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d002      	beq.n	8003ebe <HAL_UART_Transmit_IT+0x26>
 8003eb8:	88fb      	ldrh	r3, [r7, #6]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d101      	bne.n	8003ec2 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e01a      	b.n	8003ef8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	68ba      	ldr	r2, [r7, #8]
 8003ec6:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	88fa      	ldrh	r2, [r7, #6]
 8003ed2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2221      	movs	r2, #33	@ 0x21
 8003ede:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68da      	ldr	r2, [r3, #12]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003ef0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003ef2:	2300      	movs	r3, #0
 8003ef4:	e000      	b.n	8003ef8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003ef6:	2302      	movs	r3, #2
  }
}
 8003ef8:	4618      	mov	r0, r3
 8003efa:	3714      	adds	r7, #20
 8003efc:	46bd      	mov	sp, r7
 8003efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f02:	4770      	bx	lr

08003f04 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003f04:	b580      	push	{r7, lr}
 8003f06:	b084      	sub	sp, #16
 8003f08:	af00      	add	r7, sp, #0
 8003f0a:	60f8      	str	r0, [r7, #12]
 8003f0c:	60b9      	str	r1, [r7, #8]
 8003f0e:	4613      	mov	r3, r2
 8003f10:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b20      	cmp	r3, #32
 8003f1c:	d112      	bne.n	8003f44 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d002      	beq.n	8003f2a <HAL_UART_Receive_IT+0x26>
 8003f24:	88fb      	ldrh	r3, [r7, #6]
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d101      	bne.n	8003f2e <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003f2a:	2301      	movs	r3, #1
 8003f2c:	e00b      	b.n	8003f46 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2200      	movs	r2, #0
 8003f32:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003f34:	88fb      	ldrh	r3, [r7, #6]
 8003f36:	461a      	mov	r2, r3
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	68f8      	ldr	r0, [r7, #12]
 8003f3c:	f000 faba 	bl	80044b4 <UART_Start_Receive_IT>
 8003f40:	4603      	mov	r3, r0
 8003f42:	e000      	b.n	8003f46 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003f44:	2302      	movs	r3, #2
  }
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3710      	adds	r7, #16
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
	...

08003f50 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003f50:	b580      	push	{r7, lr}
 8003f52:	b0ba      	sub	sp, #232	@ 0xe8
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	695b      	ldr	r3, [r3, #20]
 8003f72:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003f76:	2300      	movs	r3, #0
 8003f78:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f86:	f003 030f 	and.w	r3, r3, #15
 8003f8a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003f8e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d10f      	bne.n	8003fb6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f9a:	f003 0320 	and.w	r3, r3, #32
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d009      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x66>
 8003fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fa6:	f003 0320 	and.w	r3, r3, #32
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003fae:	6878      	ldr	r0, [r7, #4]
 8003fb0:	f000 fb99 	bl	80046e6 <UART_Receive_IT>
      return;
 8003fb4:	e25b      	b.n	800446e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003fb6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	f000 80de 	beq.w	800417c <HAL_UART_IRQHandler+0x22c>
 8003fc0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d106      	bne.n	8003fda <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fd0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	f000 80d1 	beq.w	800417c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003fda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003fde:	f003 0301 	and.w	r3, r3, #1
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <HAL_UART_IRQHandler+0xae>
 8003fe6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003fea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	d005      	beq.n	8003ffe <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ff6:	f043 0201 	orr.w	r2, r3, #1
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004002:	f003 0304 	and.w	r3, r3, #4
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00b      	beq.n	8004022 <HAL_UART_IRQHandler+0xd2>
 800400a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b00      	cmp	r3, #0
 8004014:	d005      	beq.n	8004022 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401a:	f043 0202 	orr.w	r2, r3, #2
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004026:	f003 0302 	and.w	r3, r3, #2
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00b      	beq.n	8004046 <HAL_UART_IRQHandler+0xf6>
 800402e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004032:	f003 0301 	and.w	r3, r3, #1
 8004036:	2b00      	cmp	r3, #0
 8004038:	d005      	beq.n	8004046 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800403e:	f043 0204 	orr.w	r2, r3, #4
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004046:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d011      	beq.n	8004076 <HAL_UART_IRQHandler+0x126>
 8004052:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004056:	f003 0320 	and.w	r3, r3, #32
 800405a:	2b00      	cmp	r3, #0
 800405c:	d105      	bne.n	800406a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800405e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004062:	f003 0301 	and.w	r3, r3, #1
 8004066:	2b00      	cmp	r3, #0
 8004068:	d005      	beq.n	8004076 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800406e:	f043 0208 	orr.w	r2, r3, #8
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800407a:	2b00      	cmp	r3, #0
 800407c:	f000 81f2 	beq.w	8004464 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004080:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004084:	f003 0320 	and.w	r3, r3, #32
 8004088:	2b00      	cmp	r3, #0
 800408a:	d008      	beq.n	800409e <HAL_UART_IRQHandler+0x14e>
 800408c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004090:	f003 0320 	and.w	r3, r3, #32
 8004094:	2b00      	cmp	r3, #0
 8004096:	d002      	beq.n	800409e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	f000 fb24 	bl	80046e6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	695b      	ldr	r3, [r3, #20]
 80040a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040a8:	2b40      	cmp	r3, #64	@ 0x40
 80040aa:	bf0c      	ite	eq
 80040ac:	2301      	moveq	r3, #1
 80040ae:	2300      	movne	r3, #0
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80040ba:	f003 0308 	and.w	r3, r3, #8
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d103      	bne.n	80040ca <HAL_UART_IRQHandler+0x17a>
 80040c2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d04f      	beq.n	800416a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80040ca:	6878      	ldr	r0, [r7, #4]
 80040cc:	f000 fa2c 	bl	8004528 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040da:	2b40      	cmp	r3, #64	@ 0x40
 80040dc:	d141      	bne.n	8004162 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	3314      	adds	r3, #20
 80040e4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80040ec:	e853 3f00 	ldrex	r3, [r3]
 80040f0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80040f4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80040f8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80040fc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	3314      	adds	r3, #20
 8004106:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800410a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800410e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004112:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004116:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800411a:	e841 2300 	strex	r3, r2, [r1]
 800411e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004122:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004126:	2b00      	cmp	r3, #0
 8004128:	d1d9      	bne.n	80040de <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800412e:	2b00      	cmp	r3, #0
 8004130:	d013      	beq.n	800415a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004136:	4a7e      	ldr	r2, [pc, #504]	@ (8004330 <HAL_UART_IRQHandler+0x3e0>)
 8004138:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800413e:	4618      	mov	r0, r3
 8004140:	f7fd fcdd 	bl	8001afe <HAL_DMA_Abort_IT>
 8004144:	4603      	mov	r3, r0
 8004146:	2b00      	cmp	r3, #0
 8004148:	d016      	beq.n	8004178 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800414e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004150:	687a      	ldr	r2, [r7, #4]
 8004152:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004154:	4610      	mov	r0, r2
 8004156:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004158:	e00e      	b.n	8004178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f000 f994 	bl	8004488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004160:	e00a      	b.n	8004178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	f000 f990 	bl	8004488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004168:	e006      	b.n	8004178 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f000 f98c 	bl	8004488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2200      	movs	r2, #0
 8004174:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004176:	e175      	b.n	8004464 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004178:	bf00      	nop
    return;
 800417a:	e173      	b.n	8004464 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004180:	2b01      	cmp	r3, #1
 8004182:	f040 814f 	bne.w	8004424 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004186:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800418a:	f003 0310 	and.w	r3, r3, #16
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8148 	beq.w	8004424 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004194:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004198:	f003 0310 	and.w	r3, r3, #16
 800419c:	2b00      	cmp	r3, #0
 800419e:	f000 8141 	beq.w	8004424 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80041a2:	2300      	movs	r3, #0
 80041a4:	60bb      	str	r3, [r7, #8]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	60bb      	str	r3, [r7, #8]
 80041b6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	695b      	ldr	r3, [r3, #20]
 80041be:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041c2:	2b40      	cmp	r3, #64	@ 0x40
 80041c4:	f040 80b6 	bne.w	8004334 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80041d4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80041d8:	2b00      	cmp	r3, #0
 80041da:	f000 8145 	beq.w	8004468 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80041e2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041e6:	429a      	cmp	r2, r3
 80041e8:	f080 813e 	bcs.w	8004468 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80041f2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f8:	69db      	ldr	r3, [r3, #28]
 80041fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041fe:	f000 8088 	beq.w	8004312 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	330c      	adds	r3, #12
 8004208:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004218:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800421c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004220:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	330c      	adds	r3, #12
 800422a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800422e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004232:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004236:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800423a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800423e:	e841 2300 	strex	r3, r2, [r1]
 8004242:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004246:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800424a:	2b00      	cmp	r3, #0
 800424c:	d1d9      	bne.n	8004202 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	3314      	adds	r3, #20
 8004254:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004256:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004258:	e853 3f00 	ldrex	r3, [r3]
 800425c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800425e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004260:	f023 0301 	bic.w	r3, r3, #1
 8004264:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	3314      	adds	r3, #20
 800426e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004272:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004276:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004278:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800427a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800427e:	e841 2300 	strex	r3, r2, [r1]
 8004282:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004284:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004286:	2b00      	cmp	r3, #0
 8004288:	d1e1      	bne.n	800424e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	681b      	ldr	r3, [r3, #0]
 800428e:	3314      	adds	r3, #20
 8004290:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004292:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004294:	e853 3f00 	ldrex	r3, [r3]
 8004298:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800429a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800429c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80042a0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3314      	adds	r3, #20
 80042aa:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80042ae:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80042b0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80042b4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80042b6:	e841 2300 	strex	r3, r2, [r1]
 80042ba:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80042bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d1e3      	bne.n	800428a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	2220      	movs	r2, #32
 80042c6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	330c      	adds	r3, #12
 80042d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80042da:	e853 3f00 	ldrex	r3, [r3]
 80042de:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80042e0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80042e2:	f023 0310 	bic.w	r3, r3, #16
 80042e6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	330c      	adds	r3, #12
 80042f0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80042f4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80042f6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042f8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80042fa:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042fc:	e841 2300 	strex	r3, r2, [r1]
 8004300:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004302:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004304:	2b00      	cmp	r3, #0
 8004306:	d1e3      	bne.n	80042d0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800430c:	4618      	mov	r0, r3
 800430e:	f7fd fb86 	bl	8001a1e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2202      	movs	r2, #2
 8004316:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004320:	b29b      	uxth	r3, r3
 8004322:	1ad3      	subs	r3, r2, r3
 8004324:	b29b      	uxth	r3, r3
 8004326:	4619      	mov	r1, r3
 8004328:	6878      	ldr	r0, [r7, #4]
 800432a:	f000 f8b7 	bl	800449c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800432e:	e09b      	b.n	8004468 <HAL_UART_IRQHandler+0x518>
 8004330:	080045ef 	.word	0x080045ef
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800433c:	b29b      	uxth	r3, r3
 800433e:	1ad3      	subs	r3, r2, r3
 8004340:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 808e 	beq.w	800446c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004350:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004354:	2b00      	cmp	r3, #0
 8004356:	f000 8089 	beq.w	800446c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	330c      	adds	r3, #12
 8004360:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004362:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004364:	e853 3f00 	ldrex	r3, [r3]
 8004368:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800436a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800436c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004370:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	330c      	adds	r3, #12
 800437a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800437e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004380:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004384:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800438c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e3      	bne.n	800435a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	3314      	adds	r3, #20
 8004398:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800439c:	e853 3f00 	ldrex	r3, [r3]
 80043a0:	623b      	str	r3, [r7, #32]
   return(result);
 80043a2:	6a3b      	ldr	r3, [r7, #32]
 80043a4:	f023 0301 	bic.w	r3, r3, #1
 80043a8:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	3314      	adds	r3, #20
 80043b2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80043b6:	633a      	str	r2, [r7, #48]	@ 0x30
 80043b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80043bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80043c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e3      	bne.n	8004392 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	2220      	movs	r2, #32
 80043ce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	330c      	adds	r3, #12
 80043de:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	e853 3f00 	ldrex	r3, [r3]
 80043e6:	60fb      	str	r3, [r7, #12]
   return(result);
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f023 0310 	bic.w	r3, r3, #16
 80043ee:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	330c      	adds	r3, #12
 80043f8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80043fc:	61fa      	str	r2, [r7, #28]
 80043fe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	69b9      	ldr	r1, [r7, #24]
 8004402:	69fa      	ldr	r2, [r7, #28]
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	617b      	str	r3, [r7, #20]
   return(result);
 800440a:	697b      	ldr	r3, [r7, #20]
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e3      	bne.n	80043d8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2202      	movs	r2, #2
 8004414:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004416:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800441a:	4619      	mov	r1, r3
 800441c:	6878      	ldr	r0, [r7, #4]
 800441e:	f000 f83d 	bl	800449c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004422:	e023      	b.n	800446c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004424:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004428:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800442c:	2b00      	cmp	r3, #0
 800442e:	d009      	beq.n	8004444 <HAL_UART_IRQHandler+0x4f4>
 8004430:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004434:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004438:	2b00      	cmp	r3, #0
 800443a:	d003      	beq.n	8004444 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800443c:	6878      	ldr	r0, [r7, #4]
 800443e:	f000 f8ea 	bl	8004616 <UART_Transmit_IT>
    return;
 8004442:	e014      	b.n	800446e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004444:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004448:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800444c:	2b00      	cmp	r3, #0
 800444e:	d00e      	beq.n	800446e <HAL_UART_IRQHandler+0x51e>
 8004450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d008      	beq.n	800446e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800445c:	6878      	ldr	r0, [r7, #4]
 800445e:	f000 f92a 	bl	80046b6 <UART_EndTransmit_IT>
    return;
 8004462:	e004      	b.n	800446e <HAL_UART_IRQHandler+0x51e>
    return;
 8004464:	bf00      	nop
 8004466:	e002      	b.n	800446e <HAL_UART_IRQHandler+0x51e>
      return;
 8004468:	bf00      	nop
 800446a:	e000      	b.n	800446e <HAL_UART_IRQHandler+0x51e>
      return;
 800446c:	bf00      	nop
  }
}
 800446e:	37e8      	adds	r7, #232	@ 0xe8
 8004470:	46bd      	mov	sp, r7
 8004472:	bd80      	pop	{r7, pc}

08004474 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004474:	b480      	push	{r7}
 8004476:	b083      	sub	sp, #12
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800447c:	bf00      	nop
 800447e:	370c      	adds	r7, #12
 8004480:	46bd      	mov	sp, r7
 8004482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004486:	4770      	bx	lr

08004488 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
 80044a4:	460b      	mov	r3, r1
 80044a6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80044a8:	bf00      	nop
 80044aa:	370c      	adds	r7, #12
 80044ac:	46bd      	mov	sp, r7
 80044ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b2:	4770      	bx	lr

080044b4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80044b4:	b480      	push	{r7}
 80044b6:	b085      	sub	sp, #20
 80044b8:	af00      	add	r7, sp, #0
 80044ba:	60f8      	str	r0, [r7, #12]
 80044bc:	60b9      	str	r1, [r7, #8]
 80044be:	4613      	mov	r3, r2
 80044c0:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	68ba      	ldr	r2, [r7, #8]
 80044c6:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	88fa      	ldrh	r2, [r7, #6]
 80044cc:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	88fa      	ldrh	r2, [r7, #6]
 80044d2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	2200      	movs	r2, #0
 80044d8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2222      	movs	r2, #34	@ 0x22
 80044de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	691b      	ldr	r3, [r3, #16]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d007      	beq.n	80044fa <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	68da      	ldr	r2, [r3, #12]
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044f8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80044fa:	68fb      	ldr	r3, [r7, #12]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	695a      	ldr	r2, [r3, #20]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	f042 0201 	orr.w	r2, r2, #1
 8004508:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68da      	ldr	r2, [r3, #12]
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	f042 0220 	orr.w	r2, r2, #32
 8004518:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3714      	adds	r7, #20
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004528:	b480      	push	{r7}
 800452a:	b095      	sub	sp, #84	@ 0x54
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	330c      	adds	r3, #12
 8004536:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004538:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800453a:	e853 3f00 	ldrex	r3, [r3]
 800453e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004540:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004542:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004546:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	330c      	adds	r3, #12
 800454e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004550:	643a      	str	r2, [r7, #64]	@ 0x40
 8004552:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004554:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004556:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004558:	e841 2300 	strex	r3, r2, [r1]
 800455c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800455e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004560:	2b00      	cmp	r3, #0
 8004562:	d1e5      	bne.n	8004530 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	3314      	adds	r3, #20
 800456a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800456c:	6a3b      	ldr	r3, [r7, #32]
 800456e:	e853 3f00 	ldrex	r3, [r3]
 8004572:	61fb      	str	r3, [r7, #28]
   return(result);
 8004574:	69fb      	ldr	r3, [r7, #28]
 8004576:	f023 0301 	bic.w	r3, r3, #1
 800457a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	3314      	adds	r3, #20
 8004582:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004584:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004586:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004588:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800458a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800458c:	e841 2300 	strex	r3, r2, [r1]
 8004590:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004592:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004594:	2b00      	cmp	r3, #0
 8004596:	d1e5      	bne.n	8004564 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800459c:	2b01      	cmp	r3, #1
 800459e:	d119      	bne.n	80045d4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	60bb      	str	r3, [r7, #8]
   return(result);
 80045b0:	68bb      	ldr	r3, [r7, #8]
 80045b2:	f023 0310 	bic.w	r3, r3, #16
 80045b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	330c      	adds	r3, #12
 80045be:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80045c0:	61ba      	str	r2, [r7, #24]
 80045c2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c4:	6979      	ldr	r1, [r7, #20]
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	e841 2300 	strex	r3, r2, [r1]
 80045cc:	613b      	str	r3, [r7, #16]
   return(result);
 80045ce:	693b      	ldr	r3, [r7, #16]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d1e5      	bne.n	80045a0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2220      	movs	r2, #32
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2200      	movs	r2, #0
 80045e0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80045e2:	bf00      	nop
 80045e4:	3754      	adds	r7, #84	@ 0x54
 80045e6:	46bd      	mov	sp, r7
 80045e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ec:	4770      	bx	lr

080045ee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80045ee:	b580      	push	{r7, lr}
 80045f0:	b084      	sub	sp, #16
 80045f2:	af00      	add	r7, sp, #0
 80045f4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80045fa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	2200      	movs	r2, #0
 8004600:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	2200      	movs	r2, #0
 8004606:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004608:	68f8      	ldr	r0, [r7, #12]
 800460a:	f7ff ff3d 	bl	8004488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800460e:	bf00      	nop
 8004610:	3710      	adds	r7, #16
 8004612:	46bd      	mov	sp, r7
 8004614:	bd80      	pop	{r7, pc}

08004616 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004616:	b480      	push	{r7}
 8004618:	b085      	sub	sp, #20
 800461a:	af00      	add	r7, sp, #0
 800461c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004624:	b2db      	uxtb	r3, r3
 8004626:	2b21      	cmp	r3, #33	@ 0x21
 8004628:	d13e      	bne.n	80046a8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	689b      	ldr	r3, [r3, #8]
 800462e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004632:	d114      	bne.n	800465e <UART_Transmit_IT+0x48>
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	691b      	ldr	r3, [r3, #16]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d110      	bne.n	800465e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	6a1b      	ldr	r3, [r3, #32]
 8004640:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	881b      	ldrh	r3, [r3, #0]
 8004646:	461a      	mov	r2, r3
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004650:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6a1b      	ldr	r3, [r3, #32]
 8004656:	1c9a      	adds	r2, r3, #2
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	621a      	str	r2, [r3, #32]
 800465c:	e008      	b.n	8004670 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	1c59      	adds	r1, r3, #1
 8004664:	687a      	ldr	r2, [r7, #4]
 8004666:	6211      	str	r1, [r2, #32]
 8004668:	781a      	ldrb	r2, [r3, #0]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004674:	b29b      	uxth	r3, r3
 8004676:	3b01      	subs	r3, #1
 8004678:	b29b      	uxth	r3, r3
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	4619      	mov	r1, r3
 800467e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10f      	bne.n	80046a4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	68da      	ldr	r2, [r3, #12]
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004692:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68da      	ldr	r2, [r3, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80046a2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80046a4:	2300      	movs	r3, #0
 80046a6:	e000      	b.n	80046aa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80046a8:	2302      	movs	r3, #2
  }
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3714      	adds	r7, #20
 80046ae:	46bd      	mov	sp, r7
 80046b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b4:	4770      	bx	lr

080046b6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80046b6:	b580      	push	{r7, lr}
 80046b8:	b082      	sub	sp, #8
 80046ba:	af00      	add	r7, sp, #0
 80046bc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	68da      	ldr	r2, [r3, #12]
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80046cc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80046d6:	6878      	ldr	r0, [r7, #4]
 80046d8:	f7ff fecc 	bl	8004474 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80046dc:	2300      	movs	r3, #0
}
 80046de:	4618      	mov	r0, r3
 80046e0:	3708      	adds	r7, #8
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b08c      	sub	sp, #48	@ 0x30
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b22      	cmp	r3, #34	@ 0x22
 80046f8:	f040 80ae 	bne.w	8004858 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	689b      	ldr	r3, [r3, #8]
 8004700:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004704:	d117      	bne.n	8004736 <UART_Receive_IT+0x50>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	691b      	ldr	r3, [r3, #16]
 800470a:	2b00      	cmp	r3, #0
 800470c:	d113      	bne.n	8004736 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800470e:	2300      	movs	r3, #0
 8004710:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004716:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	b29b      	uxth	r3, r3
 8004720:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004724:	b29a      	uxth	r2, r3
 8004726:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004728:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800472e:	1c9a      	adds	r2, r3, #2
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	629a      	str	r2, [r3, #40]	@ 0x28
 8004734:	e026      	b.n	8004784 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800473a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 800473c:	2300      	movs	r3, #0
 800473e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004748:	d007      	beq.n	800475a <UART_Receive_IT+0x74>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	689b      	ldr	r3, [r3, #8]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <UART_Receive_IT+0x82>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	691b      	ldr	r3, [r3, #16]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d106      	bne.n	8004768 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	685b      	ldr	r3, [r3, #4]
 8004760:	b2da      	uxtb	r2, r3
 8004762:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004764:	701a      	strb	r2, [r3, #0]
 8004766:	e008      	b.n	800477a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	685b      	ldr	r3, [r3, #4]
 800476e:	b2db      	uxtb	r3, r3
 8004770:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004774:	b2da      	uxtb	r2, r3
 8004776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004778:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800477e:	1c5a      	adds	r2, r3, #1
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004788:	b29b      	uxth	r3, r3
 800478a:	3b01      	subs	r3, #1
 800478c:	b29b      	uxth	r3, r3
 800478e:	687a      	ldr	r2, [r7, #4]
 8004790:	4619      	mov	r1, r3
 8004792:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004794:	2b00      	cmp	r3, #0
 8004796:	d15d      	bne.n	8004854 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	68da      	ldr	r2, [r3, #12]
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f022 0220 	bic.w	r2, r2, #32
 80047a6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	68da      	ldr	r2, [r3, #12]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80047b6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	695a      	ldr	r2, [r3, #20]
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	f022 0201 	bic.w	r2, r2, #1
 80047c6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2220      	movs	r2, #32
 80047cc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2200      	movs	r2, #0
 80047d4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047da:	2b01      	cmp	r3, #1
 80047dc:	d135      	bne.n	800484a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	330c      	adds	r3, #12
 80047ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ec:	697b      	ldr	r3, [r7, #20]
 80047ee:	e853 3f00 	ldrex	r3, [r3]
 80047f2:	613b      	str	r3, [r7, #16]
   return(result);
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	f023 0310 	bic.w	r3, r3, #16
 80047fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	330c      	adds	r3, #12
 8004802:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004804:	623a      	str	r2, [r7, #32]
 8004806:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004808:	69f9      	ldr	r1, [r7, #28]
 800480a:	6a3a      	ldr	r2, [r7, #32]
 800480c:	e841 2300 	strex	r3, r2, [r1]
 8004810:	61bb      	str	r3, [r7, #24]
   return(result);
 8004812:	69bb      	ldr	r3, [r7, #24]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d1e5      	bne.n	80047e4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	681b      	ldr	r3, [r3, #0]
 800481e:	f003 0310 	and.w	r3, r3, #16
 8004822:	2b10      	cmp	r3, #16
 8004824:	d10a      	bne.n	800483c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004826:	2300      	movs	r3, #0
 8004828:	60fb      	str	r3, [r7, #12]
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	60fb      	str	r3, [r7, #12]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	60fb      	str	r3, [r7, #12]
 800483a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004840:	4619      	mov	r1, r3
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7ff fe2a 	bl	800449c <HAL_UARTEx_RxEventCallback>
 8004848:	e002      	b.n	8004850 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f7fc f9e6 	bl	8000c1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004850:	2300      	movs	r3, #0
 8004852:	e002      	b.n	800485a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004854:	2300      	movs	r3, #0
 8004856:	e000      	b.n	800485a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004858:	2302      	movs	r3, #2
  }
}
 800485a:	4618      	mov	r0, r3
 800485c:	3730      	adds	r7, #48	@ 0x30
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}
	...

08004864 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004864:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004868:	b0c0      	sub	sp, #256	@ 0x100
 800486a:	af00      	add	r7, sp, #0
 800486c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	691b      	ldr	r3, [r3, #16]
 8004878:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800487c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004880:	68d9      	ldr	r1, [r3, #12]
 8004882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	ea40 0301 	orr.w	r3, r0, r1
 800488c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800488e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004892:	689a      	ldr	r2, [r3, #8]
 8004894:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	431a      	orrs	r2, r3
 800489c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	431a      	orrs	r2, r3
 80048a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048a8:	69db      	ldr	r3, [r3, #28]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80048b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	68db      	ldr	r3, [r3, #12]
 80048b8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80048bc:	f021 010c 	bic.w	r1, r1, #12
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c4:	681a      	ldr	r2, [r3, #0]
 80048c6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80048ca:	430b      	orrs	r3, r1
 80048cc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80048ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	695b      	ldr	r3, [r3, #20]
 80048d6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80048da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048de:	6999      	ldr	r1, [r3, #24]
 80048e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	ea40 0301 	orr.w	r3, r0, r1
 80048ea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80048ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	4b8f      	ldr	r3, [pc, #572]	@ (8004b30 <UART_SetConfig+0x2cc>)
 80048f4:	429a      	cmp	r2, r3
 80048f6:	d005      	beq.n	8004904 <UART_SetConfig+0xa0>
 80048f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048fc:	681a      	ldr	r2, [r3, #0]
 80048fe:	4b8d      	ldr	r3, [pc, #564]	@ (8004b34 <UART_SetConfig+0x2d0>)
 8004900:	429a      	cmp	r2, r3
 8004902:	d104      	bne.n	800490e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004904:	f7fd fbf6 	bl	80020f4 <HAL_RCC_GetPCLK2Freq>
 8004908:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800490c:	e003      	b.n	8004916 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800490e:	f7fd fbdd 	bl	80020cc <HAL_RCC_GetPCLK1Freq>
 8004912:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004916:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004920:	f040 810c 	bne.w	8004b3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004928:	2200      	movs	r2, #0
 800492a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800492e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004932:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004936:	4622      	mov	r2, r4
 8004938:	462b      	mov	r3, r5
 800493a:	1891      	adds	r1, r2, r2
 800493c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800493e:	415b      	adcs	r3, r3
 8004940:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004942:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004946:	4621      	mov	r1, r4
 8004948:	eb12 0801 	adds.w	r8, r2, r1
 800494c:	4629      	mov	r1, r5
 800494e:	eb43 0901 	adc.w	r9, r3, r1
 8004952:	f04f 0200 	mov.w	r2, #0
 8004956:	f04f 0300 	mov.w	r3, #0
 800495a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800495e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004962:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004966:	4690      	mov	r8, r2
 8004968:	4699      	mov	r9, r3
 800496a:	4623      	mov	r3, r4
 800496c:	eb18 0303 	adds.w	r3, r8, r3
 8004970:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004974:	462b      	mov	r3, r5
 8004976:	eb49 0303 	adc.w	r3, r9, r3
 800497a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800497e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	2200      	movs	r2, #0
 8004986:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800498a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800498e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004992:	460b      	mov	r3, r1
 8004994:	18db      	adds	r3, r3, r3
 8004996:	653b      	str	r3, [r7, #80]	@ 0x50
 8004998:	4613      	mov	r3, r2
 800499a:	eb42 0303 	adc.w	r3, r2, r3
 800499e:	657b      	str	r3, [r7, #84]	@ 0x54
 80049a0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80049a4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80049a8:	f7fb fc8a 	bl	80002c0 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4b61      	ldr	r3, [pc, #388]	@ (8004b38 <UART_SetConfig+0x2d4>)
 80049b2:	fba3 2302 	umull	r2, r3, r3, r2
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	011c      	lsls	r4, r3, #4
 80049ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049c4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80049c8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80049cc:	4642      	mov	r2, r8
 80049ce:	464b      	mov	r3, r9
 80049d0:	1891      	adds	r1, r2, r2
 80049d2:	64b9      	str	r1, [r7, #72]	@ 0x48
 80049d4:	415b      	adcs	r3, r3
 80049d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80049d8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80049dc:	4641      	mov	r1, r8
 80049de:	eb12 0a01 	adds.w	sl, r2, r1
 80049e2:	4649      	mov	r1, r9
 80049e4:	eb43 0b01 	adc.w	fp, r3, r1
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80049f4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80049f8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80049fc:	4692      	mov	sl, r2
 80049fe:	469b      	mov	fp, r3
 8004a00:	4643      	mov	r3, r8
 8004a02:	eb1a 0303 	adds.w	r3, sl, r3
 8004a06:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004a0a:	464b      	mov	r3, r9
 8004a0c:	eb4b 0303 	adc.w	r3, fp, r3
 8004a10:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	2200      	movs	r2, #0
 8004a1c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004a20:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004a24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004a28:	460b      	mov	r3, r1
 8004a2a:	18db      	adds	r3, r3, r3
 8004a2c:	643b      	str	r3, [r7, #64]	@ 0x40
 8004a2e:	4613      	mov	r3, r2
 8004a30:	eb42 0303 	adc.w	r3, r2, r3
 8004a34:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004a3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004a3e:	f7fb fc3f 	bl	80002c0 <__aeabi_uldivmod>
 8004a42:	4602      	mov	r2, r0
 8004a44:	460b      	mov	r3, r1
 8004a46:	4611      	mov	r1, r2
 8004a48:	4b3b      	ldr	r3, [pc, #236]	@ (8004b38 <UART_SetConfig+0x2d4>)
 8004a4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	2264      	movs	r2, #100	@ 0x64
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	1acb      	subs	r3, r1, r3
 8004a58:	00db      	lsls	r3, r3, #3
 8004a5a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004a5e:	4b36      	ldr	r3, [pc, #216]	@ (8004b38 <UART_SetConfig+0x2d4>)
 8004a60:	fba3 2302 	umull	r2, r3, r3, r2
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	005b      	lsls	r3, r3, #1
 8004a68:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004a6c:	441c      	add	r4, r3
 8004a6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a72:	2200      	movs	r2, #0
 8004a74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004a78:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004a7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004a80:	4642      	mov	r2, r8
 8004a82:	464b      	mov	r3, r9
 8004a84:	1891      	adds	r1, r2, r2
 8004a86:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004a88:	415b      	adcs	r3, r3
 8004a8a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004a90:	4641      	mov	r1, r8
 8004a92:	1851      	adds	r1, r2, r1
 8004a94:	6339      	str	r1, [r7, #48]	@ 0x30
 8004a96:	4649      	mov	r1, r9
 8004a98:	414b      	adcs	r3, r1
 8004a9a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004aa8:	4659      	mov	r1, fp
 8004aaa:	00cb      	lsls	r3, r1, #3
 8004aac:	4651      	mov	r1, sl
 8004aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ab2:	4651      	mov	r1, sl
 8004ab4:	00ca      	lsls	r2, r1, #3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	4642      	mov	r2, r8
 8004abe:	189b      	adds	r3, r3, r2
 8004ac0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004ac4:	464b      	mov	r3, r9
 8004ac6:	460a      	mov	r2, r1
 8004ac8:	eb42 0303 	adc.w	r3, r2, r3
 8004acc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ad0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad4:	685b      	ldr	r3, [r3, #4]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004adc:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004ae0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004ae4:	460b      	mov	r3, r1
 8004ae6:	18db      	adds	r3, r3, r3
 8004ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004aea:	4613      	mov	r3, r2
 8004aec:	eb42 0303 	adc.w	r3, r2, r3
 8004af0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004af2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004af6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004afa:	f7fb fbe1 	bl	80002c0 <__aeabi_uldivmod>
 8004afe:	4602      	mov	r2, r0
 8004b00:	460b      	mov	r3, r1
 8004b02:	4b0d      	ldr	r3, [pc, #52]	@ (8004b38 <UART_SetConfig+0x2d4>)
 8004b04:	fba3 1302 	umull	r1, r3, r3, r2
 8004b08:	095b      	lsrs	r3, r3, #5
 8004b0a:	2164      	movs	r1, #100	@ 0x64
 8004b0c:	fb01 f303 	mul.w	r3, r1, r3
 8004b10:	1ad3      	subs	r3, r2, r3
 8004b12:	00db      	lsls	r3, r3, #3
 8004b14:	3332      	adds	r3, #50	@ 0x32
 8004b16:	4a08      	ldr	r2, [pc, #32]	@ (8004b38 <UART_SetConfig+0x2d4>)
 8004b18:	fba2 2303 	umull	r2, r3, r2, r3
 8004b1c:	095b      	lsrs	r3, r3, #5
 8004b1e:	f003 0207 	and.w	r2, r3, #7
 8004b22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	4422      	add	r2, r4
 8004b2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004b2c:	e106      	b.n	8004d3c <UART_SetConfig+0x4d8>
 8004b2e:	bf00      	nop
 8004b30:	40011000 	.word	0x40011000
 8004b34:	40011400 	.word	0x40011400
 8004b38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004b3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b40:	2200      	movs	r2, #0
 8004b42:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004b46:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004b4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004b4e:	4642      	mov	r2, r8
 8004b50:	464b      	mov	r3, r9
 8004b52:	1891      	adds	r1, r2, r2
 8004b54:	6239      	str	r1, [r7, #32]
 8004b56:	415b      	adcs	r3, r3
 8004b58:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004b5e:	4641      	mov	r1, r8
 8004b60:	1854      	adds	r4, r2, r1
 8004b62:	4649      	mov	r1, r9
 8004b64:	eb43 0501 	adc.w	r5, r3, r1
 8004b68:	f04f 0200 	mov.w	r2, #0
 8004b6c:	f04f 0300 	mov.w	r3, #0
 8004b70:	00eb      	lsls	r3, r5, #3
 8004b72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004b76:	00e2      	lsls	r2, r4, #3
 8004b78:	4614      	mov	r4, r2
 8004b7a:	461d      	mov	r5, r3
 8004b7c:	4643      	mov	r3, r8
 8004b7e:	18e3      	adds	r3, r4, r3
 8004b80:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004b84:	464b      	mov	r3, r9
 8004b86:	eb45 0303 	adc.w	r3, r5, r3
 8004b8a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b92:	685b      	ldr	r3, [r3, #4]
 8004b94:	2200      	movs	r2, #0
 8004b96:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004b9a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004b9e:	f04f 0200 	mov.w	r2, #0
 8004ba2:	f04f 0300 	mov.w	r3, #0
 8004ba6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004baa:	4629      	mov	r1, r5
 8004bac:	008b      	lsls	r3, r1, #2
 8004bae:	4621      	mov	r1, r4
 8004bb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bb4:	4621      	mov	r1, r4
 8004bb6:	008a      	lsls	r2, r1, #2
 8004bb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004bbc:	f7fb fb80 	bl	80002c0 <__aeabi_uldivmod>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4b60      	ldr	r3, [pc, #384]	@ (8004d48 <UART_SetConfig+0x4e4>)
 8004bc6:	fba3 2302 	umull	r2, r3, r3, r2
 8004bca:	095b      	lsrs	r3, r3, #5
 8004bcc:	011c      	lsls	r4, r3, #4
 8004bce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004bd8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004bdc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004be0:	4642      	mov	r2, r8
 8004be2:	464b      	mov	r3, r9
 8004be4:	1891      	adds	r1, r2, r2
 8004be6:	61b9      	str	r1, [r7, #24]
 8004be8:	415b      	adcs	r3, r3
 8004bea:	61fb      	str	r3, [r7, #28]
 8004bec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004bf0:	4641      	mov	r1, r8
 8004bf2:	1851      	adds	r1, r2, r1
 8004bf4:	6139      	str	r1, [r7, #16]
 8004bf6:	4649      	mov	r1, r9
 8004bf8:	414b      	adcs	r3, r1
 8004bfa:	617b      	str	r3, [r7, #20]
 8004bfc:	f04f 0200 	mov.w	r2, #0
 8004c00:	f04f 0300 	mov.w	r3, #0
 8004c04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004c08:	4659      	mov	r1, fp
 8004c0a:	00cb      	lsls	r3, r1, #3
 8004c0c:	4651      	mov	r1, sl
 8004c0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004c12:	4651      	mov	r1, sl
 8004c14:	00ca      	lsls	r2, r1, #3
 8004c16:	4610      	mov	r0, r2
 8004c18:	4619      	mov	r1, r3
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	4642      	mov	r2, r8
 8004c1e:	189b      	adds	r3, r3, r2
 8004c20:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004c24:	464b      	mov	r3, r9
 8004c26:	460a      	mov	r2, r1
 8004c28:	eb42 0303 	adc.w	r3, r2, r3
 8004c2c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004c30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c34:	685b      	ldr	r3, [r3, #4]
 8004c36:	2200      	movs	r2, #0
 8004c38:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004c3a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004c3c:	f04f 0200 	mov.w	r2, #0
 8004c40:	f04f 0300 	mov.w	r3, #0
 8004c44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004c48:	4649      	mov	r1, r9
 8004c4a:	008b      	lsls	r3, r1, #2
 8004c4c:	4641      	mov	r1, r8
 8004c4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c52:	4641      	mov	r1, r8
 8004c54:	008a      	lsls	r2, r1, #2
 8004c56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004c5a:	f7fb fb31 	bl	80002c0 <__aeabi_uldivmod>
 8004c5e:	4602      	mov	r2, r0
 8004c60:	460b      	mov	r3, r1
 8004c62:	4611      	mov	r1, r2
 8004c64:	4b38      	ldr	r3, [pc, #224]	@ (8004d48 <UART_SetConfig+0x4e4>)
 8004c66:	fba3 2301 	umull	r2, r3, r3, r1
 8004c6a:	095b      	lsrs	r3, r3, #5
 8004c6c:	2264      	movs	r2, #100	@ 0x64
 8004c6e:	fb02 f303 	mul.w	r3, r2, r3
 8004c72:	1acb      	subs	r3, r1, r3
 8004c74:	011b      	lsls	r3, r3, #4
 8004c76:	3332      	adds	r3, #50	@ 0x32
 8004c78:	4a33      	ldr	r2, [pc, #204]	@ (8004d48 <UART_SetConfig+0x4e4>)
 8004c7a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c7e:	095b      	lsrs	r3, r3, #5
 8004c80:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004c84:	441c      	add	r4, r3
 8004c86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004c8e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004c90:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004c94:	4642      	mov	r2, r8
 8004c96:	464b      	mov	r3, r9
 8004c98:	1891      	adds	r1, r2, r2
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	415b      	adcs	r3, r3
 8004c9e:	60fb      	str	r3, [r7, #12]
 8004ca0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004ca4:	4641      	mov	r1, r8
 8004ca6:	1851      	adds	r1, r2, r1
 8004ca8:	6039      	str	r1, [r7, #0]
 8004caa:	4649      	mov	r1, r9
 8004cac:	414b      	adcs	r3, r1
 8004cae:	607b      	str	r3, [r7, #4]
 8004cb0:	f04f 0200 	mov.w	r2, #0
 8004cb4:	f04f 0300 	mov.w	r3, #0
 8004cb8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004cbc:	4659      	mov	r1, fp
 8004cbe:	00cb      	lsls	r3, r1, #3
 8004cc0:	4651      	mov	r1, sl
 8004cc2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cc6:	4651      	mov	r1, sl
 8004cc8:	00ca      	lsls	r2, r1, #3
 8004cca:	4610      	mov	r0, r2
 8004ccc:	4619      	mov	r1, r3
 8004cce:	4603      	mov	r3, r0
 8004cd0:	4642      	mov	r2, r8
 8004cd2:	189b      	adds	r3, r3, r2
 8004cd4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004cd6:	464b      	mov	r3, r9
 8004cd8:	460a      	mov	r2, r1
 8004cda:	eb42 0303 	adc.w	r3, r2, r3
 8004cde:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce4:	685b      	ldr	r3, [r3, #4]
 8004ce6:	2200      	movs	r2, #0
 8004ce8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004cea:	667a      	str	r2, [r7, #100]	@ 0x64
 8004cec:	f04f 0200 	mov.w	r2, #0
 8004cf0:	f04f 0300 	mov.w	r3, #0
 8004cf4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004cf8:	4649      	mov	r1, r9
 8004cfa:	008b      	lsls	r3, r1, #2
 8004cfc:	4641      	mov	r1, r8
 8004cfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d02:	4641      	mov	r1, r8
 8004d04:	008a      	lsls	r2, r1, #2
 8004d06:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004d0a:	f7fb fad9 	bl	80002c0 <__aeabi_uldivmod>
 8004d0e:	4602      	mov	r2, r0
 8004d10:	460b      	mov	r3, r1
 8004d12:	4b0d      	ldr	r3, [pc, #52]	@ (8004d48 <UART_SetConfig+0x4e4>)
 8004d14:	fba3 1302 	umull	r1, r3, r3, r2
 8004d18:	095b      	lsrs	r3, r3, #5
 8004d1a:	2164      	movs	r1, #100	@ 0x64
 8004d1c:	fb01 f303 	mul.w	r3, r1, r3
 8004d20:	1ad3      	subs	r3, r2, r3
 8004d22:	011b      	lsls	r3, r3, #4
 8004d24:	3332      	adds	r3, #50	@ 0x32
 8004d26:	4a08      	ldr	r2, [pc, #32]	@ (8004d48 <UART_SetConfig+0x4e4>)
 8004d28:	fba2 2303 	umull	r2, r3, r2, r3
 8004d2c:	095b      	lsrs	r3, r3, #5
 8004d2e:	f003 020f 	and.w	r2, r3, #15
 8004d32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	4422      	add	r2, r4
 8004d3a:	609a      	str	r2, [r3, #8]
}
 8004d3c:	bf00      	nop
 8004d3e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004d42:	46bd      	mov	sp, r7
 8004d44:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004d48:	51eb851f 	.word	0x51eb851f

08004d4c <siscanf>:
 8004d4c:	b40e      	push	{r1, r2, r3}
 8004d4e:	b530      	push	{r4, r5, lr}
 8004d50:	b09c      	sub	sp, #112	@ 0x70
 8004d52:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004d54:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004d58:	f854 5b04 	ldr.w	r5, [r4], #4
 8004d5c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004d60:	9002      	str	r0, [sp, #8]
 8004d62:	9006      	str	r0, [sp, #24]
 8004d64:	f7fb fa54 	bl	8000210 <strlen>
 8004d68:	4b0b      	ldr	r3, [pc, #44]	@ (8004d98 <siscanf+0x4c>)
 8004d6a:	9003      	str	r0, [sp, #12]
 8004d6c:	9007      	str	r0, [sp, #28]
 8004d6e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004d70:	480a      	ldr	r0, [pc, #40]	@ (8004d9c <siscanf+0x50>)
 8004d72:	9401      	str	r4, [sp, #4]
 8004d74:	2300      	movs	r3, #0
 8004d76:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004d78:	9314      	str	r3, [sp, #80]	@ 0x50
 8004d7a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004d7e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004d82:	462a      	mov	r2, r5
 8004d84:	4623      	mov	r3, r4
 8004d86:	a902      	add	r1, sp, #8
 8004d88:	6800      	ldr	r0, [r0, #0]
 8004d8a:	f000 f997 	bl	80050bc <__ssvfiscanf_r>
 8004d8e:	b01c      	add	sp, #112	@ 0x70
 8004d90:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004d94:	b003      	add	sp, #12
 8004d96:	4770      	bx	lr
 8004d98:	08004da1 	.word	0x08004da1
 8004d9c:	200000e8 	.word	0x200000e8

08004da0 <__seofread>:
 8004da0:	2000      	movs	r0, #0
 8004da2:	4770      	bx	lr

08004da4 <memset>:
 8004da4:	4402      	add	r2, r0
 8004da6:	4603      	mov	r3, r0
 8004da8:	4293      	cmp	r3, r2
 8004daa:	d100      	bne.n	8004dae <memset+0xa>
 8004dac:	4770      	bx	lr
 8004dae:	f803 1b01 	strb.w	r1, [r3], #1
 8004db2:	e7f9      	b.n	8004da8 <memset+0x4>

08004db4 <__errno>:
 8004db4:	4b01      	ldr	r3, [pc, #4]	@ (8004dbc <__errno+0x8>)
 8004db6:	6818      	ldr	r0, [r3, #0]
 8004db8:	4770      	bx	lr
 8004dba:	bf00      	nop
 8004dbc:	200000e8 	.word	0x200000e8

08004dc0 <__libc_init_array>:
 8004dc0:	b570      	push	{r4, r5, r6, lr}
 8004dc2:	4d0d      	ldr	r5, [pc, #52]	@ (8004df8 <__libc_init_array+0x38>)
 8004dc4:	4c0d      	ldr	r4, [pc, #52]	@ (8004dfc <__libc_init_array+0x3c>)
 8004dc6:	1b64      	subs	r4, r4, r5
 8004dc8:	10a4      	asrs	r4, r4, #2
 8004dca:	2600      	movs	r6, #0
 8004dcc:	42a6      	cmp	r6, r4
 8004dce:	d109      	bne.n	8004de4 <__libc_init_array+0x24>
 8004dd0:	4d0b      	ldr	r5, [pc, #44]	@ (8004e00 <__libc_init_array+0x40>)
 8004dd2:	4c0c      	ldr	r4, [pc, #48]	@ (8004e04 <__libc_init_array+0x44>)
 8004dd4:	f000 fde8 	bl	80059a8 <_init>
 8004dd8:	1b64      	subs	r4, r4, r5
 8004dda:	10a4      	asrs	r4, r4, #2
 8004ddc:	2600      	movs	r6, #0
 8004dde:	42a6      	cmp	r6, r4
 8004de0:	d105      	bne.n	8004dee <__libc_init_array+0x2e>
 8004de2:	bd70      	pop	{r4, r5, r6, pc}
 8004de4:	f855 3b04 	ldr.w	r3, [r5], #4
 8004de8:	4798      	blx	r3
 8004dea:	3601      	adds	r6, #1
 8004dec:	e7ee      	b.n	8004dcc <__libc_init_array+0xc>
 8004dee:	f855 3b04 	ldr.w	r3, [r5], #4
 8004df2:	4798      	blx	r3
 8004df4:	3601      	adds	r6, #1
 8004df6:	e7f2      	b.n	8004dde <__libc_init_array+0x1e>
 8004df8:	08005b18 	.word	0x08005b18
 8004dfc:	08005b18 	.word	0x08005b18
 8004e00:	08005b18 	.word	0x08005b18
 8004e04:	08005b1c 	.word	0x08005b1c

08004e08 <__retarget_lock_acquire_recursive>:
 8004e08:	4770      	bx	lr

08004e0a <__retarget_lock_release_recursive>:
 8004e0a:	4770      	bx	lr

08004e0c <strcpy>:
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e12:	f803 2b01 	strb.w	r2, [r3], #1
 8004e16:	2a00      	cmp	r2, #0
 8004e18:	d1f9      	bne.n	8004e0e <strcpy+0x2>
 8004e1a:	4770      	bx	lr

08004e1c <_free_r>:
 8004e1c:	b538      	push	{r3, r4, r5, lr}
 8004e1e:	4605      	mov	r5, r0
 8004e20:	2900      	cmp	r1, #0
 8004e22:	d041      	beq.n	8004ea8 <_free_r+0x8c>
 8004e24:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004e28:	1f0c      	subs	r4, r1, #4
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	bfb8      	it	lt
 8004e2e:	18e4      	addlt	r4, r4, r3
 8004e30:	f000 f8e0 	bl	8004ff4 <__malloc_lock>
 8004e34:	4a1d      	ldr	r2, [pc, #116]	@ (8004eac <_free_r+0x90>)
 8004e36:	6813      	ldr	r3, [r2, #0]
 8004e38:	b933      	cbnz	r3, 8004e48 <_free_r+0x2c>
 8004e3a:	6063      	str	r3, [r4, #4]
 8004e3c:	6014      	str	r4, [r2, #0]
 8004e3e:	4628      	mov	r0, r5
 8004e40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004e44:	f000 b8dc 	b.w	8005000 <__malloc_unlock>
 8004e48:	42a3      	cmp	r3, r4
 8004e4a:	d908      	bls.n	8004e5e <_free_r+0x42>
 8004e4c:	6820      	ldr	r0, [r4, #0]
 8004e4e:	1821      	adds	r1, r4, r0
 8004e50:	428b      	cmp	r3, r1
 8004e52:	bf01      	itttt	eq
 8004e54:	6819      	ldreq	r1, [r3, #0]
 8004e56:	685b      	ldreq	r3, [r3, #4]
 8004e58:	1809      	addeq	r1, r1, r0
 8004e5a:	6021      	streq	r1, [r4, #0]
 8004e5c:	e7ed      	b.n	8004e3a <_free_r+0x1e>
 8004e5e:	461a      	mov	r2, r3
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	b10b      	cbz	r3, 8004e68 <_free_r+0x4c>
 8004e64:	42a3      	cmp	r3, r4
 8004e66:	d9fa      	bls.n	8004e5e <_free_r+0x42>
 8004e68:	6811      	ldr	r1, [r2, #0]
 8004e6a:	1850      	adds	r0, r2, r1
 8004e6c:	42a0      	cmp	r0, r4
 8004e6e:	d10b      	bne.n	8004e88 <_free_r+0x6c>
 8004e70:	6820      	ldr	r0, [r4, #0]
 8004e72:	4401      	add	r1, r0
 8004e74:	1850      	adds	r0, r2, r1
 8004e76:	4283      	cmp	r3, r0
 8004e78:	6011      	str	r1, [r2, #0]
 8004e7a:	d1e0      	bne.n	8004e3e <_free_r+0x22>
 8004e7c:	6818      	ldr	r0, [r3, #0]
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	6053      	str	r3, [r2, #4]
 8004e82:	4408      	add	r0, r1
 8004e84:	6010      	str	r0, [r2, #0]
 8004e86:	e7da      	b.n	8004e3e <_free_r+0x22>
 8004e88:	d902      	bls.n	8004e90 <_free_r+0x74>
 8004e8a:	230c      	movs	r3, #12
 8004e8c:	602b      	str	r3, [r5, #0]
 8004e8e:	e7d6      	b.n	8004e3e <_free_r+0x22>
 8004e90:	6820      	ldr	r0, [r4, #0]
 8004e92:	1821      	adds	r1, r4, r0
 8004e94:	428b      	cmp	r3, r1
 8004e96:	bf04      	itt	eq
 8004e98:	6819      	ldreq	r1, [r3, #0]
 8004e9a:	685b      	ldreq	r3, [r3, #4]
 8004e9c:	6063      	str	r3, [r4, #4]
 8004e9e:	bf04      	itt	eq
 8004ea0:	1809      	addeq	r1, r1, r0
 8004ea2:	6021      	streq	r1, [r4, #0]
 8004ea4:	6054      	str	r4, [r2, #4]
 8004ea6:	e7ca      	b.n	8004e3e <_free_r+0x22>
 8004ea8:	bd38      	pop	{r3, r4, r5, pc}
 8004eaa:	bf00      	nop
 8004eac:	20000458 	.word	0x20000458

08004eb0 <sbrk_aligned>:
 8004eb0:	b570      	push	{r4, r5, r6, lr}
 8004eb2:	4e0f      	ldr	r6, [pc, #60]	@ (8004ef0 <sbrk_aligned+0x40>)
 8004eb4:	460c      	mov	r4, r1
 8004eb6:	6831      	ldr	r1, [r6, #0]
 8004eb8:	4605      	mov	r5, r0
 8004eba:	b911      	cbnz	r1, 8004ec2 <sbrk_aligned+0x12>
 8004ebc:	f000 fc34 	bl	8005728 <_sbrk_r>
 8004ec0:	6030      	str	r0, [r6, #0]
 8004ec2:	4621      	mov	r1, r4
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	f000 fc2f 	bl	8005728 <_sbrk_r>
 8004eca:	1c43      	adds	r3, r0, #1
 8004ecc:	d103      	bne.n	8004ed6 <sbrk_aligned+0x26>
 8004ece:	f04f 34ff 	mov.w	r4, #4294967295
 8004ed2:	4620      	mov	r0, r4
 8004ed4:	bd70      	pop	{r4, r5, r6, pc}
 8004ed6:	1cc4      	adds	r4, r0, #3
 8004ed8:	f024 0403 	bic.w	r4, r4, #3
 8004edc:	42a0      	cmp	r0, r4
 8004ede:	d0f8      	beq.n	8004ed2 <sbrk_aligned+0x22>
 8004ee0:	1a21      	subs	r1, r4, r0
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f000 fc20 	bl	8005728 <_sbrk_r>
 8004ee8:	3001      	adds	r0, #1
 8004eea:	d1f2      	bne.n	8004ed2 <sbrk_aligned+0x22>
 8004eec:	e7ef      	b.n	8004ece <sbrk_aligned+0x1e>
 8004eee:	bf00      	nop
 8004ef0:	20000454 	.word	0x20000454

08004ef4 <_malloc_r>:
 8004ef4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ef8:	1ccd      	adds	r5, r1, #3
 8004efa:	f025 0503 	bic.w	r5, r5, #3
 8004efe:	3508      	adds	r5, #8
 8004f00:	2d0c      	cmp	r5, #12
 8004f02:	bf38      	it	cc
 8004f04:	250c      	movcc	r5, #12
 8004f06:	2d00      	cmp	r5, #0
 8004f08:	4606      	mov	r6, r0
 8004f0a:	db01      	blt.n	8004f10 <_malloc_r+0x1c>
 8004f0c:	42a9      	cmp	r1, r5
 8004f0e:	d904      	bls.n	8004f1a <_malloc_r+0x26>
 8004f10:	230c      	movs	r3, #12
 8004f12:	6033      	str	r3, [r6, #0]
 8004f14:	2000      	movs	r0, #0
 8004f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f1a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004ff0 <_malloc_r+0xfc>
 8004f1e:	f000 f869 	bl	8004ff4 <__malloc_lock>
 8004f22:	f8d8 3000 	ldr.w	r3, [r8]
 8004f26:	461c      	mov	r4, r3
 8004f28:	bb44      	cbnz	r4, 8004f7c <_malloc_r+0x88>
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	f7ff ffbf 	bl	8004eb0 <sbrk_aligned>
 8004f32:	1c43      	adds	r3, r0, #1
 8004f34:	4604      	mov	r4, r0
 8004f36:	d158      	bne.n	8004fea <_malloc_r+0xf6>
 8004f38:	f8d8 4000 	ldr.w	r4, [r8]
 8004f3c:	4627      	mov	r7, r4
 8004f3e:	2f00      	cmp	r7, #0
 8004f40:	d143      	bne.n	8004fca <_malloc_r+0xd6>
 8004f42:	2c00      	cmp	r4, #0
 8004f44:	d04b      	beq.n	8004fde <_malloc_r+0xea>
 8004f46:	6823      	ldr	r3, [r4, #0]
 8004f48:	4639      	mov	r1, r7
 8004f4a:	4630      	mov	r0, r6
 8004f4c:	eb04 0903 	add.w	r9, r4, r3
 8004f50:	f000 fbea 	bl	8005728 <_sbrk_r>
 8004f54:	4581      	cmp	r9, r0
 8004f56:	d142      	bne.n	8004fde <_malloc_r+0xea>
 8004f58:	6821      	ldr	r1, [r4, #0]
 8004f5a:	1a6d      	subs	r5, r5, r1
 8004f5c:	4629      	mov	r1, r5
 8004f5e:	4630      	mov	r0, r6
 8004f60:	f7ff ffa6 	bl	8004eb0 <sbrk_aligned>
 8004f64:	3001      	adds	r0, #1
 8004f66:	d03a      	beq.n	8004fde <_malloc_r+0xea>
 8004f68:	6823      	ldr	r3, [r4, #0]
 8004f6a:	442b      	add	r3, r5
 8004f6c:	6023      	str	r3, [r4, #0]
 8004f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8004f72:	685a      	ldr	r2, [r3, #4]
 8004f74:	bb62      	cbnz	r2, 8004fd0 <_malloc_r+0xdc>
 8004f76:	f8c8 7000 	str.w	r7, [r8]
 8004f7a:	e00f      	b.n	8004f9c <_malloc_r+0xa8>
 8004f7c:	6822      	ldr	r2, [r4, #0]
 8004f7e:	1b52      	subs	r2, r2, r5
 8004f80:	d420      	bmi.n	8004fc4 <_malloc_r+0xd0>
 8004f82:	2a0b      	cmp	r2, #11
 8004f84:	d917      	bls.n	8004fb6 <_malloc_r+0xc2>
 8004f86:	1961      	adds	r1, r4, r5
 8004f88:	42a3      	cmp	r3, r4
 8004f8a:	6025      	str	r5, [r4, #0]
 8004f8c:	bf18      	it	ne
 8004f8e:	6059      	strne	r1, [r3, #4]
 8004f90:	6863      	ldr	r3, [r4, #4]
 8004f92:	bf08      	it	eq
 8004f94:	f8c8 1000 	streq.w	r1, [r8]
 8004f98:	5162      	str	r2, [r4, r5]
 8004f9a:	604b      	str	r3, [r1, #4]
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	f000 f82f 	bl	8005000 <__malloc_unlock>
 8004fa2:	f104 000b 	add.w	r0, r4, #11
 8004fa6:	1d23      	adds	r3, r4, #4
 8004fa8:	f020 0007 	bic.w	r0, r0, #7
 8004fac:	1ac2      	subs	r2, r0, r3
 8004fae:	bf1c      	itt	ne
 8004fb0:	1a1b      	subne	r3, r3, r0
 8004fb2:	50a3      	strne	r3, [r4, r2]
 8004fb4:	e7af      	b.n	8004f16 <_malloc_r+0x22>
 8004fb6:	6862      	ldr	r2, [r4, #4]
 8004fb8:	42a3      	cmp	r3, r4
 8004fba:	bf0c      	ite	eq
 8004fbc:	f8c8 2000 	streq.w	r2, [r8]
 8004fc0:	605a      	strne	r2, [r3, #4]
 8004fc2:	e7eb      	b.n	8004f9c <_malloc_r+0xa8>
 8004fc4:	4623      	mov	r3, r4
 8004fc6:	6864      	ldr	r4, [r4, #4]
 8004fc8:	e7ae      	b.n	8004f28 <_malloc_r+0x34>
 8004fca:	463c      	mov	r4, r7
 8004fcc:	687f      	ldr	r7, [r7, #4]
 8004fce:	e7b6      	b.n	8004f3e <_malloc_r+0x4a>
 8004fd0:	461a      	mov	r2, r3
 8004fd2:	685b      	ldr	r3, [r3, #4]
 8004fd4:	42a3      	cmp	r3, r4
 8004fd6:	d1fb      	bne.n	8004fd0 <_malloc_r+0xdc>
 8004fd8:	2300      	movs	r3, #0
 8004fda:	6053      	str	r3, [r2, #4]
 8004fdc:	e7de      	b.n	8004f9c <_malloc_r+0xa8>
 8004fde:	230c      	movs	r3, #12
 8004fe0:	6033      	str	r3, [r6, #0]
 8004fe2:	4630      	mov	r0, r6
 8004fe4:	f000 f80c 	bl	8005000 <__malloc_unlock>
 8004fe8:	e794      	b.n	8004f14 <_malloc_r+0x20>
 8004fea:	6005      	str	r5, [r0, #0]
 8004fec:	e7d6      	b.n	8004f9c <_malloc_r+0xa8>
 8004fee:	bf00      	nop
 8004ff0:	20000458 	.word	0x20000458

08004ff4 <__malloc_lock>:
 8004ff4:	4801      	ldr	r0, [pc, #4]	@ (8004ffc <__malloc_lock+0x8>)
 8004ff6:	f7ff bf07 	b.w	8004e08 <__retarget_lock_acquire_recursive>
 8004ffa:	bf00      	nop
 8004ffc:	20000450 	.word	0x20000450

08005000 <__malloc_unlock>:
 8005000:	4801      	ldr	r0, [pc, #4]	@ (8005008 <__malloc_unlock+0x8>)
 8005002:	f7ff bf02 	b.w	8004e0a <__retarget_lock_release_recursive>
 8005006:	bf00      	nop
 8005008:	20000450 	.word	0x20000450

0800500c <_sungetc_r>:
 800500c:	b538      	push	{r3, r4, r5, lr}
 800500e:	1c4b      	adds	r3, r1, #1
 8005010:	4614      	mov	r4, r2
 8005012:	d103      	bne.n	800501c <_sungetc_r+0x10>
 8005014:	f04f 35ff 	mov.w	r5, #4294967295
 8005018:	4628      	mov	r0, r5
 800501a:	bd38      	pop	{r3, r4, r5, pc}
 800501c:	8993      	ldrh	r3, [r2, #12]
 800501e:	f023 0320 	bic.w	r3, r3, #32
 8005022:	8193      	strh	r3, [r2, #12]
 8005024:	6853      	ldr	r3, [r2, #4]
 8005026:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8005028:	b2cd      	uxtb	r5, r1
 800502a:	b18a      	cbz	r2, 8005050 <_sungetc_r+0x44>
 800502c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800502e:	429a      	cmp	r2, r3
 8005030:	dd08      	ble.n	8005044 <_sungetc_r+0x38>
 8005032:	6823      	ldr	r3, [r4, #0]
 8005034:	1e5a      	subs	r2, r3, #1
 8005036:	6022      	str	r2, [r4, #0]
 8005038:	f803 5c01 	strb.w	r5, [r3, #-1]
 800503c:	6863      	ldr	r3, [r4, #4]
 800503e:	3301      	adds	r3, #1
 8005040:	6063      	str	r3, [r4, #4]
 8005042:	e7e9      	b.n	8005018 <_sungetc_r+0xc>
 8005044:	4621      	mov	r1, r4
 8005046:	f000 fb34 	bl	80056b2 <__submore>
 800504a:	2800      	cmp	r0, #0
 800504c:	d0f1      	beq.n	8005032 <_sungetc_r+0x26>
 800504e:	e7e1      	b.n	8005014 <_sungetc_r+0x8>
 8005050:	6921      	ldr	r1, [r4, #16]
 8005052:	6822      	ldr	r2, [r4, #0]
 8005054:	b141      	cbz	r1, 8005068 <_sungetc_r+0x5c>
 8005056:	4291      	cmp	r1, r2
 8005058:	d206      	bcs.n	8005068 <_sungetc_r+0x5c>
 800505a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800505e:	42a9      	cmp	r1, r5
 8005060:	d102      	bne.n	8005068 <_sungetc_r+0x5c>
 8005062:	3a01      	subs	r2, #1
 8005064:	6022      	str	r2, [r4, #0]
 8005066:	e7ea      	b.n	800503e <_sungetc_r+0x32>
 8005068:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800506c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005070:	6363      	str	r3, [r4, #52]	@ 0x34
 8005072:	2303      	movs	r3, #3
 8005074:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005076:	4623      	mov	r3, r4
 8005078:	f803 5f46 	strb.w	r5, [r3, #70]!
 800507c:	6023      	str	r3, [r4, #0]
 800507e:	2301      	movs	r3, #1
 8005080:	e7de      	b.n	8005040 <_sungetc_r+0x34>

08005082 <__ssrefill_r>:
 8005082:	b510      	push	{r4, lr}
 8005084:	460c      	mov	r4, r1
 8005086:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005088:	b169      	cbz	r1, 80050a6 <__ssrefill_r+0x24>
 800508a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800508e:	4299      	cmp	r1, r3
 8005090:	d001      	beq.n	8005096 <__ssrefill_r+0x14>
 8005092:	f7ff fec3 	bl	8004e1c <_free_r>
 8005096:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005098:	6063      	str	r3, [r4, #4]
 800509a:	2000      	movs	r0, #0
 800509c:	6360      	str	r0, [r4, #52]	@ 0x34
 800509e:	b113      	cbz	r3, 80050a6 <__ssrefill_r+0x24>
 80050a0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80050a2:	6023      	str	r3, [r4, #0]
 80050a4:	bd10      	pop	{r4, pc}
 80050a6:	6923      	ldr	r3, [r4, #16]
 80050a8:	6023      	str	r3, [r4, #0]
 80050aa:	2300      	movs	r3, #0
 80050ac:	6063      	str	r3, [r4, #4]
 80050ae:	89a3      	ldrh	r3, [r4, #12]
 80050b0:	f043 0320 	orr.w	r3, r3, #32
 80050b4:	81a3      	strh	r3, [r4, #12]
 80050b6:	f04f 30ff 	mov.w	r0, #4294967295
 80050ba:	e7f3      	b.n	80050a4 <__ssrefill_r+0x22>

080050bc <__ssvfiscanf_r>:
 80050bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80050c0:	460c      	mov	r4, r1
 80050c2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 80050c6:	2100      	movs	r1, #0
 80050c8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 80050cc:	49a5      	ldr	r1, [pc, #660]	@ (8005364 <__ssvfiscanf_r+0x2a8>)
 80050ce:	91a0      	str	r1, [sp, #640]	@ 0x280
 80050d0:	f10d 0804 	add.w	r8, sp, #4
 80050d4:	49a4      	ldr	r1, [pc, #656]	@ (8005368 <__ssvfiscanf_r+0x2ac>)
 80050d6:	4fa5      	ldr	r7, [pc, #660]	@ (800536c <__ssvfiscanf_r+0x2b0>)
 80050d8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80050dc:	4606      	mov	r6, r0
 80050de:	91a1      	str	r1, [sp, #644]	@ 0x284
 80050e0:	9300      	str	r3, [sp, #0]
 80050e2:	7813      	ldrb	r3, [r2, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	f000 8158 	beq.w	800539a <__ssvfiscanf_r+0x2de>
 80050ea:	5cf9      	ldrb	r1, [r7, r3]
 80050ec:	f011 0108 	ands.w	r1, r1, #8
 80050f0:	f102 0501 	add.w	r5, r2, #1
 80050f4:	d019      	beq.n	800512a <__ssvfiscanf_r+0x6e>
 80050f6:	6863      	ldr	r3, [r4, #4]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	dd0f      	ble.n	800511c <__ssvfiscanf_r+0x60>
 80050fc:	6823      	ldr	r3, [r4, #0]
 80050fe:	781a      	ldrb	r2, [r3, #0]
 8005100:	5cba      	ldrb	r2, [r7, r2]
 8005102:	0712      	lsls	r2, r2, #28
 8005104:	d401      	bmi.n	800510a <__ssvfiscanf_r+0x4e>
 8005106:	462a      	mov	r2, r5
 8005108:	e7eb      	b.n	80050e2 <__ssvfiscanf_r+0x26>
 800510a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800510c:	3201      	adds	r2, #1
 800510e:	9245      	str	r2, [sp, #276]	@ 0x114
 8005110:	6862      	ldr	r2, [r4, #4]
 8005112:	3301      	adds	r3, #1
 8005114:	3a01      	subs	r2, #1
 8005116:	6062      	str	r2, [r4, #4]
 8005118:	6023      	str	r3, [r4, #0]
 800511a:	e7ec      	b.n	80050f6 <__ssvfiscanf_r+0x3a>
 800511c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800511e:	4621      	mov	r1, r4
 8005120:	4630      	mov	r0, r6
 8005122:	4798      	blx	r3
 8005124:	2800      	cmp	r0, #0
 8005126:	d0e9      	beq.n	80050fc <__ssvfiscanf_r+0x40>
 8005128:	e7ed      	b.n	8005106 <__ssvfiscanf_r+0x4a>
 800512a:	2b25      	cmp	r3, #37	@ 0x25
 800512c:	d012      	beq.n	8005154 <__ssvfiscanf_r+0x98>
 800512e:	4699      	mov	r9, r3
 8005130:	6863      	ldr	r3, [r4, #4]
 8005132:	2b00      	cmp	r3, #0
 8005134:	f340 8093 	ble.w	800525e <__ssvfiscanf_r+0x1a2>
 8005138:	6822      	ldr	r2, [r4, #0]
 800513a:	7813      	ldrb	r3, [r2, #0]
 800513c:	454b      	cmp	r3, r9
 800513e:	f040 812c 	bne.w	800539a <__ssvfiscanf_r+0x2de>
 8005142:	6863      	ldr	r3, [r4, #4]
 8005144:	3b01      	subs	r3, #1
 8005146:	6063      	str	r3, [r4, #4]
 8005148:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800514a:	3201      	adds	r2, #1
 800514c:	3301      	adds	r3, #1
 800514e:	6022      	str	r2, [r4, #0]
 8005150:	9345      	str	r3, [sp, #276]	@ 0x114
 8005152:	e7d8      	b.n	8005106 <__ssvfiscanf_r+0x4a>
 8005154:	9141      	str	r1, [sp, #260]	@ 0x104
 8005156:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005158:	7853      	ldrb	r3, [r2, #1]
 800515a:	2b2a      	cmp	r3, #42	@ 0x2a
 800515c:	bf02      	ittt	eq
 800515e:	2310      	moveq	r3, #16
 8005160:	1c95      	addeq	r5, r2, #2
 8005162:	9341      	streq	r3, [sp, #260]	@ 0x104
 8005164:	220a      	movs	r2, #10
 8005166:	46a9      	mov	r9, r5
 8005168:	f819 1b01 	ldrb.w	r1, [r9], #1
 800516c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005170:	2b09      	cmp	r3, #9
 8005172:	d91e      	bls.n	80051b2 <__ssvfiscanf_r+0xf6>
 8005174:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8005370 <__ssvfiscanf_r+0x2b4>
 8005178:	2203      	movs	r2, #3
 800517a:	4650      	mov	r0, sl
 800517c:	f7fb f850 	bl	8000220 <memchr>
 8005180:	b138      	cbz	r0, 8005192 <__ssvfiscanf_r+0xd6>
 8005182:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005184:	eba0 000a 	sub.w	r0, r0, sl
 8005188:	2301      	movs	r3, #1
 800518a:	4083      	lsls	r3, r0
 800518c:	4313      	orrs	r3, r2
 800518e:	9341      	str	r3, [sp, #260]	@ 0x104
 8005190:	464d      	mov	r5, r9
 8005192:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005196:	2b78      	cmp	r3, #120	@ 0x78
 8005198:	d806      	bhi.n	80051a8 <__ssvfiscanf_r+0xec>
 800519a:	2b57      	cmp	r3, #87	@ 0x57
 800519c:	d810      	bhi.n	80051c0 <__ssvfiscanf_r+0x104>
 800519e:	2b25      	cmp	r3, #37	@ 0x25
 80051a0:	d0c5      	beq.n	800512e <__ssvfiscanf_r+0x72>
 80051a2:	d857      	bhi.n	8005254 <__ssvfiscanf_r+0x198>
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d065      	beq.n	8005274 <__ssvfiscanf_r+0x1b8>
 80051a8:	2303      	movs	r3, #3
 80051aa:	9347      	str	r3, [sp, #284]	@ 0x11c
 80051ac:	230a      	movs	r3, #10
 80051ae:	9342      	str	r3, [sp, #264]	@ 0x108
 80051b0:	e078      	b.n	80052a4 <__ssvfiscanf_r+0x1e8>
 80051b2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 80051b4:	fb02 1103 	mla	r1, r2, r3, r1
 80051b8:	3930      	subs	r1, #48	@ 0x30
 80051ba:	9143      	str	r1, [sp, #268]	@ 0x10c
 80051bc:	464d      	mov	r5, r9
 80051be:	e7d2      	b.n	8005166 <__ssvfiscanf_r+0xaa>
 80051c0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 80051c4:	2a20      	cmp	r2, #32
 80051c6:	d8ef      	bhi.n	80051a8 <__ssvfiscanf_r+0xec>
 80051c8:	a101      	add	r1, pc, #4	@ (adr r1, 80051d0 <__ssvfiscanf_r+0x114>)
 80051ca:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	08005283 	.word	0x08005283
 80051d4:	080051a9 	.word	0x080051a9
 80051d8:	080051a9 	.word	0x080051a9
 80051dc:	080052dd 	.word	0x080052dd
 80051e0:	080051a9 	.word	0x080051a9
 80051e4:	080051a9 	.word	0x080051a9
 80051e8:	080051a9 	.word	0x080051a9
 80051ec:	080051a9 	.word	0x080051a9
 80051f0:	080051a9 	.word	0x080051a9
 80051f4:	080051a9 	.word	0x080051a9
 80051f8:	080051a9 	.word	0x080051a9
 80051fc:	080052f3 	.word	0x080052f3
 8005200:	080052d9 	.word	0x080052d9
 8005204:	0800525b 	.word	0x0800525b
 8005208:	0800525b 	.word	0x0800525b
 800520c:	0800525b 	.word	0x0800525b
 8005210:	080051a9 	.word	0x080051a9
 8005214:	08005295 	.word	0x08005295
 8005218:	080051a9 	.word	0x080051a9
 800521c:	080051a9 	.word	0x080051a9
 8005220:	080051a9 	.word	0x080051a9
 8005224:	080051a9 	.word	0x080051a9
 8005228:	08005303 	.word	0x08005303
 800522c:	0800529d 	.word	0x0800529d
 8005230:	0800527b 	.word	0x0800527b
 8005234:	080051a9 	.word	0x080051a9
 8005238:	080051a9 	.word	0x080051a9
 800523c:	080052ff 	.word	0x080052ff
 8005240:	080051a9 	.word	0x080051a9
 8005244:	080052d9 	.word	0x080052d9
 8005248:	080051a9 	.word	0x080051a9
 800524c:	080051a9 	.word	0x080051a9
 8005250:	08005283 	.word	0x08005283
 8005254:	3b45      	subs	r3, #69	@ 0x45
 8005256:	2b02      	cmp	r3, #2
 8005258:	d8a6      	bhi.n	80051a8 <__ssvfiscanf_r+0xec>
 800525a:	2305      	movs	r3, #5
 800525c:	e021      	b.n	80052a2 <__ssvfiscanf_r+0x1e6>
 800525e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005260:	4621      	mov	r1, r4
 8005262:	4630      	mov	r0, r6
 8005264:	4798      	blx	r3
 8005266:	2800      	cmp	r0, #0
 8005268:	f43f af66 	beq.w	8005138 <__ssvfiscanf_r+0x7c>
 800526c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800526e:	2800      	cmp	r0, #0
 8005270:	f040 808b 	bne.w	800538a <__ssvfiscanf_r+0x2ce>
 8005274:	f04f 30ff 	mov.w	r0, #4294967295
 8005278:	e08b      	b.n	8005392 <__ssvfiscanf_r+0x2d6>
 800527a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800527c:	f042 0220 	orr.w	r2, r2, #32
 8005280:	9241      	str	r2, [sp, #260]	@ 0x104
 8005282:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005284:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005288:	9241      	str	r2, [sp, #260]	@ 0x104
 800528a:	2210      	movs	r2, #16
 800528c:	2b6e      	cmp	r3, #110	@ 0x6e
 800528e:	9242      	str	r2, [sp, #264]	@ 0x108
 8005290:	d902      	bls.n	8005298 <__ssvfiscanf_r+0x1dc>
 8005292:	e005      	b.n	80052a0 <__ssvfiscanf_r+0x1e4>
 8005294:	2300      	movs	r3, #0
 8005296:	9342      	str	r3, [sp, #264]	@ 0x108
 8005298:	2303      	movs	r3, #3
 800529a:	e002      	b.n	80052a2 <__ssvfiscanf_r+0x1e6>
 800529c:	2308      	movs	r3, #8
 800529e:	9342      	str	r3, [sp, #264]	@ 0x108
 80052a0:	2304      	movs	r3, #4
 80052a2:	9347      	str	r3, [sp, #284]	@ 0x11c
 80052a4:	6863      	ldr	r3, [r4, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	dd39      	ble.n	800531e <__ssvfiscanf_r+0x262>
 80052aa:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80052ac:	0659      	lsls	r1, r3, #25
 80052ae:	d404      	bmi.n	80052ba <__ssvfiscanf_r+0x1fe>
 80052b0:	6823      	ldr	r3, [r4, #0]
 80052b2:	781a      	ldrb	r2, [r3, #0]
 80052b4:	5cba      	ldrb	r2, [r7, r2]
 80052b6:	0712      	lsls	r2, r2, #28
 80052b8:	d438      	bmi.n	800532c <__ssvfiscanf_r+0x270>
 80052ba:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 80052bc:	2b02      	cmp	r3, #2
 80052be:	dc47      	bgt.n	8005350 <__ssvfiscanf_r+0x294>
 80052c0:	466b      	mov	r3, sp
 80052c2:	4622      	mov	r2, r4
 80052c4:	a941      	add	r1, sp, #260	@ 0x104
 80052c6:	4630      	mov	r0, r6
 80052c8:	f000 f86c 	bl	80053a4 <_scanf_chars>
 80052cc:	2801      	cmp	r0, #1
 80052ce:	d064      	beq.n	800539a <__ssvfiscanf_r+0x2de>
 80052d0:	2802      	cmp	r0, #2
 80052d2:	f47f af18 	bne.w	8005106 <__ssvfiscanf_r+0x4a>
 80052d6:	e7c9      	b.n	800526c <__ssvfiscanf_r+0x1b0>
 80052d8:	220a      	movs	r2, #10
 80052da:	e7d7      	b.n	800528c <__ssvfiscanf_r+0x1d0>
 80052dc:	4629      	mov	r1, r5
 80052de:	4640      	mov	r0, r8
 80052e0:	f000 f9ae 	bl	8005640 <__sccl>
 80052e4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80052e6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052ea:	9341      	str	r3, [sp, #260]	@ 0x104
 80052ec:	4605      	mov	r5, r0
 80052ee:	2301      	movs	r3, #1
 80052f0:	e7d7      	b.n	80052a2 <__ssvfiscanf_r+0x1e6>
 80052f2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80052f4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052f8:	9341      	str	r3, [sp, #260]	@ 0x104
 80052fa:	2300      	movs	r3, #0
 80052fc:	e7d1      	b.n	80052a2 <__ssvfiscanf_r+0x1e6>
 80052fe:	2302      	movs	r3, #2
 8005300:	e7cf      	b.n	80052a2 <__ssvfiscanf_r+0x1e6>
 8005302:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8005304:	06c3      	lsls	r3, r0, #27
 8005306:	f53f aefe 	bmi.w	8005106 <__ssvfiscanf_r+0x4a>
 800530a:	9b00      	ldr	r3, [sp, #0]
 800530c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800530e:	1d19      	adds	r1, r3, #4
 8005310:	9100      	str	r1, [sp, #0]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	07c0      	lsls	r0, r0, #31
 8005316:	bf4c      	ite	mi
 8005318:	801a      	strhmi	r2, [r3, #0]
 800531a:	601a      	strpl	r2, [r3, #0]
 800531c:	e6f3      	b.n	8005106 <__ssvfiscanf_r+0x4a>
 800531e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005320:	4621      	mov	r1, r4
 8005322:	4630      	mov	r0, r6
 8005324:	4798      	blx	r3
 8005326:	2800      	cmp	r0, #0
 8005328:	d0bf      	beq.n	80052aa <__ssvfiscanf_r+0x1ee>
 800532a:	e79f      	b.n	800526c <__ssvfiscanf_r+0x1b0>
 800532c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800532e:	3201      	adds	r2, #1
 8005330:	9245      	str	r2, [sp, #276]	@ 0x114
 8005332:	6862      	ldr	r2, [r4, #4]
 8005334:	3a01      	subs	r2, #1
 8005336:	2a00      	cmp	r2, #0
 8005338:	6062      	str	r2, [r4, #4]
 800533a:	dd02      	ble.n	8005342 <__ssvfiscanf_r+0x286>
 800533c:	3301      	adds	r3, #1
 800533e:	6023      	str	r3, [r4, #0]
 8005340:	e7b6      	b.n	80052b0 <__ssvfiscanf_r+0x1f4>
 8005342:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005344:	4621      	mov	r1, r4
 8005346:	4630      	mov	r0, r6
 8005348:	4798      	blx	r3
 800534a:	2800      	cmp	r0, #0
 800534c:	d0b0      	beq.n	80052b0 <__ssvfiscanf_r+0x1f4>
 800534e:	e78d      	b.n	800526c <__ssvfiscanf_r+0x1b0>
 8005350:	2b04      	cmp	r3, #4
 8005352:	dc0f      	bgt.n	8005374 <__ssvfiscanf_r+0x2b8>
 8005354:	466b      	mov	r3, sp
 8005356:	4622      	mov	r2, r4
 8005358:	a941      	add	r1, sp, #260	@ 0x104
 800535a:	4630      	mov	r0, r6
 800535c:	f000 f87c 	bl	8005458 <_scanf_i>
 8005360:	e7b4      	b.n	80052cc <__ssvfiscanf_r+0x210>
 8005362:	bf00      	nop
 8005364:	0800500d 	.word	0x0800500d
 8005368:	08005083 	.word	0x08005083
 800536c:	08005a10 	.word	0x08005a10
 8005370:	080059f0 	.word	0x080059f0
 8005374:	4b0a      	ldr	r3, [pc, #40]	@ (80053a0 <__ssvfiscanf_r+0x2e4>)
 8005376:	2b00      	cmp	r3, #0
 8005378:	f43f aec5 	beq.w	8005106 <__ssvfiscanf_r+0x4a>
 800537c:	466b      	mov	r3, sp
 800537e:	4622      	mov	r2, r4
 8005380:	a941      	add	r1, sp, #260	@ 0x104
 8005382:	4630      	mov	r0, r6
 8005384:	f3af 8000 	nop.w
 8005388:	e7a0      	b.n	80052cc <__ssvfiscanf_r+0x210>
 800538a:	89a3      	ldrh	r3, [r4, #12]
 800538c:	065b      	lsls	r3, r3, #25
 800538e:	f53f af71 	bmi.w	8005274 <__ssvfiscanf_r+0x1b8>
 8005392:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8005396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800539a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800539c:	e7f9      	b.n	8005392 <__ssvfiscanf_r+0x2d6>
 800539e:	bf00      	nop
 80053a0:	00000000 	.word	0x00000000

080053a4 <_scanf_chars>:
 80053a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053a8:	4615      	mov	r5, r2
 80053aa:	688a      	ldr	r2, [r1, #8]
 80053ac:	4680      	mov	r8, r0
 80053ae:	460c      	mov	r4, r1
 80053b0:	b932      	cbnz	r2, 80053c0 <_scanf_chars+0x1c>
 80053b2:	698a      	ldr	r2, [r1, #24]
 80053b4:	2a00      	cmp	r2, #0
 80053b6:	bf14      	ite	ne
 80053b8:	f04f 32ff 	movne.w	r2, #4294967295
 80053bc:	2201      	moveq	r2, #1
 80053be:	608a      	str	r2, [r1, #8]
 80053c0:	6822      	ldr	r2, [r4, #0]
 80053c2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8005454 <_scanf_chars+0xb0>
 80053c6:	06d1      	lsls	r1, r2, #27
 80053c8:	bf5f      	itttt	pl
 80053ca:	681a      	ldrpl	r2, [r3, #0]
 80053cc:	1d11      	addpl	r1, r2, #4
 80053ce:	6019      	strpl	r1, [r3, #0]
 80053d0:	6816      	ldrpl	r6, [r2, #0]
 80053d2:	2700      	movs	r7, #0
 80053d4:	69a0      	ldr	r0, [r4, #24]
 80053d6:	b188      	cbz	r0, 80053fc <_scanf_chars+0x58>
 80053d8:	2801      	cmp	r0, #1
 80053da:	d107      	bne.n	80053ec <_scanf_chars+0x48>
 80053dc:	682b      	ldr	r3, [r5, #0]
 80053de:	781a      	ldrb	r2, [r3, #0]
 80053e0:	6963      	ldr	r3, [r4, #20]
 80053e2:	5c9b      	ldrb	r3, [r3, r2]
 80053e4:	b953      	cbnz	r3, 80053fc <_scanf_chars+0x58>
 80053e6:	2f00      	cmp	r7, #0
 80053e8:	d031      	beq.n	800544e <_scanf_chars+0xaa>
 80053ea:	e022      	b.n	8005432 <_scanf_chars+0x8e>
 80053ec:	2802      	cmp	r0, #2
 80053ee:	d120      	bne.n	8005432 <_scanf_chars+0x8e>
 80053f0:	682b      	ldr	r3, [r5, #0]
 80053f2:	781b      	ldrb	r3, [r3, #0]
 80053f4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80053f8:	071b      	lsls	r3, r3, #28
 80053fa:	d41a      	bmi.n	8005432 <_scanf_chars+0x8e>
 80053fc:	6823      	ldr	r3, [r4, #0]
 80053fe:	06da      	lsls	r2, r3, #27
 8005400:	bf5e      	ittt	pl
 8005402:	682b      	ldrpl	r3, [r5, #0]
 8005404:	781b      	ldrbpl	r3, [r3, #0]
 8005406:	f806 3b01 	strbpl.w	r3, [r6], #1
 800540a:	682a      	ldr	r2, [r5, #0]
 800540c:	686b      	ldr	r3, [r5, #4]
 800540e:	3201      	adds	r2, #1
 8005410:	602a      	str	r2, [r5, #0]
 8005412:	68a2      	ldr	r2, [r4, #8]
 8005414:	3b01      	subs	r3, #1
 8005416:	3a01      	subs	r2, #1
 8005418:	606b      	str	r3, [r5, #4]
 800541a:	3701      	adds	r7, #1
 800541c:	60a2      	str	r2, [r4, #8]
 800541e:	b142      	cbz	r2, 8005432 <_scanf_chars+0x8e>
 8005420:	2b00      	cmp	r3, #0
 8005422:	dcd7      	bgt.n	80053d4 <_scanf_chars+0x30>
 8005424:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005428:	4629      	mov	r1, r5
 800542a:	4640      	mov	r0, r8
 800542c:	4798      	blx	r3
 800542e:	2800      	cmp	r0, #0
 8005430:	d0d0      	beq.n	80053d4 <_scanf_chars+0x30>
 8005432:	6823      	ldr	r3, [r4, #0]
 8005434:	f013 0310 	ands.w	r3, r3, #16
 8005438:	d105      	bne.n	8005446 <_scanf_chars+0xa2>
 800543a:	68e2      	ldr	r2, [r4, #12]
 800543c:	3201      	adds	r2, #1
 800543e:	60e2      	str	r2, [r4, #12]
 8005440:	69a2      	ldr	r2, [r4, #24]
 8005442:	b102      	cbz	r2, 8005446 <_scanf_chars+0xa2>
 8005444:	7033      	strb	r3, [r6, #0]
 8005446:	6923      	ldr	r3, [r4, #16]
 8005448:	443b      	add	r3, r7
 800544a:	6123      	str	r3, [r4, #16]
 800544c:	2000      	movs	r0, #0
 800544e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005452:	bf00      	nop
 8005454:	08005a10 	.word	0x08005a10

08005458 <_scanf_i>:
 8005458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800545c:	4698      	mov	r8, r3
 800545e:	4b74      	ldr	r3, [pc, #464]	@ (8005630 <_scanf_i+0x1d8>)
 8005460:	460c      	mov	r4, r1
 8005462:	4682      	mov	sl, r0
 8005464:	4616      	mov	r6, r2
 8005466:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800546a:	b087      	sub	sp, #28
 800546c:	ab03      	add	r3, sp, #12
 800546e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005472:	4b70      	ldr	r3, [pc, #448]	@ (8005634 <_scanf_i+0x1dc>)
 8005474:	69a1      	ldr	r1, [r4, #24]
 8005476:	4a70      	ldr	r2, [pc, #448]	@ (8005638 <_scanf_i+0x1e0>)
 8005478:	2903      	cmp	r1, #3
 800547a:	bf08      	it	eq
 800547c:	461a      	moveq	r2, r3
 800547e:	68a3      	ldr	r3, [r4, #8]
 8005480:	9201      	str	r2, [sp, #4]
 8005482:	1e5a      	subs	r2, r3, #1
 8005484:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005488:	bf88      	it	hi
 800548a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800548e:	4627      	mov	r7, r4
 8005490:	bf82      	ittt	hi
 8005492:	eb03 0905 	addhi.w	r9, r3, r5
 8005496:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800549a:	60a3      	strhi	r3, [r4, #8]
 800549c:	f857 3b1c 	ldr.w	r3, [r7], #28
 80054a0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 80054a4:	bf98      	it	ls
 80054a6:	f04f 0900 	movls.w	r9, #0
 80054aa:	6023      	str	r3, [r4, #0]
 80054ac:	463d      	mov	r5, r7
 80054ae:	f04f 0b00 	mov.w	fp, #0
 80054b2:	6831      	ldr	r1, [r6, #0]
 80054b4:	ab03      	add	r3, sp, #12
 80054b6:	7809      	ldrb	r1, [r1, #0]
 80054b8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 80054bc:	2202      	movs	r2, #2
 80054be:	f7fa feaf 	bl	8000220 <memchr>
 80054c2:	b328      	cbz	r0, 8005510 <_scanf_i+0xb8>
 80054c4:	f1bb 0f01 	cmp.w	fp, #1
 80054c8:	d159      	bne.n	800557e <_scanf_i+0x126>
 80054ca:	6862      	ldr	r2, [r4, #4]
 80054cc:	b92a      	cbnz	r2, 80054da <_scanf_i+0x82>
 80054ce:	6822      	ldr	r2, [r4, #0]
 80054d0:	2108      	movs	r1, #8
 80054d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80054d6:	6061      	str	r1, [r4, #4]
 80054d8:	6022      	str	r2, [r4, #0]
 80054da:	6822      	ldr	r2, [r4, #0]
 80054dc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80054e0:	6022      	str	r2, [r4, #0]
 80054e2:	68a2      	ldr	r2, [r4, #8]
 80054e4:	1e51      	subs	r1, r2, #1
 80054e6:	60a1      	str	r1, [r4, #8]
 80054e8:	b192      	cbz	r2, 8005510 <_scanf_i+0xb8>
 80054ea:	6832      	ldr	r2, [r6, #0]
 80054ec:	1c51      	adds	r1, r2, #1
 80054ee:	6031      	str	r1, [r6, #0]
 80054f0:	7812      	ldrb	r2, [r2, #0]
 80054f2:	f805 2b01 	strb.w	r2, [r5], #1
 80054f6:	6872      	ldr	r2, [r6, #4]
 80054f8:	3a01      	subs	r2, #1
 80054fa:	2a00      	cmp	r2, #0
 80054fc:	6072      	str	r2, [r6, #4]
 80054fe:	dc07      	bgt.n	8005510 <_scanf_i+0xb8>
 8005500:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8005504:	4631      	mov	r1, r6
 8005506:	4650      	mov	r0, sl
 8005508:	4790      	blx	r2
 800550a:	2800      	cmp	r0, #0
 800550c:	f040 8085 	bne.w	800561a <_scanf_i+0x1c2>
 8005510:	f10b 0b01 	add.w	fp, fp, #1
 8005514:	f1bb 0f03 	cmp.w	fp, #3
 8005518:	d1cb      	bne.n	80054b2 <_scanf_i+0x5a>
 800551a:	6863      	ldr	r3, [r4, #4]
 800551c:	b90b      	cbnz	r3, 8005522 <_scanf_i+0xca>
 800551e:	230a      	movs	r3, #10
 8005520:	6063      	str	r3, [r4, #4]
 8005522:	6863      	ldr	r3, [r4, #4]
 8005524:	4945      	ldr	r1, [pc, #276]	@ (800563c <_scanf_i+0x1e4>)
 8005526:	6960      	ldr	r0, [r4, #20]
 8005528:	1ac9      	subs	r1, r1, r3
 800552a:	f000 f889 	bl	8005640 <__sccl>
 800552e:	f04f 0b00 	mov.w	fp, #0
 8005532:	68a3      	ldr	r3, [r4, #8]
 8005534:	6822      	ldr	r2, [r4, #0]
 8005536:	2b00      	cmp	r3, #0
 8005538:	d03d      	beq.n	80055b6 <_scanf_i+0x15e>
 800553a:	6831      	ldr	r1, [r6, #0]
 800553c:	6960      	ldr	r0, [r4, #20]
 800553e:	f891 c000 	ldrb.w	ip, [r1]
 8005542:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005546:	2800      	cmp	r0, #0
 8005548:	d035      	beq.n	80055b6 <_scanf_i+0x15e>
 800554a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800554e:	d124      	bne.n	800559a <_scanf_i+0x142>
 8005550:	0510      	lsls	r0, r2, #20
 8005552:	d522      	bpl.n	800559a <_scanf_i+0x142>
 8005554:	f10b 0b01 	add.w	fp, fp, #1
 8005558:	f1b9 0f00 	cmp.w	r9, #0
 800555c:	d003      	beq.n	8005566 <_scanf_i+0x10e>
 800555e:	3301      	adds	r3, #1
 8005560:	f109 39ff 	add.w	r9, r9, #4294967295
 8005564:	60a3      	str	r3, [r4, #8]
 8005566:	6873      	ldr	r3, [r6, #4]
 8005568:	3b01      	subs	r3, #1
 800556a:	2b00      	cmp	r3, #0
 800556c:	6073      	str	r3, [r6, #4]
 800556e:	dd1b      	ble.n	80055a8 <_scanf_i+0x150>
 8005570:	6833      	ldr	r3, [r6, #0]
 8005572:	3301      	adds	r3, #1
 8005574:	6033      	str	r3, [r6, #0]
 8005576:	68a3      	ldr	r3, [r4, #8]
 8005578:	3b01      	subs	r3, #1
 800557a:	60a3      	str	r3, [r4, #8]
 800557c:	e7d9      	b.n	8005532 <_scanf_i+0xda>
 800557e:	f1bb 0f02 	cmp.w	fp, #2
 8005582:	d1ae      	bne.n	80054e2 <_scanf_i+0x8a>
 8005584:	6822      	ldr	r2, [r4, #0]
 8005586:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800558a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800558e:	d1bf      	bne.n	8005510 <_scanf_i+0xb8>
 8005590:	2110      	movs	r1, #16
 8005592:	6061      	str	r1, [r4, #4]
 8005594:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005598:	e7a2      	b.n	80054e0 <_scanf_i+0x88>
 800559a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800559e:	6022      	str	r2, [r4, #0]
 80055a0:	780b      	ldrb	r3, [r1, #0]
 80055a2:	f805 3b01 	strb.w	r3, [r5], #1
 80055a6:	e7de      	b.n	8005566 <_scanf_i+0x10e>
 80055a8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80055ac:	4631      	mov	r1, r6
 80055ae:	4650      	mov	r0, sl
 80055b0:	4798      	blx	r3
 80055b2:	2800      	cmp	r0, #0
 80055b4:	d0df      	beq.n	8005576 <_scanf_i+0x11e>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	05d9      	lsls	r1, r3, #23
 80055ba:	d50d      	bpl.n	80055d8 <_scanf_i+0x180>
 80055bc:	42bd      	cmp	r5, r7
 80055be:	d909      	bls.n	80055d4 <_scanf_i+0x17c>
 80055c0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 80055c4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80055c8:	4632      	mov	r2, r6
 80055ca:	4650      	mov	r0, sl
 80055cc:	4798      	blx	r3
 80055ce:	f105 39ff 	add.w	r9, r5, #4294967295
 80055d2:	464d      	mov	r5, r9
 80055d4:	42bd      	cmp	r5, r7
 80055d6:	d028      	beq.n	800562a <_scanf_i+0x1d2>
 80055d8:	6822      	ldr	r2, [r4, #0]
 80055da:	f012 0210 	ands.w	r2, r2, #16
 80055de:	d113      	bne.n	8005608 <_scanf_i+0x1b0>
 80055e0:	702a      	strb	r2, [r5, #0]
 80055e2:	6863      	ldr	r3, [r4, #4]
 80055e4:	9e01      	ldr	r6, [sp, #4]
 80055e6:	4639      	mov	r1, r7
 80055e8:	4650      	mov	r0, sl
 80055ea:	47b0      	blx	r6
 80055ec:	f8d8 3000 	ldr.w	r3, [r8]
 80055f0:	6821      	ldr	r1, [r4, #0]
 80055f2:	1d1a      	adds	r2, r3, #4
 80055f4:	f8c8 2000 	str.w	r2, [r8]
 80055f8:	f011 0f20 	tst.w	r1, #32
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	d00f      	beq.n	8005620 <_scanf_i+0x1c8>
 8005600:	6018      	str	r0, [r3, #0]
 8005602:	68e3      	ldr	r3, [r4, #12]
 8005604:	3301      	adds	r3, #1
 8005606:	60e3      	str	r3, [r4, #12]
 8005608:	6923      	ldr	r3, [r4, #16]
 800560a:	1bed      	subs	r5, r5, r7
 800560c:	445d      	add	r5, fp
 800560e:	442b      	add	r3, r5
 8005610:	6123      	str	r3, [r4, #16]
 8005612:	2000      	movs	r0, #0
 8005614:	b007      	add	sp, #28
 8005616:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561a:	f04f 0b00 	mov.w	fp, #0
 800561e:	e7ca      	b.n	80055b6 <_scanf_i+0x15e>
 8005620:	07ca      	lsls	r2, r1, #31
 8005622:	bf4c      	ite	mi
 8005624:	8018      	strhmi	r0, [r3, #0]
 8005626:	6018      	strpl	r0, [r3, #0]
 8005628:	e7eb      	b.n	8005602 <_scanf_i+0x1aa>
 800562a:	2001      	movs	r0, #1
 800562c:	e7f2      	b.n	8005614 <_scanf_i+0x1bc>
 800562e:	bf00      	nop
 8005630:	080059cc 	.word	0x080059cc
 8005634:	080058b5 	.word	0x080058b5
 8005638:	08005995 	.word	0x08005995
 800563c:	08005a04 	.word	0x08005a04

08005640 <__sccl>:
 8005640:	b570      	push	{r4, r5, r6, lr}
 8005642:	780b      	ldrb	r3, [r1, #0]
 8005644:	4604      	mov	r4, r0
 8005646:	2b5e      	cmp	r3, #94	@ 0x5e
 8005648:	bf0b      	itete	eq
 800564a:	784b      	ldrbeq	r3, [r1, #1]
 800564c:	1c4a      	addne	r2, r1, #1
 800564e:	1c8a      	addeq	r2, r1, #2
 8005650:	2100      	movne	r1, #0
 8005652:	bf08      	it	eq
 8005654:	2101      	moveq	r1, #1
 8005656:	3801      	subs	r0, #1
 8005658:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800565c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005660:	42a8      	cmp	r0, r5
 8005662:	d1fb      	bne.n	800565c <__sccl+0x1c>
 8005664:	b90b      	cbnz	r3, 800566a <__sccl+0x2a>
 8005666:	1e50      	subs	r0, r2, #1
 8005668:	bd70      	pop	{r4, r5, r6, pc}
 800566a:	f081 0101 	eor.w	r1, r1, #1
 800566e:	54e1      	strb	r1, [r4, r3]
 8005670:	4610      	mov	r0, r2
 8005672:	4602      	mov	r2, r0
 8005674:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005678:	2d2d      	cmp	r5, #45	@ 0x2d
 800567a:	d005      	beq.n	8005688 <__sccl+0x48>
 800567c:	2d5d      	cmp	r5, #93	@ 0x5d
 800567e:	d016      	beq.n	80056ae <__sccl+0x6e>
 8005680:	2d00      	cmp	r5, #0
 8005682:	d0f1      	beq.n	8005668 <__sccl+0x28>
 8005684:	462b      	mov	r3, r5
 8005686:	e7f2      	b.n	800566e <__sccl+0x2e>
 8005688:	7846      	ldrb	r6, [r0, #1]
 800568a:	2e5d      	cmp	r6, #93	@ 0x5d
 800568c:	d0fa      	beq.n	8005684 <__sccl+0x44>
 800568e:	42b3      	cmp	r3, r6
 8005690:	dcf8      	bgt.n	8005684 <__sccl+0x44>
 8005692:	3002      	adds	r0, #2
 8005694:	461a      	mov	r2, r3
 8005696:	3201      	adds	r2, #1
 8005698:	4296      	cmp	r6, r2
 800569a:	54a1      	strb	r1, [r4, r2]
 800569c:	dcfb      	bgt.n	8005696 <__sccl+0x56>
 800569e:	1af2      	subs	r2, r6, r3
 80056a0:	3a01      	subs	r2, #1
 80056a2:	1c5d      	adds	r5, r3, #1
 80056a4:	42b3      	cmp	r3, r6
 80056a6:	bfa8      	it	ge
 80056a8:	2200      	movge	r2, #0
 80056aa:	18ab      	adds	r3, r5, r2
 80056ac:	e7e1      	b.n	8005672 <__sccl+0x32>
 80056ae:	4610      	mov	r0, r2
 80056b0:	e7da      	b.n	8005668 <__sccl+0x28>

080056b2 <__submore>:
 80056b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80056b6:	460c      	mov	r4, r1
 80056b8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 80056ba:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80056be:	4299      	cmp	r1, r3
 80056c0:	d11d      	bne.n	80056fe <__submore+0x4c>
 80056c2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80056c6:	f7ff fc15 	bl	8004ef4 <_malloc_r>
 80056ca:	b918      	cbnz	r0, 80056d4 <__submore+0x22>
 80056cc:	f04f 30ff 	mov.w	r0, #4294967295
 80056d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80056d4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80056d8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80056da:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80056de:	6360      	str	r0, [r4, #52]	@ 0x34
 80056e0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80056e4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80056e8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80056ec:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80056f0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80056f4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80056f8:	6020      	str	r0, [r4, #0]
 80056fa:	2000      	movs	r0, #0
 80056fc:	e7e8      	b.n	80056d0 <__submore+0x1e>
 80056fe:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 8005700:	0077      	lsls	r7, r6, #1
 8005702:	463a      	mov	r2, r7
 8005704:	f000 f82e 	bl	8005764 <_realloc_r>
 8005708:	4605      	mov	r5, r0
 800570a:	2800      	cmp	r0, #0
 800570c:	d0de      	beq.n	80056cc <__submore+0x1a>
 800570e:	eb00 0806 	add.w	r8, r0, r6
 8005712:	4601      	mov	r1, r0
 8005714:	4632      	mov	r2, r6
 8005716:	4640      	mov	r0, r8
 8005718:	f000 f816 	bl	8005748 <memcpy>
 800571c:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 8005720:	f8c4 8000 	str.w	r8, [r4]
 8005724:	e7e9      	b.n	80056fa <__submore+0x48>
	...

08005728 <_sbrk_r>:
 8005728:	b538      	push	{r3, r4, r5, lr}
 800572a:	4d06      	ldr	r5, [pc, #24]	@ (8005744 <_sbrk_r+0x1c>)
 800572c:	2300      	movs	r3, #0
 800572e:	4604      	mov	r4, r0
 8005730:	4608      	mov	r0, r1
 8005732:	602b      	str	r3, [r5, #0]
 8005734:	f7fb fd76 	bl	8001224 <_sbrk>
 8005738:	1c43      	adds	r3, r0, #1
 800573a:	d102      	bne.n	8005742 <_sbrk_r+0x1a>
 800573c:	682b      	ldr	r3, [r5, #0]
 800573e:	b103      	cbz	r3, 8005742 <_sbrk_r+0x1a>
 8005740:	6023      	str	r3, [r4, #0]
 8005742:	bd38      	pop	{r3, r4, r5, pc}
 8005744:	2000044c 	.word	0x2000044c

08005748 <memcpy>:
 8005748:	440a      	add	r2, r1
 800574a:	4291      	cmp	r1, r2
 800574c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005750:	d100      	bne.n	8005754 <memcpy+0xc>
 8005752:	4770      	bx	lr
 8005754:	b510      	push	{r4, lr}
 8005756:	f811 4b01 	ldrb.w	r4, [r1], #1
 800575a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800575e:	4291      	cmp	r1, r2
 8005760:	d1f9      	bne.n	8005756 <memcpy+0xe>
 8005762:	bd10      	pop	{r4, pc}

08005764 <_realloc_r>:
 8005764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005768:	4680      	mov	r8, r0
 800576a:	4615      	mov	r5, r2
 800576c:	460c      	mov	r4, r1
 800576e:	b921      	cbnz	r1, 800577a <_realloc_r+0x16>
 8005770:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005774:	4611      	mov	r1, r2
 8005776:	f7ff bbbd 	b.w	8004ef4 <_malloc_r>
 800577a:	b92a      	cbnz	r2, 8005788 <_realloc_r+0x24>
 800577c:	f7ff fb4e 	bl	8004e1c <_free_r>
 8005780:	2400      	movs	r4, #0
 8005782:	4620      	mov	r0, r4
 8005784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005788:	f000 f906 	bl	8005998 <_malloc_usable_size_r>
 800578c:	4285      	cmp	r5, r0
 800578e:	4606      	mov	r6, r0
 8005790:	d802      	bhi.n	8005798 <_realloc_r+0x34>
 8005792:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005796:	d8f4      	bhi.n	8005782 <_realloc_r+0x1e>
 8005798:	4629      	mov	r1, r5
 800579a:	4640      	mov	r0, r8
 800579c:	f7ff fbaa 	bl	8004ef4 <_malloc_r>
 80057a0:	4607      	mov	r7, r0
 80057a2:	2800      	cmp	r0, #0
 80057a4:	d0ec      	beq.n	8005780 <_realloc_r+0x1c>
 80057a6:	42b5      	cmp	r5, r6
 80057a8:	462a      	mov	r2, r5
 80057aa:	4621      	mov	r1, r4
 80057ac:	bf28      	it	cs
 80057ae:	4632      	movcs	r2, r6
 80057b0:	f7ff ffca 	bl	8005748 <memcpy>
 80057b4:	4621      	mov	r1, r4
 80057b6:	4640      	mov	r0, r8
 80057b8:	f7ff fb30 	bl	8004e1c <_free_r>
 80057bc:	463c      	mov	r4, r7
 80057be:	e7e0      	b.n	8005782 <_realloc_r+0x1e>

080057c0 <_strtol_l.constprop.0>:
 80057c0:	2b24      	cmp	r3, #36	@ 0x24
 80057c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057c6:	4686      	mov	lr, r0
 80057c8:	4690      	mov	r8, r2
 80057ca:	d801      	bhi.n	80057d0 <_strtol_l.constprop.0+0x10>
 80057cc:	2b01      	cmp	r3, #1
 80057ce:	d106      	bne.n	80057de <_strtol_l.constprop.0+0x1e>
 80057d0:	f7ff faf0 	bl	8004db4 <__errno>
 80057d4:	2316      	movs	r3, #22
 80057d6:	6003      	str	r3, [r0, #0]
 80057d8:	2000      	movs	r0, #0
 80057da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80057de:	4834      	ldr	r0, [pc, #208]	@ (80058b0 <_strtol_l.constprop.0+0xf0>)
 80057e0:	460d      	mov	r5, r1
 80057e2:	462a      	mov	r2, r5
 80057e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057e8:	5d06      	ldrb	r6, [r0, r4]
 80057ea:	f016 0608 	ands.w	r6, r6, #8
 80057ee:	d1f8      	bne.n	80057e2 <_strtol_l.constprop.0+0x22>
 80057f0:	2c2d      	cmp	r4, #45	@ 0x2d
 80057f2:	d12d      	bne.n	8005850 <_strtol_l.constprop.0+0x90>
 80057f4:	782c      	ldrb	r4, [r5, #0]
 80057f6:	2601      	movs	r6, #1
 80057f8:	1c95      	adds	r5, r2, #2
 80057fa:	f033 0210 	bics.w	r2, r3, #16
 80057fe:	d109      	bne.n	8005814 <_strtol_l.constprop.0+0x54>
 8005800:	2c30      	cmp	r4, #48	@ 0x30
 8005802:	d12a      	bne.n	800585a <_strtol_l.constprop.0+0x9a>
 8005804:	782a      	ldrb	r2, [r5, #0]
 8005806:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800580a:	2a58      	cmp	r2, #88	@ 0x58
 800580c:	d125      	bne.n	800585a <_strtol_l.constprop.0+0x9a>
 800580e:	786c      	ldrb	r4, [r5, #1]
 8005810:	2310      	movs	r3, #16
 8005812:	3502      	adds	r5, #2
 8005814:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005818:	f10c 3cff 	add.w	ip, ip, #4294967295
 800581c:	2200      	movs	r2, #0
 800581e:	fbbc f9f3 	udiv	r9, ip, r3
 8005822:	4610      	mov	r0, r2
 8005824:	fb03 ca19 	mls	sl, r3, r9, ip
 8005828:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800582c:	2f09      	cmp	r7, #9
 800582e:	d81b      	bhi.n	8005868 <_strtol_l.constprop.0+0xa8>
 8005830:	463c      	mov	r4, r7
 8005832:	42a3      	cmp	r3, r4
 8005834:	dd27      	ble.n	8005886 <_strtol_l.constprop.0+0xc6>
 8005836:	1c57      	adds	r7, r2, #1
 8005838:	d007      	beq.n	800584a <_strtol_l.constprop.0+0x8a>
 800583a:	4581      	cmp	r9, r0
 800583c:	d320      	bcc.n	8005880 <_strtol_l.constprop.0+0xc0>
 800583e:	d101      	bne.n	8005844 <_strtol_l.constprop.0+0x84>
 8005840:	45a2      	cmp	sl, r4
 8005842:	db1d      	blt.n	8005880 <_strtol_l.constprop.0+0xc0>
 8005844:	fb00 4003 	mla	r0, r0, r3, r4
 8005848:	2201      	movs	r2, #1
 800584a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800584e:	e7eb      	b.n	8005828 <_strtol_l.constprop.0+0x68>
 8005850:	2c2b      	cmp	r4, #43	@ 0x2b
 8005852:	bf04      	itt	eq
 8005854:	782c      	ldrbeq	r4, [r5, #0]
 8005856:	1c95      	addeq	r5, r2, #2
 8005858:	e7cf      	b.n	80057fa <_strtol_l.constprop.0+0x3a>
 800585a:	2b00      	cmp	r3, #0
 800585c:	d1da      	bne.n	8005814 <_strtol_l.constprop.0+0x54>
 800585e:	2c30      	cmp	r4, #48	@ 0x30
 8005860:	bf0c      	ite	eq
 8005862:	2308      	moveq	r3, #8
 8005864:	230a      	movne	r3, #10
 8005866:	e7d5      	b.n	8005814 <_strtol_l.constprop.0+0x54>
 8005868:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800586c:	2f19      	cmp	r7, #25
 800586e:	d801      	bhi.n	8005874 <_strtol_l.constprop.0+0xb4>
 8005870:	3c37      	subs	r4, #55	@ 0x37
 8005872:	e7de      	b.n	8005832 <_strtol_l.constprop.0+0x72>
 8005874:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005878:	2f19      	cmp	r7, #25
 800587a:	d804      	bhi.n	8005886 <_strtol_l.constprop.0+0xc6>
 800587c:	3c57      	subs	r4, #87	@ 0x57
 800587e:	e7d8      	b.n	8005832 <_strtol_l.constprop.0+0x72>
 8005880:	f04f 32ff 	mov.w	r2, #4294967295
 8005884:	e7e1      	b.n	800584a <_strtol_l.constprop.0+0x8a>
 8005886:	1c53      	adds	r3, r2, #1
 8005888:	d108      	bne.n	800589c <_strtol_l.constprop.0+0xdc>
 800588a:	2322      	movs	r3, #34	@ 0x22
 800588c:	f8ce 3000 	str.w	r3, [lr]
 8005890:	4660      	mov	r0, ip
 8005892:	f1b8 0f00 	cmp.w	r8, #0
 8005896:	d0a0      	beq.n	80057da <_strtol_l.constprop.0+0x1a>
 8005898:	1e69      	subs	r1, r5, #1
 800589a:	e006      	b.n	80058aa <_strtol_l.constprop.0+0xea>
 800589c:	b106      	cbz	r6, 80058a0 <_strtol_l.constprop.0+0xe0>
 800589e:	4240      	negs	r0, r0
 80058a0:	f1b8 0f00 	cmp.w	r8, #0
 80058a4:	d099      	beq.n	80057da <_strtol_l.constprop.0+0x1a>
 80058a6:	2a00      	cmp	r2, #0
 80058a8:	d1f6      	bne.n	8005898 <_strtol_l.constprop.0+0xd8>
 80058aa:	f8c8 1000 	str.w	r1, [r8]
 80058ae:	e794      	b.n	80057da <_strtol_l.constprop.0+0x1a>
 80058b0:	08005a10 	.word	0x08005a10

080058b4 <_strtol_r>:
 80058b4:	f7ff bf84 	b.w	80057c0 <_strtol_l.constprop.0>

080058b8 <_strtoul_l.constprop.0>:
 80058b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80058bc:	4e34      	ldr	r6, [pc, #208]	@ (8005990 <_strtoul_l.constprop.0+0xd8>)
 80058be:	4686      	mov	lr, r0
 80058c0:	460d      	mov	r5, r1
 80058c2:	4628      	mov	r0, r5
 80058c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80058c8:	5d37      	ldrb	r7, [r6, r4]
 80058ca:	f017 0708 	ands.w	r7, r7, #8
 80058ce:	d1f8      	bne.n	80058c2 <_strtoul_l.constprop.0+0xa>
 80058d0:	2c2d      	cmp	r4, #45	@ 0x2d
 80058d2:	d12f      	bne.n	8005934 <_strtoul_l.constprop.0+0x7c>
 80058d4:	782c      	ldrb	r4, [r5, #0]
 80058d6:	2701      	movs	r7, #1
 80058d8:	1c85      	adds	r5, r0, #2
 80058da:	f033 0010 	bics.w	r0, r3, #16
 80058de:	d109      	bne.n	80058f4 <_strtoul_l.constprop.0+0x3c>
 80058e0:	2c30      	cmp	r4, #48	@ 0x30
 80058e2:	d12c      	bne.n	800593e <_strtoul_l.constprop.0+0x86>
 80058e4:	7828      	ldrb	r0, [r5, #0]
 80058e6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 80058ea:	2858      	cmp	r0, #88	@ 0x58
 80058ec:	d127      	bne.n	800593e <_strtoul_l.constprop.0+0x86>
 80058ee:	786c      	ldrb	r4, [r5, #1]
 80058f0:	2310      	movs	r3, #16
 80058f2:	3502      	adds	r5, #2
 80058f4:	f04f 38ff 	mov.w	r8, #4294967295
 80058f8:	2600      	movs	r6, #0
 80058fa:	fbb8 f8f3 	udiv	r8, r8, r3
 80058fe:	fb03 f908 	mul.w	r9, r3, r8
 8005902:	ea6f 0909 	mvn.w	r9, r9
 8005906:	4630      	mov	r0, r6
 8005908:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800590c:	f1bc 0f09 	cmp.w	ip, #9
 8005910:	d81c      	bhi.n	800594c <_strtoul_l.constprop.0+0x94>
 8005912:	4664      	mov	r4, ip
 8005914:	42a3      	cmp	r3, r4
 8005916:	dd2a      	ble.n	800596e <_strtoul_l.constprop.0+0xb6>
 8005918:	f1b6 3fff 	cmp.w	r6, #4294967295
 800591c:	d007      	beq.n	800592e <_strtoul_l.constprop.0+0x76>
 800591e:	4580      	cmp	r8, r0
 8005920:	d322      	bcc.n	8005968 <_strtoul_l.constprop.0+0xb0>
 8005922:	d101      	bne.n	8005928 <_strtoul_l.constprop.0+0x70>
 8005924:	45a1      	cmp	r9, r4
 8005926:	db1f      	blt.n	8005968 <_strtoul_l.constprop.0+0xb0>
 8005928:	fb00 4003 	mla	r0, r0, r3, r4
 800592c:	2601      	movs	r6, #1
 800592e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005932:	e7e9      	b.n	8005908 <_strtoul_l.constprop.0+0x50>
 8005934:	2c2b      	cmp	r4, #43	@ 0x2b
 8005936:	bf04      	itt	eq
 8005938:	782c      	ldrbeq	r4, [r5, #0]
 800593a:	1c85      	addeq	r5, r0, #2
 800593c:	e7cd      	b.n	80058da <_strtoul_l.constprop.0+0x22>
 800593e:	2b00      	cmp	r3, #0
 8005940:	d1d8      	bne.n	80058f4 <_strtoul_l.constprop.0+0x3c>
 8005942:	2c30      	cmp	r4, #48	@ 0x30
 8005944:	bf0c      	ite	eq
 8005946:	2308      	moveq	r3, #8
 8005948:	230a      	movne	r3, #10
 800594a:	e7d3      	b.n	80058f4 <_strtoul_l.constprop.0+0x3c>
 800594c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005950:	f1bc 0f19 	cmp.w	ip, #25
 8005954:	d801      	bhi.n	800595a <_strtoul_l.constprop.0+0xa2>
 8005956:	3c37      	subs	r4, #55	@ 0x37
 8005958:	e7dc      	b.n	8005914 <_strtoul_l.constprop.0+0x5c>
 800595a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800595e:	f1bc 0f19 	cmp.w	ip, #25
 8005962:	d804      	bhi.n	800596e <_strtoul_l.constprop.0+0xb6>
 8005964:	3c57      	subs	r4, #87	@ 0x57
 8005966:	e7d5      	b.n	8005914 <_strtoul_l.constprop.0+0x5c>
 8005968:	f04f 36ff 	mov.w	r6, #4294967295
 800596c:	e7df      	b.n	800592e <_strtoul_l.constprop.0+0x76>
 800596e:	1c73      	adds	r3, r6, #1
 8005970:	d106      	bne.n	8005980 <_strtoul_l.constprop.0+0xc8>
 8005972:	2322      	movs	r3, #34	@ 0x22
 8005974:	f8ce 3000 	str.w	r3, [lr]
 8005978:	4630      	mov	r0, r6
 800597a:	b932      	cbnz	r2, 800598a <_strtoul_l.constprop.0+0xd2>
 800597c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005980:	b107      	cbz	r7, 8005984 <_strtoul_l.constprop.0+0xcc>
 8005982:	4240      	negs	r0, r0
 8005984:	2a00      	cmp	r2, #0
 8005986:	d0f9      	beq.n	800597c <_strtoul_l.constprop.0+0xc4>
 8005988:	b106      	cbz	r6, 800598c <_strtoul_l.constprop.0+0xd4>
 800598a:	1e69      	subs	r1, r5, #1
 800598c:	6011      	str	r1, [r2, #0]
 800598e:	e7f5      	b.n	800597c <_strtoul_l.constprop.0+0xc4>
 8005990:	08005a10 	.word	0x08005a10

08005994 <_strtoul_r>:
 8005994:	f7ff bf90 	b.w	80058b8 <_strtoul_l.constprop.0>

08005998 <_malloc_usable_size_r>:
 8005998:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800599c:	1f18      	subs	r0, r3, #4
 800599e:	2b00      	cmp	r3, #0
 80059a0:	bfbc      	itt	lt
 80059a2:	580b      	ldrlt	r3, [r1, r0]
 80059a4:	18c0      	addlt	r0, r0, r3
 80059a6:	4770      	bx	lr

080059a8 <_init>:
 80059a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059aa:	bf00      	nop
 80059ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ae:	bc08      	pop	{r3}
 80059b0:	469e      	mov	lr, r3
 80059b2:	4770      	bx	lr

080059b4 <_fini>:
 80059b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80059b6:	bf00      	nop
 80059b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80059ba:	bc08      	pop	{r3}
 80059bc:	469e      	mov	lr, r3
 80059be:	4770      	bx	lr
