
Project-control-stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000569c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800586c  0800586c  0000686c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059bc  080059bc  000070d8  2**0
                  CONTENTS
  4 .ARM          00000008  080059bc  080059bc  000069bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059c4  080059c4  000070d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059c4  080059c4  000069c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080059c8  080059c8  000069c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  080059cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  200000d8  08005aa4  000070d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003f4  08005aa4  000073f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107ce  00000000  00000000  00007108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026c3  00000000  00000000  000178d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000de8  00000000  00000000  00019fa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000acc  00000000  00000000  0001ad88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022a1e  00000000  00000000  0001b854  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000122e6  00000000  00000000  0003e272  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d1464  00000000  00000000  00050558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  001219bc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ff4  00000000  00000000  00121a44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00125a38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005854 	.word	0x08005854

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000dc 	.word	0x200000dc
 800020c:	08005854 	.word	0x08005854

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Command_Init>:
uint8_t g1_message[] = "G1 command launched\r\n";
uint8_t m203_message[] = "M203 command launched\r\n";
uint8_t m204_message[] = "M204 command launched\r\n";


void Command_Init(Command *command, uint8_t string[]){
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b085      	sub	sp, #20
 80005b4:	af02      	add	r7, sp, #8
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	strcpy((char *) command->string, (char *) string);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	6839      	ldr	r1, [r7, #0]
 80005be:	4618      	mov	r0, r3
 80005c0:	f004 fb7a 	bl	8004cb8 <strcpy>

	// Parsing della stringa
	sscanf((char *) command->string, "%c %d %c %d", &(command->command_id), &(command->command_num), &(command->flag_id), &(command->flag_num));
 80005c4:	6878      	ldr	r0, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	f103 0114 	add.w	r1, r3, #20
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	f103 0418 	add.w	r4, r3, #24
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	331c      	adds	r3, #28
 80005d6:	687a      	ldr	r2, [r7, #4]
 80005d8:	3220      	adds	r2, #32
 80005da:	9201      	str	r2, [sp, #4]
 80005dc:	9300      	str	r3, [sp, #0]
 80005de:	4623      	mov	r3, r4
 80005e0:	460a      	mov	r2, r1
 80005e2:	4911      	ldr	r1, [pc, #68]	@ (8000628 <Command_Init+0x78>)
 80005e4:	f004 fb08 	bl	8004bf8 <siscanf>

	// Setting default speeds and accelerations
	if (command->travelSpeed == 0){
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d102      	bne.n	80005f6 <Command_Init+0x46>
		command->travelSpeed = 40;
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	2228      	movs	r2, #40	@ 0x28
 80005f4:	629a      	str	r2, [r3, #40]	@ 0x28
	}
	if (command->workSpeed == 0){
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d102      	bne.n	8000604 <Command_Init+0x54>
		command->workSpeed = 20;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	2214      	movs	r2, #20
 8000602:	62da      	str	r2, [r3, #44]	@ 0x2c
	}
	if (command->travelAcceleration == 0){
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000608:	2b00      	cmp	r3, #0
 800060a:	d102      	bne.n	8000612 <Command_Init+0x62>
		command->travelAcceleration = 30;
 800060c:	687b      	ldr	r3, [r7, #4]
 800060e:	221e      	movs	r2, #30
 8000610:	635a      	str	r2, [r3, #52]	@ 0x34
	}
	if (command->workAcceleration == 0){
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000616:	2b00      	cmp	r3, #0
 8000618:	d102      	bne.n	8000620 <Command_Init+0x70>
		command->workAcceleration = 15;
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	220f      	movs	r2, #15
 800061e:	639a      	str	r2, [r3, #56]	@ 0x38
	}
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	0800586c 	.word	0x0800586c

0800062c <Command_Clear>:

void Command_Clear(Command *command){
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	memset(command->string, 0, sizeof(command->string));
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	2214      	movs	r2, #20
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f004 fb08 	bl	8004c50 <memset>
	command->command_id = 0;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	2200      	movs	r2, #0
 8000644:	751a      	strb	r2, [r3, #20]
	command->command_num = 0;
 8000646:	687b      	ldr	r3, [r7, #4]
 8000648:	2200      	movs	r2, #0
 800064a:	619a      	str	r2, [r3, #24]
	command->flag_id = 0;
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	2200      	movs	r2, #0
 8000650:	771a      	strb	r2, [r3, #28]
	command->flag_num = 0;
 8000652:	687b      	ldr	r3, [r7, #4]
 8000654:	2200      	movs	r2, #0
 8000656:	621a      	str	r2, [r3, #32]
}
 8000658:	bf00      	nop
 800065a:	3708      	adds	r7, #8
 800065c:	46bd      	mov	sp, r7
 800065e:	bd80      	pop	{r7, pc}

08000660 <Command_Execute>:

void Command_Execute(Command *command){
 8000660:	b580      	push	{r7, lr}
 8000662:	b082      	sub	sp, #8
 8000664:	af00      	add	r7, sp, #0
 8000666:	6078      	str	r0, [r7, #4]
	if (command->command_id == 'G' && command-> command_num == 0){
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	7d1b      	ldrb	r3, [r3, #20]
 800066c:	2b47      	cmp	r3, #71	@ 0x47
 800066e:	d107      	bne.n	8000680 <Command_Execute+0x20>
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	699b      	ldr	r3, [r3, #24]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d103      	bne.n	8000680 <Command_Execute+0x20>
		Command_G0(command);
 8000678:	6878      	ldr	r0, [r7, #4]
 800067a:	f000 f833 	bl	80006e4 <Command_G0>
 800067e:	e029      	b.n	80006d4 <Command_Execute+0x74>
	}
	else if (command->command_id == 'G' && command->command_num == 1){
 8000680:	687b      	ldr	r3, [r7, #4]
 8000682:	7d1b      	ldrb	r3, [r3, #20]
 8000684:	2b47      	cmp	r3, #71	@ 0x47
 8000686:	d107      	bne.n	8000698 <Command_Execute+0x38>
 8000688:	687b      	ldr	r3, [r7, #4]
 800068a:	699b      	ldr	r3, [r3, #24]
 800068c:	2b01      	cmp	r3, #1
 800068e:	d103      	bne.n	8000698 <Command_Execute+0x38>
		Command_G1(command);
 8000690:	6878      	ldr	r0, [r7, #4]
 8000692:	f000 f855 	bl	8000740 <Command_G1>
 8000696:	e01d      	b.n	80006d4 <Command_Execute+0x74>
	}
	else if (command->command_id == 'M' && command->command_num == 203){
 8000698:	687b      	ldr	r3, [r7, #4]
 800069a:	7d1b      	ldrb	r3, [r3, #20]
 800069c:	2b4d      	cmp	r3, #77	@ 0x4d
 800069e:	d107      	bne.n	80006b0 <Command_Execute+0x50>
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	699b      	ldr	r3, [r3, #24]
 80006a4:	2bcb      	cmp	r3, #203	@ 0xcb
 80006a6:	d103      	bne.n	80006b0 <Command_Execute+0x50>
		Command_M203(command);
 80006a8:	6878      	ldr	r0, [r7, #4]
 80006aa:	f000 f877 	bl	800079c <Command_M203>
 80006ae:	e011      	b.n	80006d4 <Command_Execute+0x74>
	}
	else if (command->command_id == 'M' && command->command_num == 204){
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	7d1b      	ldrb	r3, [r3, #20]
 80006b4:	2b4d      	cmp	r3, #77	@ 0x4d
 80006b6:	d107      	bne.n	80006c8 <Command_Execute+0x68>
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	699b      	ldr	r3, [r3, #24]
 80006bc:	2bcc      	cmp	r3, #204	@ 0xcc
 80006be:	d103      	bne.n	80006c8 <Command_Execute+0x68>
		Command_M204(command);
 80006c0:	6878      	ldr	r0, [r7, #4]
 80006c2:	f000 f89b 	bl	80007fc <Command_M204>
 80006c6:	e005      	b.n	80006d4 <Command_Execute+0x74>
	}
	else {
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));
 80006c8:	2219      	movs	r2, #25
 80006ca:	4904      	ldr	r1, [pc, #16]	@ (80006dc <Command_Execute+0x7c>)
 80006cc:	4804      	ldr	r0, [pc, #16]	@ (80006e0 <Command_Execute+0x80>)
 80006ce:	f003 fb39 	bl	8003d44 <HAL_UART_Transmit_IT>
	}
}
 80006d2:	bf00      	nop
 80006d4:	bf00      	nop
 80006d6:	3708      	adds	r7, #8
 80006d8:	46bd      	mov	sp, r7
 80006da:	bd80      	pop	{r7, pc}
 80006dc:	20000000 	.word	0x20000000
 80006e0:	20000260 	.word	0x20000260

080006e4 <Command_G0>:

void Command_G0(Command *command){
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b082      	sub	sp, #8
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	// This command moves the extruder of a certain coordinate at travelling speed
	__HAL_TIM_SET_AUTORELOAD(&htim3, command->flag_num);
 80006ec:	687b      	ldr	r3, [r7, #4]
 80006ee:	6a1a      	ldr	r2, [r3, #32]
 80006f0:	4b0f      	ldr	r3, [pc, #60]	@ (8000730 <Command_G0+0x4c>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006f6:	687b      	ldr	r3, [r7, #4]
 80006f8:	6a1b      	ldr	r3, [r3, #32]
 80006fa:	461a      	mov	r2, r3
 80006fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000730 <Command_G0+0x4c>)
 80006fe:	60da      	str	r2, [r3, #12]
	command->speed = command->travelSpeed;
 8000700:	687b      	ldr	r3, [r7, #4]
 8000702:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	625a      	str	r2, [r3, #36]	@ 0x24
	command->acceleration = command->travelAcceleration;
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_UART_Transmit_IT(&huart2, g0_message, sizeof(g0_message));
 8000710:	2216      	movs	r2, #22
 8000712:	4908      	ldr	r1, [pc, #32]	@ (8000734 <Command_G0+0x50>)
 8000714:	4808      	ldr	r0, [pc, #32]	@ (8000738 <Command_G0+0x54>)
 8000716:	f003 fb15 	bl	8003d44 <HAL_UART_Transmit_IT>
	Stepper_Enable(&nema_17);
 800071a:	4808      	ldr	r0, [pc, #32]	@ (800073c <Command_G0+0x58>)
 800071c:	f000 fb0a 	bl	8000d34 <Stepper_Enable>
	Stepper_Start(&nema_17);
 8000720:	4806      	ldr	r0, [pc, #24]	@ (800073c <Command_G0+0x58>)
 8000722:	f000 fb27 	bl	8000d74 <Stepper_Start>
}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	200001d0 	.word	0x200001d0
 8000734:	2000001c 	.word	0x2000001c
 8000738:	20000260 	.word	0x20000260
 800073c:	200000f4 	.word	0x200000f4

08000740 <Command_G1>:

void Command_G1(Command *command){
 8000740:	b580      	push	{r7, lr}
 8000742:	b082      	sub	sp, #8
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
	// This command moves the extruder of a certain coordinate at working speed
	__HAL_TIM_SET_AUTORELOAD(&htim3, command->flag_num);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	6a1a      	ldr	r2, [r3, #32]
 800074c:	4b0f      	ldr	r3, [pc, #60]	@ (800078c <Command_G1+0x4c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000752:	687b      	ldr	r3, [r7, #4]
 8000754:	6a1b      	ldr	r3, [r3, #32]
 8000756:	461a      	mov	r2, r3
 8000758:	4b0c      	ldr	r3, [pc, #48]	@ (800078c <Command_G1+0x4c>)
 800075a:	60da      	str	r2, [r3, #12]
	command->speed = command->workSpeed;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000760:	687b      	ldr	r3, [r7, #4]
 8000762:	625a      	str	r2, [r3, #36]	@ 0x24
	command->acceleration = command->workAcceleration;
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8000768:	687b      	ldr	r3, [r7, #4]
 800076a:	631a      	str	r2, [r3, #48]	@ 0x30
	HAL_UART_Transmit_IT(&huart2, g1_message, sizeof(g1_message));
 800076c:	2216      	movs	r2, #22
 800076e:	4908      	ldr	r1, [pc, #32]	@ (8000790 <Command_G1+0x50>)
 8000770:	4808      	ldr	r0, [pc, #32]	@ (8000794 <Command_G1+0x54>)
 8000772:	f003 fae7 	bl	8003d44 <HAL_UART_Transmit_IT>
	Stepper_Enable(&nema_17);
 8000776:	4808      	ldr	r0, [pc, #32]	@ (8000798 <Command_G1+0x58>)
 8000778:	f000 fadc 	bl	8000d34 <Stepper_Enable>
	Stepper_Start(&nema_17);
 800077c:	4806      	ldr	r0, [pc, #24]	@ (8000798 <Command_G1+0x58>)
 800077e:	f000 faf9 	bl	8000d74 <Stepper_Start>
}
 8000782:	bf00      	nop
 8000784:	3708      	adds	r7, #8
 8000786:	46bd      	mov	sp, r7
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	200001d0 	.word	0x200001d0
 8000790:	20000034 	.word	0x20000034
 8000794:	20000260 	.word	0x20000260
 8000798:	200000f4 	.word	0x200000f4

0800079c <Command_M203>:

void Command_M203(Command *command){
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
	// This command sets the travelling or working speed
	if (command->flag_id == 'T'){
 80007a4:	687b      	ldr	r3, [r7, #4]
 80007a6:	7f1b      	ldrb	r3, [r3, #28]
 80007a8:	2b54      	cmp	r3, #84	@ 0x54
 80007aa:	d109      	bne.n	80007c0 <Command_M203+0x24>
		// Modify travelling speed
		command->travelSpeed = command->flag_num;
 80007ac:	687b      	ldr	r3, [r7, #4]
 80007ae:	6a1a      	ldr	r2, [r3, #32]
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	629a      	str	r2, [r3, #40]	@ 0x28
		HAL_UART_Transmit_IT(&huart2, m203_message, sizeof(m203_message));
 80007b4:	2218      	movs	r2, #24
 80007b6:	490e      	ldr	r1, [pc, #56]	@ (80007f0 <Command_M203+0x54>)
 80007b8:	480e      	ldr	r0, [pc, #56]	@ (80007f4 <Command_M203+0x58>)
 80007ba:	f003 fac3 	bl	8003d44 <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart2, m203_message, sizeof(m203_message));
	}
	else {
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));
	}
}
 80007be:	e012      	b.n	80007e6 <Command_M203+0x4a>
	else if (command->flag_id == 'S'){
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	7f1b      	ldrb	r3, [r3, #28]
 80007c4:	2b53      	cmp	r3, #83	@ 0x53
 80007c6:	d109      	bne.n	80007dc <Command_M203+0x40>
		command->workSpeed = command->flag_num;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	6a1a      	ldr	r2, [r3, #32]
 80007cc:	687b      	ldr	r3, [r7, #4]
 80007ce:	62da      	str	r2, [r3, #44]	@ 0x2c
		HAL_UART_Transmit_IT(&huart2, m203_message, sizeof(m203_message));
 80007d0:	2218      	movs	r2, #24
 80007d2:	4907      	ldr	r1, [pc, #28]	@ (80007f0 <Command_M203+0x54>)
 80007d4:	4807      	ldr	r0, [pc, #28]	@ (80007f4 <Command_M203+0x58>)
 80007d6:	f003 fab5 	bl	8003d44 <HAL_UART_Transmit_IT>
}
 80007da:	e004      	b.n	80007e6 <Command_M203+0x4a>
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));
 80007dc:	2219      	movs	r2, #25
 80007de:	4906      	ldr	r1, [pc, #24]	@ (80007f8 <Command_M203+0x5c>)
 80007e0:	4804      	ldr	r0, [pc, #16]	@ (80007f4 <Command_M203+0x58>)
 80007e2:	f003 faaf 	bl	8003d44 <HAL_UART_Transmit_IT>
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	2000004c 	.word	0x2000004c
 80007f4:	20000260 	.word	0x20000260
 80007f8:	20000000 	.word	0x20000000

080007fc <Command_M204>:

void Command_M204(Command *command){
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
 8000802:	6078      	str	r0, [r7, #4]
	if (command->flag_id == 'T'){
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	7f1b      	ldrb	r3, [r3, #28]
 8000808:	2b54      	cmp	r3, #84	@ 0x54
 800080a:	d109      	bne.n	8000820 <Command_M204+0x24>
		// Modify traveling acceleration
		command->travelAcceleration = command->flag_num;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	6a1a      	ldr	r2, [r3, #32]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_UART_Transmit_IT(&huart2, m204_message, sizeof(m204_message));
 8000814:	2218      	movs	r2, #24
 8000816:	490e      	ldr	r1, [pc, #56]	@ (8000850 <Command_M204+0x54>)
 8000818:	480e      	ldr	r0, [pc, #56]	@ (8000854 <Command_M204+0x58>)
 800081a:	f003 fa93 	bl	8003d44 <HAL_UART_Transmit_IT>
	}
	else {
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));

	}
}
 800081e:	e012      	b.n	8000846 <Command_M204+0x4a>
	else if (command->flag_id == 'S'){
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	7f1b      	ldrb	r3, [r3, #28]
 8000824:	2b53      	cmp	r3, #83	@ 0x53
 8000826:	d109      	bne.n	800083c <Command_M204+0x40>
		command->workAcceleration = command->flag_num;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	6a1a      	ldr	r2, [r3, #32]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_UART_Transmit_IT(&huart2, m204_message, sizeof(m204_message));
 8000830:	2218      	movs	r2, #24
 8000832:	4907      	ldr	r1, [pc, #28]	@ (8000850 <Command_M204+0x54>)
 8000834:	4807      	ldr	r0, [pc, #28]	@ (8000854 <Command_M204+0x58>)
 8000836:	f003 fa85 	bl	8003d44 <HAL_UART_Transmit_IT>
}
 800083a:	e004      	b.n	8000846 <Command_M204+0x4a>
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));
 800083c:	2219      	movs	r2, #25
 800083e:	4906      	ldr	r1, [pc, #24]	@ (8000858 <Command_M204+0x5c>)
 8000840:	4804      	ldr	r0, [pc, #16]	@ (8000854 <Command_M204+0x58>)
 8000842:	f003 fa7f 	bl	8003d44 <HAL_UART_Transmit_IT>
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000064 	.word	0x20000064
 8000854:	20000260 	.word	0x20000260
 8000858:	20000000 	.word	0x20000000

0800085c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b08a      	sub	sp, #40	@ 0x28
 8000860:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 0314 	add.w	r3, r7, #20
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
 8000876:	4b47      	ldr	r3, [pc, #284]	@ (8000994 <MX_GPIO_Init+0x138>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087a:	4a46      	ldr	r2, [pc, #280]	@ (8000994 <MX_GPIO_Init+0x138>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	@ 0x30
 8000882:	4b44      	ldr	r3, [pc, #272]	@ (8000994 <MX_GPIO_Init+0x138>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	613b      	str	r3, [r7, #16]
 800088c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	60fb      	str	r3, [r7, #12]
 8000892:	4b40      	ldr	r3, [pc, #256]	@ (8000994 <MX_GPIO_Init+0x138>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000896:	4a3f      	ldr	r2, [pc, #252]	@ (8000994 <MX_GPIO_Init+0x138>)
 8000898:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800089c:	6313      	str	r3, [r2, #48]	@ 0x30
 800089e:	4b3d      	ldr	r3, [pc, #244]	@ (8000994 <MX_GPIO_Init+0x138>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008a6:	60fb      	str	r3, [r7, #12]
 80008a8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	60bb      	str	r3, [r7, #8]
 80008ae:	4b39      	ldr	r3, [pc, #228]	@ (8000994 <MX_GPIO_Init+0x138>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b2:	4a38      	ldr	r2, [pc, #224]	@ (8000994 <MX_GPIO_Init+0x138>)
 80008b4:	f043 0301 	orr.w	r3, r3, #1
 80008b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008ba:	4b36      	ldr	r3, [pc, #216]	@ (8000994 <MX_GPIO_Init+0x138>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008be:	f003 0301 	and.w	r3, r3, #1
 80008c2:	60bb      	str	r3, [r7, #8]
 80008c4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008c6:	2300      	movs	r3, #0
 80008c8:	607b      	str	r3, [r7, #4]
 80008ca:	4b32      	ldr	r3, [pc, #200]	@ (8000994 <MX_GPIO_Init+0x138>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ce:	4a31      	ldr	r2, [pc, #196]	@ (8000994 <MX_GPIO_Init+0x138>)
 80008d0:	f043 0302 	orr.w	r3, r3, #2
 80008d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008d6:	4b2f      	ldr	r3, [pc, #188]	@ (8000994 <MX_GPIO_Init+0x138>)
 80008d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008da:	f003 0302 	and.w	r3, r3, #2
 80008de:	607b      	str	r3, [r7, #4]
 80008e0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MS2_Pin|MS1_Pin, GPIO_PIN_RESET);
 80008e2:	2200      	movs	r2, #0
 80008e4:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 80008e8:	482b      	ldr	r0, [pc, #172]	@ (8000998 <MX_GPIO_Init+0x13c>)
 80008ea:	f001 fa15 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 80008ee:	2200      	movs	r2, #0
 80008f0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80008f4:	4829      	ldr	r0, [pc, #164]	@ (800099c <MX_GPIO_Init+0x140>)
 80008f6:	f001 fa0f 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ENABLE_Pin|DIR_Pin, GPIO_PIN_RESET);
 80008fa:	2200      	movs	r2, #0
 80008fc:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 8000900:	4827      	ldr	r0, [pc, #156]	@ (80009a0 <MX_GPIO_Init+0x144>)
 8000902:	f001 fa09 	bl	8001d18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000906:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800090a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800090c:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000910:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000912:	2300      	movs	r3, #0
 8000914:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000916:	f107 0314 	add.w	r3, r7, #20
 800091a:	4619      	mov	r1, r3
 800091c:	4820      	ldr	r0, [pc, #128]	@ (80009a0 <MX_GPIO_Init+0x144>)
 800091e:	f001 f867 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|MS2_Pin|MS1_Pin;
 8000922:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000926:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000928:	2301      	movs	r3, #1
 800092a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092c:	2300      	movs	r3, #0
 800092e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000930:	2300      	movs	r3, #0
 8000932:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000934:	f107 0314 	add.w	r3, r7, #20
 8000938:	4619      	mov	r1, r3
 800093a:	4817      	ldr	r0, [pc, #92]	@ (8000998 <MX_GPIO_Init+0x13c>)
 800093c:	f001 f858 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS3_Pin;
 8000940:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000944:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000946:	2301      	movs	r3, #1
 8000948:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094a:	2300      	movs	r3, #0
 800094c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800094e:	2300      	movs	r3, #0
 8000950:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MS3_GPIO_Port, &GPIO_InitStruct);
 8000952:	f107 0314 	add.w	r3, r7, #20
 8000956:	4619      	mov	r1, r3
 8000958:	4810      	ldr	r0, [pc, #64]	@ (800099c <MX_GPIO_Init+0x140>)
 800095a:	f001 f849 	bl	80019f0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENABLE_Pin|DIR_Pin;
 800095e:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000962:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000964:	2301      	movs	r3, #1
 8000966:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000968:	2300      	movs	r3, #0
 800096a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096c:	2300      	movs	r3, #0
 800096e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000970:	f107 0314 	add.w	r3, r7, #20
 8000974:	4619      	mov	r1, r3
 8000976:	480a      	ldr	r0, [pc, #40]	@ (80009a0 <MX_GPIO_Init+0x144>)
 8000978:	f001 f83a 	bl	80019f0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800097c:	2200      	movs	r2, #0
 800097e:	2100      	movs	r1, #0
 8000980:	2028      	movs	r0, #40	@ 0x28
 8000982:	f000 ff6c 	bl	800185e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000986:	2028      	movs	r0, #40	@ 0x28
 8000988:	f000 ff85 	bl	8001896 <HAL_NVIC_EnableIRQ>

}
 800098c:	bf00      	nop
 800098e:	3728      	adds	r7, #40	@ 0x28
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	40023800 	.word	0x40023800
 8000998:	40020000 	.word	0x40020000
 800099c:	40020400 	.word	0x40020400
 80009a0:	40020800 	.word	0x40020800

080009a4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009aa:	f000 fe0b 	bl	80015c4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ae:	f000 f851 	bl	8000a54 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009b2:	f7ff ff53 	bl	800085c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80009b6:	f000 fd61 	bl	800147c <MX_USART2_UART_Init>
  MX_TIM2_Init();
 80009ba:	f000 fbd1 	bl	8001160 <MX_TIM2_Init>
  MX_TIM3_Init();
 80009be:	f000 fc47 	bl	8001250 <MX_TIM3_Init>
  MX_TIM6_Init();
 80009c2:	f000 fc93 	bl	80012ec <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  // Reset interrupt flags before starting the timers
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 80009c6:	4b1a      	ldr	r3, [pc, #104]	@ (8000a30 <main+0x8c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	f06f 0201 	mvn.w	r2, #1
 80009ce:	611a      	str	r2, [r3, #16]

  // Start slave timer
  HAL_TIM_Base_Start_IT(&htim3);
 80009d0:	4817      	ldr	r0, [pc, #92]	@ (8000a30 <main+0x8c>)
 80009d2:	f002 f817 	bl	8002a04 <HAL_TIM_Base_Start_IT>

  // Create stepper instance
  Stepper_Init(&nema_17, 0.05, GPIOC, GPIO_PIN_10, &htim2, GPIOA, GPIO_PIN_0, GPIOC, GPIO_PIN_12, GPIOA, GPIO_PIN_12, GPIOA, GPIO_PIN_11, GPIOB, GPIO_PIN_12);
 80009d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009da:	9309      	str	r3, [sp, #36]	@ 0x24
 80009dc:	4b15      	ldr	r3, [pc, #84]	@ (8000a34 <main+0x90>)
 80009de:	9308      	str	r3, [sp, #32]
 80009e0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009e4:	9307      	str	r3, [sp, #28]
 80009e6:	4b14      	ldr	r3, [pc, #80]	@ (8000a38 <main+0x94>)
 80009e8:	9306      	str	r3, [sp, #24]
 80009ea:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009ee:	9305      	str	r3, [sp, #20]
 80009f0:	4b11      	ldr	r3, [pc, #68]	@ (8000a38 <main+0x94>)
 80009f2:	9304      	str	r3, [sp, #16]
 80009f4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009f8:	9303      	str	r3, [sp, #12]
 80009fa:	4b10      	ldr	r3, [pc, #64]	@ (8000a3c <main+0x98>)
 80009fc:	9302      	str	r3, [sp, #8]
 80009fe:	2301      	movs	r3, #1
 8000a00:	9301      	str	r3, [sp, #4]
 8000a02:	4b0d      	ldr	r3, [pc, #52]	@ (8000a38 <main+0x94>)
 8000a04:	9300      	str	r3, [sp, #0]
 8000a06:	4b0e      	ldr	r3, [pc, #56]	@ (8000a40 <main+0x9c>)
 8000a08:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000a0c:	490b      	ldr	r1, [pc, #44]	@ (8000a3c <main+0x98>)
 8000a0e:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 8000a44 <main+0xa0>
 8000a12:	480d      	ldr	r0, [pc, #52]	@ (8000a48 <main+0xa4>)
 8000a14:	f000 f924 	bl	8000c60 <Stepper_Init>

  // Start uart connection
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000a18:	2201      	movs	r2, #1
 8000a1a:	490c      	ldr	r1, [pc, #48]	@ (8000a4c <main+0xa8>)
 8000a1c:	480c      	ldr	r0, [pc, #48]	@ (8000a50 <main+0xac>)
 8000a1e:	f003 f9c7 	bl	8003db0 <HAL_UART_Receive_IT>

  // DELETE
  Stepper_SetMicroStep(&nema_17, QUARTER_STEP);
 8000a22:	2104      	movs	r1, #4
 8000a24:	4808      	ldr	r0, [pc, #32]	@ (8000a48 <main+0xa4>)
 8000a26:	f000 f9cd 	bl	8000dc4 <Stepper_SetMicroStep>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000a2a:	bf00      	nop
 8000a2c:	e7fd      	b.n	8000a2a <main+0x86>
 8000a2e:	bf00      	nop
 8000a30:	200001d0 	.word	0x200001d0
 8000a34:	40020400 	.word	0x40020400
 8000a38:	40020000 	.word	0x40020000
 8000a3c:	40020800 	.word	0x40020800
 8000a40:	20000188 	.word	0x20000188
 8000a44:	3d4ccccd 	.word	0x3d4ccccd
 8000a48:	200000f4 	.word	0x200000f4
 8000a4c:	2000016c 	.word	0x2000016c
 8000a50:	20000260 	.word	0x20000260

08000a54 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	@ 0x50
 8000a58:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a5a:	f107 031c 	add.w	r3, r7, #28
 8000a5e:	2234      	movs	r2, #52	@ 0x34
 8000a60:	2100      	movs	r1, #0
 8000a62:	4618      	mov	r0, r3
 8000a64:	f004 f8f4 	bl	8004c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a68:	f107 0308 	add.w	r3, r7, #8
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	601a      	str	r2, [r3, #0]
 8000a70:	605a      	str	r2, [r3, #4]
 8000a72:	609a      	str	r2, [r3, #8]
 8000a74:	60da      	str	r2, [r3, #12]
 8000a76:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a78:	2300      	movs	r3, #0
 8000a7a:	607b      	str	r3, [r7, #4]
 8000a7c:	4b2a      	ldr	r3, [pc, #168]	@ (8000b28 <SystemClock_Config+0xd4>)
 8000a7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a80:	4a29      	ldr	r2, [pc, #164]	@ (8000b28 <SystemClock_Config+0xd4>)
 8000a82:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000a86:	6413      	str	r3, [r2, #64]	@ 0x40
 8000a88:	4b27      	ldr	r3, [pc, #156]	@ (8000b28 <SystemClock_Config+0xd4>)
 8000a8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000a8c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000a94:	2300      	movs	r3, #0
 8000a96:	603b      	str	r3, [r7, #0]
 8000a98:	4b24      	ldr	r3, [pc, #144]	@ (8000b2c <SystemClock_Config+0xd8>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000aa0:	4a22      	ldr	r2, [pc, #136]	@ (8000b2c <SystemClock_Config+0xd8>)
 8000aa2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aa6:	6013      	str	r3, [r2, #0]
 8000aa8:	4b20      	ldr	r3, [pc, #128]	@ (8000b2c <SystemClock_Config+0xd8>)
 8000aaa:	681b      	ldr	r3, [r3, #0]
 8000aac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000ab0:	603b      	str	r3, [r7, #0]
 8000ab2:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000ab4:	2302      	movs	r3, #2
 8000ab6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000abc:	2310      	movs	r3, #16
 8000abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ac0:	2302      	movs	r3, #2
 8000ac2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000ac8:	2310      	movs	r3, #16
 8000aca:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000acc:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000ad0:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000ada:	2302      	movs	r3, #2
 8000adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ade:	f107 031c 	add.w	r3, r7, #28
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f001 fca0 	bl	8002428 <HAL_RCC_OscConfig>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000aee:	f000 f8b1 	bl	8000c54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000af2:	230f      	movs	r3, #15
 8000af4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000af6:	2302      	movs	r3, #2
 8000af8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000afe:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b02:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b04:	2300      	movs	r3, #0
 8000b06:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b08:	f107 0308 	add.w	r3, r7, #8
 8000b0c:	2102      	movs	r1, #2
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f001 f940 	bl	8001d94 <HAL_RCC_ClockConfig>
 8000b14:	4603      	mov	r3, r0
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d001      	beq.n	8000b1e <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000b1a:	f000 f89b 	bl	8000c54 <Error_Handler>
  }
}
 8000b1e:	bf00      	nop
 8000b20:	3750      	adds	r7, #80	@ 0x50
 8000b22:	46bd      	mov	sp, r7
 8000b24:	bd80      	pop	{r7, pc}
 8000b26:	bf00      	nop
 8000b28:	40023800 	.word	0x40023800
 8000b2c:	40007000 	.word	0x40007000

08000b30 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a18      	ldr	r2, [pc, #96]	@ (8000ba0 <HAL_UART_RxCpltCallback+0x70>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d129      	bne.n	8000b96 <HAL_UART_RxCpltCallback+0x66>

		if (*(rx_data+cnt) == '\r'){
 8000b42:	4b18      	ldr	r3, [pc, #96]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x74>)
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	461a      	mov	r2, r3
 8000b48:	4b17      	ldr	r3, [pc, #92]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x78>)
 8000b4a:	4413      	add	r3, r2
 8000b4c:	781b      	ldrb	r3, [r3, #0]
 8000b4e:	2b0d      	cmp	r3, #13
 8000b50:	d111      	bne.n	8000b76 <HAL_UART_RxCpltCallback+0x46>
			Command_Init(&g_command, rx_data);
 8000b52:	4915      	ldr	r1, [pc, #84]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x78>)
 8000b54:	4815      	ldr	r0, [pc, #84]	@ (8000bac <HAL_UART_RxCpltCallback+0x7c>)
 8000b56:	f7ff fd2b 	bl	80005b0 <Command_Init>
			Command_Execute(&g_command);
 8000b5a:	4814      	ldr	r0, [pc, #80]	@ (8000bac <HAL_UART_RxCpltCallback+0x7c>)
 8000b5c:	f7ff fd80 	bl	8000660 <Command_Execute>
			cnt = -1;
 8000b60:	4b10      	ldr	r3, [pc, #64]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x74>)
 8000b62:	22ff      	movs	r2, #255	@ 0xff
 8000b64:	701a      	strb	r2, [r3, #0]
			memset(rx_data,0,sizeof(rx_data));
 8000b66:	2214      	movs	r2, #20
 8000b68:	2100      	movs	r1, #0
 8000b6a:	480f      	ldr	r0, [pc, #60]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x78>)
 8000b6c:	f004 f870 	bl	8004c50 <memset>
			Command_Clear(&g_command);
 8000b70:	480e      	ldr	r0, [pc, #56]	@ (8000bac <HAL_UART_RxCpltCallback+0x7c>)
 8000b72:	f7ff fd5b 	bl	800062c <Command_Clear>
		}
		cnt++;
 8000b76:	4b0b      	ldr	r3, [pc, #44]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x74>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	b2da      	uxtb	r2, r3
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x74>)
 8000b80:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, rx_data+cnt, 1);
 8000b82:	4b08      	ldr	r3, [pc, #32]	@ (8000ba4 <HAL_UART_RxCpltCallback+0x74>)
 8000b84:	781b      	ldrb	r3, [r3, #0]
 8000b86:	461a      	mov	r2, r3
 8000b88:	4b07      	ldr	r3, [pc, #28]	@ (8000ba8 <HAL_UART_RxCpltCallback+0x78>)
 8000b8a:	4413      	add	r3, r2
 8000b8c:	2201      	movs	r2, #1
 8000b8e:	4619      	mov	r1, r3
 8000b90:	4807      	ldr	r0, [pc, #28]	@ (8000bb0 <HAL_UART_RxCpltCallback+0x80>)
 8000b92:	f003 f90d 	bl	8003db0 <HAL_UART_Receive_IT>
	}
}
 8000b96:	bf00      	nop
 8000b98:	3708      	adds	r7, #8
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40004400 	.word	0x40004400
 8000ba4:	20000180 	.word	0x20000180
 8000ba8:	2000016c 	.word	0x2000016c
 8000bac:	20000130 	.word	0x20000130
 8000bb0:	20000260 	.word	0x20000260

08000bb4 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]

	// tim3 handles distances
	if (htim->Instance == TIM3){
 8000bbc:	687b      	ldr	r3, [r7, #4]
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8000c38 <HAL_TIM_PeriodElapsedCallback+0x84>)
 8000bc2:	4293      	cmp	r3, r2
 8000bc4:	d105      	bne.n	8000bd2 <HAL_TIM_PeriodElapsedCallback+0x1e>
		Stepper_Stop(&nema_17);
 8000bc6:	481d      	ldr	r0, [pc, #116]	@ (8000c3c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bc8:	f000 f8ee 	bl	8000da8 <Stepper_Stop>
		Stepper_Disable(&nema_17);
 8000bcc:	481b      	ldr	r0, [pc, #108]	@ (8000c3c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bce:	f000 f8c1 	bl	8000d54 <Stepper_Disable>
	}

	if (htim->Instance == TIM6){
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a1a      	ldr	r2, [pc, #104]	@ (8000c40 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d129      	bne.n	8000c30 <HAL_TIM_PeriodElapsedCallback+0x7c>

		if (nema_17.speed < g_command.speed){
 8000bdc:	4b17      	ldr	r3, [pc, #92]	@ (8000c3c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000bde:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8000be2:	4b18      	ldr	r3, [pc, #96]	@ (8000c44 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000be4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000be6:	ee07 3a90 	vmov	s15, r3
 8000bea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000bee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000bf6:	d50f      	bpl.n	8000c18 <HAL_TIM_PeriodElapsedCallback+0x64>
			// The division by 100 is due to 100 interrupts per sec
			Stepper_SpeedUp(&nema_17, (float) g_command.acceleration / 100);
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <HAL_TIM_PeriodElapsedCallback+0x90>)
 8000bfa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000bfc:	ee07 3a90 	vmov	s15, r3
 8000c00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000c04:	eddf 6a10 	vldr	s13, [pc, #64]	@ 8000c48 <HAL_TIM_PeriodElapsedCallback+0x94>
 8000c08:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000c0c:	eeb0 0a47 	vmov.f32	s0, s14
 8000c10:	480a      	ldr	r0, [pc, #40]	@ (8000c3c <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000c12:	f000 f9c9 	bl	8000fa8 <Stepper_SpeedUp>
			HAL_TIM_Base_Stop_IT(&htim6);
			__HAL_TIM_SET_COUNTER(&htim6, 0);
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
		}
	}
}
 8000c16:	e00b      	b.n	8000c30 <HAL_TIM_PeriodElapsedCallback+0x7c>
			HAL_TIM_Base_Stop_IT(&htim6);
 8000c18:	480c      	ldr	r0, [pc, #48]	@ (8000c4c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000c1a:	f001 ff63 	bl	8002ae4 <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8000c4c <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	2200      	movs	r2, #0
 8000c24:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000c26:	2201      	movs	r2, #1
 8000c28:	2120      	movs	r1, #32
 8000c2a:	4809      	ldr	r0, [pc, #36]	@ (8000c50 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000c2c:	f001 f874 	bl	8001d18 <HAL_GPIO_WritePin>
}
 8000c30:	bf00      	nop
 8000c32:	3708      	adds	r7, #8
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	40000400 	.word	0x40000400
 8000c3c:	200000f4 	.word	0x200000f4
 8000c40:	40001000 	.word	0x40001000
 8000c44:	20000130 	.word	0x20000130
 8000c48:	42c80000 	.word	0x42c80000
 8000c4c:	20000218 	.word	0x20000218
 8000c50:	40020000 	.word	0x40020000

08000c54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
}
 8000c5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5c:	bf00      	nop
 8000c5e:	e7fd      	b.n	8000c5c <Error_Handler+0x8>

08000c60 <Stepper_Init>:

extern TIM_HandleTypeDef htim6;


void Stepper_Init(Stepper* stepper, float stepDist, GPIO_TypeDef* enablePort, uint16_t enablePin, TIM_HandleTypeDef* htim, GPIO_TypeDef* stepPort, uint16_t stepPin, GPIO_TypeDef* dirPort, uint16_t dirPin,
		GPIO_TypeDef* ms1Port, uint16_t ms1Pin, GPIO_TypeDef* ms2Port, uint16_t ms2Pin, GPIO_TypeDef* ms3Port, uint16_t ms3Pin){
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b086      	sub	sp, #24
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6178      	str	r0, [r7, #20]
 8000c68:	ed87 0a04 	vstr	s0, [r7, #16]
 8000c6c:	60f9      	str	r1, [r7, #12]
 8000c6e:	607b      	str	r3, [r7, #4]
 8000c70:	4613      	mov	r3, r2
 8000c72:	817b      	strh	r3, [r7, #10]
	stepper->htim = htim;
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	687a      	ldr	r2, [r7, #4]
 8000c78:	601a      	str	r2, [r3, #0]
	stepper->stepDist = stepDist;
 8000c7a:	697b      	ldr	r3, [r7, #20]
 8000c7c:	693a      	ldr	r2, [r7, #16]
 8000c7e:	605a      	str	r2, [r3, #4]
	stepper->enablePort = enablePort;
 8000c80:	697b      	ldr	r3, [r7, #20]
 8000c82:	68fa      	ldr	r2, [r7, #12]
 8000c84:	609a      	str	r2, [r3, #8]
	stepper->enablePin = enablePin;
 8000c86:	697b      	ldr	r3, [r7, #20]
 8000c88:	897a      	ldrh	r2, [r7, #10]
 8000c8a:	819a      	strh	r2, [r3, #12]
	stepper->stepPort = stepPort;
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	6a3a      	ldr	r2, [r7, #32]
 8000c90:	611a      	str	r2, [r3, #16]
	stepper->stepPin = stepPin;
 8000c92:	697b      	ldr	r3, [r7, #20]
 8000c94:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000c96:	829a      	strh	r2, [r3, #20]
	stepper->dirPort = dirPort;
 8000c98:	697b      	ldr	r3, [r7, #20]
 8000c9a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000c9c:	619a      	str	r2, [r3, #24]
	stepper->dirPin = dirPin;
 8000c9e:	697b      	ldr	r3, [r7, #20]
 8000ca0:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000ca2:	839a      	strh	r2, [r3, #28]
	stepper->ms1Port = ms1Port;
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000ca8:	621a      	str	r2, [r3, #32]
	stepper->ms1Pin = ms1Pin;
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8000cae:	849a      	strh	r2, [r3, #36]	@ 0x24
	stepper->ms2Port = ms2Port;
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000cb4:	629a      	str	r2, [r3, #40]	@ 0x28
	stepper->ms2Pin = ms2Pin;
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8000cba:	859a      	strh	r2, [r3, #44]	@ 0x2c
	stepper->ms3Port = ms3Port;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000cc0:	631a      	str	r2, [r3, #48]	@ 0x30
	stepper->ms3Pin = ms3Pin;
 8000cc2:	697b      	ldr	r3, [r7, #20]
 8000cc4:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8000cc8:	869a      	strh	r2, [r3, #52]	@ 0x34

	// Set default not enabled (NOT ENABLED = HIGH)
	HAL_GPIO_WritePin(enablePort, enablePin, GPIO_PIN_SET);
 8000cca:	897b      	ldrh	r3, [r7, #10]
 8000ccc:	2201      	movs	r2, #1
 8000cce:	4619      	mov	r1, r3
 8000cd0:	68f8      	ldr	r0, [r7, #12]
 8000cd2:	f001 f821 	bl	8001d18 <HAL_GPIO_WritePin>

	// Set default speed
	stepper->htim->Instance->ARR = 839999;
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4a13      	ldr	r2, [pc, #76]	@ (8000d2c <Stepper_Init+0xcc>)
 8000cde:	62da      	str	r2, [r3, #44]	@ 0x2c
	stepper->htim->Instance->PSC = 0;
 8000ce0:	697b      	ldr	r3, [r7, #20]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	681b      	ldr	r3, [r3, #0]
 8000ce6:	2200      	movs	r2, #0
 8000ce8:	629a      	str	r2, [r3, #40]	@ 0x28
	stepper->speed = (float) clk_freq*stepper->stepDist/((stepper->htim->Instance->ARR+1)*(stepper->htim->Instance->PSC+1));
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	edd3 7a01 	vldr	s15, [r3, #4]
 8000cf0:	ed9f 7a0f 	vldr	s14, [pc, #60]	@ 8000d30 <Stepper_Init+0xd0>
 8000cf4:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000cf8:	697b      	ldr	r3, [r7, #20]
 8000cfa:	681b      	ldr	r3, [r3, #0]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d00:	3301      	adds	r3, #1
 8000d02:	697a      	ldr	r2, [r7, #20]
 8000d04:	6812      	ldr	r2, [r2, #0]
 8000d06:	6812      	ldr	r2, [r2, #0]
 8000d08:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000d0a:	3201      	adds	r2, #1
 8000d0c:	fb02 f303 	mul.w	r3, r2, r3
 8000d10:	ee07 3a90 	vmov	s15, r3
 8000d14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d18:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d1c:	697b      	ldr	r3, [r7, #20]
 8000d1e:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

}
 8000d22:	bf00      	nop
 8000d24:	3718      	adds	r7, #24
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	000cd13f 	.word	0x000cd13f
 8000d30:	4ca037a0 	.word	0x4ca037a0

08000d34 <Stepper_Enable>:

void Stepper_Enable(Stepper* stepper){
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b082      	sub	sp, #8
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(stepper->enablePort, stepper->enablePin, GPIO_PIN_RESET);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	6898      	ldr	r0, [r3, #8]
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	899b      	ldrh	r3, [r3, #12]
 8000d44:	2200      	movs	r2, #0
 8000d46:	4619      	mov	r1, r3
 8000d48:	f000 ffe6 	bl	8001d18 <HAL_GPIO_WritePin>
}
 8000d4c:	bf00      	nop
 8000d4e:	3708      	adds	r7, #8
 8000d50:	46bd      	mov	sp, r7
 8000d52:	bd80      	pop	{r7, pc}

08000d54 <Stepper_Disable>:

void Stepper_Disable(Stepper *stepper){
 8000d54:	b580      	push	{r7, lr}
 8000d56:	b082      	sub	sp, #8
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(stepper->enablePort, stepper->enablePin, GPIO_PIN_SET);
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	6898      	ldr	r0, [r3, #8]
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	899b      	ldrh	r3, [r3, #12]
 8000d64:	2201      	movs	r2, #1
 8000d66:	4619      	mov	r1, r3
 8000d68:	f000 ffd6 	bl	8001d18 <HAL_GPIO_WritePin>
}
 8000d6c:	bf00      	nop
 8000d6e:	3708      	adds	r7, #8
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}

08000d74 <Stepper_Start>:

void Stepper_Start(Stepper* stepper){
 8000d74:	b580      	push	{r7, lr}
 8000d76:	b082      	sub	sp, #8
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	6078      	str	r0, [r7, #4]
	// Start at 0 speed
	Stepper_SetSpeed(stepper, 0);
 8000d7c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8000da0 <Stepper_Start+0x2c>
 8000d80:	6878      	ldr	r0, [r7, #4]
 8000d82:	f000 f8b5 	bl	8000ef0 <Stepper_SetSpeed>

	// Start PWM
	HAL_TIM_PWM_Start(stepper->htim, TIM_CHANNEL_1);
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	681b      	ldr	r3, [r3, #0]
 8000d8a:	2100      	movs	r1, #0
 8000d8c:	4618      	mov	r0, r3
 8000d8e:	f001 ff31 	bl	8002bf4 <HAL_TIM_PWM_Start>

	// Start timer responsible for accelerating the stepper
	HAL_TIM_Base_Start_IT(&htim6);
 8000d92:	4804      	ldr	r0, [pc, #16]	@ (8000da4 <Stepper_Start+0x30>)
 8000d94:	f001 fe36 	bl	8002a04 <HAL_TIM_Base_Start_IT>

}
 8000d98:	bf00      	nop
 8000d9a:	3708      	adds	r7, #8
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	bd80      	pop	{r7, pc}
 8000da0:	00000000 	.word	0x00000000
 8000da4:	20000218 	.word	0x20000218

08000da8 <Stepper_Stop>:

void Stepper_Stop(Stepper* stepper){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b082      	sub	sp, #8
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6078      	str	r0, [r7, #4]
	HAL_TIM_PWM_Stop(stepper->htim, TIM_CHANNEL_1);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f001 ffe4 	bl	8002d84 <HAL_TIM_PWM_Stop>
}
 8000dbc:	bf00      	nop
 8000dbe:	3708      	adds	r7, #8
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <Stepper_SetMicroStep>:

void Stepper_SetDirection(Stepper* stepper, Direction direction){
	HAL_GPIO_WritePin(stepper->dirPort, stepper->dirPin, direction);
}

void Stepper_SetMicroStep(Stepper* stepper, MicrosteppingMode divider){
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b082      	sub	sp, #8
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	70fb      	strb	r3, [r7, #3]
	switch (divider){
 8000dd0:	78fb      	ldrb	r3, [r7, #3]
 8000dd2:	3b01      	subs	r3, #1
 8000dd4:	2b0f      	cmp	r3, #15
 8000dd6:	f200 8082 	bhi.w	8000ede <Stepper_SetMicroStep+0x11a>
 8000dda:	a201      	add	r2, pc, #4	@ (adr r2, 8000de0 <Stepper_SetMicroStep+0x1c>)
 8000ddc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000de0:	08000e21 	.word	0x08000e21
 8000de4:	08000e47 	.word	0x08000e47
 8000de8:	08000edf 	.word	0x08000edf
 8000dec:	08000e6d 	.word	0x08000e6d
 8000df0:	08000edf 	.word	0x08000edf
 8000df4:	08000edf 	.word	0x08000edf
 8000df8:	08000edf 	.word	0x08000edf
 8000dfc:	08000e93 	.word	0x08000e93
 8000e00:	08000edf 	.word	0x08000edf
 8000e04:	08000edf 	.word	0x08000edf
 8000e08:	08000edf 	.word	0x08000edf
 8000e0c:	08000edf 	.word	0x08000edf
 8000e10:	08000edf 	.word	0x08000edf
 8000e14:	08000edf 	.word	0x08000edf
 8000e18:	08000edf 	.word	0x08000edf
 8000e1c:	08000eb9 	.word	0x08000eb9

	case FULL_STEP:
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET);
 8000e20:	2200      	movs	r2, #0
 8000e22:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e26:	4830      	ldr	r0, [pc, #192]	@ (8000ee8 <Stepper_SetMicroStep+0x124>)
 8000e28:	f000 ff76 	bl	8001d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_RESET);
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e32:	482d      	ldr	r0, [pc, #180]	@ (8000ee8 <Stepper_SetMicroStep+0x124>)
 8000e34:	f000 ff70 	bl	8001d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 8000e38:	2200      	movs	r2, #0
 8000e3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e3e:	482b      	ldr	r0, [pc, #172]	@ (8000eec <Stepper_SetMicroStep+0x128>)
 8000e40:	f000 ff6a 	bl	8001d18 <HAL_GPIO_WritePin>
		break;
 8000e44:	e04c      	b.n	8000ee0 <Stepper_SetMicroStep+0x11c>
	case HALF_STEP:
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_SET);
 8000e46:	2201      	movs	r2, #1
 8000e48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e4c:	4826      	ldr	r0, [pc, #152]	@ (8000ee8 <Stepper_SetMicroStep+0x124>)
 8000e4e:	f000 ff63 	bl	8001d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_RESET);
 8000e52:	2200      	movs	r2, #0
 8000e54:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e58:	4823      	ldr	r0, [pc, #140]	@ (8000ee8 <Stepper_SetMicroStep+0x124>)
 8000e5a:	f000 ff5d 	bl	8001d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 8000e5e:	2200      	movs	r2, #0
 8000e60:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e64:	4821      	ldr	r0, [pc, #132]	@ (8000eec <Stepper_SetMicroStep+0x128>)
 8000e66:	f000 ff57 	bl	8001d18 <HAL_GPIO_WritePin>
		break;
 8000e6a:	e039      	b.n	8000ee0 <Stepper_SetMicroStep+0x11c>
	case QUARTER_STEP:
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e72:	481d      	ldr	r0, [pc, #116]	@ (8000ee8 <Stepper_SetMicroStep+0x124>)
 8000e74:	f000 ff50 	bl	8001d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 8000e78:	2201      	movs	r2, #1
 8000e7a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000e7e:	481a      	ldr	r0, [pc, #104]	@ (8000ee8 <Stepper_SetMicroStep+0x124>)
 8000e80:	f000 ff4a 	bl	8001d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 8000e84:	2200      	movs	r2, #0
 8000e86:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e8a:	4818      	ldr	r0, [pc, #96]	@ (8000eec <Stepper_SetMicroStep+0x128>)
 8000e8c:	f000 ff44 	bl	8001d18 <HAL_GPIO_WritePin>
		break;
 8000e90:	e026      	b.n	8000ee0 <Stepper_SetMicroStep+0x11c>
	case EIGHTH_STEP:
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_SET);
 8000e92:	2201      	movs	r2, #1
 8000e94:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e98:	4813      	ldr	r0, [pc, #76]	@ (8000ee8 <Stepper_SetMicroStep+0x124>)
 8000e9a:	f000 ff3d 	bl	8001d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 8000e9e:	2201      	movs	r2, #1
 8000ea0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000ea4:	4810      	ldr	r0, [pc, #64]	@ (8000ee8 <Stepper_SetMicroStep+0x124>)
 8000ea6:	f000 ff37 	bl	8001d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 8000eaa:	2200      	movs	r2, #0
 8000eac:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000eb0:	480e      	ldr	r0, [pc, #56]	@ (8000eec <Stepper_SetMicroStep+0x128>)
 8000eb2:	f000 ff31 	bl	8001d18 <HAL_GPIO_WritePin>
		break;
 8000eb6:	e013      	b.n	8000ee0 <Stepper_SetMicroStep+0x11c>
	case SIXTEENTH_STEP:
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_SET);
 8000eb8:	2201      	movs	r2, #1
 8000eba:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ebe:	480a      	ldr	r0, [pc, #40]	@ (8000ee8 <Stepper_SetMicroStep+0x124>)
 8000ec0:	f000 ff2a 	bl	8001d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 8000ec4:	2201      	movs	r2, #1
 8000ec6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000eca:	4807      	ldr	r0, [pc, #28]	@ (8000ee8 <Stepper_SetMicroStep+0x124>)
 8000ecc:	f000 ff24 	bl	8001d18 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_SET);
 8000ed0:	2201      	movs	r2, #1
 8000ed2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ed6:	4805      	ldr	r0, [pc, #20]	@ (8000eec <Stepper_SetMicroStep+0x128>)
 8000ed8:	f000 ff1e 	bl	8001d18 <HAL_GPIO_WritePin>
		break;
 8000edc:	e000      	b.n	8000ee0 <Stepper_SetMicroStep+0x11c>
	default:
		break;
 8000ede:	bf00      	nop
	}
}
 8000ee0:	bf00      	nop
 8000ee2:	3708      	adds	r7, #8
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bd80      	pop	{r7, pc}
 8000ee8:	40020000 	.word	0x40020000
 8000eec:	40020400 	.word	0x40020400

08000ef0 <Stepper_SetSpeed>:

void Stepper_SetSpeed(Stepper* stepper, float speed){
 8000ef0:	b480      	push	{r7}
 8000ef2:	b083      	sub	sp, #12
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
 8000ef8:	ed87 0a00 	vstr	s0, [r7]
	stepper->speed = speed;
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	683a      	ldr	r2, [r7, #0]
 8000f00:	639a      	str	r2, [r3, #56]	@ 0x38
	// resetting the CNT to avoid CNT>ARR when speeding up (ARR decreases)
	__HAL_TIM_SET_COUNTER(stepper->htim,0);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2200      	movs	r2, #0
 8000f0a:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_AUTORELOAD(stepper->htim, (uint32_t) clk_freq*stepper->stepDist/(stepper->speed*(stepper->htim->Instance->PSC+1))-1);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f12:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8000fa4 <Stepper_SetSpeed+0xb4>
 8000f16:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	681b      	ldr	r3, [r3, #0]
 8000f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f28:	3301      	adds	r3, #1
 8000f2a:	ee07 3a90 	vmov	s15, r3
 8000f2e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f32:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f36:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f3a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f3e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	681b      	ldr	r3, [r3, #0]
 8000f48:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f4c:	ee17 2a90 	vmov	r2, s15
 8000f50:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	edd3 7a01 	vldr	s15, [r3, #4]
 8000f58:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8000fa4 <Stepper_SetSpeed+0xb4>
 8000f5c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8000f66:	687b      	ldr	r3, [r7, #4]
 8000f68:	681b      	ldr	r3, [r3, #0]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000f6e:	3301      	adds	r3, #1
 8000f70:	ee07 3a90 	vmov	s15, r3
 8000f74:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8000f78:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000f7c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8000f84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000f90:	ee17 2a90 	vmov	r2, s15
 8000f94:	60da      	str	r2, [r3, #12]
}
 8000f96:	bf00      	nop
 8000f98:	370c      	adds	r7, #12
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	4ca037a0 	.word	0x4ca037a0

08000fa8 <Stepper_SpeedUp>:

void Stepper_SpeedUp(Stepper *stepper, float deltaSpeed){
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b082      	sub	sp, #8
 8000fac:	af00      	add	r7, sp, #0
 8000fae:	6078      	str	r0, [r7, #4]
 8000fb0:	ed87 0a00 	vstr	s0, [r7]
	Stepper_SetSpeed(stepper, stepper->speed + deltaSpeed);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8000fba:	edd7 7a00 	vldr	s15, [r7]
 8000fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000fc2:	eeb0 0a67 	vmov.f32	s0, s15
 8000fc6:	6878      	ldr	r0, [r7, #4]
 8000fc8:	f7ff ff92 	bl	8000ef0 <Stepper_SetSpeed>
}
 8000fcc:	bf00      	nop
 8000fce:	3708      	adds	r7, #8
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b10      	ldr	r3, [pc, #64]	@ (8001020 <HAL_MspInit+0x4c>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	@ (8001020 <HAL_MspInit+0x4c>)
 8000fe4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000fe8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000fea:	4b0d      	ldr	r3, [pc, #52]	@ (8001020 <HAL_MspInit+0x4c>)
 8000fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000fee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff6:	2300      	movs	r3, #0
 8000ff8:	603b      	str	r3, [r7, #0]
 8000ffa:	4b09      	ldr	r3, [pc, #36]	@ (8001020 <HAL_MspInit+0x4c>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ffe:	4a08      	ldr	r2, [pc, #32]	@ (8001020 <HAL_MspInit+0x4c>)
 8001000:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001004:	6413      	str	r3, [r2, #64]	@ 0x40
 8001006:	4b06      	ldr	r3, [pc, #24]	@ (8001020 <HAL_MspInit+0x4c>)
 8001008:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800100a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800100e:	603b      	str	r3, [r7, #0]
 8001010:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001012:	2007      	movs	r0, #7
 8001014:	f000 fc18 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001018:	bf00      	nop
 800101a:	3708      	adds	r7, #8
 800101c:	46bd      	mov	sp, r7
 800101e:	bd80      	pop	{r7, pc}
 8001020:	40023800 	.word	0x40023800

08001024 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001028:	bf00      	nop
 800102a:	e7fd      	b.n	8001028 <NMI_Handler+0x4>

0800102c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800102c:	b480      	push	{r7}
 800102e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001030:	bf00      	nop
 8001032:	e7fd      	b.n	8001030 <HardFault_Handler+0x4>

08001034 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001034:	b480      	push	{r7}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001038:	bf00      	nop
 800103a:	e7fd      	b.n	8001038 <MemManage_Handler+0x4>

0800103c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800103c:	b480      	push	{r7}
 800103e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001040:	bf00      	nop
 8001042:	e7fd      	b.n	8001040 <BusFault_Handler+0x4>

08001044 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001044:	b480      	push	{r7}
 8001046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001048:	bf00      	nop
 800104a:	e7fd      	b.n	8001048 <UsageFault_Handler+0x4>

0800104c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800104c:	b480      	push	{r7}
 800104e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001050:	bf00      	nop
 8001052:	46bd      	mov	sp, r7
 8001054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001058:	4770      	bx	lr

0800105a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800105a:	b480      	push	{r7}
 800105c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800105e:	bf00      	nop
 8001060:	46bd      	mov	sp, r7
 8001062:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001066:	4770      	bx	lr

08001068 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800106c:	bf00      	nop
 800106e:	46bd      	mov	sp, r7
 8001070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001074:	4770      	bx	lr

08001076 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800107a:	f000 faf5 	bl	8001668 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
	...

08001084 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001088:	4802      	ldr	r0, [pc, #8]	@ (8001094 <TIM3_IRQHandler+0x10>)
 800108a:	f001 feeb 	bl	8002e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800108e:	bf00      	nop
 8001090:	bd80      	pop	{r7, pc}
 8001092:	bf00      	nop
 8001094:	200001d0 	.word	0x200001d0

08001098 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001098:	b580      	push	{r7, lr}
 800109a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800109c:	4802      	ldr	r0, [pc, #8]	@ (80010a8 <USART2_IRQHandler+0x10>)
 800109e:	f002 fead 	bl	8003dfc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80010a2:	bf00      	nop
 80010a4:	bd80      	pop	{r7, pc}
 80010a6:	bf00      	nop
 80010a8:	20000260 	.word	0x20000260

080010ac <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 80010b0:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 80010b4:	f000 fe4a 	bl	8001d4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80010b8:	bf00      	nop
 80010ba:	bd80      	pop	{r7, pc}

080010bc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010c0:	4802      	ldr	r0, [pc, #8]	@ (80010cc <TIM6_DAC_IRQHandler+0x10>)
 80010c2:	f001 fecf 	bl	8002e64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010c6:	bf00      	nop
 80010c8:	bd80      	pop	{r7, pc}
 80010ca:	bf00      	nop
 80010cc:	20000218 	.word	0x20000218

080010d0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b086      	sub	sp, #24
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80010d8:	4a14      	ldr	r2, [pc, #80]	@ (800112c <_sbrk+0x5c>)
 80010da:	4b15      	ldr	r3, [pc, #84]	@ (8001130 <_sbrk+0x60>)
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80010e0:	697b      	ldr	r3, [r7, #20]
 80010e2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80010e4:	4b13      	ldr	r3, [pc, #76]	@ (8001134 <_sbrk+0x64>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d102      	bne.n	80010f2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80010ec:	4b11      	ldr	r3, [pc, #68]	@ (8001134 <_sbrk+0x64>)
 80010ee:	4a12      	ldr	r2, [pc, #72]	@ (8001138 <_sbrk+0x68>)
 80010f0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80010f2:	4b10      	ldr	r3, [pc, #64]	@ (8001134 <_sbrk+0x64>)
 80010f4:	681a      	ldr	r2, [r3, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	4413      	add	r3, r2
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d207      	bcs.n	8001110 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001100:	f003 fdae 	bl	8004c60 <__errno>
 8001104:	4603      	mov	r3, r0
 8001106:	220c      	movs	r2, #12
 8001108:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800110a:	f04f 33ff 	mov.w	r3, #4294967295
 800110e:	e009      	b.n	8001124 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001110:	4b08      	ldr	r3, [pc, #32]	@ (8001134 <_sbrk+0x64>)
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001116:	4b07      	ldr	r3, [pc, #28]	@ (8001134 <_sbrk+0x64>)
 8001118:	681a      	ldr	r2, [r3, #0]
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	4413      	add	r3, r2
 800111e:	4a05      	ldr	r2, [pc, #20]	@ (8001134 <_sbrk+0x64>)
 8001120:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001122:	68fb      	ldr	r3, [r7, #12]
}
 8001124:	4618      	mov	r0, r3
 8001126:	3718      	adds	r7, #24
 8001128:	46bd      	mov	sp, r7
 800112a:	bd80      	pop	{r7, pc}
 800112c:	20020000 	.word	0x20020000
 8001130:	00000400 	.word	0x00000400
 8001134:	20000184 	.word	0x20000184
 8001138:	200003f8 	.word	0x200003f8

0800113c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001140:	4b06      	ldr	r3, [pc, #24]	@ (800115c <SystemInit+0x20>)
 8001142:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001146:	4a05      	ldr	r2, [pc, #20]	@ (800115c <SystemInit+0x20>)
 8001148:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800114c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001150:	bf00      	nop
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	b08e      	sub	sp, #56	@ 0x38
 8001164:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001166:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800116a:	2200      	movs	r2, #0
 800116c:	601a      	str	r2, [r3, #0]
 800116e:	605a      	str	r2, [r3, #4]
 8001170:	609a      	str	r2, [r3, #8]
 8001172:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001174:	f107 0320 	add.w	r3, r7, #32
 8001178:	2200      	movs	r2, #0
 800117a:	601a      	str	r2, [r3, #0]
 800117c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]
 800118a:	611a      	str	r2, [r3, #16]
 800118c:	615a      	str	r2, [r3, #20]
 800118e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001190:	4b2d      	ldr	r3, [pc, #180]	@ (8001248 <MX_TIM2_Init+0xe8>)
 8001192:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001196:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001198:	4b2b      	ldr	r3, [pc, #172]	@ (8001248 <MX_TIM2_Init+0xe8>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800119e:	4b2a      	ldr	r3, [pc, #168]	@ (8001248 <MX_TIM2_Init+0xe8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 839999;
 80011a4:	4b28      	ldr	r3, [pc, #160]	@ (8001248 <MX_TIM2_Init+0xe8>)
 80011a6:	4a29      	ldr	r2, [pc, #164]	@ (800124c <MX_TIM2_Init+0xec>)
 80011a8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011aa:	4b27      	ldr	r3, [pc, #156]	@ (8001248 <MX_TIM2_Init+0xe8>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011b0:	4b25      	ldr	r3, [pc, #148]	@ (8001248 <MX_TIM2_Init+0xe8>)
 80011b2:	2200      	movs	r2, #0
 80011b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011b6:	4824      	ldr	r0, [pc, #144]	@ (8001248 <MX_TIM2_Init+0xe8>)
 80011b8:	f001 fbd4 	bl	8002964 <HAL_TIM_Base_Init>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 80011c2:	f7ff fd47 	bl	8000c54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80011cc:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80011d0:	4619      	mov	r1, r3
 80011d2:	481d      	ldr	r0, [pc, #116]	@ (8001248 <MX_TIM2_Init+0xe8>)
 80011d4:	f001 fff8 	bl	80031c8 <HAL_TIM_ConfigClockSource>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d001      	beq.n	80011e2 <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 80011de:	f7ff fd39 	bl	8000c54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80011e2:	4819      	ldr	r0, [pc, #100]	@ (8001248 <MX_TIM2_Init+0xe8>)
 80011e4:	f001 fcad 	bl	8002b42 <HAL_TIM_PWM_Init>
 80011e8:	4603      	mov	r3, r0
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 80011ee:	f7ff fd31 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80011f2:	2320      	movs	r3, #32
 80011f4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 80011f6:	2380      	movs	r3, #128	@ 0x80
 80011f8:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80011fa:	f107 0320 	add.w	r3, r7, #32
 80011fe:	4619      	mov	r1, r3
 8001200:	4811      	ldr	r0, [pc, #68]	@ (8001248 <MX_TIM2_Init+0xe8>)
 8001202:	f002 fcbf 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 800120c:	f7ff fd22 	bl	8000c54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001210:	2360      	movs	r3, #96	@ 0x60
 8001212:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 8001214:	f242 7310 	movw	r3, #10000	@ 0x2710
 8001218:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800121a:	2300      	movs	r3, #0
 800121c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800121e:	2300      	movs	r3, #0
 8001220:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001222:	1d3b      	adds	r3, r7, #4
 8001224:	2200      	movs	r2, #0
 8001226:	4619      	mov	r1, r3
 8001228:	4807      	ldr	r0, [pc, #28]	@ (8001248 <MX_TIM2_Init+0xe8>)
 800122a:	f001 ff0b 	bl	8003044 <HAL_TIM_PWM_ConfigChannel>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001234:	f7ff fd0e 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001238:	4803      	ldr	r0, [pc, #12]	@ (8001248 <MX_TIM2_Init+0xe8>)
 800123a:	f000 f8e7 	bl	800140c <HAL_TIM_MspPostInit>

}
 800123e:	bf00      	nop
 8001240:	3738      	adds	r7, #56	@ 0x38
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	20000188 	.word	0x20000188
 800124c:	000cd13f 	.word	0x000cd13f

08001250 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b088      	sub	sp, #32
 8001254:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8001256:	f107 030c 	add.w	r3, r7, #12
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001266:	1d3b      	adds	r3, r7, #4
 8001268:	2200      	movs	r2, #0
 800126a:	601a      	str	r2, [r3, #0]
 800126c:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800126e:	4b1d      	ldr	r3, [pc, #116]	@ (80012e4 <MX_TIM3_Init+0x94>)
 8001270:	4a1d      	ldr	r2, [pc, #116]	@ (80012e8 <MX_TIM3_Init+0x98>)
 8001272:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001274:	4b1b      	ldr	r3, [pc, #108]	@ (80012e4 <MX_TIM3_Init+0x94>)
 8001276:	2200      	movs	r2, #0
 8001278:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127a:	4b1a      	ldr	r3, [pc, #104]	@ (80012e4 <MX_TIM3_Init+0x94>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 8001280:	4b18      	ldr	r3, [pc, #96]	@ (80012e4 <MX_TIM3_Init+0x94>)
 8001282:	22c8      	movs	r2, #200	@ 0xc8
 8001284:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001286:	4b17      	ldr	r3, [pc, #92]	@ (80012e4 <MX_TIM3_Init+0x94>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800128c:	4b15      	ldr	r3, [pc, #84]	@ (80012e4 <MX_TIM3_Init+0x94>)
 800128e:	2200      	movs	r2, #0
 8001290:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001292:	4814      	ldr	r0, [pc, #80]	@ (80012e4 <MX_TIM3_Init+0x94>)
 8001294:	f001 fb66 	bl	8002964 <HAL_TIM_Base_Init>
 8001298:	4603      	mov	r3, r0
 800129a:	2b00      	cmp	r3, #0
 800129c:	d001      	beq.n	80012a2 <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800129e:	f7ff fcd9 	bl	8000c54 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 80012a2:	2307      	movs	r3, #7
 80012a4:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 80012a6:	2310      	movs	r3, #16
 80012a8:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	4619      	mov	r1, r3
 80012b0:	480c      	ldr	r0, [pc, #48]	@ (80012e4 <MX_TIM3_Init+0x94>)
 80012b2:	f002 f850 	bl	8003356 <HAL_TIM_SlaveConfigSynchro>
 80012b6:	4603      	mov	r3, r0
 80012b8:	2b00      	cmp	r3, #0
 80012ba:	d001      	beq.n	80012c0 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80012bc:	f7ff fcca 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c0:	2300      	movs	r3, #0
 80012c2:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80012c8:	1d3b      	adds	r3, r7, #4
 80012ca:	4619      	mov	r1, r3
 80012cc:	4805      	ldr	r0, [pc, #20]	@ (80012e4 <MX_TIM3_Init+0x94>)
 80012ce:	f002 fc59 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80012d8:	f7ff fcbc 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80012dc:	bf00      	nop
 80012de:	3720      	adds	r7, #32
 80012e0:	46bd      	mov	sp, r7
 80012e2:	bd80      	pop	{r7, pc}
 80012e4:	200001d0 	.word	0x200001d0
 80012e8:	40000400 	.word	0x40000400

080012ec <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b082      	sub	sp, #8
 80012f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012f2:	463b      	mov	r3, r7
 80012f4:	2200      	movs	r2, #0
 80012f6:	601a      	str	r2, [r3, #0]
 80012f8:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80012fa:	4b15      	ldr	r3, [pc, #84]	@ (8001350 <MX_TIM6_Init+0x64>)
 80012fc:	4a15      	ldr	r2, [pc, #84]	@ (8001354 <MX_TIM6_Init+0x68>)
 80012fe:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 8001300:	4b13      	ldr	r3, [pc, #76]	@ (8001350 <MX_TIM6_Init+0x64>)
 8001302:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8001306:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001308:	4b11      	ldr	r3, [pc, #68]	@ (8001350 <MX_TIM6_Init+0x64>)
 800130a:	2200      	movs	r2, #0
 800130c:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8400;
 800130e:	4b10      	ldr	r3, [pc, #64]	@ (8001350 <MX_TIM6_Init+0x64>)
 8001310:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 8001314:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001316:	4b0e      	ldr	r3, [pc, #56]	@ (8001350 <MX_TIM6_Init+0x64>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800131c:	480c      	ldr	r0, [pc, #48]	@ (8001350 <MX_TIM6_Init+0x64>)
 800131e:	f001 fb21 	bl	8002964 <HAL_TIM_Base_Init>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001328:	f7ff fc94 	bl	8000c54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800132c:	2300      	movs	r3, #0
 800132e:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001334:	463b      	mov	r3, r7
 8001336:	4619      	mov	r1, r3
 8001338:	4805      	ldr	r0, [pc, #20]	@ (8001350 <MX_TIM6_Init+0x64>)
 800133a:	f002 fc23 	bl	8003b84 <HAL_TIMEx_MasterConfigSynchronization>
 800133e:	4603      	mov	r3, r0
 8001340:	2b00      	cmp	r3, #0
 8001342:	d001      	beq.n	8001348 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001344:	f7ff fc86 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001348:	bf00      	nop
 800134a:	3708      	adds	r7, #8
 800134c:	46bd      	mov	sp, r7
 800134e:	bd80      	pop	{r7, pc}
 8001350:	20000218 	.word	0x20000218
 8001354:	40001000 	.word	0x40001000

08001358 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001368:	d10e      	bne.n	8001388 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800136a:	2300      	movs	r3, #0
 800136c:	617b      	str	r3, [r7, #20]
 800136e:	4b24      	ldr	r3, [pc, #144]	@ (8001400 <HAL_TIM_Base_MspInit+0xa8>)
 8001370:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001372:	4a23      	ldr	r2, [pc, #140]	@ (8001400 <HAL_TIM_Base_MspInit+0xa8>)
 8001374:	f043 0301 	orr.w	r3, r3, #1
 8001378:	6413      	str	r3, [r2, #64]	@ 0x40
 800137a:	4b21      	ldr	r3, [pc, #132]	@ (8001400 <HAL_TIM_Base_MspInit+0xa8>)
 800137c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	617b      	str	r3, [r7, #20]
 8001384:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001386:	e036      	b.n	80013f6 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a1d      	ldr	r2, [pc, #116]	@ (8001404 <HAL_TIM_Base_MspInit+0xac>)
 800138e:	4293      	cmp	r3, r2
 8001390:	d116      	bne.n	80013c0 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001392:	2300      	movs	r3, #0
 8001394:	613b      	str	r3, [r7, #16]
 8001396:	4b1a      	ldr	r3, [pc, #104]	@ (8001400 <HAL_TIM_Base_MspInit+0xa8>)
 8001398:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800139a:	4a19      	ldr	r2, [pc, #100]	@ (8001400 <HAL_TIM_Base_MspInit+0xa8>)
 800139c:	f043 0302 	orr.w	r3, r3, #2
 80013a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80013a2:	4b17      	ldr	r3, [pc, #92]	@ (8001400 <HAL_TIM_Base_MspInit+0xa8>)
 80013a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013a6:	f003 0302 	and.w	r3, r3, #2
 80013aa:	613b      	str	r3, [r7, #16]
 80013ac:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80013ae:	2200      	movs	r2, #0
 80013b0:	2100      	movs	r1, #0
 80013b2:	201d      	movs	r0, #29
 80013b4:	f000 fa53 	bl	800185e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80013b8:	201d      	movs	r0, #29
 80013ba:	f000 fa6c 	bl	8001896 <HAL_NVIC_EnableIRQ>
}
 80013be:	e01a      	b.n	80013f6 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM6)
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	4a10      	ldr	r2, [pc, #64]	@ (8001408 <HAL_TIM_Base_MspInit+0xb0>)
 80013c6:	4293      	cmp	r3, r2
 80013c8:	d115      	bne.n	80013f6 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80013ca:	2300      	movs	r3, #0
 80013cc:	60fb      	str	r3, [r7, #12]
 80013ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001400 <HAL_TIM_Base_MspInit+0xa8>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	4a0b      	ldr	r2, [pc, #44]	@ (8001400 <HAL_TIM_Base_MspInit+0xa8>)
 80013d4:	f043 0310 	orr.w	r3, r3, #16
 80013d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80013da:	4b09      	ldr	r3, [pc, #36]	@ (8001400 <HAL_TIM_Base_MspInit+0xa8>)
 80013dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013de:	f003 0310 	and.w	r3, r3, #16
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80013e6:	2200      	movs	r2, #0
 80013e8:	2100      	movs	r1, #0
 80013ea:	2036      	movs	r0, #54	@ 0x36
 80013ec:	f000 fa37 	bl	800185e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80013f0:	2036      	movs	r0, #54	@ 0x36
 80013f2:	f000 fa50 	bl	8001896 <HAL_NVIC_EnableIRQ>
}
 80013f6:	bf00      	nop
 80013f8:	3718      	adds	r7, #24
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}
 80013fe:	bf00      	nop
 8001400:	40023800 	.word	0x40023800
 8001404:	40000400 	.word	0x40000400
 8001408:	40001000 	.word	0x40001000

0800140c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b088      	sub	sp, #32
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001414:	f107 030c 	add.w	r3, r7, #12
 8001418:	2200      	movs	r2, #0
 800141a:	601a      	str	r2, [r3, #0]
 800141c:	605a      	str	r2, [r3, #4]
 800141e:	609a      	str	r2, [r3, #8]
 8001420:	60da      	str	r2, [r3, #12]
 8001422:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800142c:	d11d      	bne.n	800146a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800142e:	2300      	movs	r3, #0
 8001430:	60bb      	str	r3, [r7, #8]
 8001432:	4b10      	ldr	r3, [pc, #64]	@ (8001474 <HAL_TIM_MspPostInit+0x68>)
 8001434:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001436:	4a0f      	ldr	r2, [pc, #60]	@ (8001474 <HAL_TIM_MspPostInit+0x68>)
 8001438:	f043 0301 	orr.w	r3, r3, #1
 800143c:	6313      	str	r3, [r2, #48]	@ 0x30
 800143e:	4b0d      	ldr	r3, [pc, #52]	@ (8001474 <HAL_TIM_MspPostInit+0x68>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	f003 0301 	and.w	r3, r3, #1
 8001446:	60bb      	str	r3, [r7, #8]
 8001448:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800144a:	2301      	movs	r3, #1
 800144c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001456:	2300      	movs	r3, #0
 8001458:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800145a:	2301      	movs	r3, #1
 800145c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800145e:	f107 030c 	add.w	r3, r7, #12
 8001462:	4619      	mov	r1, r3
 8001464:	4804      	ldr	r0, [pc, #16]	@ (8001478 <HAL_TIM_MspPostInit+0x6c>)
 8001466:	f000 fac3 	bl	80019f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 800146a:	bf00      	nop
 800146c:	3720      	adds	r7, #32
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	40023800 	.word	0x40023800
 8001478:	40020000 	.word	0x40020000

0800147c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001480:	4b11      	ldr	r3, [pc, #68]	@ (80014c8 <MX_USART2_UART_Init+0x4c>)
 8001482:	4a12      	ldr	r2, [pc, #72]	@ (80014cc <MX_USART2_UART_Init+0x50>)
 8001484:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001486:	4b10      	ldr	r3, [pc, #64]	@ (80014c8 <MX_USART2_UART_Init+0x4c>)
 8001488:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800148c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800148e:	4b0e      	ldr	r3, [pc, #56]	@ (80014c8 <MX_USART2_UART_Init+0x4c>)
 8001490:	2200      	movs	r2, #0
 8001492:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001494:	4b0c      	ldr	r3, [pc, #48]	@ (80014c8 <MX_USART2_UART_Init+0x4c>)
 8001496:	2200      	movs	r2, #0
 8001498:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800149a:	4b0b      	ldr	r3, [pc, #44]	@ (80014c8 <MX_USART2_UART_Init+0x4c>)
 800149c:	2200      	movs	r2, #0
 800149e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014a0:	4b09      	ldr	r3, [pc, #36]	@ (80014c8 <MX_USART2_UART_Init+0x4c>)
 80014a2:	220c      	movs	r2, #12
 80014a4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014a6:	4b08      	ldr	r3, [pc, #32]	@ (80014c8 <MX_USART2_UART_Init+0x4c>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014ac:	4b06      	ldr	r3, [pc, #24]	@ (80014c8 <MX_USART2_UART_Init+0x4c>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014b2:	4805      	ldr	r0, [pc, #20]	@ (80014c8 <MX_USART2_UART_Init+0x4c>)
 80014b4:	f002 fbf6 	bl	8003ca4 <HAL_UART_Init>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80014be:	f7ff fbc9 	bl	8000c54 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014c2:	bf00      	nop
 80014c4:	bd80      	pop	{r7, pc}
 80014c6:	bf00      	nop
 80014c8:	20000260 	.word	0x20000260
 80014cc:	40004400 	.word	0x40004400

080014d0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014d0:	b580      	push	{r7, lr}
 80014d2:	b08a      	sub	sp, #40	@ 0x28
 80014d4:	af00      	add	r7, sp, #0
 80014d6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d8:	f107 0314 	add.w	r3, r7, #20
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
 80014e2:	609a      	str	r2, [r3, #8]
 80014e4:	60da      	str	r2, [r3, #12]
 80014e6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a1d      	ldr	r2, [pc, #116]	@ (8001564 <HAL_UART_MspInit+0x94>)
 80014ee:	4293      	cmp	r3, r2
 80014f0:	d133      	bne.n	800155a <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80014f2:	2300      	movs	r3, #0
 80014f4:	613b      	str	r3, [r7, #16]
 80014f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001568 <HAL_UART_MspInit+0x98>)
 80014f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014fa:	4a1b      	ldr	r2, [pc, #108]	@ (8001568 <HAL_UART_MspInit+0x98>)
 80014fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001500:	6413      	str	r3, [r2, #64]	@ 0x40
 8001502:	4b19      	ldr	r3, [pc, #100]	@ (8001568 <HAL_UART_MspInit+0x98>)
 8001504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150a:	613b      	str	r3, [r7, #16]
 800150c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	60fb      	str	r3, [r7, #12]
 8001512:	4b15      	ldr	r3, [pc, #84]	@ (8001568 <HAL_UART_MspInit+0x98>)
 8001514:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001516:	4a14      	ldr	r2, [pc, #80]	@ (8001568 <HAL_UART_MspInit+0x98>)
 8001518:	f043 0301 	orr.w	r3, r3, #1
 800151c:	6313      	str	r3, [r2, #48]	@ 0x30
 800151e:	4b12      	ldr	r3, [pc, #72]	@ (8001568 <HAL_UART_MspInit+0x98>)
 8001520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001522:	f003 0301 	and.w	r3, r3, #1
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800152a:	230c      	movs	r3, #12
 800152c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800152e:	2302      	movs	r3, #2
 8001530:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001536:	2303      	movs	r3, #3
 8001538:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800153a:	2307      	movs	r3, #7
 800153c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800153e:	f107 0314 	add.w	r3, r7, #20
 8001542:	4619      	mov	r1, r3
 8001544:	4809      	ldr	r0, [pc, #36]	@ (800156c <HAL_UART_MspInit+0x9c>)
 8001546:	f000 fa53 	bl	80019f0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	2026      	movs	r0, #38	@ 0x26
 8001550:	f000 f985 	bl	800185e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001554:	2026      	movs	r0, #38	@ 0x26
 8001556:	f000 f99e 	bl	8001896 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 800155a:	bf00      	nop
 800155c:	3728      	adds	r7, #40	@ 0x28
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
 8001562:	bf00      	nop
 8001564:	40004400 	.word	0x40004400
 8001568:	40023800 	.word	0x40023800
 800156c:	40020000 	.word	0x40020000

08001570 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001570:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80015a8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001574:	f7ff fde2 	bl	800113c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001578:	480c      	ldr	r0, [pc, #48]	@ (80015ac <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800157a:	490d      	ldr	r1, [pc, #52]	@ (80015b0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800157c:	4a0d      	ldr	r2, [pc, #52]	@ (80015b4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800157e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001580:	e002      	b.n	8001588 <LoopCopyDataInit>

08001582 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001582:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001584:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001586:	3304      	adds	r3, #4

08001588 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001588:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800158a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800158c:	d3f9      	bcc.n	8001582 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800158e:	4a0a      	ldr	r2, [pc, #40]	@ (80015b8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001590:	4c0a      	ldr	r4, [pc, #40]	@ (80015bc <LoopFillZerobss+0x22>)
  movs r3, #0
 8001592:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001594:	e001      	b.n	800159a <LoopFillZerobss>

08001596 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001596:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001598:	3204      	adds	r2, #4

0800159a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800159a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800159c:	d3fb      	bcc.n	8001596 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800159e:	f003 fb65 	bl	8004c6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80015a2:	f7ff f9ff 	bl	80009a4 <main>
  bx  lr    
 80015a6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80015a8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80015ac:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015b0:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 80015b4:	080059cc 	.word	0x080059cc
  ldr r2, =_sbss
 80015b8:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 80015bc:	200003f4 	.word	0x200003f4

080015c0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80015c0:	e7fe      	b.n	80015c0 <ADC_IRQHandler>
	...

080015c4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015c4:	b580      	push	{r7, lr}
 80015c6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015c8:	4b0e      	ldr	r3, [pc, #56]	@ (8001604 <HAL_Init+0x40>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001604 <HAL_Init+0x40>)
 80015ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015d2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80015d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001604 <HAL_Init+0x40>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a0a      	ldr	r2, [pc, #40]	@ (8001604 <HAL_Init+0x40>)
 80015da:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015de:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e0:	4b08      	ldr	r3, [pc, #32]	@ (8001604 <HAL_Init+0x40>)
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a07      	ldr	r2, [pc, #28]	@ (8001604 <HAL_Init+0x40>)
 80015e6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015ea:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80015ec:	2003      	movs	r0, #3
 80015ee:	f000 f92b 	bl	8001848 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80015f2:	2000      	movs	r0, #0
 80015f4:	f000 f808 	bl	8001608 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80015f8:	f7ff fcec 	bl	8000fd4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80015fc:	2300      	movs	r3, #0
}
 80015fe:	4618      	mov	r0, r3
 8001600:	bd80      	pop	{r7, pc}
 8001602:	bf00      	nop
 8001604:	40023c00 	.word	0x40023c00

08001608 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	b082      	sub	sp, #8
 800160c:	af00      	add	r7, sp, #0
 800160e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001610:	4b12      	ldr	r3, [pc, #72]	@ (800165c <HAL_InitTick+0x54>)
 8001612:	681a      	ldr	r2, [r3, #0]
 8001614:	4b12      	ldr	r3, [pc, #72]	@ (8001660 <HAL_InitTick+0x58>)
 8001616:	781b      	ldrb	r3, [r3, #0]
 8001618:	4619      	mov	r1, r3
 800161a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800161e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001622:	fbb2 f3f3 	udiv	r3, r2, r3
 8001626:	4618      	mov	r0, r3
 8001628:	f000 f943 	bl	80018b2 <HAL_SYSTICK_Config>
 800162c:	4603      	mov	r3, r0
 800162e:	2b00      	cmp	r3, #0
 8001630:	d001      	beq.n	8001636 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001632:	2301      	movs	r3, #1
 8001634:	e00e      	b.n	8001654 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2b0f      	cmp	r3, #15
 800163a:	d80a      	bhi.n	8001652 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800163c:	2200      	movs	r2, #0
 800163e:	6879      	ldr	r1, [r7, #4]
 8001640:	f04f 30ff 	mov.w	r0, #4294967295
 8001644:	f000 f90b 	bl	800185e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001648:	4a06      	ldr	r2, [pc, #24]	@ (8001664 <HAL_InitTick+0x5c>)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800164e:	2300      	movs	r3, #0
 8001650:	e000      	b.n	8001654 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001652:	2301      	movs	r3, #1
}
 8001654:	4618      	mov	r0, r3
 8001656:	3708      	adds	r7, #8
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	2000007c 	.word	0x2000007c
 8001660:	20000084 	.word	0x20000084
 8001664:	20000080 	.word	0x20000080

08001668 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001668:	b480      	push	{r7}
 800166a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800166c:	4b06      	ldr	r3, [pc, #24]	@ (8001688 <HAL_IncTick+0x20>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	4b06      	ldr	r3, [pc, #24]	@ (800168c <HAL_IncTick+0x24>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	4413      	add	r3, r2
 8001678:	4a04      	ldr	r2, [pc, #16]	@ (800168c <HAL_IncTick+0x24>)
 800167a:	6013      	str	r3, [r2, #0]
}
 800167c:	bf00      	nop
 800167e:	46bd      	mov	sp, r7
 8001680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001684:	4770      	bx	lr
 8001686:	bf00      	nop
 8001688:	20000084 	.word	0x20000084
 800168c:	200002a8 	.word	0x200002a8

08001690 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001690:	b480      	push	{r7}
 8001692:	af00      	add	r7, sp, #0
  return uwTick;
 8001694:	4b03      	ldr	r3, [pc, #12]	@ (80016a4 <HAL_GetTick+0x14>)
 8001696:	681b      	ldr	r3, [r3, #0]
}
 8001698:	4618      	mov	r0, r3
 800169a:	46bd      	mov	sp, r7
 800169c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a0:	4770      	bx	lr
 80016a2:	bf00      	nop
 80016a4:	200002a8 	.word	0x200002a8

080016a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a8:	b480      	push	{r7}
 80016aa:	b085      	sub	sp, #20
 80016ac:	af00      	add	r7, sp, #0
 80016ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	f003 0307 	and.w	r3, r3, #7
 80016b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016b8:	4b0c      	ldr	r3, [pc, #48]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016be:	68ba      	ldr	r2, [r7, #8]
 80016c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80016c4:	4013      	ands	r3, r2
 80016c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80016cc:	68bb      	ldr	r3, [r7, #8]
 80016ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80016d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80016d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80016d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80016da:	4a04      	ldr	r2, [pc, #16]	@ (80016ec <__NVIC_SetPriorityGrouping+0x44>)
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	60d3      	str	r3, [r2, #12]
}
 80016e0:	bf00      	nop
 80016e2:	3714      	adds	r7, #20
 80016e4:	46bd      	mov	sp, r7
 80016e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ea:	4770      	bx	lr
 80016ec:	e000ed00 	.word	0xe000ed00

080016f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016f4:	4b04      	ldr	r3, [pc, #16]	@ (8001708 <__NVIC_GetPriorityGrouping+0x18>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	0a1b      	lsrs	r3, r3, #8
 80016fa:	f003 0307 	and.w	r3, r3, #7
}
 80016fe:	4618      	mov	r0, r3
 8001700:	46bd      	mov	sp, r7
 8001702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001706:	4770      	bx	lr
 8001708:	e000ed00 	.word	0xe000ed00

0800170c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
 8001712:	4603      	mov	r3, r0
 8001714:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001716:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800171a:	2b00      	cmp	r3, #0
 800171c:	db0b      	blt.n	8001736 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800171e:	79fb      	ldrb	r3, [r7, #7]
 8001720:	f003 021f 	and.w	r2, r3, #31
 8001724:	4907      	ldr	r1, [pc, #28]	@ (8001744 <__NVIC_EnableIRQ+0x38>)
 8001726:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800172a:	095b      	lsrs	r3, r3, #5
 800172c:	2001      	movs	r0, #1
 800172e:	fa00 f202 	lsl.w	r2, r0, r2
 8001732:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001736:	bf00      	nop
 8001738:	370c      	adds	r7, #12
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	e000e100 	.word	0xe000e100

08001748 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	6039      	str	r1, [r7, #0]
 8001752:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001754:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001758:	2b00      	cmp	r3, #0
 800175a:	db0a      	blt.n	8001772 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800175c:	683b      	ldr	r3, [r7, #0]
 800175e:	b2da      	uxtb	r2, r3
 8001760:	490c      	ldr	r1, [pc, #48]	@ (8001794 <__NVIC_SetPriority+0x4c>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	0112      	lsls	r2, r2, #4
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	440b      	add	r3, r1
 800176c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001770:	e00a      	b.n	8001788 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	b2da      	uxtb	r2, r3
 8001776:	4908      	ldr	r1, [pc, #32]	@ (8001798 <__NVIC_SetPriority+0x50>)
 8001778:	79fb      	ldrb	r3, [r7, #7]
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	3b04      	subs	r3, #4
 8001780:	0112      	lsls	r2, r2, #4
 8001782:	b2d2      	uxtb	r2, r2
 8001784:	440b      	add	r3, r1
 8001786:	761a      	strb	r2, [r3, #24]
}
 8001788:	bf00      	nop
 800178a:	370c      	adds	r7, #12
 800178c:	46bd      	mov	sp, r7
 800178e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001792:	4770      	bx	lr
 8001794:	e000e100 	.word	0xe000e100
 8001798:	e000ed00 	.word	0xe000ed00

0800179c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800179c:	b480      	push	{r7}
 800179e:	b089      	sub	sp, #36	@ 0x24
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	60f8      	str	r0, [r7, #12]
 80017a4:	60b9      	str	r1, [r7, #8]
 80017a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	f003 0307 	and.w	r3, r3, #7
 80017ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017b0:	69fb      	ldr	r3, [r7, #28]
 80017b2:	f1c3 0307 	rsb	r3, r3, #7
 80017b6:	2b04      	cmp	r3, #4
 80017b8:	bf28      	it	cs
 80017ba:	2304      	movcs	r3, #4
 80017bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017be:	69fb      	ldr	r3, [r7, #28]
 80017c0:	3304      	adds	r3, #4
 80017c2:	2b06      	cmp	r3, #6
 80017c4:	d902      	bls.n	80017cc <NVIC_EncodePriority+0x30>
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	3b03      	subs	r3, #3
 80017ca:	e000      	b.n	80017ce <NVIC_EncodePriority+0x32>
 80017cc:	2300      	movs	r3, #0
 80017ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017d0:	f04f 32ff 	mov.w	r2, #4294967295
 80017d4:	69bb      	ldr	r3, [r7, #24]
 80017d6:	fa02 f303 	lsl.w	r3, r2, r3
 80017da:	43da      	mvns	r2, r3
 80017dc:	68bb      	ldr	r3, [r7, #8]
 80017de:	401a      	ands	r2, r3
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017e4:	f04f 31ff 	mov.w	r1, #4294967295
 80017e8:	697b      	ldr	r3, [r7, #20]
 80017ea:	fa01 f303 	lsl.w	r3, r1, r3
 80017ee:	43d9      	mvns	r1, r3
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017f4:	4313      	orrs	r3, r2
         );
}
 80017f6:	4618      	mov	r0, r3
 80017f8:	3724      	adds	r7, #36	@ 0x24
 80017fa:	46bd      	mov	sp, r7
 80017fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001800:	4770      	bx	lr
	...

08001804 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	3b01      	subs	r3, #1
 8001810:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001814:	d301      	bcc.n	800181a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001816:	2301      	movs	r3, #1
 8001818:	e00f      	b.n	800183a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800181a:	4a0a      	ldr	r2, [pc, #40]	@ (8001844 <SysTick_Config+0x40>)
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	3b01      	subs	r3, #1
 8001820:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001822:	210f      	movs	r1, #15
 8001824:	f04f 30ff 	mov.w	r0, #4294967295
 8001828:	f7ff ff8e 	bl	8001748 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800182c:	4b05      	ldr	r3, [pc, #20]	@ (8001844 <SysTick_Config+0x40>)
 800182e:	2200      	movs	r2, #0
 8001830:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001832:	4b04      	ldr	r3, [pc, #16]	@ (8001844 <SysTick_Config+0x40>)
 8001834:	2207      	movs	r2, #7
 8001836:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3708      	adds	r7, #8
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	e000e010 	.word	0xe000e010

08001848 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b082      	sub	sp, #8
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001850:	6878      	ldr	r0, [r7, #4]
 8001852:	f7ff ff29 	bl	80016a8 <__NVIC_SetPriorityGrouping>
}
 8001856:	bf00      	nop
 8001858:	3708      	adds	r7, #8
 800185a:	46bd      	mov	sp, r7
 800185c:	bd80      	pop	{r7, pc}

0800185e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800185e:	b580      	push	{r7, lr}
 8001860:	b086      	sub	sp, #24
 8001862:	af00      	add	r7, sp, #0
 8001864:	4603      	mov	r3, r0
 8001866:	60b9      	str	r1, [r7, #8]
 8001868:	607a      	str	r2, [r7, #4]
 800186a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800186c:	2300      	movs	r3, #0
 800186e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001870:	f7ff ff3e 	bl	80016f0 <__NVIC_GetPriorityGrouping>
 8001874:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	68b9      	ldr	r1, [r7, #8]
 800187a:	6978      	ldr	r0, [r7, #20]
 800187c:	f7ff ff8e 	bl	800179c <NVIC_EncodePriority>
 8001880:	4602      	mov	r2, r0
 8001882:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001886:	4611      	mov	r1, r2
 8001888:	4618      	mov	r0, r3
 800188a:	f7ff ff5d 	bl	8001748 <__NVIC_SetPriority>
}
 800188e:	bf00      	nop
 8001890:	3718      	adds	r7, #24
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001896:	b580      	push	{r7, lr}
 8001898:	b082      	sub	sp, #8
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a4:	4618      	mov	r0, r3
 80018a6:	f7ff ff31 	bl	800170c <__NVIC_EnableIRQ>
}
 80018aa:	bf00      	nop
 80018ac:	3708      	adds	r7, #8
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}

080018b2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018b2:	b580      	push	{r7, lr}
 80018b4:	b082      	sub	sp, #8
 80018b6:	af00      	add	r7, sp, #0
 80018b8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018ba:	6878      	ldr	r0, [r7, #4]
 80018bc:	f7ff ffa2 	bl	8001804 <SysTick_Config>
 80018c0:	4603      	mov	r3, r0
}
 80018c2:	4618      	mov	r0, r3
 80018c4:	3708      	adds	r7, #8
 80018c6:	46bd      	mov	sp, r7
 80018c8:	bd80      	pop	{r7, pc}

080018ca <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80018ca:	b580      	push	{r7, lr}
 80018cc:	b084      	sub	sp, #16
 80018ce:	af00      	add	r7, sp, #0
 80018d0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80018d6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80018d8:	f7ff feda 	bl	8001690 <HAL_GetTick>
 80018dc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80018e4:	b2db      	uxtb	r3, r3
 80018e6:	2b02      	cmp	r3, #2
 80018e8:	d008      	beq.n	80018fc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	2280      	movs	r2, #128	@ 0x80
 80018ee:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2200      	movs	r2, #0
 80018f4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80018f8:	2301      	movs	r3, #1
 80018fa:	e052      	b.n	80019a2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0216 	bic.w	r2, r2, #22
 800190a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	695a      	ldr	r2, [r3, #20]
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800191a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	2b00      	cmp	r3, #0
 8001922:	d103      	bne.n	800192c <HAL_DMA_Abort+0x62>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001928:	2b00      	cmp	r3, #0
 800192a:	d007      	beq.n	800193c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f022 0208 	bic.w	r2, r2, #8
 800193a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 0201 	bic.w	r2, r2, #1
 800194a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800194c:	e013      	b.n	8001976 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800194e:	f7ff fe9f 	bl	8001690 <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	68bb      	ldr	r3, [r7, #8]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b05      	cmp	r3, #5
 800195a:	d90c      	bls.n	8001976 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2220      	movs	r2, #32
 8001960:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	2203      	movs	r2, #3
 8001966:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	2200      	movs	r2, #0
 800196e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001972:	2303      	movs	r3, #3
 8001974:	e015      	b.n	80019a2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	681b      	ldr	r3, [r3, #0]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 0301 	and.w	r3, r3, #1
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1e4      	bne.n	800194e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001988:	223f      	movs	r2, #63	@ 0x3f
 800198a:	409a      	lsls	r2, r3
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	2201      	movs	r2, #1
 8001994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2200      	movs	r2, #0
 800199c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80019a0:	2300      	movs	r3, #0
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}

080019aa <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019aa:	b480      	push	{r7}
 80019ac:	b083      	sub	sp, #12
 80019ae:	af00      	add	r7, sp, #0
 80019b0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	2b02      	cmp	r3, #2
 80019bc:	d004      	beq.n	80019c8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2280      	movs	r2, #128	@ 0x80
 80019c2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019c4:	2301      	movs	r3, #1
 80019c6:	e00c      	b.n	80019e2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2205      	movs	r2, #5
 80019cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	681a      	ldr	r2, [r3, #0]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0201 	bic.w	r2, r2, #1
 80019de:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80019e0:	2300      	movs	r3, #0
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	370c      	adds	r7, #12
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
	...

080019f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019f0:	b480      	push	{r7}
 80019f2:	b089      	sub	sp, #36	@ 0x24
 80019f4:	af00      	add	r7, sp, #0
 80019f6:	6078      	str	r0, [r7, #4]
 80019f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80019fe:	2300      	movs	r3, #0
 8001a00:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a06:	2300      	movs	r3, #0
 8001a08:	61fb      	str	r3, [r7, #28]
 8001a0a:	e165      	b.n	8001cd8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a0c:	2201      	movs	r2, #1
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	fa02 f303 	lsl.w	r3, r2, r3
 8001a14:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a16:	683b      	ldr	r3, [r7, #0]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	697a      	ldr	r2, [r7, #20]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a20:	693a      	ldr	r2, [r7, #16]
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	429a      	cmp	r2, r3
 8001a26:	f040 8154 	bne.w	8001cd2 <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	f003 0303 	and.w	r3, r3, #3
 8001a32:	2b01      	cmp	r3, #1
 8001a34:	d005      	beq.n	8001a42 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a3e:	2b02      	cmp	r3, #2
 8001a40:	d130      	bne.n	8001aa4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	689b      	ldr	r3, [r3, #8]
 8001a46:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	005b      	lsls	r3, r3, #1
 8001a4c:	2203      	movs	r2, #3
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	69ba      	ldr	r2, [r7, #24]
 8001a56:	4013      	ands	r3, r2
 8001a58:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	68da      	ldr	r2, [r3, #12]
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	005b      	lsls	r3, r3, #1
 8001a62:	fa02 f303 	lsl.w	r3, r2, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4313      	orrs	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	69ba      	ldr	r2, [r7, #24]
 8001a70:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	685b      	ldr	r3, [r3, #4]
 8001a76:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001a78:	2201      	movs	r2, #1
 8001a7a:	69fb      	ldr	r3, [r7, #28]
 8001a7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a80:	43db      	mvns	r3, r3
 8001a82:	69ba      	ldr	r2, [r7, #24]
 8001a84:	4013      	ands	r3, r2
 8001a86:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	091b      	lsrs	r3, r3, #4
 8001a8e:	f003 0201 	and.w	r2, r3, #1
 8001a92:	69fb      	ldr	r3, [r7, #28]
 8001a94:	fa02 f303 	lsl.w	r3, r2, r3
 8001a98:	69ba      	ldr	r2, [r7, #24]
 8001a9a:	4313      	orrs	r3, r2
 8001a9c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001aa4:	683b      	ldr	r3, [r7, #0]
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	f003 0303 	and.w	r3, r3, #3
 8001aac:	2b03      	cmp	r3, #3
 8001aae:	d017      	beq.n	8001ae0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	68db      	ldr	r3, [r3, #12]
 8001ab4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001ab6:	69fb      	ldr	r3, [r7, #28]
 8001ab8:	005b      	lsls	r3, r3, #1
 8001aba:	2203      	movs	r2, #3
 8001abc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac0:	43db      	mvns	r3, r3
 8001ac2:	69ba      	ldr	r2, [r7, #24]
 8001ac4:	4013      	ands	r3, r2
 8001ac6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	689a      	ldr	r2, [r3, #8]
 8001acc:	69fb      	ldr	r3, [r7, #28]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad4:	69ba      	ldr	r2, [r7, #24]
 8001ad6:	4313      	orrs	r3, r2
 8001ad8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ae0:	683b      	ldr	r3, [r7, #0]
 8001ae2:	685b      	ldr	r3, [r3, #4]
 8001ae4:	f003 0303 	and.w	r3, r3, #3
 8001ae8:	2b02      	cmp	r3, #2
 8001aea:	d123      	bne.n	8001b34 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001aec:	69fb      	ldr	r3, [r7, #28]
 8001aee:	08da      	lsrs	r2, r3, #3
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	3208      	adds	r2, #8
 8001af4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001af8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001afa:	69fb      	ldr	r3, [r7, #28]
 8001afc:	f003 0307 	and.w	r3, r3, #7
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	220f      	movs	r2, #15
 8001b04:	fa02 f303 	lsl.w	r3, r2, r3
 8001b08:	43db      	mvns	r3, r3
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	4013      	ands	r3, r2
 8001b0e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	691a      	ldr	r2, [r3, #16]
 8001b14:	69fb      	ldr	r3, [r7, #28]
 8001b16:	f003 0307 	and.w	r3, r3, #7
 8001b1a:	009b      	lsls	r3, r3, #2
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b26:	69fb      	ldr	r3, [r7, #28]
 8001b28:	08da      	lsrs	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	3208      	adds	r2, #8
 8001b2e:	69b9      	ldr	r1, [r7, #24]
 8001b30:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b3a:	69fb      	ldr	r3, [r7, #28]
 8001b3c:	005b      	lsls	r3, r3, #1
 8001b3e:	2203      	movs	r2, #3
 8001b40:	fa02 f303 	lsl.w	r3, r2, r3
 8001b44:	43db      	mvns	r3, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	4013      	ands	r3, r2
 8001b4a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b4c:	683b      	ldr	r3, [r7, #0]
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	f003 0203 	and.w	r2, r3, #3
 8001b54:	69fb      	ldr	r3, [r7, #28]
 8001b56:	005b      	lsls	r3, r3, #1
 8001b58:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	4313      	orrs	r3, r2
 8001b60:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	69ba      	ldr	r2, [r7, #24]
 8001b66:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001b68:	683b      	ldr	r3, [r7, #0]
 8001b6a:	685b      	ldr	r3, [r3, #4]
 8001b6c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80ae 	beq.w	8001cd2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b76:	2300      	movs	r3, #0
 8001b78:	60fb      	str	r3, [r7, #12]
 8001b7a:	4b5d      	ldr	r3, [pc, #372]	@ (8001cf0 <HAL_GPIO_Init+0x300>)
 8001b7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b7e:	4a5c      	ldr	r2, [pc, #368]	@ (8001cf0 <HAL_GPIO_Init+0x300>)
 8001b80:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001b84:	6453      	str	r3, [r2, #68]	@ 0x44
 8001b86:	4b5a      	ldr	r3, [pc, #360]	@ (8001cf0 <HAL_GPIO_Init+0x300>)
 8001b88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b8a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001b8e:	60fb      	str	r3, [r7, #12]
 8001b90:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001b92:	4a58      	ldr	r2, [pc, #352]	@ (8001cf4 <HAL_GPIO_Init+0x304>)
 8001b94:	69fb      	ldr	r3, [r7, #28]
 8001b96:	089b      	lsrs	r3, r3, #2
 8001b98:	3302      	adds	r3, #2
 8001b9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	f003 0303 	and.w	r3, r3, #3
 8001ba6:	009b      	lsls	r3, r3, #2
 8001ba8:	220f      	movs	r2, #15
 8001baa:	fa02 f303 	lsl.w	r3, r2, r3
 8001bae:	43db      	mvns	r3, r3
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	4a4f      	ldr	r2, [pc, #316]	@ (8001cf8 <HAL_GPIO_Init+0x308>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d025      	beq.n	8001c0a <HAL_GPIO_Init+0x21a>
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	4a4e      	ldr	r2, [pc, #312]	@ (8001cfc <HAL_GPIO_Init+0x30c>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d01f      	beq.n	8001c06 <HAL_GPIO_Init+0x216>
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4a4d      	ldr	r2, [pc, #308]	@ (8001d00 <HAL_GPIO_Init+0x310>)
 8001bca:	4293      	cmp	r3, r2
 8001bcc:	d019      	beq.n	8001c02 <HAL_GPIO_Init+0x212>
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4a4c      	ldr	r2, [pc, #304]	@ (8001d04 <HAL_GPIO_Init+0x314>)
 8001bd2:	4293      	cmp	r3, r2
 8001bd4:	d013      	beq.n	8001bfe <HAL_GPIO_Init+0x20e>
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	4a4b      	ldr	r2, [pc, #300]	@ (8001d08 <HAL_GPIO_Init+0x318>)
 8001bda:	4293      	cmp	r3, r2
 8001bdc:	d00d      	beq.n	8001bfa <HAL_GPIO_Init+0x20a>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	4a4a      	ldr	r2, [pc, #296]	@ (8001d0c <HAL_GPIO_Init+0x31c>)
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d007      	beq.n	8001bf6 <HAL_GPIO_Init+0x206>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	4a49      	ldr	r2, [pc, #292]	@ (8001d10 <HAL_GPIO_Init+0x320>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d101      	bne.n	8001bf2 <HAL_GPIO_Init+0x202>
 8001bee:	2306      	movs	r3, #6
 8001bf0:	e00c      	b.n	8001c0c <HAL_GPIO_Init+0x21c>
 8001bf2:	2307      	movs	r3, #7
 8001bf4:	e00a      	b.n	8001c0c <HAL_GPIO_Init+0x21c>
 8001bf6:	2305      	movs	r3, #5
 8001bf8:	e008      	b.n	8001c0c <HAL_GPIO_Init+0x21c>
 8001bfa:	2304      	movs	r3, #4
 8001bfc:	e006      	b.n	8001c0c <HAL_GPIO_Init+0x21c>
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e004      	b.n	8001c0c <HAL_GPIO_Init+0x21c>
 8001c02:	2302      	movs	r3, #2
 8001c04:	e002      	b.n	8001c0c <HAL_GPIO_Init+0x21c>
 8001c06:	2301      	movs	r3, #1
 8001c08:	e000      	b.n	8001c0c <HAL_GPIO_Init+0x21c>
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	69fa      	ldr	r2, [r7, #28]
 8001c0e:	f002 0203 	and.w	r2, r2, #3
 8001c12:	0092      	lsls	r2, r2, #2
 8001c14:	4093      	lsls	r3, r2
 8001c16:	69ba      	ldr	r2, [r7, #24]
 8001c18:	4313      	orrs	r3, r2
 8001c1a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c1c:	4935      	ldr	r1, [pc, #212]	@ (8001cf4 <HAL_GPIO_Init+0x304>)
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	089b      	lsrs	r3, r3, #2
 8001c22:	3302      	adds	r3, #2
 8001c24:	69ba      	ldr	r2, [r7, #24]
 8001c26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c2a:	4b3a      	ldr	r3, [pc, #232]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001c2c:	689b      	ldr	r3, [r3, #8]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c30:	693b      	ldr	r3, [r7, #16]
 8001c32:	43db      	mvns	r3, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4013      	ands	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c3a:	683b      	ldr	r3, [r7, #0]
 8001c3c:	685b      	ldr	r3, [r3, #4]
 8001c3e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d003      	beq.n	8001c4e <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c46:	69ba      	ldr	r2, [r7, #24]
 8001c48:	693b      	ldr	r3, [r7, #16]
 8001c4a:	4313      	orrs	r3, r2
 8001c4c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c4e:	4a31      	ldr	r2, [pc, #196]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001c50:	69bb      	ldr	r3, [r7, #24]
 8001c52:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c54:	4b2f      	ldr	r3, [pc, #188]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001c56:	68db      	ldr	r3, [r3, #12]
 8001c58:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c5a:	693b      	ldr	r3, [r7, #16]
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d003      	beq.n	8001c78 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	693b      	ldr	r3, [r7, #16]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c78:	4a26      	ldr	r2, [pc, #152]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001c7a:	69bb      	ldr	r3, [r7, #24]
 8001c7c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001c7e:	4b25      	ldr	r3, [pc, #148]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	43db      	mvns	r3, r3
 8001c88:	69ba      	ldr	r2, [r7, #24]
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001c9a:	69ba      	ldr	r2, [r7, #24]
 8001c9c:	693b      	ldr	r3, [r7, #16]
 8001c9e:	4313      	orrs	r3, r2
 8001ca0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001ca2:	4a1c      	ldr	r2, [pc, #112]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001ca4:	69bb      	ldr	r3, [r7, #24]
 8001ca6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	43db      	mvns	r3, r3
 8001cb2:	69ba      	ldr	r2, [r7, #24]
 8001cb4:	4013      	ands	r3, r2
 8001cb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cb8:	683b      	ldr	r3, [r7, #0]
 8001cba:	685b      	ldr	r3, [r3, #4]
 8001cbc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d003      	beq.n	8001ccc <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cc4:	69ba      	ldr	r2, [r7, #24]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ccc:	4a11      	ldr	r2, [pc, #68]	@ (8001d14 <HAL_GPIO_Init+0x324>)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3301      	adds	r3, #1
 8001cd6:	61fb      	str	r3, [r7, #28]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	2b0f      	cmp	r3, #15
 8001cdc:	f67f ae96 	bls.w	8001a0c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ce0:	bf00      	nop
 8001ce2:	bf00      	nop
 8001ce4:	3724      	adds	r7, #36	@ 0x24
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cec:	4770      	bx	lr
 8001cee:	bf00      	nop
 8001cf0:	40023800 	.word	0x40023800
 8001cf4:	40013800 	.word	0x40013800
 8001cf8:	40020000 	.word	0x40020000
 8001cfc:	40020400 	.word	0x40020400
 8001d00:	40020800 	.word	0x40020800
 8001d04:	40020c00 	.word	0x40020c00
 8001d08:	40021000 	.word	0x40021000
 8001d0c:	40021400 	.word	0x40021400
 8001d10:	40021800 	.word	0x40021800
 8001d14:	40013c00 	.word	0x40013c00

08001d18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	460b      	mov	r3, r1
 8001d22:	807b      	strh	r3, [r7, #2]
 8001d24:	4613      	mov	r3, r2
 8001d26:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d28:	787b      	ldrb	r3, [r7, #1]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d003      	beq.n	8001d36 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d2e:	887a      	ldrh	r2, [r7, #2]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d34:	e003      	b.n	8001d3e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d36:	887b      	ldrh	r3, [r7, #2]
 8001d38:	041a      	lsls	r2, r3, #16
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	619a      	str	r2, [r3, #24]
}
 8001d3e:	bf00      	nop
 8001d40:	370c      	adds	r7, #12
 8001d42:	46bd      	mov	sp, r7
 8001d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d48:	4770      	bx	lr
	...

08001d4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001d4c:	b580      	push	{r7, lr}
 8001d4e:	b082      	sub	sp, #8
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	4603      	mov	r3, r0
 8001d54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001d56:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d58:	695a      	ldr	r2, [r3, #20]
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	4013      	ands	r3, r2
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d006      	beq.n	8001d70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d62:	4a05      	ldr	r2, [pc, #20]	@ (8001d78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d64:	88fb      	ldrh	r3, [r7, #6]
 8001d66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d68:	88fb      	ldrh	r3, [r7, #6]
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f000 f806 	bl	8001d7c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d70:	bf00      	nop
 8001d72:	3708      	adds	r7, #8
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40013c00 	.word	0x40013c00

08001d7c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d7c:	b480      	push	{r7}
 8001d7e:	b083      	sub	sp, #12
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	4603      	mov	r3, r0
 8001d84:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d86:	bf00      	nop
 8001d88:	370c      	adds	r7, #12
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d90:	4770      	bx	lr
	...

08001d94 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d101      	bne.n	8001da8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e0cc      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001da8:	4b68      	ldr	r3, [pc, #416]	@ (8001f4c <HAL_RCC_ClockConfig+0x1b8>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	f003 030f 	and.w	r3, r3, #15
 8001db0:	683a      	ldr	r2, [r7, #0]
 8001db2:	429a      	cmp	r2, r3
 8001db4:	d90c      	bls.n	8001dd0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001db6:	4b65      	ldr	r3, [pc, #404]	@ (8001f4c <HAL_RCC_ClockConfig+0x1b8>)
 8001db8:	683a      	ldr	r2, [r7, #0]
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dbe:	4b63      	ldr	r3, [pc, #396]	@ (8001f4c <HAL_RCC_ClockConfig+0x1b8>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 030f 	and.w	r3, r3, #15
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d001      	beq.n	8001dd0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	e0b8      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	f003 0302 	and.w	r3, r3, #2
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d020      	beq.n	8001e1e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d005      	beq.n	8001df4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001de8:	4b59      	ldr	r3, [pc, #356]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001dea:	689b      	ldr	r3, [r3, #8]
 8001dec:	4a58      	ldr	r2, [pc, #352]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001dee:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001df2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	681b      	ldr	r3, [r3, #0]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d005      	beq.n	8001e0c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e00:	4b53      	ldr	r3, [pc, #332]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e02:	689b      	ldr	r3, [r3, #8]
 8001e04:	4a52      	ldr	r2, [pc, #328]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e06:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e0a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e0c:	4b50      	ldr	r3, [pc, #320]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	494d      	ldr	r1, [pc, #308]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1a:	4313      	orrs	r3, r2
 8001e1c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	f003 0301 	and.w	r3, r3, #1
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d044      	beq.n	8001eb4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	2b01      	cmp	r3, #1
 8001e30:	d107      	bne.n	8001e42 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e32:	4b47      	ldr	r3, [pc, #284]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d119      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e3e:	2301      	movs	r3, #1
 8001e40:	e07f      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	2b02      	cmp	r3, #2
 8001e48:	d003      	beq.n	8001e52 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001e4e:	2b03      	cmp	r3, #3
 8001e50:	d107      	bne.n	8001e62 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e52:	4b3f      	ldr	r3, [pc, #252]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d109      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e06f      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e62:	4b3b      	ldr	r3, [pc, #236]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f003 0302 	and.w	r3, r3, #2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d101      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e067      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001e72:	4b37      	ldr	r3, [pc, #220]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e74:	689b      	ldr	r3, [r3, #8]
 8001e76:	f023 0203 	bic.w	r2, r3, #3
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	685b      	ldr	r3, [r3, #4]
 8001e7e:	4934      	ldr	r1, [pc, #208]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001e84:	f7ff fc04 	bl	8001690 <HAL_GetTick>
 8001e88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e8a:	e00a      	b.n	8001ea2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001e8c:	f7ff fc00 	bl	8001690 <HAL_GetTick>
 8001e90:	4602      	mov	r2, r0
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	1ad3      	subs	r3, r2, r3
 8001e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001e9a:	4293      	cmp	r3, r2
 8001e9c:	d901      	bls.n	8001ea2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	e04f      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ea2:	4b2b      	ldr	r3, [pc, #172]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	f003 020c 	and.w	r2, r3, #12
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	429a      	cmp	r2, r3
 8001eb2:	d1eb      	bne.n	8001e8c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001eb4:	4b25      	ldr	r3, [pc, #148]	@ (8001f4c <HAL_RCC_ClockConfig+0x1b8>)
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f003 030f 	and.w	r3, r3, #15
 8001ebc:	683a      	ldr	r2, [r7, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d20c      	bcs.n	8001edc <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ec2:	4b22      	ldr	r3, [pc, #136]	@ (8001f4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ec4:	683a      	ldr	r2, [r7, #0]
 8001ec6:	b2d2      	uxtb	r2, r2
 8001ec8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001eca:	4b20      	ldr	r3, [pc, #128]	@ (8001f4c <HAL_RCC_ClockConfig+0x1b8>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 030f 	and.w	r3, r3, #15
 8001ed2:	683a      	ldr	r2, [r7, #0]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d001      	beq.n	8001edc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001ed8:	2301      	movs	r3, #1
 8001eda:	e032      	b.n	8001f42 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f003 0304 	and.w	r3, r3, #4
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d008      	beq.n	8001efa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001ee8:	4b19      	ldr	r3, [pc, #100]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	4916      	ldr	r1, [pc, #88]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	f003 0308 	and.w	r3, r3, #8
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d009      	beq.n	8001f1a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f06:	4b12      	ldr	r3, [pc, #72]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001f08:	689b      	ldr	r3, [r3, #8]
 8001f0a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	691b      	ldr	r3, [r3, #16]
 8001f12:	00db      	lsls	r3, r3, #3
 8001f14:	490e      	ldr	r1, [pc, #56]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001f16:	4313      	orrs	r3, r2
 8001f18:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f1a:	f000 f855 	bl	8001fc8 <HAL_RCC_GetSysClockFreq>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	4b0b      	ldr	r3, [pc, #44]	@ (8001f50 <HAL_RCC_ClockConfig+0x1bc>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	091b      	lsrs	r3, r3, #4
 8001f26:	f003 030f 	and.w	r3, r3, #15
 8001f2a:	490a      	ldr	r1, [pc, #40]	@ (8001f54 <HAL_RCC_ClockConfig+0x1c0>)
 8001f2c:	5ccb      	ldrb	r3, [r1, r3]
 8001f2e:	fa22 f303 	lsr.w	r3, r2, r3
 8001f32:	4a09      	ldr	r2, [pc, #36]	@ (8001f58 <HAL_RCC_ClockConfig+0x1c4>)
 8001f34:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f36:	4b09      	ldr	r3, [pc, #36]	@ (8001f5c <HAL_RCC_ClockConfig+0x1c8>)
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	f7ff fb64 	bl	8001608 <HAL_InitTick>

  return HAL_OK;
 8001f40:	2300      	movs	r3, #0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3710      	adds	r7, #16
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
 8001f4a:	bf00      	nop
 8001f4c:	40023c00 	.word	0x40023c00
 8001f50:	40023800 	.word	0x40023800
 8001f54:	08005884 	.word	0x08005884
 8001f58:	2000007c 	.word	0x2000007c
 8001f5c:	20000080 	.word	0x20000080

08001f60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f64:	4b03      	ldr	r3, [pc, #12]	@ (8001f74 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f66:	681b      	ldr	r3, [r3, #0]
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	2000007c 	.word	0x2000007c

08001f78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f7c:	f7ff fff0 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001f80:	4602      	mov	r2, r0
 8001f82:	4b05      	ldr	r3, [pc, #20]	@ (8001f98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	0a9b      	lsrs	r3, r3, #10
 8001f88:	f003 0307 	and.w	r3, r3, #7
 8001f8c:	4903      	ldr	r1, [pc, #12]	@ (8001f9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f8e:	5ccb      	ldrb	r3, [r1, r3]
 8001f90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f94:	4618      	mov	r0, r3
 8001f96:	bd80      	pop	{r7, pc}
 8001f98:	40023800 	.word	0x40023800
 8001f9c:	08005894 	.word	0x08005894

08001fa0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001fa0:	b580      	push	{r7, lr}
 8001fa2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001fa4:	f7ff ffdc 	bl	8001f60 <HAL_RCC_GetHCLKFreq>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	4b05      	ldr	r3, [pc, #20]	@ (8001fc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	0b5b      	lsrs	r3, r3, #13
 8001fb0:	f003 0307 	and.w	r3, r3, #7
 8001fb4:	4903      	ldr	r1, [pc, #12]	@ (8001fc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fb6:	5ccb      	ldrb	r3, [r1, r3]
 8001fb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fbc:	4618      	mov	r0, r3
 8001fbe:	bd80      	pop	{r7, pc}
 8001fc0:	40023800 	.word	0x40023800
 8001fc4:	08005894 	.word	0x08005894

08001fc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001fcc:	b0ae      	sub	sp, #184	@ 0xb8
 8001fce:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8001fdc:	2300      	movs	r3, #0
 8001fde:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8001fe2:	2300      	movs	r3, #0
 8001fe4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8001fe8:	2300      	movs	r3, #0
 8001fea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001fee:	4bcb      	ldr	r3, [pc, #812]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f003 030c 	and.w	r3, r3, #12
 8001ff6:	2b0c      	cmp	r3, #12
 8001ff8:	f200 8206 	bhi.w	8002408 <HAL_RCC_GetSysClockFreq+0x440>
 8001ffc:	a201      	add	r2, pc, #4	@ (adr r2, 8002004 <HAL_RCC_GetSysClockFreq+0x3c>)
 8001ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002002:	bf00      	nop
 8002004:	08002039 	.word	0x08002039
 8002008:	08002409 	.word	0x08002409
 800200c:	08002409 	.word	0x08002409
 8002010:	08002409 	.word	0x08002409
 8002014:	08002041 	.word	0x08002041
 8002018:	08002409 	.word	0x08002409
 800201c:	08002409 	.word	0x08002409
 8002020:	08002409 	.word	0x08002409
 8002024:	08002049 	.word	0x08002049
 8002028:	08002409 	.word	0x08002409
 800202c:	08002409 	.word	0x08002409
 8002030:	08002409 	.word	0x08002409
 8002034:	08002239 	.word	0x08002239
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002038:	4bb9      	ldr	r3, [pc, #740]	@ (8002320 <HAL_RCC_GetSysClockFreq+0x358>)
 800203a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800203e:	e1e7      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002040:	4bb8      	ldr	r3, [pc, #736]	@ (8002324 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002042:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002046:	e1e3      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002048:	4bb4      	ldr	r3, [pc, #720]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002050:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002054:	4bb1      	ldr	r3, [pc, #708]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800205c:	2b00      	cmp	r3, #0
 800205e:	d071      	beq.n	8002144 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002060:	4bae      	ldr	r3, [pc, #696]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 8002062:	685b      	ldr	r3, [r3, #4]
 8002064:	099b      	lsrs	r3, r3, #6
 8002066:	2200      	movs	r2, #0
 8002068:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800206c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002070:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002074:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002078:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800207c:	2300      	movs	r3, #0
 800207e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002082:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002086:	4622      	mov	r2, r4
 8002088:	462b      	mov	r3, r5
 800208a:	f04f 0000 	mov.w	r0, #0
 800208e:	f04f 0100 	mov.w	r1, #0
 8002092:	0159      	lsls	r1, r3, #5
 8002094:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002098:	0150      	lsls	r0, r2, #5
 800209a:	4602      	mov	r2, r0
 800209c:	460b      	mov	r3, r1
 800209e:	4621      	mov	r1, r4
 80020a0:	1a51      	subs	r1, r2, r1
 80020a2:	6439      	str	r1, [r7, #64]	@ 0x40
 80020a4:	4629      	mov	r1, r5
 80020a6:	eb63 0301 	sbc.w	r3, r3, r1
 80020aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80020ac:	f04f 0200 	mov.w	r2, #0
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80020b8:	4649      	mov	r1, r9
 80020ba:	018b      	lsls	r3, r1, #6
 80020bc:	4641      	mov	r1, r8
 80020be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80020c2:	4641      	mov	r1, r8
 80020c4:	018a      	lsls	r2, r1, #6
 80020c6:	4641      	mov	r1, r8
 80020c8:	1a51      	subs	r1, r2, r1
 80020ca:	63b9      	str	r1, [r7, #56]	@ 0x38
 80020cc:	4649      	mov	r1, r9
 80020ce:	eb63 0301 	sbc.w	r3, r3, r1
 80020d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020d4:	f04f 0200 	mov.w	r2, #0
 80020d8:	f04f 0300 	mov.w	r3, #0
 80020dc:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80020e0:	4649      	mov	r1, r9
 80020e2:	00cb      	lsls	r3, r1, #3
 80020e4:	4641      	mov	r1, r8
 80020e6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020ea:	4641      	mov	r1, r8
 80020ec:	00ca      	lsls	r2, r1, #3
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	4603      	mov	r3, r0
 80020f4:	4622      	mov	r2, r4
 80020f6:	189b      	adds	r3, r3, r2
 80020f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80020fa:	462b      	mov	r3, r5
 80020fc:	460a      	mov	r2, r1
 80020fe:	eb42 0303 	adc.w	r3, r2, r3
 8002102:	637b      	str	r3, [r7, #52]	@ 0x34
 8002104:	f04f 0200 	mov.w	r2, #0
 8002108:	f04f 0300 	mov.w	r3, #0
 800210c:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002110:	4629      	mov	r1, r5
 8002112:	024b      	lsls	r3, r1, #9
 8002114:	4621      	mov	r1, r4
 8002116:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800211a:	4621      	mov	r1, r4
 800211c:	024a      	lsls	r2, r1, #9
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002126:	2200      	movs	r2, #0
 8002128:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800212c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002130:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002134:	f7fe f8c4 	bl	80002c0 <__aeabi_uldivmod>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4613      	mov	r3, r2
 800213e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002142:	e067      	b.n	8002214 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002144:	4b75      	ldr	r3, [pc, #468]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 8002146:	685b      	ldr	r3, [r3, #4]
 8002148:	099b      	lsrs	r3, r3, #6
 800214a:	2200      	movs	r2, #0
 800214c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002150:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002154:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002158:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800215c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800215e:	2300      	movs	r3, #0
 8002160:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002162:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002166:	4622      	mov	r2, r4
 8002168:	462b      	mov	r3, r5
 800216a:	f04f 0000 	mov.w	r0, #0
 800216e:	f04f 0100 	mov.w	r1, #0
 8002172:	0159      	lsls	r1, r3, #5
 8002174:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002178:	0150      	lsls	r0, r2, #5
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4621      	mov	r1, r4
 8002180:	1a51      	subs	r1, r2, r1
 8002182:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002184:	4629      	mov	r1, r5
 8002186:	eb63 0301 	sbc.w	r3, r3, r1
 800218a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800218c:	f04f 0200 	mov.w	r2, #0
 8002190:	f04f 0300 	mov.w	r3, #0
 8002194:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002198:	4649      	mov	r1, r9
 800219a:	018b      	lsls	r3, r1, #6
 800219c:	4641      	mov	r1, r8
 800219e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80021a2:	4641      	mov	r1, r8
 80021a4:	018a      	lsls	r2, r1, #6
 80021a6:	4641      	mov	r1, r8
 80021a8:	ebb2 0a01 	subs.w	sl, r2, r1
 80021ac:	4649      	mov	r1, r9
 80021ae:	eb63 0b01 	sbc.w	fp, r3, r1
 80021b2:	f04f 0200 	mov.w	r2, #0
 80021b6:	f04f 0300 	mov.w	r3, #0
 80021ba:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80021be:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80021c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80021c6:	4692      	mov	sl, r2
 80021c8:	469b      	mov	fp, r3
 80021ca:	4623      	mov	r3, r4
 80021cc:	eb1a 0303 	adds.w	r3, sl, r3
 80021d0:	623b      	str	r3, [r7, #32]
 80021d2:	462b      	mov	r3, r5
 80021d4:	eb4b 0303 	adc.w	r3, fp, r3
 80021d8:	627b      	str	r3, [r7, #36]	@ 0x24
 80021da:	f04f 0200 	mov.w	r2, #0
 80021de:	f04f 0300 	mov.w	r3, #0
 80021e2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80021e6:	4629      	mov	r1, r5
 80021e8:	028b      	lsls	r3, r1, #10
 80021ea:	4621      	mov	r1, r4
 80021ec:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80021f0:	4621      	mov	r1, r4
 80021f2:	028a      	lsls	r2, r1, #10
 80021f4:	4610      	mov	r0, r2
 80021f6:	4619      	mov	r1, r3
 80021f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80021fc:	2200      	movs	r2, #0
 80021fe:	673b      	str	r3, [r7, #112]	@ 0x70
 8002200:	677a      	str	r2, [r7, #116]	@ 0x74
 8002202:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002206:	f7fe f85b 	bl	80002c0 <__aeabi_uldivmod>
 800220a:	4602      	mov	r2, r0
 800220c:	460b      	mov	r3, r1
 800220e:	4613      	mov	r3, r2
 8002210:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002214:	4b41      	ldr	r3, [pc, #260]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	0c1b      	lsrs	r3, r3, #16
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	3301      	adds	r3, #1
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800222a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800222e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002232:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002236:	e0eb      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002238:	4b38      	ldr	r3, [pc, #224]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 800223a:	685b      	ldr	r3, [r3, #4]
 800223c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002240:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002244:	4b35      	ldr	r3, [pc, #212]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800224c:	2b00      	cmp	r3, #0
 800224e:	d06b      	beq.n	8002328 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002250:	4b32      	ldr	r3, [pc, #200]	@ (800231c <HAL_RCC_GetSysClockFreq+0x354>)
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	099b      	lsrs	r3, r3, #6
 8002256:	2200      	movs	r2, #0
 8002258:	66bb      	str	r3, [r7, #104]	@ 0x68
 800225a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800225c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800225e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002262:	663b      	str	r3, [r7, #96]	@ 0x60
 8002264:	2300      	movs	r3, #0
 8002266:	667b      	str	r3, [r7, #100]	@ 0x64
 8002268:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800226c:	4622      	mov	r2, r4
 800226e:	462b      	mov	r3, r5
 8002270:	f04f 0000 	mov.w	r0, #0
 8002274:	f04f 0100 	mov.w	r1, #0
 8002278:	0159      	lsls	r1, r3, #5
 800227a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800227e:	0150      	lsls	r0, r2, #5
 8002280:	4602      	mov	r2, r0
 8002282:	460b      	mov	r3, r1
 8002284:	4621      	mov	r1, r4
 8002286:	1a51      	subs	r1, r2, r1
 8002288:	61b9      	str	r1, [r7, #24]
 800228a:	4629      	mov	r1, r5
 800228c:	eb63 0301 	sbc.w	r3, r3, r1
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	f04f 0200 	mov.w	r2, #0
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800229e:	4659      	mov	r1, fp
 80022a0:	018b      	lsls	r3, r1, #6
 80022a2:	4651      	mov	r1, sl
 80022a4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80022a8:	4651      	mov	r1, sl
 80022aa:	018a      	lsls	r2, r1, #6
 80022ac:	4651      	mov	r1, sl
 80022ae:	ebb2 0801 	subs.w	r8, r2, r1
 80022b2:	4659      	mov	r1, fp
 80022b4:	eb63 0901 	sbc.w	r9, r3, r1
 80022b8:	f04f 0200 	mov.w	r2, #0
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80022c4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80022c8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80022cc:	4690      	mov	r8, r2
 80022ce:	4699      	mov	r9, r3
 80022d0:	4623      	mov	r3, r4
 80022d2:	eb18 0303 	adds.w	r3, r8, r3
 80022d6:	613b      	str	r3, [r7, #16]
 80022d8:	462b      	mov	r3, r5
 80022da:	eb49 0303 	adc.w	r3, r9, r3
 80022de:	617b      	str	r3, [r7, #20]
 80022e0:	f04f 0200 	mov.w	r2, #0
 80022e4:	f04f 0300 	mov.w	r3, #0
 80022e8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80022ec:	4629      	mov	r1, r5
 80022ee:	024b      	lsls	r3, r1, #9
 80022f0:	4621      	mov	r1, r4
 80022f2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80022f6:	4621      	mov	r1, r4
 80022f8:	024a      	lsls	r2, r1, #9
 80022fa:	4610      	mov	r0, r2
 80022fc:	4619      	mov	r1, r3
 80022fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002302:	2200      	movs	r2, #0
 8002304:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002306:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002308:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800230c:	f7fd ffd8 	bl	80002c0 <__aeabi_uldivmod>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4613      	mov	r3, r2
 8002316:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800231a:	e065      	b.n	80023e8 <HAL_RCC_GetSysClockFreq+0x420>
 800231c:	40023800 	.word	0x40023800
 8002320:	00f42400 	.word	0x00f42400
 8002324:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002328:	4b3d      	ldr	r3, [pc, #244]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x458>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	099b      	lsrs	r3, r3, #6
 800232e:	2200      	movs	r2, #0
 8002330:	4618      	mov	r0, r3
 8002332:	4611      	mov	r1, r2
 8002334:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002338:	653b      	str	r3, [r7, #80]	@ 0x50
 800233a:	2300      	movs	r3, #0
 800233c:	657b      	str	r3, [r7, #84]	@ 0x54
 800233e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002342:	4642      	mov	r2, r8
 8002344:	464b      	mov	r3, r9
 8002346:	f04f 0000 	mov.w	r0, #0
 800234a:	f04f 0100 	mov.w	r1, #0
 800234e:	0159      	lsls	r1, r3, #5
 8002350:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002354:	0150      	lsls	r0, r2, #5
 8002356:	4602      	mov	r2, r0
 8002358:	460b      	mov	r3, r1
 800235a:	4641      	mov	r1, r8
 800235c:	1a51      	subs	r1, r2, r1
 800235e:	60b9      	str	r1, [r7, #8]
 8002360:	4649      	mov	r1, r9
 8002362:	eb63 0301 	sbc.w	r3, r3, r1
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	f04f 0200 	mov.w	r2, #0
 800236c:	f04f 0300 	mov.w	r3, #0
 8002370:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002374:	4659      	mov	r1, fp
 8002376:	018b      	lsls	r3, r1, #6
 8002378:	4651      	mov	r1, sl
 800237a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800237e:	4651      	mov	r1, sl
 8002380:	018a      	lsls	r2, r1, #6
 8002382:	4651      	mov	r1, sl
 8002384:	1a54      	subs	r4, r2, r1
 8002386:	4659      	mov	r1, fp
 8002388:	eb63 0501 	sbc.w	r5, r3, r1
 800238c:	f04f 0200 	mov.w	r2, #0
 8002390:	f04f 0300 	mov.w	r3, #0
 8002394:	00eb      	lsls	r3, r5, #3
 8002396:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800239a:	00e2      	lsls	r2, r4, #3
 800239c:	4614      	mov	r4, r2
 800239e:	461d      	mov	r5, r3
 80023a0:	4643      	mov	r3, r8
 80023a2:	18e3      	adds	r3, r4, r3
 80023a4:	603b      	str	r3, [r7, #0]
 80023a6:	464b      	mov	r3, r9
 80023a8:	eb45 0303 	adc.w	r3, r5, r3
 80023ac:	607b      	str	r3, [r7, #4]
 80023ae:	f04f 0200 	mov.w	r2, #0
 80023b2:	f04f 0300 	mov.w	r3, #0
 80023b6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80023ba:	4629      	mov	r1, r5
 80023bc:	028b      	lsls	r3, r1, #10
 80023be:	4621      	mov	r1, r4
 80023c0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80023c4:	4621      	mov	r1, r4
 80023c6:	028a      	lsls	r2, r1, #10
 80023c8:	4610      	mov	r0, r2
 80023ca:	4619      	mov	r1, r3
 80023cc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80023d0:	2200      	movs	r2, #0
 80023d2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80023d4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80023d6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80023da:	f7fd ff71 	bl	80002c0 <__aeabi_uldivmod>
 80023de:	4602      	mov	r2, r0
 80023e0:	460b      	mov	r3, r1
 80023e2:	4613      	mov	r3, r2
 80023e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 80023e8:	4b0d      	ldr	r3, [pc, #52]	@ (8002420 <HAL_RCC_GetSysClockFreq+0x458>)
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	0f1b      	lsrs	r3, r3, #28
 80023ee:	f003 0307 	and.w	r3, r3, #7
 80023f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 80023f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80023fa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80023fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002402:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002406:	e003      	b.n	8002410 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002408:	4b06      	ldr	r3, [pc, #24]	@ (8002424 <HAL_RCC_GetSysClockFreq+0x45c>)
 800240a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800240e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002410:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002414:	4618      	mov	r0, r3
 8002416:	37b8      	adds	r7, #184	@ 0xb8
 8002418:	46bd      	mov	sp, r7
 800241a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800241e:	bf00      	nop
 8002420:	40023800 	.word	0x40023800
 8002424:	00f42400 	.word	0x00f42400

08002428 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b086      	sub	sp, #24
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d101      	bne.n	800243a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002436:	2301      	movs	r3, #1
 8002438:	e28d      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0301 	and.w	r3, r3, #1
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 8083 	beq.w	800254e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002448:	4b94      	ldr	r3, [pc, #592]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 800244a:	689b      	ldr	r3, [r3, #8]
 800244c:	f003 030c 	and.w	r3, r3, #12
 8002450:	2b04      	cmp	r3, #4
 8002452:	d019      	beq.n	8002488 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002454:	4b91      	ldr	r3, [pc, #580]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002456:	689b      	ldr	r3, [r3, #8]
 8002458:	f003 030c 	and.w	r3, r3, #12
        || \
 800245c:	2b08      	cmp	r3, #8
 800245e:	d106      	bne.n	800246e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002460:	4b8e      	ldr	r3, [pc, #568]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002468:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800246c:	d00c      	beq.n	8002488 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800246e:	4b8b      	ldr	r3, [pc, #556]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002470:	689b      	ldr	r3, [r3, #8]
 8002472:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002476:	2b0c      	cmp	r3, #12
 8002478:	d112      	bne.n	80024a0 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800247a:	4b88      	ldr	r3, [pc, #544]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002482:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002486:	d10b      	bne.n	80024a0 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002488:	4b84      	ldr	r3, [pc, #528]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002490:	2b00      	cmp	r3, #0
 8002492:	d05b      	beq.n	800254c <HAL_RCC_OscConfig+0x124>
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	685b      	ldr	r3, [r3, #4]
 8002498:	2b00      	cmp	r3, #0
 800249a:	d157      	bne.n	800254c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e25a      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	685b      	ldr	r3, [r3, #4]
 80024a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a8:	d106      	bne.n	80024b8 <HAL_RCC_OscConfig+0x90>
 80024aa:	4b7c      	ldr	r3, [pc, #496]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a7b      	ldr	r2, [pc, #492]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024b0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b4:	6013      	str	r3, [r2, #0]
 80024b6:	e01d      	b.n	80024f4 <HAL_RCC_OscConfig+0xcc>
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	685b      	ldr	r3, [r3, #4]
 80024bc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024c0:	d10c      	bne.n	80024dc <HAL_RCC_OscConfig+0xb4>
 80024c2:	4b76      	ldr	r3, [pc, #472]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	4a75      	ldr	r2, [pc, #468]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024cc:	6013      	str	r3, [r2, #0]
 80024ce:	4b73      	ldr	r3, [pc, #460]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a72      	ldr	r2, [pc, #456]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024d8:	6013      	str	r3, [r2, #0]
 80024da:	e00b      	b.n	80024f4 <HAL_RCC_OscConfig+0xcc>
 80024dc:	4b6f      	ldr	r3, [pc, #444]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a6e      	ldr	r2, [pc, #440]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024e2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024e6:	6013      	str	r3, [r2, #0]
 80024e8:	4b6c      	ldr	r3, [pc, #432]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a6b      	ldr	r2, [pc, #428]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80024ee:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	685b      	ldr	r3, [r3, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d013      	beq.n	8002524 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024fc:	f7ff f8c8 	bl	8001690 <HAL_GetTick>
 8002500:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002502:	e008      	b.n	8002516 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002504:	f7ff f8c4 	bl	8001690 <HAL_GetTick>
 8002508:	4602      	mov	r2, r0
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	1ad3      	subs	r3, r2, r3
 800250e:	2b64      	cmp	r3, #100	@ 0x64
 8002510:	d901      	bls.n	8002516 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002512:	2303      	movs	r3, #3
 8002514:	e21f      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002516:	4b61      	ldr	r3, [pc, #388]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800251e:	2b00      	cmp	r3, #0
 8002520:	d0f0      	beq.n	8002504 <HAL_RCC_OscConfig+0xdc>
 8002522:	e014      	b.n	800254e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002524:	f7ff f8b4 	bl	8001690 <HAL_GetTick>
 8002528:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800252a:	e008      	b.n	800253e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800252c:	f7ff f8b0 	bl	8001690 <HAL_GetTick>
 8002530:	4602      	mov	r2, r0
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	1ad3      	subs	r3, r2, r3
 8002536:	2b64      	cmp	r3, #100	@ 0x64
 8002538:	d901      	bls.n	800253e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800253a:	2303      	movs	r3, #3
 800253c:	e20b      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800253e:	4b57      	ldr	r3, [pc, #348]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d1f0      	bne.n	800252c <HAL_RCC_OscConfig+0x104>
 800254a:	e000      	b.n	800254e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800254c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0302 	and.w	r3, r3, #2
 8002556:	2b00      	cmp	r3, #0
 8002558:	d06f      	beq.n	800263a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800255a:	4b50      	ldr	r3, [pc, #320]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 800255c:	689b      	ldr	r3, [r3, #8]
 800255e:	f003 030c 	and.w	r3, r3, #12
 8002562:	2b00      	cmp	r3, #0
 8002564:	d017      	beq.n	8002596 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002566:	4b4d      	ldr	r3, [pc, #308]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 030c 	and.w	r3, r3, #12
        || \
 800256e:	2b08      	cmp	r3, #8
 8002570:	d105      	bne.n	800257e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002572:	4b4a      	ldr	r3, [pc, #296]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800257a:	2b00      	cmp	r3, #0
 800257c:	d00b      	beq.n	8002596 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800257e:	4b47      	ldr	r3, [pc, #284]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002580:	689b      	ldr	r3, [r3, #8]
 8002582:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002586:	2b0c      	cmp	r3, #12
 8002588:	d11c      	bne.n	80025c4 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800258a:	4b44      	ldr	r3, [pc, #272]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 800258c:	685b      	ldr	r3, [r3, #4]
 800258e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d116      	bne.n	80025c4 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002596:	4b41      	ldr	r3, [pc, #260]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0302 	and.w	r3, r3, #2
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d005      	beq.n	80025ae <HAL_RCC_OscConfig+0x186>
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	68db      	ldr	r3, [r3, #12]
 80025a6:	2b01      	cmp	r3, #1
 80025a8:	d001      	beq.n	80025ae <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e1d3      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025ae:	4b3b      	ldr	r3, [pc, #236]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	00db      	lsls	r3, r3, #3
 80025bc:	4937      	ldr	r1, [pc, #220]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80025be:	4313      	orrs	r3, r2
 80025c0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025c2:	e03a      	b.n	800263a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	68db      	ldr	r3, [r3, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d020      	beq.n	800260e <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025cc:	4b34      	ldr	r3, [pc, #208]	@ (80026a0 <HAL_RCC_OscConfig+0x278>)
 80025ce:	2201      	movs	r2, #1
 80025d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d2:	f7ff f85d 	bl	8001690 <HAL_GetTick>
 80025d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025d8:	e008      	b.n	80025ec <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025da:	f7ff f859 	bl	8001690 <HAL_GetTick>
 80025de:	4602      	mov	r2, r0
 80025e0:	693b      	ldr	r3, [r7, #16]
 80025e2:	1ad3      	subs	r3, r2, r3
 80025e4:	2b02      	cmp	r3, #2
 80025e6:	d901      	bls.n	80025ec <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 80025e8:	2303      	movs	r3, #3
 80025ea:	e1b4      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ec:	4b2b      	ldr	r3, [pc, #172]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0302 	and.w	r3, r3, #2
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d0f0      	beq.n	80025da <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025f8:	4b28      	ldr	r3, [pc, #160]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	691b      	ldr	r3, [r3, #16]
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4925      	ldr	r1, [pc, #148]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002608:	4313      	orrs	r3, r2
 800260a:	600b      	str	r3, [r1, #0]
 800260c:	e015      	b.n	800263a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800260e:	4b24      	ldr	r3, [pc, #144]	@ (80026a0 <HAL_RCC_OscConfig+0x278>)
 8002610:	2200      	movs	r2, #0
 8002612:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002614:	f7ff f83c 	bl	8001690 <HAL_GetTick>
 8002618:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800261a:	e008      	b.n	800262e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800261c:	f7ff f838 	bl	8001690 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d901      	bls.n	800262e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e193      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800262e:	4b1b      	ldr	r3, [pc, #108]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f003 0302 	and.w	r3, r3, #2
 8002636:	2b00      	cmp	r3, #0
 8002638:	d1f0      	bne.n	800261c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f003 0308 	and.w	r3, r3, #8
 8002642:	2b00      	cmp	r3, #0
 8002644:	d036      	beq.n	80026b4 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	695b      	ldr	r3, [r3, #20]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d016      	beq.n	800267c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800264e:	4b15      	ldr	r3, [pc, #84]	@ (80026a4 <HAL_RCC_OscConfig+0x27c>)
 8002650:	2201      	movs	r2, #1
 8002652:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002654:	f7ff f81c 	bl	8001690 <HAL_GetTick>
 8002658:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800265a:	e008      	b.n	800266e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800265c:	f7ff f818 	bl	8001690 <HAL_GetTick>
 8002660:	4602      	mov	r2, r0
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	1ad3      	subs	r3, r2, r3
 8002666:	2b02      	cmp	r3, #2
 8002668:	d901      	bls.n	800266e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800266a:	2303      	movs	r3, #3
 800266c:	e173      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800266e:	4b0b      	ldr	r3, [pc, #44]	@ (800269c <HAL_RCC_OscConfig+0x274>)
 8002670:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002672:	f003 0302 	and.w	r3, r3, #2
 8002676:	2b00      	cmp	r3, #0
 8002678:	d0f0      	beq.n	800265c <HAL_RCC_OscConfig+0x234>
 800267a:	e01b      	b.n	80026b4 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800267c:	4b09      	ldr	r3, [pc, #36]	@ (80026a4 <HAL_RCC_OscConfig+0x27c>)
 800267e:	2200      	movs	r2, #0
 8002680:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002682:	f7ff f805 	bl	8001690 <HAL_GetTick>
 8002686:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002688:	e00e      	b.n	80026a8 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800268a:	f7ff f801 	bl	8001690 <HAL_GetTick>
 800268e:	4602      	mov	r2, r0
 8002690:	693b      	ldr	r3, [r7, #16]
 8002692:	1ad3      	subs	r3, r2, r3
 8002694:	2b02      	cmp	r3, #2
 8002696:	d907      	bls.n	80026a8 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002698:	2303      	movs	r3, #3
 800269a:	e15c      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
 800269c:	40023800 	.word	0x40023800
 80026a0:	42470000 	.word	0x42470000
 80026a4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026a8:	4b8a      	ldr	r3, [pc, #552]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80026aa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80026ac:	f003 0302 	and.w	r3, r3, #2
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d1ea      	bne.n	800268a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	f003 0304 	and.w	r3, r3, #4
 80026bc:	2b00      	cmp	r3, #0
 80026be:	f000 8097 	beq.w	80027f0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026c2:	2300      	movs	r3, #0
 80026c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026c6:	4b83      	ldr	r3, [pc, #524]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80026c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d10f      	bne.n	80026f2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026d2:	2300      	movs	r3, #0
 80026d4:	60bb      	str	r3, [r7, #8]
 80026d6:	4b7f      	ldr	r3, [pc, #508]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80026d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026da:	4a7e      	ldr	r2, [pc, #504]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80026dc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026e0:	6413      	str	r3, [r2, #64]	@ 0x40
 80026e2:	4b7c      	ldr	r3, [pc, #496]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80026e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026e6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026ea:	60bb      	str	r3, [r7, #8]
 80026ec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026ee:	2301      	movs	r3, #1
 80026f0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026f2:	4b79      	ldr	r3, [pc, #484]	@ (80028d8 <HAL_RCC_OscConfig+0x4b0>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d118      	bne.n	8002730 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80026fe:	4b76      	ldr	r3, [pc, #472]	@ (80028d8 <HAL_RCC_OscConfig+0x4b0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	4a75      	ldr	r2, [pc, #468]	@ (80028d8 <HAL_RCC_OscConfig+0x4b0>)
 8002704:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002708:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800270a:	f7fe ffc1 	bl	8001690 <HAL_GetTick>
 800270e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002710:	e008      	b.n	8002724 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002712:	f7fe ffbd 	bl	8001690 <HAL_GetTick>
 8002716:	4602      	mov	r2, r0
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	1ad3      	subs	r3, r2, r3
 800271c:	2b02      	cmp	r3, #2
 800271e:	d901      	bls.n	8002724 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002720:	2303      	movs	r3, #3
 8002722:	e118      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002724:	4b6c      	ldr	r3, [pc, #432]	@ (80028d8 <HAL_RCC_OscConfig+0x4b0>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800272c:	2b00      	cmp	r3, #0
 800272e:	d0f0      	beq.n	8002712 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2b01      	cmp	r3, #1
 8002736:	d106      	bne.n	8002746 <HAL_RCC_OscConfig+0x31e>
 8002738:	4b66      	ldr	r3, [pc, #408]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 800273a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800273c:	4a65      	ldr	r2, [pc, #404]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 800273e:	f043 0301 	orr.w	r3, r3, #1
 8002742:	6713      	str	r3, [r2, #112]	@ 0x70
 8002744:	e01c      	b.n	8002780 <HAL_RCC_OscConfig+0x358>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	689b      	ldr	r3, [r3, #8]
 800274a:	2b05      	cmp	r3, #5
 800274c:	d10c      	bne.n	8002768 <HAL_RCC_OscConfig+0x340>
 800274e:	4b61      	ldr	r3, [pc, #388]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 8002750:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002752:	4a60      	ldr	r2, [pc, #384]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 8002754:	f043 0304 	orr.w	r3, r3, #4
 8002758:	6713      	str	r3, [r2, #112]	@ 0x70
 800275a:	4b5e      	ldr	r3, [pc, #376]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 800275c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800275e:	4a5d      	ldr	r2, [pc, #372]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 8002760:	f043 0301 	orr.w	r3, r3, #1
 8002764:	6713      	str	r3, [r2, #112]	@ 0x70
 8002766:	e00b      	b.n	8002780 <HAL_RCC_OscConfig+0x358>
 8002768:	4b5a      	ldr	r3, [pc, #360]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 800276a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800276c:	4a59      	ldr	r2, [pc, #356]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 800276e:	f023 0301 	bic.w	r3, r3, #1
 8002772:	6713      	str	r3, [r2, #112]	@ 0x70
 8002774:	4b57      	ldr	r3, [pc, #348]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 8002776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002778:	4a56      	ldr	r2, [pc, #344]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 800277a:	f023 0304 	bic.w	r3, r3, #4
 800277e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	689b      	ldr	r3, [r3, #8]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d015      	beq.n	80027b4 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002788:	f7fe ff82 	bl	8001690 <HAL_GetTick>
 800278c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800278e:	e00a      	b.n	80027a6 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002790:	f7fe ff7e 	bl	8001690 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	693b      	ldr	r3, [r7, #16]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800279e:	4293      	cmp	r3, r2
 80027a0:	d901      	bls.n	80027a6 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 80027a2:	2303      	movs	r3, #3
 80027a4:	e0d7      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027a6:	4b4b      	ldr	r3, [pc, #300]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80027a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027aa:	f003 0302 	and.w	r3, r3, #2
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d0ee      	beq.n	8002790 <HAL_RCC_OscConfig+0x368>
 80027b2:	e014      	b.n	80027de <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027b4:	f7fe ff6c 	bl	8001690 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027ba:	e00a      	b.n	80027d2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027bc:	f7fe ff68 	bl	8001690 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027ca:	4293      	cmp	r3, r2
 80027cc:	d901      	bls.n	80027d2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 80027ce:	2303      	movs	r3, #3
 80027d0:	e0c1      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027d2:	4b40      	ldr	r3, [pc, #256]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80027d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80027d6:	f003 0302 	and.w	r3, r3, #2
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d1ee      	bne.n	80027bc <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80027de:	7dfb      	ldrb	r3, [r7, #23]
 80027e0:	2b01      	cmp	r3, #1
 80027e2:	d105      	bne.n	80027f0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80027e4:	4b3b      	ldr	r3, [pc, #236]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80027e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e8:	4a3a      	ldr	r2, [pc, #232]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80027ea:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80027ee:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	699b      	ldr	r3, [r3, #24]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	f000 80ad 	beq.w	8002954 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80027fa:	4b36      	ldr	r3, [pc, #216]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 030c 	and.w	r3, r3, #12
 8002802:	2b08      	cmp	r3, #8
 8002804:	d060      	beq.n	80028c8 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	699b      	ldr	r3, [r3, #24]
 800280a:	2b02      	cmp	r3, #2
 800280c:	d145      	bne.n	800289a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280e:	4b33      	ldr	r3, [pc, #204]	@ (80028dc <HAL_RCC_OscConfig+0x4b4>)
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002814:	f7fe ff3c 	bl	8001690 <HAL_GetTick>
 8002818:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800281a:	e008      	b.n	800282e <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800281c:	f7fe ff38 	bl	8001690 <HAL_GetTick>
 8002820:	4602      	mov	r2, r0
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	1ad3      	subs	r3, r2, r3
 8002826:	2b02      	cmp	r3, #2
 8002828:	d901      	bls.n	800282e <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 800282a:	2303      	movs	r3, #3
 800282c:	e093      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800282e:	4b29      	ldr	r3, [pc, #164]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d1f0      	bne.n	800281c <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	69da      	ldr	r2, [r3, #28]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6a1b      	ldr	r3, [r3, #32]
 8002842:	431a      	orrs	r2, r3
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002848:	019b      	lsls	r3, r3, #6
 800284a:	431a      	orrs	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002850:	085b      	lsrs	r3, r3, #1
 8002852:	3b01      	subs	r3, #1
 8002854:	041b      	lsls	r3, r3, #16
 8002856:	431a      	orrs	r2, r3
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800285c:	061b      	lsls	r3, r3, #24
 800285e:	431a      	orrs	r2, r3
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002864:	071b      	lsls	r3, r3, #28
 8002866:	491b      	ldr	r1, [pc, #108]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 8002868:	4313      	orrs	r3, r2
 800286a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800286c:	4b1b      	ldr	r3, [pc, #108]	@ (80028dc <HAL_RCC_OscConfig+0x4b4>)
 800286e:	2201      	movs	r2, #1
 8002870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002872:	f7fe ff0d 	bl	8001690 <HAL_GetTick>
 8002876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002878:	e008      	b.n	800288c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800287a:	f7fe ff09 	bl	8001690 <HAL_GetTick>
 800287e:	4602      	mov	r2, r0
 8002880:	693b      	ldr	r3, [r7, #16]
 8002882:	1ad3      	subs	r3, r2, r3
 8002884:	2b02      	cmp	r3, #2
 8002886:	d901      	bls.n	800288c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002888:	2303      	movs	r3, #3
 800288a:	e064      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800288c:	4b11      	ldr	r3, [pc, #68]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002894:	2b00      	cmp	r3, #0
 8002896:	d0f0      	beq.n	800287a <HAL_RCC_OscConfig+0x452>
 8002898:	e05c      	b.n	8002954 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800289a:	4b10      	ldr	r3, [pc, #64]	@ (80028dc <HAL_RCC_OscConfig+0x4b4>)
 800289c:	2200      	movs	r2, #0
 800289e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028a0:	f7fe fef6 	bl	8001690 <HAL_GetTick>
 80028a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028a6:	e008      	b.n	80028ba <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028a8:	f7fe fef2 	bl	8001690 <HAL_GetTick>
 80028ac:	4602      	mov	r2, r0
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	2b02      	cmp	r3, #2
 80028b4:	d901      	bls.n	80028ba <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 80028b6:	2303      	movs	r3, #3
 80028b8:	e04d      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80028ba:	4b06      	ldr	r3, [pc, #24]	@ (80028d4 <HAL_RCC_OscConfig+0x4ac>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1f0      	bne.n	80028a8 <HAL_RCC_OscConfig+0x480>
 80028c6:	e045      	b.n	8002954 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	699b      	ldr	r3, [r3, #24]
 80028cc:	2b01      	cmp	r3, #1
 80028ce:	d107      	bne.n	80028e0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 80028d0:	2301      	movs	r3, #1
 80028d2:	e040      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
 80028d4:	40023800 	.word	0x40023800
 80028d8:	40007000 	.word	0x40007000
 80028dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80028e0:	4b1f      	ldr	r3, [pc, #124]	@ (8002960 <HAL_RCC_OscConfig+0x538>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	699b      	ldr	r3, [r3, #24]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d030      	beq.n	8002950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d129      	bne.n	8002950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002906:	429a      	cmp	r2, r3
 8002908:	d122      	bne.n	8002950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800290a:	68fa      	ldr	r2, [r7, #12]
 800290c:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002910:	4013      	ands	r3, r2
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002916:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002918:	4293      	cmp	r3, r2
 800291a:	d119      	bne.n	8002950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002926:	085b      	lsrs	r3, r3, #1
 8002928:	3b01      	subs	r3, #1
 800292a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800292c:	429a      	cmp	r2, r3
 800292e:	d10f      	bne.n	8002950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800293a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800293c:	429a      	cmp	r2, r3
 800293e:	d107      	bne.n	8002950 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800294c:	429a      	cmp	r2, r3
 800294e:	d001      	beq.n	8002954 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002950:	2301      	movs	r3, #1
 8002952:	e000      	b.n	8002956 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002954:	2300      	movs	r3, #0
}
 8002956:	4618      	mov	r0, r3
 8002958:	3718      	adds	r7, #24
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
 800295e:	bf00      	nop
 8002960:	40023800 	.word	0x40023800

08002964 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b082      	sub	sp, #8
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2b00      	cmp	r3, #0
 8002970:	d101      	bne.n	8002976 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e041      	b.n	80029fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800297c:	b2db      	uxtb	r3, r3
 800297e:	2b00      	cmp	r3, #0
 8002980:	d106      	bne.n	8002990 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	2200      	movs	r2, #0
 8002986:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f7fe fce4 	bl	8001358 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	2202      	movs	r2, #2
 8002994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	3304      	adds	r3, #4
 80029a0:	4619      	mov	r1, r3
 80029a2:	4610      	mov	r0, r2
 80029a4:	f000 fd42 	bl	800342c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	2201      	movs	r2, #1
 80029ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2201      	movs	r2, #1
 80029b4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	2201      	movs	r2, #1
 80029bc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	2201      	movs	r2, #1
 80029c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2201      	movs	r2, #1
 80029cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	2201      	movs	r2, #1
 80029d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2201      	movs	r2, #1
 80029dc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2201      	movs	r2, #1
 80029e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2201      	movs	r2, #1
 80029ec:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80029f8:	2300      	movs	r3, #0
}
 80029fa:	4618      	mov	r0, r3
 80029fc:	3708      	adds	r7, #8
 80029fe:	46bd      	mov	sp, r7
 8002a00:	bd80      	pop	{r7, pc}
	...

08002a04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a12:	b2db      	uxtb	r3, r3
 8002a14:	2b01      	cmp	r3, #1
 8002a16:	d001      	beq.n	8002a1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a18:	2301      	movs	r3, #1
 8002a1a:	e04e      	b.n	8002aba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	2202      	movs	r2, #2
 8002a20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	68da      	ldr	r2, [r3, #12]
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	f042 0201 	orr.w	r2, r2, #1
 8002a32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	4a23      	ldr	r2, [pc, #140]	@ (8002ac8 <HAL_TIM_Base_Start_IT+0xc4>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d022      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x80>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a46:	d01d      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x80>
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	4a1f      	ldr	r2, [pc, #124]	@ (8002acc <HAL_TIM_Base_Start_IT+0xc8>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d018      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x80>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	4a1e      	ldr	r2, [pc, #120]	@ (8002ad0 <HAL_TIM_Base_Start_IT+0xcc>)
 8002a58:	4293      	cmp	r3, r2
 8002a5a:	d013      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x80>
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4a1c      	ldr	r2, [pc, #112]	@ (8002ad4 <HAL_TIM_Base_Start_IT+0xd0>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d00e      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x80>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a1b      	ldr	r2, [pc, #108]	@ (8002ad8 <HAL_TIM_Base_Start_IT+0xd4>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d009      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x80>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	4a19      	ldr	r2, [pc, #100]	@ (8002adc <HAL_TIM_Base_Start_IT+0xd8>)
 8002a76:	4293      	cmp	r3, r2
 8002a78:	d004      	beq.n	8002a84 <HAL_TIM_Base_Start_IT+0x80>
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a18      	ldr	r2, [pc, #96]	@ (8002ae0 <HAL_TIM_Base_Start_IT+0xdc>)
 8002a80:	4293      	cmp	r3, r2
 8002a82:	d111      	bne.n	8002aa8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	689b      	ldr	r3, [r3, #8]
 8002a8a:	f003 0307 	and.w	r3, r3, #7
 8002a8e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	2b06      	cmp	r3, #6
 8002a94:	d010      	beq.n	8002ab8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	681a      	ldr	r2, [r3, #0]
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f042 0201 	orr.w	r2, r2, #1
 8002aa4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aa6:	e007      	b.n	8002ab8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	681a      	ldr	r2, [r3, #0]
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f042 0201 	orr.w	r2, r2, #1
 8002ab6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3714      	adds	r7, #20
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac4:	4770      	bx	lr
 8002ac6:	bf00      	nop
 8002ac8:	40010000 	.word	0x40010000
 8002acc:	40000400 	.word	0x40000400
 8002ad0:	40000800 	.word	0x40000800
 8002ad4:	40000c00 	.word	0x40000c00
 8002ad8:	40010400 	.word	0x40010400
 8002adc:	40014000 	.word	0x40014000
 8002ae0:	40001800 	.word	0x40001800

08002ae4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	68da      	ldr	r2, [r3, #12]
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f022 0201 	bic.w	r2, r2, #1
 8002afa:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	6a1a      	ldr	r2, [r3, #32]
 8002b02:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002b06:	4013      	ands	r3, r2
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d10f      	bne.n	8002b2c <HAL_TIM_Base_Stop_IT+0x48>
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	6a1a      	ldr	r2, [r3, #32]
 8002b12:	f240 4344 	movw	r3, #1092	@ 0x444
 8002b16:	4013      	ands	r3, r2
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d107      	bne.n	8002b2c <HAL_TIM_Base_Stop_IT+0x48>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681a      	ldr	r2, [r3, #0]
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f022 0201 	bic.w	r2, r2, #1
 8002b2a:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002b34:	2300      	movs	r3, #0
}
 8002b36:	4618      	mov	r0, r3
 8002b38:	370c      	adds	r7, #12
 8002b3a:	46bd      	mov	sp, r7
 8002b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b40:	4770      	bx	lr

08002b42 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d101      	bne.n	8002b54 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002b50:	2301      	movs	r3, #1
 8002b52:	e041      	b.n	8002bd8 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002b5a:	b2db      	uxtb	r3, r3
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d106      	bne.n	8002b6e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f839 	bl	8002be0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	2202      	movs	r2, #2
 8002b72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681a      	ldr	r2, [r3, #0]
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	3304      	adds	r3, #4
 8002b7e:	4619      	mov	r1, r3
 8002b80:	4610      	mov	r0, r2
 8002b82:	f000 fc53 	bl	800342c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2201      	movs	r2, #1
 8002b8a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2201      	movs	r2, #1
 8002b9a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2201      	movs	r2, #1
 8002ba2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2201      	movs	r2, #1
 8002baa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2201      	movs	r2, #1
 8002bba:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2201      	movs	r2, #1
 8002bca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	2201      	movs	r2, #1
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002bd6:	2300      	movs	r3, #0
}
 8002bd8:	4618      	mov	r0, r3
 8002bda:	3708      	adds	r7, #8
 8002bdc:	46bd      	mov	sp, r7
 8002bde:	bd80      	pop	{r7, pc}

08002be0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b083      	sub	sp, #12
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002be8:	bf00      	nop
 8002bea:	370c      	adds	r7, #12
 8002bec:	46bd      	mov	sp, r7
 8002bee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf2:	4770      	bx	lr

08002bf4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b084      	sub	sp, #16
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
 8002bfc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002bfe:	683b      	ldr	r3, [r7, #0]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d109      	bne.n	8002c18 <HAL_TIM_PWM_Start+0x24>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002c0a:	b2db      	uxtb	r3, r3
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	bf14      	ite	ne
 8002c10:	2301      	movne	r3, #1
 8002c12:	2300      	moveq	r3, #0
 8002c14:	b2db      	uxtb	r3, r3
 8002c16:	e022      	b.n	8002c5e <HAL_TIM_PWM_Start+0x6a>
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	2b04      	cmp	r3, #4
 8002c1c:	d109      	bne.n	8002c32 <HAL_TIM_PWM_Start+0x3e>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002c24:	b2db      	uxtb	r3, r3
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	bf14      	ite	ne
 8002c2a:	2301      	movne	r3, #1
 8002c2c:	2300      	moveq	r3, #0
 8002c2e:	b2db      	uxtb	r3, r3
 8002c30:	e015      	b.n	8002c5e <HAL_TIM_PWM_Start+0x6a>
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	2b08      	cmp	r3, #8
 8002c36:	d109      	bne.n	8002c4c <HAL_TIM_PWM_Start+0x58>
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	bf14      	ite	ne
 8002c44:	2301      	movne	r3, #1
 8002c46:	2300      	moveq	r3, #0
 8002c48:	b2db      	uxtb	r3, r3
 8002c4a:	e008      	b.n	8002c5e <HAL_TIM_PWM_Start+0x6a>
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c52:	b2db      	uxtb	r3, r3
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	bf14      	ite	ne
 8002c58:	2301      	movne	r3, #1
 8002c5a:	2300      	moveq	r3, #0
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	e07c      	b.n	8002d60 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	d104      	bne.n	8002c76 <HAL_TIM_PWM_Start+0x82>
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2202      	movs	r2, #2
 8002c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002c74:	e013      	b.n	8002c9e <HAL_TIM_PWM_Start+0xaa>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	2b04      	cmp	r3, #4
 8002c7a:	d104      	bne.n	8002c86 <HAL_TIM_PWM_Start+0x92>
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	2202      	movs	r2, #2
 8002c80:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002c84:	e00b      	b.n	8002c9e <HAL_TIM_PWM_Start+0xaa>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	2b08      	cmp	r3, #8
 8002c8a:	d104      	bne.n	8002c96 <HAL_TIM_PWM_Start+0xa2>
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2202      	movs	r2, #2
 8002c90:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002c94:	e003      	b.n	8002c9e <HAL_TIM_PWM_Start+0xaa>
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2202      	movs	r2, #2
 8002c9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	2201      	movs	r2, #1
 8002ca4:	6839      	ldr	r1, [r7, #0]
 8002ca6:	4618      	mov	r0, r3
 8002ca8:	f000 ff47 	bl	8003b3a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	4a2d      	ldr	r2, [pc, #180]	@ (8002d68 <HAL_TIM_PWM_Start+0x174>)
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d004      	beq.n	8002cc0 <HAL_TIM_PWM_Start+0xcc>
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	4a2c      	ldr	r2, [pc, #176]	@ (8002d6c <HAL_TIM_PWM_Start+0x178>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d101      	bne.n	8002cc4 <HAL_TIM_PWM_Start+0xd0>
 8002cc0:	2301      	movs	r3, #1
 8002cc2:	e000      	b.n	8002cc6 <HAL_TIM_PWM_Start+0xd2>
 8002cc4:	2300      	movs	r3, #0
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	d007      	beq.n	8002cda <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002cd8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4a22      	ldr	r2, [pc, #136]	@ (8002d68 <HAL_TIM_PWM_Start+0x174>)
 8002ce0:	4293      	cmp	r3, r2
 8002ce2:	d022      	beq.n	8002d2a <HAL_TIM_PWM_Start+0x136>
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002cec:	d01d      	beq.n	8002d2a <HAL_TIM_PWM_Start+0x136>
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a1f      	ldr	r2, [pc, #124]	@ (8002d70 <HAL_TIM_PWM_Start+0x17c>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d018      	beq.n	8002d2a <HAL_TIM_PWM_Start+0x136>
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	4a1d      	ldr	r2, [pc, #116]	@ (8002d74 <HAL_TIM_PWM_Start+0x180>)
 8002cfe:	4293      	cmp	r3, r2
 8002d00:	d013      	beq.n	8002d2a <HAL_TIM_PWM_Start+0x136>
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a1c      	ldr	r2, [pc, #112]	@ (8002d78 <HAL_TIM_PWM_Start+0x184>)
 8002d08:	4293      	cmp	r3, r2
 8002d0a:	d00e      	beq.n	8002d2a <HAL_TIM_PWM_Start+0x136>
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4a16      	ldr	r2, [pc, #88]	@ (8002d6c <HAL_TIM_PWM_Start+0x178>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d009      	beq.n	8002d2a <HAL_TIM_PWM_Start+0x136>
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a18      	ldr	r2, [pc, #96]	@ (8002d7c <HAL_TIM_PWM_Start+0x188>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d004      	beq.n	8002d2a <HAL_TIM_PWM_Start+0x136>
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a16      	ldr	r2, [pc, #88]	@ (8002d80 <HAL_TIM_PWM_Start+0x18c>)
 8002d26:	4293      	cmp	r3, r2
 8002d28:	d111      	bne.n	8002d4e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	689b      	ldr	r3, [r3, #8]
 8002d30:	f003 0307 	and.w	r3, r3, #7
 8002d34:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	2b06      	cmp	r3, #6
 8002d3a:	d010      	beq.n	8002d5e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f042 0201 	orr.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002d4c:	e007      	b.n	8002d5e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	681a      	ldr	r2, [r3, #0]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f042 0201 	orr.w	r2, r2, #1
 8002d5c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002d5e:	2300      	movs	r3, #0
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3710      	adds	r7, #16
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	40010000 	.word	0x40010000
 8002d6c:	40010400 	.word	0x40010400
 8002d70:	40000400 	.word	0x40000400
 8002d74:	40000800 	.word	0x40000800
 8002d78:	40000c00 	.word	0x40000c00
 8002d7c:	40014000 	.word	0x40014000
 8002d80:	40001800 	.word	0x40001800

08002d84 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b082      	sub	sp, #8
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	2200      	movs	r2, #0
 8002d94:	6839      	ldr	r1, [r7, #0]
 8002d96:	4618      	mov	r0, r3
 8002d98:	f000 fecf 	bl	8003b3a <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4a2e      	ldr	r2, [pc, #184]	@ (8002e5c <HAL_TIM_PWM_Stop+0xd8>)
 8002da2:	4293      	cmp	r3, r2
 8002da4:	d004      	beq.n	8002db0 <HAL_TIM_PWM_Stop+0x2c>
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a2d      	ldr	r2, [pc, #180]	@ (8002e60 <HAL_TIM_PWM_Stop+0xdc>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d101      	bne.n	8002db4 <HAL_TIM_PWM_Stop+0x30>
 8002db0:	2301      	movs	r3, #1
 8002db2:	e000      	b.n	8002db6 <HAL_TIM_PWM_Stop+0x32>
 8002db4:	2300      	movs	r3, #0
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d017      	beq.n	8002dea <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	6a1a      	ldr	r2, [r3, #32]
 8002dc0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d10f      	bne.n	8002dea <HAL_TIM_PWM_Stop+0x66>
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	6a1a      	ldr	r2, [r3, #32]
 8002dd0:	f240 4344 	movw	r3, #1092	@ 0x444
 8002dd4:	4013      	ands	r3, r2
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d107      	bne.n	8002dea <HAL_TIM_PWM_Stop+0x66>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002de8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	6a1a      	ldr	r2, [r3, #32]
 8002df0:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002df4:	4013      	ands	r3, r2
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10f      	bne.n	8002e1a <HAL_TIM_PWM_Stop+0x96>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	6a1a      	ldr	r2, [r3, #32]
 8002e00:	f240 4344 	movw	r3, #1092	@ 0x444
 8002e04:	4013      	ands	r3, r2
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d107      	bne.n	8002e1a <HAL_TIM_PWM_Stop+0x96>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681a      	ldr	r2, [r3, #0]
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f022 0201 	bic.w	r2, r2, #1
 8002e18:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d104      	bne.n	8002e2a <HAL_TIM_PWM_Stop+0xa6>
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	2201      	movs	r2, #1
 8002e24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e28:	e013      	b.n	8002e52 <HAL_TIM_PWM_Stop+0xce>
 8002e2a:	683b      	ldr	r3, [r7, #0]
 8002e2c:	2b04      	cmp	r3, #4
 8002e2e:	d104      	bne.n	8002e3a <HAL_TIM_PWM_Stop+0xb6>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002e38:	e00b      	b.n	8002e52 <HAL_TIM_PWM_Stop+0xce>
 8002e3a:	683b      	ldr	r3, [r7, #0]
 8002e3c:	2b08      	cmp	r3, #8
 8002e3e:	d104      	bne.n	8002e4a <HAL_TIM_PWM_Stop+0xc6>
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2201      	movs	r2, #1
 8002e44:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002e48:	e003      	b.n	8002e52 <HAL_TIM_PWM_Stop+0xce>
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8002e52:	2300      	movs	r3, #0
}
 8002e54:	4618      	mov	r0, r3
 8002e56:	3708      	adds	r7, #8
 8002e58:	46bd      	mov	sp, r7
 8002e5a:	bd80      	pop	{r7, pc}
 8002e5c:	40010000 	.word	0x40010000
 8002e60:	40010400 	.word	0x40010400

08002e64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b084      	sub	sp, #16
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	691b      	ldr	r3, [r3, #16]
 8002e7a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f003 0302 	and.w	r3, r3, #2
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d020      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	f003 0302 	and.w	r3, r3, #2
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d01b      	beq.n	8002ec8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	f06f 0202 	mvn.w	r2, #2
 8002e98:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	699b      	ldr	r3, [r3, #24]
 8002ea6:	f003 0303 	and.w	r3, r3, #3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d003      	beq.n	8002eb6 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f000 fa9d 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 8002eb4:	e005      	b.n	8002ec2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa8f 	bl	80033da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ebc:	6878      	ldr	r0, [r7, #4]
 8002ebe:	f000 faa0 	bl	8003402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	2200      	movs	r2, #0
 8002ec6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002ec8:	68bb      	ldr	r3, [r7, #8]
 8002eca:	f003 0304 	and.w	r3, r3, #4
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d020      	beq.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	f003 0304 	and.w	r3, r3, #4
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d01b      	beq.n	8002f14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f06f 0204 	mvn.w	r2, #4
 8002ee4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	2202      	movs	r2, #2
 8002eea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699b      	ldr	r3, [r3, #24]
 8002ef2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d003      	beq.n	8002f02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002efa:	6878      	ldr	r0, [r7, #4]
 8002efc:	f000 fa77 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 8002f00:	e005      	b.n	8002f0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f02:	6878      	ldr	r0, [r7, #4]
 8002f04:	f000 fa69 	bl	80033da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fa7a 	bl	8003402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	f003 0308 	and.w	r3, r3, #8
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d020      	beq.n	8002f60 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	f003 0308 	and.w	r3, r3, #8
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d01b      	beq.n	8002f60 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f06f 0208 	mvn.w	r2, #8
 8002f30:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	2204      	movs	r2, #4
 8002f36:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	69db      	ldr	r3, [r3, #28]
 8002f3e:	f003 0303 	and.w	r3, r3, #3
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d003      	beq.n	8002f4e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f46:	6878      	ldr	r0, [r7, #4]
 8002f48:	f000 fa51 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 8002f4c:	e005      	b.n	8002f5a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f4e:	6878      	ldr	r0, [r7, #4]
 8002f50:	f000 fa43 	bl	80033da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f54:	6878      	ldr	r0, [r7, #4]
 8002f56:	f000 fa54 	bl	8003402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8002f60:	68bb      	ldr	r3, [r7, #8]
 8002f62:	f003 0310 	and.w	r3, r3, #16
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d020      	beq.n	8002fac <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	f003 0310 	and.w	r3, r3, #16
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d01b      	beq.n	8002fac <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f06f 0210 	mvn.w	r2, #16
 8002f7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2208      	movs	r2, #8
 8002f82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	69db      	ldr	r3, [r3, #28]
 8002f8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d003      	beq.n	8002f9a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f92:	6878      	ldr	r0, [r7, #4]
 8002f94:	f000 fa2b 	bl	80033ee <HAL_TIM_IC_CaptureCallback>
 8002f98:	e005      	b.n	8002fa6 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f9a:	6878      	ldr	r0, [r7, #4]
 8002f9c:	f000 fa1d 	bl	80033da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 fa2e 	bl	8003402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2200      	movs	r2, #0
 8002faa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8002fac:	68bb      	ldr	r3, [r7, #8]
 8002fae:	f003 0301 	and.w	r3, r3, #1
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d00c      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	f003 0301 	and.w	r3, r3, #1
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d007      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0201 	mvn.w	r2, #1
 8002fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7fd fdf2 	bl	8000bb4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d00c      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d007      	beq.n	8002ff4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002fec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fee:	6878      	ldr	r0, [r7, #4]
 8002ff0:	f000 fe4e 	bl	8003c90 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d00c      	beq.n	8003018 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003004:	2b00      	cmp	r3, #0
 8003006:	d007      	beq.n	8003018 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003010:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003012:	6878      	ldr	r0, [r7, #4]
 8003014:	f000 f9ff 	bl	8003416 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003018:	68bb      	ldr	r3, [r7, #8]
 800301a:	f003 0320 	and.w	r3, r3, #32
 800301e:	2b00      	cmp	r3, #0
 8003020:	d00c      	beq.n	800303c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	f003 0320 	and.w	r3, r3, #32
 8003028:	2b00      	cmp	r3, #0
 800302a:	d007      	beq.n	800303c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f06f 0220 	mvn.w	r2, #32
 8003034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f000 fe20 	bl	8003c7c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800303c:	bf00      	nop
 800303e:	3710      	adds	r7, #16
 8003040:	46bd      	mov	sp, r7
 8003042:	bd80      	pop	{r7, pc}

08003044 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b086      	sub	sp, #24
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003050:	2300      	movs	r3, #0
 8003052:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800305a:	2b01      	cmp	r3, #1
 800305c:	d101      	bne.n	8003062 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800305e:	2302      	movs	r3, #2
 8003060:	e0ae      	b.n	80031c0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2201      	movs	r2, #1
 8003066:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2b0c      	cmp	r3, #12
 800306e:	f200 809f 	bhi.w	80031b0 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003072:	a201      	add	r2, pc, #4	@ (adr r2, 8003078 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003074:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003078:	080030ad 	.word	0x080030ad
 800307c:	080031b1 	.word	0x080031b1
 8003080:	080031b1 	.word	0x080031b1
 8003084:	080031b1 	.word	0x080031b1
 8003088:	080030ed 	.word	0x080030ed
 800308c:	080031b1 	.word	0x080031b1
 8003090:	080031b1 	.word	0x080031b1
 8003094:	080031b1 	.word	0x080031b1
 8003098:	0800312f 	.word	0x0800312f
 800309c:	080031b1 	.word	0x080031b1
 80030a0:	080031b1 	.word	0x080031b1
 80030a4:	080031b1 	.word	0x080031b1
 80030a8:	0800316f 	.word	0x0800316f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68b9      	ldr	r1, [r7, #8]
 80030b2:	4618      	mov	r0, r3
 80030b4:	f000 fa66 	bl	8003584 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	699a      	ldr	r2, [r3, #24]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f042 0208 	orr.w	r2, r2, #8
 80030c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	699a      	ldr	r2, [r3, #24]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0204 	bic.w	r2, r2, #4
 80030d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6999      	ldr	r1, [r3, #24]
 80030de:	68bb      	ldr	r3, [r7, #8]
 80030e0:	691a      	ldr	r2, [r3, #16]
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	619a      	str	r2, [r3, #24]
      break;
 80030ea:	e064      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	68b9      	ldr	r1, [r7, #8]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fab6 	bl	8003664 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	699a      	ldr	r2, [r3, #24]
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003106:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	699a      	ldr	r2, [r3, #24]
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003116:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	6999      	ldr	r1, [r3, #24]
 800311e:	68bb      	ldr	r3, [r7, #8]
 8003120:	691b      	ldr	r3, [r3, #16]
 8003122:	021a      	lsls	r2, r3, #8
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	430a      	orrs	r2, r1
 800312a:	619a      	str	r2, [r3, #24]
      break;
 800312c:	e043      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	68b9      	ldr	r1, [r7, #8]
 8003134:	4618      	mov	r0, r3
 8003136:	f000 fb0b 	bl	8003750 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	69da      	ldr	r2, [r3, #28]
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f042 0208 	orr.w	r2, r2, #8
 8003148:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	69da      	ldr	r2, [r3, #28]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	f022 0204 	bic.w	r2, r2, #4
 8003158:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	69d9      	ldr	r1, [r3, #28]
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	691a      	ldr	r2, [r3, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	430a      	orrs	r2, r1
 800316a:	61da      	str	r2, [r3, #28]
      break;
 800316c:	e023      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	68b9      	ldr	r1, [r7, #8]
 8003174:	4618      	mov	r0, r3
 8003176:	f000 fb5f 	bl	8003838 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	69da      	ldr	r2, [r3, #28]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003188:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	69da      	ldr	r2, [r3, #28]
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003198:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	69d9      	ldr	r1, [r3, #28]
 80031a0:	68bb      	ldr	r3, [r7, #8]
 80031a2:	691b      	ldr	r3, [r3, #16]
 80031a4:	021a      	lsls	r2, r3, #8
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	430a      	orrs	r2, r1
 80031ac:	61da      	str	r2, [r3, #28]
      break;
 80031ae:	e002      	b.n	80031b6 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	75fb      	strb	r3, [r7, #23]
      break;
 80031b4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	2200      	movs	r2, #0
 80031ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80031be:	7dfb      	ldrb	r3, [r7, #23]
}
 80031c0:	4618      	mov	r0, r3
 80031c2:	3718      	adds	r7, #24
 80031c4:	46bd      	mov	sp, r7
 80031c6:	bd80      	pop	{r7, pc}

080031c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031c8:	b580      	push	{r7, lr}
 80031ca:	b084      	sub	sp, #16
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
 80031d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031d2:	2300      	movs	r3, #0
 80031d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d101      	bne.n	80031e4 <HAL_TIM_ConfigClockSource+0x1c>
 80031e0:	2302      	movs	r3, #2
 80031e2:	e0b4      	b.n	800334e <HAL_TIM_ConfigClockSource+0x186>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2201      	movs	r2, #1
 80031e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003202:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800320a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68ba      	ldr	r2, [r7, #8]
 8003212:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800321c:	d03e      	beq.n	800329c <HAL_TIM_ConfigClockSource+0xd4>
 800321e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003222:	f200 8087 	bhi.w	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 8003226:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800322a:	f000 8086 	beq.w	800333a <HAL_TIM_ConfigClockSource+0x172>
 800322e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003232:	d87f      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 8003234:	2b70      	cmp	r3, #112	@ 0x70
 8003236:	d01a      	beq.n	800326e <HAL_TIM_ConfigClockSource+0xa6>
 8003238:	2b70      	cmp	r3, #112	@ 0x70
 800323a:	d87b      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 800323c:	2b60      	cmp	r3, #96	@ 0x60
 800323e:	d050      	beq.n	80032e2 <HAL_TIM_ConfigClockSource+0x11a>
 8003240:	2b60      	cmp	r3, #96	@ 0x60
 8003242:	d877      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 8003244:	2b50      	cmp	r3, #80	@ 0x50
 8003246:	d03c      	beq.n	80032c2 <HAL_TIM_ConfigClockSource+0xfa>
 8003248:	2b50      	cmp	r3, #80	@ 0x50
 800324a:	d873      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 800324c:	2b40      	cmp	r3, #64	@ 0x40
 800324e:	d058      	beq.n	8003302 <HAL_TIM_ConfigClockSource+0x13a>
 8003250:	2b40      	cmp	r3, #64	@ 0x40
 8003252:	d86f      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 8003254:	2b30      	cmp	r3, #48	@ 0x30
 8003256:	d064      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x15a>
 8003258:	2b30      	cmp	r3, #48	@ 0x30
 800325a:	d86b      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 800325c:	2b20      	cmp	r3, #32
 800325e:	d060      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x15a>
 8003260:	2b20      	cmp	r3, #32
 8003262:	d867      	bhi.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
 8003264:	2b00      	cmp	r3, #0
 8003266:	d05c      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x15a>
 8003268:	2b10      	cmp	r3, #16
 800326a:	d05a      	beq.n	8003322 <HAL_TIM_ConfigClockSource+0x15a>
 800326c:	e062      	b.n	8003334 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003276:	683b      	ldr	r3, [r7, #0]
 8003278:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800327e:	f000 fc3c 	bl	8003afa <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	689b      	ldr	r3, [r3, #8]
 8003288:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800328a:	68bb      	ldr	r3, [r7, #8]
 800328c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003290:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	609a      	str	r2, [r3, #8]
      break;
 800329a:	e04f      	b.n	800333c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80032ac:	f000 fc25 	bl	8003afa <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	689a      	ldr	r2, [r3, #8]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80032be:	609a      	str	r2, [r3, #8]
      break;
 80032c0:	e03c      	b.n	800333c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032c6:	683b      	ldr	r3, [r7, #0]
 80032c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ce:	461a      	mov	r2, r3
 80032d0:	f000 fb99 	bl	8003a06 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	2150      	movs	r1, #80	@ 0x50
 80032da:	4618      	mov	r0, r3
 80032dc:	f000 fbf2 	bl	8003ac4 <TIM_ITRx_SetConfig>
      break;
 80032e0:	e02c      	b.n	800333c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ee:	461a      	mov	r2, r3
 80032f0:	f000 fbb8 	bl	8003a64 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	2160      	movs	r1, #96	@ 0x60
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fbe2 	bl	8003ac4 <TIM_ITRx_SetConfig>
      break;
 8003300:	e01c      	b.n	800333c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800330a:	683b      	ldr	r3, [r7, #0]
 800330c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800330e:	461a      	mov	r2, r3
 8003310:	f000 fb79 	bl	8003a06 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	2140      	movs	r1, #64	@ 0x40
 800331a:	4618      	mov	r0, r3
 800331c:	f000 fbd2 	bl	8003ac4 <TIM_ITRx_SetConfig>
      break;
 8003320:	e00c      	b.n	800333c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681a      	ldr	r2, [r3, #0]
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4619      	mov	r1, r3
 800332c:	4610      	mov	r0, r2
 800332e:	f000 fbc9 	bl	8003ac4 <TIM_ITRx_SetConfig>
      break;
 8003332:	e003      	b.n	800333c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003334:	2301      	movs	r3, #1
 8003336:	73fb      	strb	r3, [r7, #15]
      break;
 8003338:	e000      	b.n	800333c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800333a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2200      	movs	r2, #0
 8003348:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800334c:	7bfb      	ldrb	r3, [r7, #15]
}
 800334e:	4618      	mov	r0, r3
 8003350:	3710      	adds	r7, #16
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b082      	sub	sp, #8
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
 800335e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_TIM_SlaveConfigSynchro+0x18>
 800336a:	2302      	movs	r3, #2
 800336c:	e031      	b.n	80033d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2202      	movs	r2, #2
 800337a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 800337e:	6839      	ldr	r1, [r7, #0]
 8003380:	6878      	ldr	r0, [r7, #4]
 8003382:	f000 faaf 	bl	80038e4 <TIM_SlaveTimer_SetConfig>
 8003386:	4603      	mov	r3, r0
 8003388:	2b00      	cmp	r3, #0
 800338a:	d009      	beq.n	80033a0 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	2201      	movs	r2, #1
 8003390:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2200      	movs	r2, #0
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 800339c:	2301      	movs	r3, #1
 800339e:	e018      	b.n	80033d2 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	68da      	ldr	r2, [r3, #12]
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80033ae:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	68da      	ldr	r2, [r3, #12]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80033be:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2200      	movs	r2, #0
 80033cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3708      	adds	r7, #8
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80033da:	b480      	push	{r7}
 80033dc:	b083      	sub	sp, #12
 80033de:	af00      	add	r7, sp, #0
 80033e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80033e2:	bf00      	nop
 80033e4:	370c      	adds	r7, #12
 80033e6:	46bd      	mov	sp, r7
 80033e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ec:	4770      	bx	lr

080033ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80033ee:	b480      	push	{r7}
 80033f0:	b083      	sub	sp, #12
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80033f6:	bf00      	nop
 80033f8:	370c      	adds	r7, #12
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr

08003402 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003402:	b480      	push	{r7}
 8003404:	b083      	sub	sp, #12
 8003406:	af00      	add	r7, sp, #0
 8003408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800340a:	bf00      	nop
 800340c:	370c      	adds	r7, #12
 800340e:	46bd      	mov	sp, r7
 8003410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003414:	4770      	bx	lr

08003416 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003416:	b480      	push	{r7}
 8003418:	b083      	sub	sp, #12
 800341a:	af00      	add	r7, sp, #0
 800341c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800342c:	b480      	push	{r7}
 800342e:	b085      	sub	sp, #20
 8003430:	af00      	add	r7, sp, #0
 8003432:	6078      	str	r0, [r7, #4]
 8003434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	4a46      	ldr	r2, [pc, #280]	@ (8003558 <TIM_Base_SetConfig+0x12c>)
 8003440:	4293      	cmp	r3, r2
 8003442:	d013      	beq.n	800346c <TIM_Base_SetConfig+0x40>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800344a:	d00f      	beq.n	800346c <TIM_Base_SetConfig+0x40>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	4a43      	ldr	r2, [pc, #268]	@ (800355c <TIM_Base_SetConfig+0x130>)
 8003450:	4293      	cmp	r3, r2
 8003452:	d00b      	beq.n	800346c <TIM_Base_SetConfig+0x40>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	4a42      	ldr	r2, [pc, #264]	@ (8003560 <TIM_Base_SetConfig+0x134>)
 8003458:	4293      	cmp	r3, r2
 800345a:	d007      	beq.n	800346c <TIM_Base_SetConfig+0x40>
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a41      	ldr	r2, [pc, #260]	@ (8003564 <TIM_Base_SetConfig+0x138>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d003      	beq.n	800346c <TIM_Base_SetConfig+0x40>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a40      	ldr	r2, [pc, #256]	@ (8003568 <TIM_Base_SetConfig+0x13c>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d108      	bne.n	800347e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003472:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	68fa      	ldr	r2, [r7, #12]
 800347a:	4313      	orrs	r3, r2
 800347c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	4a35      	ldr	r2, [pc, #212]	@ (8003558 <TIM_Base_SetConfig+0x12c>)
 8003482:	4293      	cmp	r3, r2
 8003484:	d02b      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800348c:	d027      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	4a32      	ldr	r2, [pc, #200]	@ (800355c <TIM_Base_SetConfig+0x130>)
 8003492:	4293      	cmp	r3, r2
 8003494:	d023      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	4a31      	ldr	r2, [pc, #196]	@ (8003560 <TIM_Base_SetConfig+0x134>)
 800349a:	4293      	cmp	r3, r2
 800349c:	d01f      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	4a30      	ldr	r2, [pc, #192]	@ (8003564 <TIM_Base_SetConfig+0x138>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d01b      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a2f      	ldr	r2, [pc, #188]	@ (8003568 <TIM_Base_SetConfig+0x13c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d017      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	4a2e      	ldr	r2, [pc, #184]	@ (800356c <TIM_Base_SetConfig+0x140>)
 80034b2:	4293      	cmp	r3, r2
 80034b4:	d013      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	4a2d      	ldr	r2, [pc, #180]	@ (8003570 <TIM_Base_SetConfig+0x144>)
 80034ba:	4293      	cmp	r3, r2
 80034bc:	d00f      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	4a2c      	ldr	r2, [pc, #176]	@ (8003574 <TIM_Base_SetConfig+0x148>)
 80034c2:	4293      	cmp	r3, r2
 80034c4:	d00b      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	4a2b      	ldr	r2, [pc, #172]	@ (8003578 <TIM_Base_SetConfig+0x14c>)
 80034ca:	4293      	cmp	r3, r2
 80034cc:	d007      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	4a2a      	ldr	r2, [pc, #168]	@ (800357c <TIM_Base_SetConfig+0x150>)
 80034d2:	4293      	cmp	r3, r2
 80034d4:	d003      	beq.n	80034de <TIM_Base_SetConfig+0xb2>
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	4a29      	ldr	r2, [pc, #164]	@ (8003580 <TIM_Base_SetConfig+0x154>)
 80034da:	4293      	cmp	r3, r2
 80034dc:	d108      	bne.n	80034f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80034e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80034e6:	683b      	ldr	r3, [r7, #0]
 80034e8:	68db      	ldr	r3, [r3, #12]
 80034ea:	68fa      	ldr	r2, [r7, #12]
 80034ec:	4313      	orrs	r3, r2
 80034ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	695b      	ldr	r3, [r3, #20]
 80034fa:	4313      	orrs	r3, r2
 80034fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68fa      	ldr	r2, [r7, #12]
 8003502:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	689a      	ldr	r2, [r3, #8]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681a      	ldr	r2, [r3, #0]
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	4a10      	ldr	r2, [pc, #64]	@ (8003558 <TIM_Base_SetConfig+0x12c>)
 8003518:	4293      	cmp	r3, r2
 800351a:	d003      	beq.n	8003524 <TIM_Base_SetConfig+0xf8>
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	4a12      	ldr	r2, [pc, #72]	@ (8003568 <TIM_Base_SetConfig+0x13c>)
 8003520:	4293      	cmp	r3, r2
 8003522:	d103      	bne.n	800352c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003524:	683b      	ldr	r3, [r7, #0]
 8003526:	691a      	ldr	r2, [r3, #16]
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2201      	movs	r2, #1
 8003530:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f003 0301 	and.w	r3, r3, #1
 800353a:	2b01      	cmp	r3, #1
 800353c:	d105      	bne.n	800354a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	f023 0201 	bic.w	r2, r3, #1
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	611a      	str	r2, [r3, #16]
  }
}
 800354a:	bf00      	nop
 800354c:	3714      	adds	r7, #20
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40010000 	.word	0x40010000
 800355c:	40000400 	.word	0x40000400
 8003560:	40000800 	.word	0x40000800
 8003564:	40000c00 	.word	0x40000c00
 8003568:	40010400 	.word	0x40010400
 800356c:	40014000 	.word	0x40014000
 8003570:	40014400 	.word	0x40014400
 8003574:	40014800 	.word	0x40014800
 8003578:	40001800 	.word	0x40001800
 800357c:	40001c00 	.word	0x40001c00
 8003580:	40002000 	.word	0x40002000

08003584 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003584:	b480      	push	{r7}
 8003586:	b087      	sub	sp, #28
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
 800358c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	6a1b      	ldr	r3, [r3, #32]
 8003592:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a1b      	ldr	r3, [r3, #32]
 8003598:	f023 0201 	bic.w	r2, r3, #1
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	699b      	ldr	r3, [r3, #24]
 80035aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	f023 0303 	bic.w	r3, r3, #3
 80035ba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	68fa      	ldr	r2, [r7, #12]
 80035c2:	4313      	orrs	r3, r2
 80035c4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	f023 0302 	bic.w	r3, r3, #2
 80035cc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	689b      	ldr	r3, [r3, #8]
 80035d2:	697a      	ldr	r2, [r7, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a20      	ldr	r2, [pc, #128]	@ (800365c <TIM_OC1_SetConfig+0xd8>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d003      	beq.n	80035e8 <TIM_OC1_SetConfig+0x64>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a1f      	ldr	r2, [pc, #124]	@ (8003660 <TIM_OC1_SetConfig+0xdc>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d10c      	bne.n	8003602 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80035e8:	697b      	ldr	r3, [r7, #20]
 80035ea:	f023 0308 	bic.w	r3, r3, #8
 80035ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	697a      	ldr	r2, [r7, #20]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f023 0304 	bic.w	r3, r3, #4
 8003600:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	4a15      	ldr	r2, [pc, #84]	@ (800365c <TIM_OC1_SetConfig+0xd8>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d003      	beq.n	8003612 <TIM_OC1_SetConfig+0x8e>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a14      	ldr	r2, [pc, #80]	@ (8003660 <TIM_OC1_SetConfig+0xdc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d111      	bne.n	8003636 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003612:	693b      	ldr	r3, [r7, #16]
 8003614:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003618:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800361a:	693b      	ldr	r3, [r7, #16]
 800361c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003620:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	695b      	ldr	r3, [r3, #20]
 8003626:	693a      	ldr	r2, [r7, #16]
 8003628:	4313      	orrs	r3, r2
 800362a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	699b      	ldr	r3, [r3, #24]
 8003630:	693a      	ldr	r2, [r7, #16]
 8003632:	4313      	orrs	r3, r2
 8003634:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	693a      	ldr	r2, [r7, #16]
 800363a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68fa      	ldr	r2, [r7, #12]
 8003640:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685a      	ldr	r2, [r3, #4]
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	697a      	ldr	r2, [r7, #20]
 800364e:	621a      	str	r2, [r3, #32]
}
 8003650:	bf00      	nop
 8003652:	371c      	adds	r7, #28
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr
 800365c:	40010000 	.word	0x40010000
 8003660:	40010400 	.word	0x40010400

08003664 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003664:	b480      	push	{r7}
 8003666:	b087      	sub	sp, #28
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6a1b      	ldr	r3, [r3, #32]
 8003678:	f023 0210 	bic.w	r2, r3, #16
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	699b      	ldr	r3, [r3, #24]
 800368a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003692:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800369a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	021b      	lsls	r3, r3, #8
 80036a2:	68fa      	ldr	r2, [r7, #12]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80036a8:	697b      	ldr	r3, [r7, #20]
 80036aa:	f023 0320 	bic.w	r3, r3, #32
 80036ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	697a      	ldr	r2, [r7, #20]
 80036b8:	4313      	orrs	r3, r2
 80036ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	4a22      	ldr	r2, [pc, #136]	@ (8003748 <TIM_OC2_SetConfig+0xe4>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d003      	beq.n	80036cc <TIM_OC2_SetConfig+0x68>
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	4a21      	ldr	r2, [pc, #132]	@ (800374c <TIM_OC2_SetConfig+0xe8>)
 80036c8:	4293      	cmp	r3, r2
 80036ca:	d10d      	bne.n	80036e8 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80036cc:	697b      	ldr	r3, [r7, #20]
 80036ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80036d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	011b      	lsls	r3, r3, #4
 80036da:	697a      	ldr	r2, [r7, #20]
 80036dc:	4313      	orrs	r3, r2
 80036de:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80036e6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	4a17      	ldr	r2, [pc, #92]	@ (8003748 <TIM_OC2_SetConfig+0xe4>)
 80036ec:	4293      	cmp	r3, r2
 80036ee:	d003      	beq.n	80036f8 <TIM_OC2_SetConfig+0x94>
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a16      	ldr	r2, [pc, #88]	@ (800374c <TIM_OC2_SetConfig+0xe8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d113      	bne.n	8003720 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80036fe:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003706:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003708:	683b      	ldr	r3, [r7, #0]
 800370a:	695b      	ldr	r3, [r3, #20]
 800370c:	009b      	lsls	r3, r3, #2
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	009b      	lsls	r3, r3, #2
 800371a:	693a      	ldr	r2, [r7, #16]
 800371c:	4313      	orrs	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	693a      	ldr	r2, [r7, #16]
 8003724:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	68fa      	ldr	r2, [r7, #12]
 800372a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685a      	ldr	r2, [r3, #4]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	697a      	ldr	r2, [r7, #20]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40010400 	.word	0x40010400

08003750 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003750:	b480      	push	{r7}
 8003752:	b087      	sub	sp, #28
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	6a1b      	ldr	r3, [r3, #32]
 800375e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a1b      	ldr	r3, [r3, #32]
 8003764:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	69db      	ldr	r3, [r3, #28]
 8003776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800377e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f023 0303 	bic.w	r3, r3, #3
 8003786:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	68fa      	ldr	r2, [r7, #12]
 800378e:	4313      	orrs	r3, r2
 8003790:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003798:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	689b      	ldr	r3, [r3, #8]
 800379e:	021b      	lsls	r3, r3, #8
 80037a0:	697a      	ldr	r2, [r7, #20]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a21      	ldr	r2, [pc, #132]	@ (8003830 <TIM_OC3_SetConfig+0xe0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d003      	beq.n	80037b6 <TIM_OC3_SetConfig+0x66>
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	4a20      	ldr	r2, [pc, #128]	@ (8003834 <TIM_OC3_SetConfig+0xe4>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d10d      	bne.n	80037d2 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037bc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	68db      	ldr	r3, [r3, #12]
 80037c2:	021b      	lsls	r3, r3, #8
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	4a16      	ldr	r2, [pc, #88]	@ (8003830 <TIM_OC3_SetConfig+0xe0>)
 80037d6:	4293      	cmp	r3, r2
 80037d8:	d003      	beq.n	80037e2 <TIM_OC3_SetConfig+0x92>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a15      	ldr	r2, [pc, #84]	@ (8003834 <TIM_OC3_SetConfig+0xe4>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d113      	bne.n	800380a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80037e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80037f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	011b      	lsls	r3, r3, #4
 80037f8:	693a      	ldr	r2, [r7, #16]
 80037fa:	4313      	orrs	r3, r2
 80037fc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80037fe:	683b      	ldr	r3, [r7, #0]
 8003800:	699b      	ldr	r3, [r3, #24]
 8003802:	011b      	lsls	r3, r3, #4
 8003804:	693a      	ldr	r2, [r7, #16]
 8003806:	4313      	orrs	r3, r2
 8003808:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	693a      	ldr	r2, [r7, #16]
 800380e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	68fa      	ldr	r2, [r7, #12]
 8003814:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003816:	683b      	ldr	r3, [r7, #0]
 8003818:	685a      	ldr	r2, [r3, #4]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	697a      	ldr	r2, [r7, #20]
 8003822:	621a      	str	r2, [r3, #32]
}
 8003824:	bf00      	nop
 8003826:	371c      	adds	r7, #28
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr
 8003830:	40010000 	.word	0x40010000
 8003834:	40010400 	.word	0x40010400

08003838 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003838:	b480      	push	{r7}
 800383a:	b087      	sub	sp, #28
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	6a1b      	ldr	r3, [r3, #32]
 8003846:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	6a1b      	ldr	r3, [r3, #32]
 800384c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003866:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800386e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	021b      	lsls	r3, r3, #8
 8003876:	68fa      	ldr	r2, [r7, #12]
 8003878:	4313      	orrs	r3, r2
 800387a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800387c:	693b      	ldr	r3, [r7, #16]
 800387e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003882:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	689b      	ldr	r3, [r3, #8]
 8003888:	031b      	lsls	r3, r3, #12
 800388a:	693a      	ldr	r2, [r7, #16]
 800388c:	4313      	orrs	r3, r2
 800388e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	4a12      	ldr	r2, [pc, #72]	@ (80038dc <TIM_OC4_SetConfig+0xa4>)
 8003894:	4293      	cmp	r3, r2
 8003896:	d003      	beq.n	80038a0 <TIM_OC4_SetConfig+0x68>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	4a11      	ldr	r2, [pc, #68]	@ (80038e0 <TIM_OC4_SetConfig+0xa8>)
 800389c:	4293      	cmp	r3, r2
 800389e:	d109      	bne.n	80038b4 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80038a6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	695b      	ldr	r3, [r3, #20]
 80038ac:	019b      	lsls	r3, r3, #6
 80038ae:	697a      	ldr	r2, [r7, #20]
 80038b0:	4313      	orrs	r3, r2
 80038b2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	68fa      	ldr	r2, [r7, #12]
 80038be:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	621a      	str	r2, [r3, #32]
}
 80038ce:	bf00      	nop
 80038d0:	371c      	adds	r7, #28
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	40010000 	.word	0x40010000
 80038e0:	40010400 	.word	0x40010400

080038e4 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	6078      	str	r0, [r7, #4]
 80038ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038ee:	2300      	movs	r3, #0
 80038f0:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003900:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	693a      	ldr	r2, [r7, #16]
 8003908:	4313      	orrs	r3, r2
 800390a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	f023 0307 	bic.w	r3, r3, #7
 8003912:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	693a      	ldr	r2, [r7, #16]
 800391a:	4313      	orrs	r3, r2
 800391c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2b70      	cmp	r3, #112	@ 0x70
 800392c:	d01a      	beq.n	8003964 <TIM_SlaveTimer_SetConfig+0x80>
 800392e:	2b70      	cmp	r3, #112	@ 0x70
 8003930:	d860      	bhi.n	80039f4 <TIM_SlaveTimer_SetConfig+0x110>
 8003932:	2b60      	cmp	r3, #96	@ 0x60
 8003934:	d054      	beq.n	80039e0 <TIM_SlaveTimer_SetConfig+0xfc>
 8003936:	2b60      	cmp	r3, #96	@ 0x60
 8003938:	d85c      	bhi.n	80039f4 <TIM_SlaveTimer_SetConfig+0x110>
 800393a:	2b50      	cmp	r3, #80	@ 0x50
 800393c:	d046      	beq.n	80039cc <TIM_SlaveTimer_SetConfig+0xe8>
 800393e:	2b50      	cmp	r3, #80	@ 0x50
 8003940:	d858      	bhi.n	80039f4 <TIM_SlaveTimer_SetConfig+0x110>
 8003942:	2b40      	cmp	r3, #64	@ 0x40
 8003944:	d019      	beq.n	800397a <TIM_SlaveTimer_SetConfig+0x96>
 8003946:	2b40      	cmp	r3, #64	@ 0x40
 8003948:	d854      	bhi.n	80039f4 <TIM_SlaveTimer_SetConfig+0x110>
 800394a:	2b30      	cmp	r3, #48	@ 0x30
 800394c:	d055      	beq.n	80039fa <TIM_SlaveTimer_SetConfig+0x116>
 800394e:	2b30      	cmp	r3, #48	@ 0x30
 8003950:	d850      	bhi.n	80039f4 <TIM_SlaveTimer_SetConfig+0x110>
 8003952:	2b20      	cmp	r3, #32
 8003954:	d051      	beq.n	80039fa <TIM_SlaveTimer_SetConfig+0x116>
 8003956:	2b20      	cmp	r3, #32
 8003958:	d84c      	bhi.n	80039f4 <TIM_SlaveTimer_SetConfig+0x110>
 800395a:	2b00      	cmp	r3, #0
 800395c:	d04d      	beq.n	80039fa <TIM_SlaveTimer_SetConfig+0x116>
 800395e:	2b10      	cmp	r3, #16
 8003960:	d04b      	beq.n	80039fa <TIM_SlaveTimer_SetConfig+0x116>
 8003962:	e047      	b.n	80039f4 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003974:	f000 f8c1 	bl	8003afa <TIM_ETR_SetConfig>
      break;
 8003978:	e040      	b.n	80039fc <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800397a:	683b      	ldr	r3, [r7, #0]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	2b05      	cmp	r3, #5
 8003980:	d101      	bne.n	8003986 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003982:	2301      	movs	r3, #1
 8003984:	e03b      	b.n	80039fe <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	6a1b      	ldr	r3, [r3, #32]
 800398c:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	6a1a      	ldr	r2, [r3, #32]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f022 0201 	bic.w	r2, r2, #1
 800399c:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	699b      	ldr	r3, [r3, #24]
 80039a4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039a6:	68bb      	ldr	r3, [r7, #8]
 80039a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039ac:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80039ae:	683b      	ldr	r3, [r7, #0]
 80039b0:	691b      	ldr	r3, [r3, #16]
 80039b2:	011b      	lsls	r3, r3, #4
 80039b4:	68ba      	ldr	r2, [r7, #8]
 80039b6:	4313      	orrs	r3, r2
 80039b8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	68ba      	ldr	r2, [r7, #8]
 80039c0:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	68fa      	ldr	r2, [r7, #12]
 80039c8:	621a      	str	r2, [r3, #32]
      break;
 80039ca:	e017      	b.n	80039fc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80039d0:	683b      	ldr	r3, [r7, #0]
 80039d2:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039d8:	461a      	mov	r2, r3
 80039da:	f000 f814 	bl	8003a06 <TIM_TI1_ConfigInputStage>
      break;
 80039de:	e00d      	b.n	80039fc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ec:	461a      	mov	r2, r3
 80039ee:	f000 f839 	bl	8003a64 <TIM_TI2_ConfigInputStage>
      break;
 80039f2:	e003      	b.n	80039fc <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	75fb      	strb	r3, [r7, #23]
      break;
 80039f8:	e000      	b.n	80039fc <TIM_SlaveTimer_SetConfig+0x118>
      break;
 80039fa:	bf00      	nop
  }

  return status;
 80039fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3718      	adds	r7, #24
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a06:	b480      	push	{r7}
 8003a08:	b087      	sub	sp, #28
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	60f8      	str	r0, [r7, #12]
 8003a0e:	60b9      	str	r1, [r7, #8]
 8003a10:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6a1b      	ldr	r3, [r3, #32]
 8003a16:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	6a1b      	ldr	r3, [r3, #32]
 8003a1c:	f023 0201 	bic.w	r2, r3, #1
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	699b      	ldr	r3, [r3, #24]
 8003a28:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003a30:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	011b      	lsls	r3, r3, #4
 8003a36:	693a      	ldr	r2, [r7, #16]
 8003a38:	4313      	orrs	r3, r2
 8003a3a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f023 030a 	bic.w	r3, r3, #10
 8003a42:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a44:	697a      	ldr	r2, [r7, #20]
 8003a46:	68bb      	ldr	r3, [r7, #8]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	693a      	ldr	r2, [r7, #16]
 8003a50:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	697a      	ldr	r2, [r7, #20]
 8003a56:	621a      	str	r2, [r3, #32]
}
 8003a58:	bf00      	nop
 8003a5a:	371c      	adds	r7, #28
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a62:	4770      	bx	lr

08003a64 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a64:	b480      	push	{r7}
 8003a66:	b087      	sub	sp, #28
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	60f8      	str	r0, [r7, #12]
 8003a6c:	60b9      	str	r1, [r7, #8]
 8003a6e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	f023 0210 	bic.w	r2, r3, #16
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	699b      	ldr	r3, [r3, #24]
 8003a86:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a8e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	031b      	lsls	r3, r3, #12
 8003a94:	693a      	ldr	r2, [r7, #16]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003aa0:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003aa2:	68bb      	ldr	r3, [r7, #8]
 8003aa4:	011b      	lsls	r3, r3, #4
 8003aa6:	697a      	ldr	r2, [r7, #20]
 8003aa8:	4313      	orrs	r3, r2
 8003aaa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	693a      	ldr	r2, [r7, #16]
 8003ab0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	697a      	ldr	r2, [r7, #20]
 8003ab6:	621a      	str	r2, [r3, #32]
}
 8003ab8:	bf00      	nop
 8003aba:	371c      	adds	r7, #28
 8003abc:	46bd      	mov	sp, r7
 8003abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac2:	4770      	bx	lr

08003ac4 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ac4:	b480      	push	{r7}
 8003ac6:	b085      	sub	sp, #20
 8003ac8:	af00      	add	r7, sp, #0
 8003aca:	6078      	str	r0, [r7, #4]
 8003acc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	689b      	ldr	r3, [r3, #8]
 8003ad2:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ada:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	4313      	orrs	r3, r2
 8003ae2:	f043 0307 	orr.w	r3, r3, #7
 8003ae6:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	609a      	str	r2, [r3, #8]
}
 8003aee:	bf00      	nop
 8003af0:	3714      	adds	r7, #20
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr

08003afa <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003afa:	b480      	push	{r7}
 8003afc:	b087      	sub	sp, #28
 8003afe:	af00      	add	r7, sp, #0
 8003b00:	60f8      	str	r0, [r7, #12]
 8003b02:	60b9      	str	r1, [r7, #8]
 8003b04:	607a      	str	r2, [r7, #4]
 8003b06:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003b14:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b16:	683b      	ldr	r3, [r7, #0]
 8003b18:	021a      	lsls	r2, r3, #8
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	431a      	orrs	r2, r3
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	4313      	orrs	r3, r2
 8003b22:	697a      	ldr	r2, [r7, #20]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	697a      	ldr	r2, [r7, #20]
 8003b2c:	609a      	str	r2, [r3, #8]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b087      	sub	sp, #28
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	60f8      	str	r0, [r7, #12]
 8003b42:	60b9      	str	r1, [r7, #8]
 8003b44:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003b46:	68bb      	ldr	r3, [r7, #8]
 8003b48:	f003 031f 	and.w	r3, r3, #31
 8003b4c:	2201      	movs	r2, #1
 8003b4e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b52:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6a1a      	ldr	r2, [r3, #32]
 8003b58:	697b      	ldr	r3, [r7, #20]
 8003b5a:	43db      	mvns	r3, r3
 8003b5c:	401a      	ands	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	6a1a      	ldr	r2, [r3, #32]
 8003b66:	68bb      	ldr	r3, [r7, #8]
 8003b68:	f003 031f 	and.w	r3, r3, #31
 8003b6c:	6879      	ldr	r1, [r7, #4]
 8003b6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003b72:	431a      	orrs	r2, r3
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	621a      	str	r2, [r3, #32]
}
 8003b78:	bf00      	nop
 8003b7a:	371c      	adds	r7, #28
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b085      	sub	sp, #20
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b94:	2b01      	cmp	r3, #1
 8003b96:	d101      	bne.n	8003b9c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b98:	2302      	movs	r3, #2
 8003b9a:	e05a      	b.n	8003c52 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2202      	movs	r2, #2
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	685b      	ldr	r3, [r3, #4]
 8003bb2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003bc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	68fa      	ldr	r2, [r7, #12]
 8003bca:	4313      	orrs	r3, r2
 8003bcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	68fa      	ldr	r2, [r7, #12]
 8003bd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a21      	ldr	r2, [pc, #132]	@ (8003c60 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d022      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003be8:	d01d      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	4a1d      	ldr	r2, [pc, #116]	@ (8003c64 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003bf0:	4293      	cmp	r3, r2
 8003bf2:	d018      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	4a1b      	ldr	r2, [pc, #108]	@ (8003c68 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d013      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a1a      	ldr	r2, [pc, #104]	@ (8003c6c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003c04:	4293      	cmp	r3, r2
 8003c06:	d00e      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	4a18      	ldr	r2, [pc, #96]	@ (8003c70 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d009      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	4a17      	ldr	r2, [pc, #92]	@ (8003c74 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d004      	beq.n	8003c26 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	4a15      	ldr	r2, [pc, #84]	@ (8003c78 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003c22:	4293      	cmp	r3, r2
 8003c24:	d10c      	bne.n	8003c40 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003c2c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c2e:	683b      	ldr	r3, [r7, #0]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	4313      	orrs	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68ba      	ldr	r2, [r7, #8]
 8003c3e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003c50:	2300      	movs	r3, #0
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	40010000 	.word	0x40010000
 8003c64:	40000400 	.word	0x40000400
 8003c68:	40000800 	.word	0x40000800
 8003c6c:	40000c00 	.word	0x40000c00
 8003c70:	40010400 	.word	0x40010400
 8003c74:	40014000 	.word	0x40014000
 8003c78:	40001800 	.word	0x40001800

08003c7c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b083      	sub	sp, #12
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c84:	bf00      	nop
 8003c86:	370c      	adds	r7, #12
 8003c88:	46bd      	mov	sp, r7
 8003c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8e:	4770      	bx	lr

08003c90 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c90:	b480      	push	{r7}
 8003c92:	b083      	sub	sp, #12
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c98:	bf00      	nop
 8003c9a:	370c      	adds	r7, #12
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca2:	4770      	bx	lr

08003ca4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e042      	b.n	8003d3c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f7fd fc00 	bl	80014d0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2224      	movs	r2, #36	@ 0x24
 8003cd4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	68da      	ldr	r2, [r3, #12]
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ce6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 fd11 	bl	8004710 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	691a      	ldr	r2, [r3, #16]
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003cfc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003d0c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d1c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2200      	movs	r2, #0
 8003d22:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2220      	movs	r2, #32
 8003d28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2220      	movs	r2, #32
 8003d30:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2200      	movs	r2, #0
 8003d38:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d3a:	2300      	movs	r3, #0
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3708      	adds	r7, #8
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8003d44:	b480      	push	{r7}
 8003d46:	b085      	sub	sp, #20
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	60f8      	str	r0, [r7, #12]
 8003d4c:	60b9      	str	r1, [r7, #8]
 8003d4e:	4613      	mov	r3, r2
 8003d50:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003d58:	b2db      	uxtb	r3, r3
 8003d5a:	2b20      	cmp	r3, #32
 8003d5c:	d121      	bne.n	8003da2 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d5e:	68bb      	ldr	r3, [r7, #8]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d002      	beq.n	8003d6a <HAL_UART_Transmit_IT+0x26>
 8003d64:	88fb      	ldrh	r3, [r7, #6]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d101      	bne.n	8003d6e <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8003d6a:	2301      	movs	r3, #1
 8003d6c:	e01a      	b.n	8003da4 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	88fa      	ldrh	r2, [r7, #6]
 8003d78:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	88fa      	ldrh	r2, [r7, #6]
 8003d7e:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	2200      	movs	r2, #0
 8003d84:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	2221      	movs	r2, #33	@ 0x21
 8003d8a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68da      	ldr	r2, [r3, #12]
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003d9c:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8003d9e:	2300      	movs	r3, #0
 8003da0:	e000      	b.n	8003da4 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 8003da2:	2302      	movs	r3, #2
  }
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003db0:	b580      	push	{r7, lr}
 8003db2:	b084      	sub	sp, #16
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	4613      	mov	r3, r2
 8003dbc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b20      	cmp	r3, #32
 8003dc8:	d112      	bne.n	8003df0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d002      	beq.n	8003dd6 <HAL_UART_Receive_IT+0x26>
 8003dd0:	88fb      	ldrh	r3, [r7, #6]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d101      	bne.n	8003dda <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	e00b      	b.n	8003df2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	2200      	movs	r2, #0
 8003dde:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003de0:	88fb      	ldrh	r3, [r7, #6]
 8003de2:	461a      	mov	r2, r3
 8003de4:	68b9      	ldr	r1, [r7, #8]
 8003de6:	68f8      	ldr	r0, [r7, #12]
 8003de8:	f000 faba 	bl	8004360 <UART_Start_Receive_IT>
 8003dec:	4603      	mov	r3, r0
 8003dee:	e000      	b.n	8003df2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003df0:	2302      	movs	r3, #2
  }
}
 8003df2:	4618      	mov	r0, r3
 8003df4:	3710      	adds	r7, #16
 8003df6:	46bd      	mov	sp, r7
 8003df8:	bd80      	pop	{r7, pc}
	...

08003dfc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b0ba      	sub	sp, #232	@ 0xe8
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	68db      	ldr	r3, [r3, #12]
 8003e14:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	695b      	ldr	r3, [r3, #20]
 8003e1e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003e22:	2300      	movs	r3, #0
 8003e24:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003e28:	2300      	movs	r3, #0
 8003e2a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003e2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e32:	f003 030f 	and.w	r3, r3, #15
 8003e36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003e3a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10f      	bne.n	8003e62 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003e42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e46:	f003 0320 	and.w	r3, r3, #32
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d009      	beq.n	8003e62 <HAL_UART_IRQHandler+0x66>
 8003e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e52:	f003 0320 	and.w	r3, r3, #32
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d003      	beq.n	8003e62 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f000 fb99 	bl	8004592 <UART_Receive_IT>
      return;
 8003e60:	e25b      	b.n	800431a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003e62:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003e66:	2b00      	cmp	r3, #0
 8003e68:	f000 80de 	beq.w	8004028 <HAL_UART_IRQHandler+0x22c>
 8003e6c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003e70:	f003 0301 	and.w	r3, r3, #1
 8003e74:	2b00      	cmp	r3, #0
 8003e76:	d106      	bne.n	8003e86 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003e78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e7c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	f000 80d1 	beq.w	8004028 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003e86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e8a:	f003 0301 	and.w	r3, r3, #1
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d00b      	beq.n	8003eaa <HAL_UART_IRQHandler+0xae>
 8003e92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d005      	beq.n	8003eaa <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ea2:	f043 0201 	orr.w	r2, r3, #1
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003eaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d00b      	beq.n	8003ece <HAL_UART_IRQHandler+0xd2>
 8003eb6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003eba:	f003 0301 	and.w	r3, r3, #1
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d005      	beq.n	8003ece <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003ec6:	f043 0202 	orr.w	r2, r3, #2
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ed2:	f003 0302 	and.w	r3, r3, #2
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00b      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xf6>
 8003eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ede:	f003 0301 	and.w	r3, r3, #1
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d005      	beq.n	8003ef2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003eea:	f043 0204 	orr.w	r2, r3, #4
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003ef2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ef6:	f003 0308 	and.w	r3, r3, #8
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d011      	beq.n	8003f22 <HAL_UART_IRQHandler+0x126>
 8003efe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f02:	f003 0320 	and.w	r3, r3, #32
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d105      	bne.n	8003f16 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003f0a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003f0e:	f003 0301 	and.w	r3, r3, #1
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d005      	beq.n	8003f22 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f1a:	f043 0208 	orr.w	r2, r3, #8
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	f000 81f2 	beq.w	8004310 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003f2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f30:	f003 0320 	and.w	r3, r3, #32
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d008      	beq.n	8003f4a <HAL_UART_IRQHandler+0x14e>
 8003f38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f3c:	f003 0320 	and.w	r3, r3, #32
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d002      	beq.n	8003f4a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fb24 	bl	8004592 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	695b      	ldr	r3, [r3, #20]
 8003f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f54:	2b40      	cmp	r3, #64	@ 0x40
 8003f56:	bf0c      	ite	eq
 8003f58:	2301      	moveq	r3, #1
 8003f5a:	2300      	movne	r3, #0
 8003f5c:	b2db      	uxtb	r3, r3
 8003f5e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f66:	f003 0308 	and.w	r3, r3, #8
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d103      	bne.n	8003f76 <HAL_UART_IRQHandler+0x17a>
 8003f6e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d04f      	beq.n	8004016 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fa2c 	bl	80043d4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	695b      	ldr	r3, [r3, #20]
 8003f82:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f86:	2b40      	cmp	r3, #64	@ 0x40
 8003f88:	d141      	bne.n	800400e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	3314      	adds	r3, #20
 8003f90:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f94:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003f98:	e853 3f00 	ldrex	r3, [r3]
 8003f9c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003fa0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003fa4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	3314      	adds	r3, #20
 8003fb2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003fb6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003fba:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fbe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003fc2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003fc6:	e841 2300 	strex	r3, r2, [r1]
 8003fca:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003fce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d1d9      	bne.n	8003f8a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d013      	beq.n	8004006 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fe2:	4a7e      	ldr	r2, [pc, #504]	@ (80041dc <HAL_UART_IRQHandler+0x3e0>)
 8003fe4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003fea:	4618      	mov	r0, r3
 8003fec:	f7fd fcdd 	bl	80019aa <HAL_DMA_Abort_IT>
 8003ff0:	4603      	mov	r3, r0
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d016      	beq.n	8004024 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ffa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004000:	4610      	mov	r0, r2
 8004002:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004004:	e00e      	b.n	8004024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 f994 	bl	8004334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800400c:	e00a      	b.n	8004024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f000 f990 	bl	8004334 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004014:	e006      	b.n	8004024 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 f98c 	bl	8004334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2200      	movs	r2, #0
 8004020:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004022:	e175      	b.n	8004310 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004024:	bf00      	nop
    return;
 8004026:	e173      	b.n	8004310 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800402c:	2b01      	cmp	r3, #1
 800402e:	f040 814f 	bne.w	80042d0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b00      	cmp	r3, #0
 800403c:	f000 8148 	beq.w	80042d0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 8141 	beq.w	80042d0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800404e:	2300      	movs	r3, #0
 8004050:	60bb      	str	r3, [r7, #8]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	60bb      	str	r3, [r7, #8]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	60bb      	str	r3, [r7, #8]
 8004062:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	695b      	ldr	r3, [r3, #20]
 800406a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800406e:	2b40      	cmp	r3, #64	@ 0x40
 8004070:	f040 80b6 	bne.w	80041e0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004080:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004084:	2b00      	cmp	r3, #0
 8004086:	f000 8145 	beq.w	8004314 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800408e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004092:	429a      	cmp	r2, r3
 8004094:	f080 813e 	bcs.w	8004314 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800409e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80040a4:	69db      	ldr	r3, [r3, #28]
 80040a6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80040aa:	f000 8088 	beq.w	80041be <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	330c      	adds	r3, #12
 80040b4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80040bc:	e853 3f00 	ldrex	r3, [r3]
 80040c0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80040c4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80040c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80040cc:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	330c      	adds	r3, #12
 80040d6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80040da:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80040de:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80040e6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80040ea:	e841 2300 	strex	r3, r2, [r1]
 80040ee:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80040f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1d9      	bne.n	80040ae <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	3314      	adds	r3, #20
 8004100:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004102:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004104:	e853 3f00 	ldrex	r3, [r3]
 8004108:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800410a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800410c:	f023 0301 	bic.w	r3, r3, #1
 8004110:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	3314      	adds	r3, #20
 800411a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800411e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004122:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004124:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004126:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800412a:	e841 2300 	strex	r3, r2, [r1]
 800412e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004130:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004132:	2b00      	cmp	r3, #0
 8004134:	d1e1      	bne.n	80040fa <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3314      	adds	r3, #20
 800413c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800413e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004140:	e853 3f00 	ldrex	r3, [r3]
 8004144:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004146:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004148:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800414c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	3314      	adds	r3, #20
 8004156:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800415a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800415c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800415e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004160:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004162:	e841 2300 	strex	r3, r2, [r1]
 8004166:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004168:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800416a:	2b00      	cmp	r3, #0
 800416c:	d1e3      	bne.n	8004136 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2220      	movs	r2, #32
 8004172:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	2200      	movs	r2, #0
 800417a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	330c      	adds	r3, #12
 8004182:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004186:	e853 3f00 	ldrex	r3, [r3]
 800418a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800418c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800418e:	f023 0310 	bic.w	r3, r3, #16
 8004192:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	330c      	adds	r3, #12
 800419c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80041a0:	65ba      	str	r2, [r7, #88]	@ 0x58
 80041a2:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041a4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80041a6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80041a8:	e841 2300 	strex	r3, r2, [r1]
 80041ac:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80041ae:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1e3      	bne.n	800417c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b8:	4618      	mov	r0, r3
 80041ba:	f7fd fb86 	bl	80018ca <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2202      	movs	r2, #2
 80041c2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041cc:	b29b      	uxth	r3, r3
 80041ce:	1ad3      	subs	r3, r2, r3
 80041d0:	b29b      	uxth	r3, r3
 80041d2:	4619      	mov	r1, r3
 80041d4:	6878      	ldr	r0, [r7, #4]
 80041d6:	f000 f8b7 	bl	8004348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80041da:	e09b      	b.n	8004314 <HAL_UART_IRQHandler+0x518>
 80041dc:	0800449b 	.word	0x0800449b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041e8:	b29b      	uxth	r3, r3
 80041ea:	1ad3      	subs	r3, r2, r3
 80041ec:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80041f4:	b29b      	uxth	r3, r3
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 808e 	beq.w	8004318 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80041fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004200:	2b00      	cmp	r3, #0
 8004202:	f000 8089 	beq.w	8004318 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	330c      	adds	r3, #12
 800420c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800420e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004210:	e853 3f00 	ldrex	r3, [r3]
 8004214:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004216:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004218:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800421c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	330c      	adds	r3, #12
 8004226:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800422a:	647a      	str	r2, [r7, #68]	@ 0x44
 800422c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800422e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004230:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004232:	e841 2300 	strex	r3, r2, [r1]
 8004236:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004238:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800423a:	2b00      	cmp	r3, #0
 800423c:	d1e3      	bne.n	8004206 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	3314      	adds	r3, #20
 8004244:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004248:	e853 3f00 	ldrex	r3, [r3]
 800424c:	623b      	str	r3, [r7, #32]
   return(result);
 800424e:	6a3b      	ldr	r3, [r7, #32]
 8004250:	f023 0301 	bic.w	r3, r3, #1
 8004254:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	3314      	adds	r3, #20
 800425e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004262:	633a      	str	r2, [r7, #48]	@ 0x30
 8004264:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004266:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004268:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800426a:	e841 2300 	strex	r3, r2, [r1]
 800426e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1e3      	bne.n	800423e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	2220      	movs	r2, #32
 800427a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	e853 3f00 	ldrex	r3, [r3]
 8004292:	60fb      	str	r3, [r7, #12]
   return(result);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f023 0310 	bic.w	r3, r3, #16
 800429a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80042a8:	61fa      	str	r2, [r7, #28]
 80042aa:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ac:	69b9      	ldr	r1, [r7, #24]
 80042ae:	69fa      	ldr	r2, [r7, #28]
 80042b0:	e841 2300 	strex	r3, r2, [r1]
 80042b4:	617b      	str	r3, [r7, #20]
   return(result);
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d1e3      	bne.n	8004284 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2202      	movs	r2, #2
 80042c0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80042c2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80042c6:	4619      	mov	r1, r3
 80042c8:	6878      	ldr	r0, [r7, #4]
 80042ca:	f000 f83d 	bl	8004348 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80042ce:	e023      	b.n	8004318 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80042d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d009      	beq.n	80042f0 <HAL_UART_IRQHandler+0x4f4>
 80042dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042e0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d003      	beq.n	80042f0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80042e8:	6878      	ldr	r0, [r7, #4]
 80042ea:	f000 f8ea 	bl	80044c2 <UART_Transmit_IT>
    return;
 80042ee:	e014      	b.n	800431a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80042f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d00e      	beq.n	800431a <HAL_UART_IRQHandler+0x51e>
 80042fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004300:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f000 f92a 	bl	8004562 <UART_EndTransmit_IT>
    return;
 800430e:	e004      	b.n	800431a <HAL_UART_IRQHandler+0x51e>
    return;
 8004310:	bf00      	nop
 8004312:	e002      	b.n	800431a <HAL_UART_IRQHandler+0x51e>
      return;
 8004314:	bf00      	nop
 8004316:	e000      	b.n	800431a <HAL_UART_IRQHandler+0x51e>
      return;
 8004318:	bf00      	nop
  }
}
 800431a:	37e8      	adds	r7, #232	@ 0xe8
 800431c:	46bd      	mov	sp, r7
 800431e:	bd80      	pop	{r7, pc}

08004320 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004320:	b480      	push	{r7}
 8004322:	b083      	sub	sp, #12
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004328:	bf00      	nop
 800432a:	370c      	adds	r7, #12
 800432c:	46bd      	mov	sp, r7
 800432e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004332:	4770      	bx	lr

08004334 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004334:	b480      	push	{r7}
 8004336:	b083      	sub	sp, #12
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800433c:	bf00      	nop
 800433e:	370c      	adds	r7, #12
 8004340:	46bd      	mov	sp, r7
 8004342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004346:	4770      	bx	lr

08004348 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004348:	b480      	push	{r7}
 800434a:	b083      	sub	sp, #12
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
 8004350:	460b      	mov	r3, r1
 8004352:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004354:	bf00      	nop
 8004356:	370c      	adds	r7, #12
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr

08004360 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004360:	b480      	push	{r7}
 8004362:	b085      	sub	sp, #20
 8004364:	af00      	add	r7, sp, #0
 8004366:	60f8      	str	r0, [r7, #12]
 8004368:	60b9      	str	r1, [r7, #8]
 800436a:	4613      	mov	r3, r2
 800436c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	68ba      	ldr	r2, [r7, #8]
 8004372:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	88fa      	ldrh	r2, [r7, #6]
 8004378:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	88fa      	ldrh	r2, [r7, #6]
 800437e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	2200      	movs	r2, #0
 8004384:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	2222      	movs	r2, #34	@ 0x22
 800438a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	691b      	ldr	r3, [r3, #16]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d007      	beq.n	80043a6 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	68da      	ldr	r2, [r3, #12]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043a4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	695a      	ldr	r2, [r3, #20]
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f042 0201 	orr.w	r2, r2, #1
 80043b4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68da      	ldr	r2, [r3, #12]
 80043bc:	68fb      	ldr	r3, [r7, #12]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f042 0220 	orr.w	r2, r2, #32
 80043c4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3714      	adds	r7, #20
 80043cc:	46bd      	mov	sp, r7
 80043ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d2:	4770      	bx	lr

080043d4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80043d4:	b480      	push	{r7}
 80043d6:	b095      	sub	sp, #84	@ 0x54
 80043d8:	af00      	add	r7, sp, #0
 80043da:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	330c      	adds	r3, #12
 80043e2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043e6:	e853 3f00 	ldrex	r3, [r3]
 80043ea:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80043ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80043ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80043f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	330c      	adds	r3, #12
 80043fa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80043fc:	643a      	str	r2, [r7, #64]	@ 0x40
 80043fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004400:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004402:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004404:	e841 2300 	strex	r3, r2, [r1]
 8004408:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800440a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800440c:	2b00      	cmp	r3, #0
 800440e:	d1e5      	bne.n	80043dc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	3314      	adds	r3, #20
 8004416:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004418:	6a3b      	ldr	r3, [r7, #32]
 800441a:	e853 3f00 	ldrex	r3, [r3]
 800441e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004420:	69fb      	ldr	r3, [r7, #28]
 8004422:	f023 0301 	bic.w	r3, r3, #1
 8004426:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	3314      	adds	r3, #20
 800442e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004430:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004432:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004434:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004436:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004438:	e841 2300 	strex	r3, r2, [r1]
 800443c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800443e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004440:	2b00      	cmp	r3, #0
 8004442:	d1e5      	bne.n	8004410 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004448:	2b01      	cmp	r3, #1
 800444a:	d119      	bne.n	8004480 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	330c      	adds	r3, #12
 8004452:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	e853 3f00 	ldrex	r3, [r3]
 800445a:	60bb      	str	r3, [r7, #8]
   return(result);
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f023 0310 	bic.w	r3, r3, #16
 8004462:	647b      	str	r3, [r7, #68]	@ 0x44
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	330c      	adds	r3, #12
 800446a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800446c:	61ba      	str	r2, [r7, #24]
 800446e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004470:	6979      	ldr	r1, [r7, #20]
 8004472:	69ba      	ldr	r2, [r7, #24]
 8004474:	e841 2300 	strex	r3, r2, [r1]
 8004478:	613b      	str	r3, [r7, #16]
   return(result);
 800447a:	693b      	ldr	r3, [r7, #16]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d1e5      	bne.n	800444c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2220      	movs	r2, #32
 8004484:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800448e:	bf00      	nop
 8004490:	3754      	adds	r7, #84	@ 0x54
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800449a:	b580      	push	{r7, lr}
 800449c:	b084      	sub	sp, #16
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80044a6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	2200      	movs	r2, #0
 80044ac:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	2200      	movs	r2, #0
 80044b2:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80044b4:	68f8      	ldr	r0, [r7, #12]
 80044b6:	f7ff ff3d 	bl	8004334 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80044ba:	bf00      	nop
 80044bc:	3710      	adds	r7, #16
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}

080044c2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80044c2:	b480      	push	{r7}
 80044c4:	b085      	sub	sp, #20
 80044c6:	af00      	add	r7, sp, #0
 80044c8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80044d0:	b2db      	uxtb	r3, r3
 80044d2:	2b21      	cmp	r3, #33	@ 0x21
 80044d4:	d13e      	bne.n	8004554 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	689b      	ldr	r3, [r3, #8]
 80044da:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80044de:	d114      	bne.n	800450a <UART_Transmit_IT+0x48>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	691b      	ldr	r3, [r3, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d110      	bne.n	800450a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	881b      	ldrh	r3, [r3, #0]
 80044f2:	461a      	mov	r2, r3
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80044fc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	6a1b      	ldr	r3, [r3, #32]
 8004502:	1c9a      	adds	r2, r3, #2
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	621a      	str	r2, [r3, #32]
 8004508:	e008      	b.n	800451c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6a1b      	ldr	r3, [r3, #32]
 800450e:	1c59      	adds	r1, r3, #1
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	6211      	str	r1, [r2, #32]
 8004514:	781a      	ldrb	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004520:	b29b      	uxth	r3, r3
 8004522:	3b01      	subs	r3, #1
 8004524:	b29b      	uxth	r3, r3
 8004526:	687a      	ldr	r2, [r7, #4]
 8004528:	4619      	mov	r1, r3
 800452a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800452c:	2b00      	cmp	r3, #0
 800452e:	d10f      	bne.n	8004550 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800453e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800454e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004550:	2300      	movs	r3, #0
 8004552:	e000      	b.n	8004556 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004554:	2302      	movs	r3, #2
  }
}
 8004556:	4618      	mov	r0, r3
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004560:	4770      	bx	lr

08004562 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b082      	sub	sp, #8
 8004566:	af00      	add	r7, sp, #0
 8004568:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	68da      	ldr	r2, [r3, #12]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004578:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	2220      	movs	r2, #32
 800457e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004582:	6878      	ldr	r0, [r7, #4]
 8004584:	f7ff fecc 	bl	8004320 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004588:	2300      	movs	r3, #0
}
 800458a:	4618      	mov	r0, r3
 800458c:	3708      	adds	r7, #8
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}

08004592 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004592:	b580      	push	{r7, lr}
 8004594:	b08c      	sub	sp, #48	@ 0x30
 8004596:	af00      	add	r7, sp, #0
 8004598:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	2b22      	cmp	r3, #34	@ 0x22
 80045a4:	f040 80ae 	bne.w	8004704 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	689b      	ldr	r3, [r3, #8]
 80045ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045b0:	d117      	bne.n	80045e2 <UART_Receive_IT+0x50>
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d113      	bne.n	80045e2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80045ba:	2300      	movs	r3, #0
 80045bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045c2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	b29b      	uxth	r3, r3
 80045cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80045d0:	b29a      	uxth	r2, r3
 80045d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045d4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045da:	1c9a      	adds	r2, r3, #2
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	629a      	str	r2, [r3, #40]	@ 0x28
 80045e0:	e026      	b.n	8004630 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80045e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80045e8:	2300      	movs	r3, #0
 80045ea:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689b      	ldr	r3, [r3, #8]
 80045f0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80045f4:	d007      	beq.n	8004606 <UART_Receive_IT+0x74>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	689b      	ldr	r3, [r3, #8]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <UART_Receive_IT+0x82>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d106      	bne.n	8004614 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	b2da      	uxtb	r2, r3
 800460e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004610:	701a      	strb	r2, [r3, #0]
 8004612:	e008      	b.n	8004626 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	b2db      	uxtb	r3, r3
 800461c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004620:	b2da      	uxtb	r2, r3
 8004622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004624:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800462a:	1c5a      	adds	r2, r3, #1
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004634:	b29b      	uxth	r3, r3
 8004636:	3b01      	subs	r3, #1
 8004638:	b29b      	uxth	r3, r3
 800463a:	687a      	ldr	r2, [r7, #4]
 800463c:	4619      	mov	r1, r3
 800463e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004640:	2b00      	cmp	r3, #0
 8004642:	d15d      	bne.n	8004700 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	68da      	ldr	r2, [r3, #12]
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	f022 0220 	bic.w	r2, r2, #32
 8004652:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	68da      	ldr	r2, [r3, #12]
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004662:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	695a      	ldr	r2, [r3, #20]
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f022 0201 	bic.w	r2, r2, #1
 8004672:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004686:	2b01      	cmp	r3, #1
 8004688:	d135      	bne.n	80046f6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2200      	movs	r2, #0
 800468e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	330c      	adds	r3, #12
 8004696:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	e853 3f00 	ldrex	r3, [r3]
 800469e:	613b      	str	r3, [r7, #16]
   return(result);
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	f023 0310 	bic.w	r3, r3, #16
 80046a6:	627b      	str	r3, [r7, #36]	@ 0x24
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	330c      	adds	r3, #12
 80046ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80046b0:	623a      	str	r2, [r7, #32]
 80046b2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046b4:	69f9      	ldr	r1, [r7, #28]
 80046b6:	6a3a      	ldr	r2, [r7, #32]
 80046b8:	e841 2300 	strex	r3, r2, [r1]
 80046bc:	61bb      	str	r3, [r7, #24]
   return(result);
 80046be:	69bb      	ldr	r3, [r7, #24]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d1e5      	bne.n	8004690 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f003 0310 	and.w	r3, r3, #16
 80046ce:	2b10      	cmp	r3, #16
 80046d0:	d10a      	bne.n	80046e8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80046d2:	2300      	movs	r3, #0
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	60fb      	str	r3, [r7, #12]
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	60fb      	str	r3, [r7, #12]
 80046e6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80046ec:	4619      	mov	r1, r3
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f7ff fe2a 	bl	8004348 <HAL_UARTEx_RxEventCallback>
 80046f4:	e002      	b.n	80046fc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7fc fa1a 	bl	8000b30 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80046fc:	2300      	movs	r3, #0
 80046fe:	e002      	b.n	8004706 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004700:	2300      	movs	r3, #0
 8004702:	e000      	b.n	8004706 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004704:	2302      	movs	r3, #2
  }
}
 8004706:	4618      	mov	r0, r3
 8004708:	3730      	adds	r7, #48	@ 0x30
 800470a:	46bd      	mov	sp, r7
 800470c:	bd80      	pop	{r7, pc}
	...

08004710 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004710:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004714:	b0c0      	sub	sp, #256	@ 0x100
 8004716:	af00      	add	r7, sp, #0
 8004718:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800471c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	691b      	ldr	r3, [r3, #16]
 8004724:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004728:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800472c:	68d9      	ldr	r1, [r3, #12]
 800472e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004732:	681a      	ldr	r2, [r3, #0]
 8004734:	ea40 0301 	orr.w	r3, r0, r1
 8004738:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800473a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800473e:	689a      	ldr	r2, [r3, #8]
 8004740:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004744:	691b      	ldr	r3, [r3, #16]
 8004746:	431a      	orrs	r2, r3
 8004748:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	431a      	orrs	r2, r3
 8004750:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004754:	69db      	ldr	r3, [r3, #28]
 8004756:	4313      	orrs	r3, r2
 8004758:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800475c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	68db      	ldr	r3, [r3, #12]
 8004764:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004768:	f021 010c 	bic.w	r1, r1, #12
 800476c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004770:	681a      	ldr	r2, [r3, #0]
 8004772:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004776:	430b      	orrs	r3, r1
 8004778:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800477a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	695b      	ldr	r3, [r3, #20]
 8004782:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800478a:	6999      	ldr	r1, [r3, #24]
 800478c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004790:	681a      	ldr	r2, [r3, #0]
 8004792:	ea40 0301 	orr.w	r3, r0, r1
 8004796:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004798:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800479c:	681a      	ldr	r2, [r3, #0]
 800479e:	4b8f      	ldr	r3, [pc, #572]	@ (80049dc <UART_SetConfig+0x2cc>)
 80047a0:	429a      	cmp	r2, r3
 80047a2:	d005      	beq.n	80047b0 <UART_SetConfig+0xa0>
 80047a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	4b8d      	ldr	r3, [pc, #564]	@ (80049e0 <UART_SetConfig+0x2d0>)
 80047ac:	429a      	cmp	r2, r3
 80047ae:	d104      	bne.n	80047ba <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80047b0:	f7fd fbf6 	bl	8001fa0 <HAL_RCC_GetPCLK2Freq>
 80047b4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80047b8:	e003      	b.n	80047c2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80047ba:	f7fd fbdd 	bl	8001f78 <HAL_RCC_GetPCLK1Freq>
 80047be:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80047c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047c6:	69db      	ldr	r3, [r3, #28]
 80047c8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80047cc:	f040 810c 	bne.w	80049e8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80047d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047d4:	2200      	movs	r2, #0
 80047d6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80047da:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80047de:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80047e2:	4622      	mov	r2, r4
 80047e4:	462b      	mov	r3, r5
 80047e6:	1891      	adds	r1, r2, r2
 80047e8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80047ea:	415b      	adcs	r3, r3
 80047ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80047ee:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80047f2:	4621      	mov	r1, r4
 80047f4:	eb12 0801 	adds.w	r8, r2, r1
 80047f8:	4629      	mov	r1, r5
 80047fa:	eb43 0901 	adc.w	r9, r3, r1
 80047fe:	f04f 0200 	mov.w	r2, #0
 8004802:	f04f 0300 	mov.w	r3, #0
 8004806:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800480a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800480e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004812:	4690      	mov	r8, r2
 8004814:	4699      	mov	r9, r3
 8004816:	4623      	mov	r3, r4
 8004818:	eb18 0303 	adds.w	r3, r8, r3
 800481c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004820:	462b      	mov	r3, r5
 8004822:	eb49 0303 	adc.w	r3, r9, r3
 8004826:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800482a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800482e:	685b      	ldr	r3, [r3, #4]
 8004830:	2200      	movs	r2, #0
 8004832:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004836:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800483a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800483e:	460b      	mov	r3, r1
 8004840:	18db      	adds	r3, r3, r3
 8004842:	653b      	str	r3, [r7, #80]	@ 0x50
 8004844:	4613      	mov	r3, r2
 8004846:	eb42 0303 	adc.w	r3, r2, r3
 800484a:	657b      	str	r3, [r7, #84]	@ 0x54
 800484c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004850:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004854:	f7fb fd34 	bl	80002c0 <__aeabi_uldivmod>
 8004858:	4602      	mov	r2, r0
 800485a:	460b      	mov	r3, r1
 800485c:	4b61      	ldr	r3, [pc, #388]	@ (80049e4 <UART_SetConfig+0x2d4>)
 800485e:	fba3 2302 	umull	r2, r3, r3, r2
 8004862:	095b      	lsrs	r3, r3, #5
 8004864:	011c      	lsls	r4, r3, #4
 8004866:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800486a:	2200      	movs	r2, #0
 800486c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004870:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004874:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004878:	4642      	mov	r2, r8
 800487a:	464b      	mov	r3, r9
 800487c:	1891      	adds	r1, r2, r2
 800487e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004880:	415b      	adcs	r3, r3
 8004882:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004884:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004888:	4641      	mov	r1, r8
 800488a:	eb12 0a01 	adds.w	sl, r2, r1
 800488e:	4649      	mov	r1, r9
 8004890:	eb43 0b01 	adc.w	fp, r3, r1
 8004894:	f04f 0200 	mov.w	r2, #0
 8004898:	f04f 0300 	mov.w	r3, #0
 800489c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80048a0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80048a4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80048a8:	4692      	mov	sl, r2
 80048aa:	469b      	mov	fp, r3
 80048ac:	4643      	mov	r3, r8
 80048ae:	eb1a 0303 	adds.w	r3, sl, r3
 80048b2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80048b6:	464b      	mov	r3, r9
 80048b8:	eb4b 0303 	adc.w	r3, fp, r3
 80048bc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80048c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2200      	movs	r2, #0
 80048c8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80048cc:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80048d0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80048d4:	460b      	mov	r3, r1
 80048d6:	18db      	adds	r3, r3, r3
 80048d8:	643b      	str	r3, [r7, #64]	@ 0x40
 80048da:	4613      	mov	r3, r2
 80048dc:	eb42 0303 	adc.w	r3, r2, r3
 80048e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80048e2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80048e6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80048ea:	f7fb fce9 	bl	80002c0 <__aeabi_uldivmod>
 80048ee:	4602      	mov	r2, r0
 80048f0:	460b      	mov	r3, r1
 80048f2:	4611      	mov	r1, r2
 80048f4:	4b3b      	ldr	r3, [pc, #236]	@ (80049e4 <UART_SetConfig+0x2d4>)
 80048f6:	fba3 2301 	umull	r2, r3, r3, r1
 80048fa:	095b      	lsrs	r3, r3, #5
 80048fc:	2264      	movs	r2, #100	@ 0x64
 80048fe:	fb02 f303 	mul.w	r3, r2, r3
 8004902:	1acb      	subs	r3, r1, r3
 8004904:	00db      	lsls	r3, r3, #3
 8004906:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800490a:	4b36      	ldr	r3, [pc, #216]	@ (80049e4 <UART_SetConfig+0x2d4>)
 800490c:	fba3 2302 	umull	r2, r3, r3, r2
 8004910:	095b      	lsrs	r3, r3, #5
 8004912:	005b      	lsls	r3, r3, #1
 8004914:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004918:	441c      	add	r4, r3
 800491a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800491e:	2200      	movs	r2, #0
 8004920:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004924:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004928:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800492c:	4642      	mov	r2, r8
 800492e:	464b      	mov	r3, r9
 8004930:	1891      	adds	r1, r2, r2
 8004932:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004934:	415b      	adcs	r3, r3
 8004936:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004938:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800493c:	4641      	mov	r1, r8
 800493e:	1851      	adds	r1, r2, r1
 8004940:	6339      	str	r1, [r7, #48]	@ 0x30
 8004942:	4649      	mov	r1, r9
 8004944:	414b      	adcs	r3, r1
 8004946:	637b      	str	r3, [r7, #52]	@ 0x34
 8004948:	f04f 0200 	mov.w	r2, #0
 800494c:	f04f 0300 	mov.w	r3, #0
 8004950:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004954:	4659      	mov	r1, fp
 8004956:	00cb      	lsls	r3, r1, #3
 8004958:	4651      	mov	r1, sl
 800495a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800495e:	4651      	mov	r1, sl
 8004960:	00ca      	lsls	r2, r1, #3
 8004962:	4610      	mov	r0, r2
 8004964:	4619      	mov	r1, r3
 8004966:	4603      	mov	r3, r0
 8004968:	4642      	mov	r2, r8
 800496a:	189b      	adds	r3, r3, r2
 800496c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004970:	464b      	mov	r3, r9
 8004972:	460a      	mov	r2, r1
 8004974:	eb42 0303 	adc.w	r3, r2, r3
 8004978:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	2200      	movs	r2, #0
 8004984:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004988:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800498c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004990:	460b      	mov	r3, r1
 8004992:	18db      	adds	r3, r3, r3
 8004994:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004996:	4613      	mov	r3, r2
 8004998:	eb42 0303 	adc.w	r3, r2, r3
 800499c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800499e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80049a2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80049a6:	f7fb fc8b 	bl	80002c0 <__aeabi_uldivmod>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4b0d      	ldr	r3, [pc, #52]	@ (80049e4 <UART_SetConfig+0x2d4>)
 80049b0:	fba3 1302 	umull	r1, r3, r3, r2
 80049b4:	095b      	lsrs	r3, r3, #5
 80049b6:	2164      	movs	r1, #100	@ 0x64
 80049b8:	fb01 f303 	mul.w	r3, r1, r3
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	00db      	lsls	r3, r3, #3
 80049c0:	3332      	adds	r3, #50	@ 0x32
 80049c2:	4a08      	ldr	r2, [pc, #32]	@ (80049e4 <UART_SetConfig+0x2d4>)
 80049c4:	fba2 2303 	umull	r2, r3, r2, r3
 80049c8:	095b      	lsrs	r3, r3, #5
 80049ca:	f003 0207 	and.w	r2, r3, #7
 80049ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	4422      	add	r2, r4
 80049d6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80049d8:	e106      	b.n	8004be8 <UART_SetConfig+0x4d8>
 80049da:	bf00      	nop
 80049dc:	40011000 	.word	0x40011000
 80049e0:	40011400 	.word	0x40011400
 80049e4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80049e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049ec:	2200      	movs	r2, #0
 80049ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80049f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80049f6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80049fa:	4642      	mov	r2, r8
 80049fc:	464b      	mov	r3, r9
 80049fe:	1891      	adds	r1, r2, r2
 8004a00:	6239      	str	r1, [r7, #32]
 8004a02:	415b      	adcs	r3, r3
 8004a04:	627b      	str	r3, [r7, #36]	@ 0x24
 8004a06:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004a0a:	4641      	mov	r1, r8
 8004a0c:	1854      	adds	r4, r2, r1
 8004a0e:	4649      	mov	r1, r9
 8004a10:	eb43 0501 	adc.w	r5, r3, r1
 8004a14:	f04f 0200 	mov.w	r2, #0
 8004a18:	f04f 0300 	mov.w	r3, #0
 8004a1c:	00eb      	lsls	r3, r5, #3
 8004a1e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004a22:	00e2      	lsls	r2, r4, #3
 8004a24:	4614      	mov	r4, r2
 8004a26:	461d      	mov	r5, r3
 8004a28:	4643      	mov	r3, r8
 8004a2a:	18e3      	adds	r3, r4, r3
 8004a2c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004a30:	464b      	mov	r3, r9
 8004a32:	eb45 0303 	adc.w	r3, r5, r3
 8004a36:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004a3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004a46:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004a4a:	f04f 0200 	mov.w	r2, #0
 8004a4e:	f04f 0300 	mov.w	r3, #0
 8004a52:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004a56:	4629      	mov	r1, r5
 8004a58:	008b      	lsls	r3, r1, #2
 8004a5a:	4621      	mov	r1, r4
 8004a5c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a60:	4621      	mov	r1, r4
 8004a62:	008a      	lsls	r2, r1, #2
 8004a64:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004a68:	f7fb fc2a 	bl	80002c0 <__aeabi_uldivmod>
 8004a6c:	4602      	mov	r2, r0
 8004a6e:	460b      	mov	r3, r1
 8004a70:	4b60      	ldr	r3, [pc, #384]	@ (8004bf4 <UART_SetConfig+0x4e4>)
 8004a72:	fba3 2302 	umull	r2, r3, r3, r2
 8004a76:	095b      	lsrs	r3, r3, #5
 8004a78:	011c      	lsls	r4, r3, #4
 8004a7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a7e:	2200      	movs	r2, #0
 8004a80:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004a84:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004a88:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004a8c:	4642      	mov	r2, r8
 8004a8e:	464b      	mov	r3, r9
 8004a90:	1891      	adds	r1, r2, r2
 8004a92:	61b9      	str	r1, [r7, #24]
 8004a94:	415b      	adcs	r3, r3
 8004a96:	61fb      	str	r3, [r7, #28]
 8004a98:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a9c:	4641      	mov	r1, r8
 8004a9e:	1851      	adds	r1, r2, r1
 8004aa0:	6139      	str	r1, [r7, #16]
 8004aa2:	4649      	mov	r1, r9
 8004aa4:	414b      	adcs	r3, r1
 8004aa6:	617b      	str	r3, [r7, #20]
 8004aa8:	f04f 0200 	mov.w	r2, #0
 8004aac:	f04f 0300 	mov.w	r3, #0
 8004ab0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ab4:	4659      	mov	r1, fp
 8004ab6:	00cb      	lsls	r3, r1, #3
 8004ab8:	4651      	mov	r1, sl
 8004aba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004abe:	4651      	mov	r1, sl
 8004ac0:	00ca      	lsls	r2, r1, #3
 8004ac2:	4610      	mov	r0, r2
 8004ac4:	4619      	mov	r1, r3
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	4642      	mov	r2, r8
 8004aca:	189b      	adds	r3, r3, r2
 8004acc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ad0:	464b      	mov	r3, r9
 8004ad2:	460a      	mov	r2, r1
 8004ad4:	eb42 0303 	adc.w	r3, r2, r3
 8004ad8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004adc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004ae6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004ae8:	f04f 0200 	mov.w	r2, #0
 8004aec:	f04f 0300 	mov.w	r3, #0
 8004af0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004af4:	4649      	mov	r1, r9
 8004af6:	008b      	lsls	r3, r1, #2
 8004af8:	4641      	mov	r1, r8
 8004afa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004afe:	4641      	mov	r1, r8
 8004b00:	008a      	lsls	r2, r1, #2
 8004b02:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004b06:	f7fb fbdb 	bl	80002c0 <__aeabi_uldivmod>
 8004b0a:	4602      	mov	r2, r0
 8004b0c:	460b      	mov	r3, r1
 8004b0e:	4611      	mov	r1, r2
 8004b10:	4b38      	ldr	r3, [pc, #224]	@ (8004bf4 <UART_SetConfig+0x4e4>)
 8004b12:	fba3 2301 	umull	r2, r3, r3, r1
 8004b16:	095b      	lsrs	r3, r3, #5
 8004b18:	2264      	movs	r2, #100	@ 0x64
 8004b1a:	fb02 f303 	mul.w	r3, r2, r3
 8004b1e:	1acb      	subs	r3, r1, r3
 8004b20:	011b      	lsls	r3, r3, #4
 8004b22:	3332      	adds	r3, #50	@ 0x32
 8004b24:	4a33      	ldr	r2, [pc, #204]	@ (8004bf4 <UART_SetConfig+0x4e4>)
 8004b26:	fba2 2303 	umull	r2, r3, r2, r3
 8004b2a:	095b      	lsrs	r3, r3, #5
 8004b2c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004b30:	441c      	add	r4, r3
 8004b32:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004b36:	2200      	movs	r2, #0
 8004b38:	673b      	str	r3, [r7, #112]	@ 0x70
 8004b3a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004b3c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004b40:	4642      	mov	r2, r8
 8004b42:	464b      	mov	r3, r9
 8004b44:	1891      	adds	r1, r2, r2
 8004b46:	60b9      	str	r1, [r7, #8]
 8004b48:	415b      	adcs	r3, r3
 8004b4a:	60fb      	str	r3, [r7, #12]
 8004b4c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b50:	4641      	mov	r1, r8
 8004b52:	1851      	adds	r1, r2, r1
 8004b54:	6039      	str	r1, [r7, #0]
 8004b56:	4649      	mov	r1, r9
 8004b58:	414b      	adcs	r3, r1
 8004b5a:	607b      	str	r3, [r7, #4]
 8004b5c:	f04f 0200 	mov.w	r2, #0
 8004b60:	f04f 0300 	mov.w	r3, #0
 8004b64:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004b68:	4659      	mov	r1, fp
 8004b6a:	00cb      	lsls	r3, r1, #3
 8004b6c:	4651      	mov	r1, sl
 8004b6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b72:	4651      	mov	r1, sl
 8004b74:	00ca      	lsls	r2, r1, #3
 8004b76:	4610      	mov	r0, r2
 8004b78:	4619      	mov	r1, r3
 8004b7a:	4603      	mov	r3, r0
 8004b7c:	4642      	mov	r2, r8
 8004b7e:	189b      	adds	r3, r3, r2
 8004b80:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004b82:	464b      	mov	r3, r9
 8004b84:	460a      	mov	r2, r1
 8004b86:	eb42 0303 	adc.w	r3, r2, r3
 8004b8a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004b8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b90:	685b      	ldr	r3, [r3, #4]
 8004b92:	2200      	movs	r2, #0
 8004b94:	663b      	str	r3, [r7, #96]	@ 0x60
 8004b96:	667a      	str	r2, [r7, #100]	@ 0x64
 8004b98:	f04f 0200 	mov.w	r2, #0
 8004b9c:	f04f 0300 	mov.w	r3, #0
 8004ba0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ba4:	4649      	mov	r1, r9
 8004ba6:	008b      	lsls	r3, r1, #2
 8004ba8:	4641      	mov	r1, r8
 8004baa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004bae:	4641      	mov	r1, r8
 8004bb0:	008a      	lsls	r2, r1, #2
 8004bb2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004bb6:	f7fb fb83 	bl	80002c0 <__aeabi_uldivmod>
 8004bba:	4602      	mov	r2, r0
 8004bbc:	460b      	mov	r3, r1
 8004bbe:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf4 <UART_SetConfig+0x4e4>)
 8004bc0:	fba3 1302 	umull	r1, r3, r3, r2
 8004bc4:	095b      	lsrs	r3, r3, #5
 8004bc6:	2164      	movs	r1, #100	@ 0x64
 8004bc8:	fb01 f303 	mul.w	r3, r1, r3
 8004bcc:	1ad3      	subs	r3, r2, r3
 8004bce:	011b      	lsls	r3, r3, #4
 8004bd0:	3332      	adds	r3, #50	@ 0x32
 8004bd2:	4a08      	ldr	r2, [pc, #32]	@ (8004bf4 <UART_SetConfig+0x4e4>)
 8004bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bd8:	095b      	lsrs	r3, r3, #5
 8004bda:	f003 020f 	and.w	r2, r3, #15
 8004bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	4422      	add	r2, r4
 8004be6:	609a      	str	r2, [r3, #8]
}
 8004be8:	bf00      	nop
 8004bea:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004bee:	46bd      	mov	sp, r7
 8004bf0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004bf4:	51eb851f 	.word	0x51eb851f

08004bf8 <siscanf>:
 8004bf8:	b40e      	push	{r1, r2, r3}
 8004bfa:	b530      	push	{r4, r5, lr}
 8004bfc:	b09c      	sub	sp, #112	@ 0x70
 8004bfe:	ac1f      	add	r4, sp, #124	@ 0x7c
 8004c00:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8004c04:	f854 5b04 	ldr.w	r5, [r4], #4
 8004c08:	f8ad 2014 	strh.w	r2, [sp, #20]
 8004c0c:	9002      	str	r0, [sp, #8]
 8004c0e:	9006      	str	r0, [sp, #24]
 8004c10:	f7fb fafe 	bl	8000210 <strlen>
 8004c14:	4b0b      	ldr	r3, [pc, #44]	@ (8004c44 <siscanf+0x4c>)
 8004c16:	9003      	str	r0, [sp, #12]
 8004c18:	9007      	str	r0, [sp, #28]
 8004c1a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004c1c:	480a      	ldr	r0, [pc, #40]	@ (8004c48 <siscanf+0x50>)
 8004c1e:	9401      	str	r4, [sp, #4]
 8004c20:	2300      	movs	r3, #0
 8004c22:	930f      	str	r3, [sp, #60]	@ 0x3c
 8004c24:	9314      	str	r3, [sp, #80]	@ 0x50
 8004c26:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004c2a:	f8ad 3016 	strh.w	r3, [sp, #22]
 8004c2e:	462a      	mov	r2, r5
 8004c30:	4623      	mov	r3, r4
 8004c32:	a902      	add	r1, sp, #8
 8004c34:	6800      	ldr	r0, [r0, #0]
 8004c36:	f000 f997 	bl	8004f68 <__ssvfiscanf_r>
 8004c3a:	b01c      	add	sp, #112	@ 0x70
 8004c3c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004c40:	b003      	add	sp, #12
 8004c42:	4770      	bx	lr
 8004c44:	08004c4d 	.word	0x08004c4d
 8004c48:	20000088 	.word	0x20000088

08004c4c <__seofread>:
 8004c4c:	2000      	movs	r0, #0
 8004c4e:	4770      	bx	lr

08004c50 <memset>:
 8004c50:	4402      	add	r2, r0
 8004c52:	4603      	mov	r3, r0
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d100      	bne.n	8004c5a <memset+0xa>
 8004c58:	4770      	bx	lr
 8004c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8004c5e:	e7f9      	b.n	8004c54 <memset+0x4>

08004c60 <__errno>:
 8004c60:	4b01      	ldr	r3, [pc, #4]	@ (8004c68 <__errno+0x8>)
 8004c62:	6818      	ldr	r0, [r3, #0]
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	20000088 	.word	0x20000088

08004c6c <__libc_init_array>:
 8004c6c:	b570      	push	{r4, r5, r6, lr}
 8004c6e:	4d0d      	ldr	r5, [pc, #52]	@ (8004ca4 <__libc_init_array+0x38>)
 8004c70:	4c0d      	ldr	r4, [pc, #52]	@ (8004ca8 <__libc_init_array+0x3c>)
 8004c72:	1b64      	subs	r4, r4, r5
 8004c74:	10a4      	asrs	r4, r4, #2
 8004c76:	2600      	movs	r6, #0
 8004c78:	42a6      	cmp	r6, r4
 8004c7a:	d109      	bne.n	8004c90 <__libc_init_array+0x24>
 8004c7c:	4d0b      	ldr	r5, [pc, #44]	@ (8004cac <__libc_init_array+0x40>)
 8004c7e:	4c0c      	ldr	r4, [pc, #48]	@ (8004cb0 <__libc_init_array+0x44>)
 8004c80:	f000 fde8 	bl	8005854 <_init>
 8004c84:	1b64      	subs	r4, r4, r5
 8004c86:	10a4      	asrs	r4, r4, #2
 8004c88:	2600      	movs	r6, #0
 8004c8a:	42a6      	cmp	r6, r4
 8004c8c:	d105      	bne.n	8004c9a <__libc_init_array+0x2e>
 8004c8e:	bd70      	pop	{r4, r5, r6, pc}
 8004c90:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c94:	4798      	blx	r3
 8004c96:	3601      	adds	r6, #1
 8004c98:	e7ee      	b.n	8004c78 <__libc_init_array+0xc>
 8004c9a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004c9e:	4798      	blx	r3
 8004ca0:	3601      	adds	r6, #1
 8004ca2:	e7f2      	b.n	8004c8a <__libc_init_array+0x1e>
 8004ca4:	080059c4 	.word	0x080059c4
 8004ca8:	080059c4 	.word	0x080059c4
 8004cac:	080059c4 	.word	0x080059c4
 8004cb0:	080059c8 	.word	0x080059c8

08004cb4 <__retarget_lock_acquire_recursive>:
 8004cb4:	4770      	bx	lr

08004cb6 <__retarget_lock_release_recursive>:
 8004cb6:	4770      	bx	lr

08004cb8 <strcpy>:
 8004cb8:	4603      	mov	r3, r0
 8004cba:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004cbe:	f803 2b01 	strb.w	r2, [r3], #1
 8004cc2:	2a00      	cmp	r2, #0
 8004cc4:	d1f9      	bne.n	8004cba <strcpy+0x2>
 8004cc6:	4770      	bx	lr

08004cc8 <_free_r>:
 8004cc8:	b538      	push	{r3, r4, r5, lr}
 8004cca:	4605      	mov	r5, r0
 8004ccc:	2900      	cmp	r1, #0
 8004cce:	d041      	beq.n	8004d54 <_free_r+0x8c>
 8004cd0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004cd4:	1f0c      	subs	r4, r1, #4
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	bfb8      	it	lt
 8004cda:	18e4      	addlt	r4, r4, r3
 8004cdc:	f000 f8e0 	bl	8004ea0 <__malloc_lock>
 8004ce0:	4a1d      	ldr	r2, [pc, #116]	@ (8004d58 <_free_r+0x90>)
 8004ce2:	6813      	ldr	r3, [r2, #0]
 8004ce4:	b933      	cbnz	r3, 8004cf4 <_free_r+0x2c>
 8004ce6:	6063      	str	r3, [r4, #4]
 8004ce8:	6014      	str	r4, [r2, #0]
 8004cea:	4628      	mov	r0, r5
 8004cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004cf0:	f000 b8dc 	b.w	8004eac <__malloc_unlock>
 8004cf4:	42a3      	cmp	r3, r4
 8004cf6:	d908      	bls.n	8004d0a <_free_r+0x42>
 8004cf8:	6820      	ldr	r0, [r4, #0]
 8004cfa:	1821      	adds	r1, r4, r0
 8004cfc:	428b      	cmp	r3, r1
 8004cfe:	bf01      	itttt	eq
 8004d00:	6819      	ldreq	r1, [r3, #0]
 8004d02:	685b      	ldreq	r3, [r3, #4]
 8004d04:	1809      	addeq	r1, r1, r0
 8004d06:	6021      	streq	r1, [r4, #0]
 8004d08:	e7ed      	b.n	8004ce6 <_free_r+0x1e>
 8004d0a:	461a      	mov	r2, r3
 8004d0c:	685b      	ldr	r3, [r3, #4]
 8004d0e:	b10b      	cbz	r3, 8004d14 <_free_r+0x4c>
 8004d10:	42a3      	cmp	r3, r4
 8004d12:	d9fa      	bls.n	8004d0a <_free_r+0x42>
 8004d14:	6811      	ldr	r1, [r2, #0]
 8004d16:	1850      	adds	r0, r2, r1
 8004d18:	42a0      	cmp	r0, r4
 8004d1a:	d10b      	bne.n	8004d34 <_free_r+0x6c>
 8004d1c:	6820      	ldr	r0, [r4, #0]
 8004d1e:	4401      	add	r1, r0
 8004d20:	1850      	adds	r0, r2, r1
 8004d22:	4283      	cmp	r3, r0
 8004d24:	6011      	str	r1, [r2, #0]
 8004d26:	d1e0      	bne.n	8004cea <_free_r+0x22>
 8004d28:	6818      	ldr	r0, [r3, #0]
 8004d2a:	685b      	ldr	r3, [r3, #4]
 8004d2c:	6053      	str	r3, [r2, #4]
 8004d2e:	4408      	add	r0, r1
 8004d30:	6010      	str	r0, [r2, #0]
 8004d32:	e7da      	b.n	8004cea <_free_r+0x22>
 8004d34:	d902      	bls.n	8004d3c <_free_r+0x74>
 8004d36:	230c      	movs	r3, #12
 8004d38:	602b      	str	r3, [r5, #0]
 8004d3a:	e7d6      	b.n	8004cea <_free_r+0x22>
 8004d3c:	6820      	ldr	r0, [r4, #0]
 8004d3e:	1821      	adds	r1, r4, r0
 8004d40:	428b      	cmp	r3, r1
 8004d42:	bf04      	itt	eq
 8004d44:	6819      	ldreq	r1, [r3, #0]
 8004d46:	685b      	ldreq	r3, [r3, #4]
 8004d48:	6063      	str	r3, [r4, #4]
 8004d4a:	bf04      	itt	eq
 8004d4c:	1809      	addeq	r1, r1, r0
 8004d4e:	6021      	streq	r1, [r4, #0]
 8004d50:	6054      	str	r4, [r2, #4]
 8004d52:	e7ca      	b.n	8004cea <_free_r+0x22>
 8004d54:	bd38      	pop	{r3, r4, r5, pc}
 8004d56:	bf00      	nop
 8004d58:	200003f0 	.word	0x200003f0

08004d5c <sbrk_aligned>:
 8004d5c:	b570      	push	{r4, r5, r6, lr}
 8004d5e:	4e0f      	ldr	r6, [pc, #60]	@ (8004d9c <sbrk_aligned+0x40>)
 8004d60:	460c      	mov	r4, r1
 8004d62:	6831      	ldr	r1, [r6, #0]
 8004d64:	4605      	mov	r5, r0
 8004d66:	b911      	cbnz	r1, 8004d6e <sbrk_aligned+0x12>
 8004d68:	f000 fc34 	bl	80055d4 <_sbrk_r>
 8004d6c:	6030      	str	r0, [r6, #0]
 8004d6e:	4621      	mov	r1, r4
 8004d70:	4628      	mov	r0, r5
 8004d72:	f000 fc2f 	bl	80055d4 <_sbrk_r>
 8004d76:	1c43      	adds	r3, r0, #1
 8004d78:	d103      	bne.n	8004d82 <sbrk_aligned+0x26>
 8004d7a:	f04f 34ff 	mov.w	r4, #4294967295
 8004d7e:	4620      	mov	r0, r4
 8004d80:	bd70      	pop	{r4, r5, r6, pc}
 8004d82:	1cc4      	adds	r4, r0, #3
 8004d84:	f024 0403 	bic.w	r4, r4, #3
 8004d88:	42a0      	cmp	r0, r4
 8004d8a:	d0f8      	beq.n	8004d7e <sbrk_aligned+0x22>
 8004d8c:	1a21      	subs	r1, r4, r0
 8004d8e:	4628      	mov	r0, r5
 8004d90:	f000 fc20 	bl	80055d4 <_sbrk_r>
 8004d94:	3001      	adds	r0, #1
 8004d96:	d1f2      	bne.n	8004d7e <sbrk_aligned+0x22>
 8004d98:	e7ef      	b.n	8004d7a <sbrk_aligned+0x1e>
 8004d9a:	bf00      	nop
 8004d9c:	200003ec 	.word	0x200003ec

08004da0 <_malloc_r>:
 8004da0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004da4:	1ccd      	adds	r5, r1, #3
 8004da6:	f025 0503 	bic.w	r5, r5, #3
 8004daa:	3508      	adds	r5, #8
 8004dac:	2d0c      	cmp	r5, #12
 8004dae:	bf38      	it	cc
 8004db0:	250c      	movcc	r5, #12
 8004db2:	2d00      	cmp	r5, #0
 8004db4:	4606      	mov	r6, r0
 8004db6:	db01      	blt.n	8004dbc <_malloc_r+0x1c>
 8004db8:	42a9      	cmp	r1, r5
 8004dba:	d904      	bls.n	8004dc6 <_malloc_r+0x26>
 8004dbc:	230c      	movs	r3, #12
 8004dbe:	6033      	str	r3, [r6, #0]
 8004dc0:	2000      	movs	r0, #0
 8004dc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004dc6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004e9c <_malloc_r+0xfc>
 8004dca:	f000 f869 	bl	8004ea0 <__malloc_lock>
 8004dce:	f8d8 3000 	ldr.w	r3, [r8]
 8004dd2:	461c      	mov	r4, r3
 8004dd4:	bb44      	cbnz	r4, 8004e28 <_malloc_r+0x88>
 8004dd6:	4629      	mov	r1, r5
 8004dd8:	4630      	mov	r0, r6
 8004dda:	f7ff ffbf 	bl	8004d5c <sbrk_aligned>
 8004dde:	1c43      	adds	r3, r0, #1
 8004de0:	4604      	mov	r4, r0
 8004de2:	d158      	bne.n	8004e96 <_malloc_r+0xf6>
 8004de4:	f8d8 4000 	ldr.w	r4, [r8]
 8004de8:	4627      	mov	r7, r4
 8004dea:	2f00      	cmp	r7, #0
 8004dec:	d143      	bne.n	8004e76 <_malloc_r+0xd6>
 8004dee:	2c00      	cmp	r4, #0
 8004df0:	d04b      	beq.n	8004e8a <_malloc_r+0xea>
 8004df2:	6823      	ldr	r3, [r4, #0]
 8004df4:	4639      	mov	r1, r7
 8004df6:	4630      	mov	r0, r6
 8004df8:	eb04 0903 	add.w	r9, r4, r3
 8004dfc:	f000 fbea 	bl	80055d4 <_sbrk_r>
 8004e00:	4581      	cmp	r9, r0
 8004e02:	d142      	bne.n	8004e8a <_malloc_r+0xea>
 8004e04:	6821      	ldr	r1, [r4, #0]
 8004e06:	1a6d      	subs	r5, r5, r1
 8004e08:	4629      	mov	r1, r5
 8004e0a:	4630      	mov	r0, r6
 8004e0c:	f7ff ffa6 	bl	8004d5c <sbrk_aligned>
 8004e10:	3001      	adds	r0, #1
 8004e12:	d03a      	beq.n	8004e8a <_malloc_r+0xea>
 8004e14:	6823      	ldr	r3, [r4, #0]
 8004e16:	442b      	add	r3, r5
 8004e18:	6023      	str	r3, [r4, #0]
 8004e1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	bb62      	cbnz	r2, 8004e7c <_malloc_r+0xdc>
 8004e22:	f8c8 7000 	str.w	r7, [r8]
 8004e26:	e00f      	b.n	8004e48 <_malloc_r+0xa8>
 8004e28:	6822      	ldr	r2, [r4, #0]
 8004e2a:	1b52      	subs	r2, r2, r5
 8004e2c:	d420      	bmi.n	8004e70 <_malloc_r+0xd0>
 8004e2e:	2a0b      	cmp	r2, #11
 8004e30:	d917      	bls.n	8004e62 <_malloc_r+0xc2>
 8004e32:	1961      	adds	r1, r4, r5
 8004e34:	42a3      	cmp	r3, r4
 8004e36:	6025      	str	r5, [r4, #0]
 8004e38:	bf18      	it	ne
 8004e3a:	6059      	strne	r1, [r3, #4]
 8004e3c:	6863      	ldr	r3, [r4, #4]
 8004e3e:	bf08      	it	eq
 8004e40:	f8c8 1000 	streq.w	r1, [r8]
 8004e44:	5162      	str	r2, [r4, r5]
 8004e46:	604b      	str	r3, [r1, #4]
 8004e48:	4630      	mov	r0, r6
 8004e4a:	f000 f82f 	bl	8004eac <__malloc_unlock>
 8004e4e:	f104 000b 	add.w	r0, r4, #11
 8004e52:	1d23      	adds	r3, r4, #4
 8004e54:	f020 0007 	bic.w	r0, r0, #7
 8004e58:	1ac2      	subs	r2, r0, r3
 8004e5a:	bf1c      	itt	ne
 8004e5c:	1a1b      	subne	r3, r3, r0
 8004e5e:	50a3      	strne	r3, [r4, r2]
 8004e60:	e7af      	b.n	8004dc2 <_malloc_r+0x22>
 8004e62:	6862      	ldr	r2, [r4, #4]
 8004e64:	42a3      	cmp	r3, r4
 8004e66:	bf0c      	ite	eq
 8004e68:	f8c8 2000 	streq.w	r2, [r8]
 8004e6c:	605a      	strne	r2, [r3, #4]
 8004e6e:	e7eb      	b.n	8004e48 <_malloc_r+0xa8>
 8004e70:	4623      	mov	r3, r4
 8004e72:	6864      	ldr	r4, [r4, #4]
 8004e74:	e7ae      	b.n	8004dd4 <_malloc_r+0x34>
 8004e76:	463c      	mov	r4, r7
 8004e78:	687f      	ldr	r7, [r7, #4]
 8004e7a:	e7b6      	b.n	8004dea <_malloc_r+0x4a>
 8004e7c:	461a      	mov	r2, r3
 8004e7e:	685b      	ldr	r3, [r3, #4]
 8004e80:	42a3      	cmp	r3, r4
 8004e82:	d1fb      	bne.n	8004e7c <_malloc_r+0xdc>
 8004e84:	2300      	movs	r3, #0
 8004e86:	6053      	str	r3, [r2, #4]
 8004e88:	e7de      	b.n	8004e48 <_malloc_r+0xa8>
 8004e8a:	230c      	movs	r3, #12
 8004e8c:	6033      	str	r3, [r6, #0]
 8004e8e:	4630      	mov	r0, r6
 8004e90:	f000 f80c 	bl	8004eac <__malloc_unlock>
 8004e94:	e794      	b.n	8004dc0 <_malloc_r+0x20>
 8004e96:	6005      	str	r5, [r0, #0]
 8004e98:	e7d6      	b.n	8004e48 <_malloc_r+0xa8>
 8004e9a:	bf00      	nop
 8004e9c:	200003f0 	.word	0x200003f0

08004ea0 <__malloc_lock>:
 8004ea0:	4801      	ldr	r0, [pc, #4]	@ (8004ea8 <__malloc_lock+0x8>)
 8004ea2:	f7ff bf07 	b.w	8004cb4 <__retarget_lock_acquire_recursive>
 8004ea6:	bf00      	nop
 8004ea8:	200003e8 	.word	0x200003e8

08004eac <__malloc_unlock>:
 8004eac:	4801      	ldr	r0, [pc, #4]	@ (8004eb4 <__malloc_unlock+0x8>)
 8004eae:	f7ff bf02 	b.w	8004cb6 <__retarget_lock_release_recursive>
 8004eb2:	bf00      	nop
 8004eb4:	200003e8 	.word	0x200003e8

08004eb8 <_sungetc_r>:
 8004eb8:	b538      	push	{r3, r4, r5, lr}
 8004eba:	1c4b      	adds	r3, r1, #1
 8004ebc:	4614      	mov	r4, r2
 8004ebe:	d103      	bne.n	8004ec8 <_sungetc_r+0x10>
 8004ec0:	f04f 35ff 	mov.w	r5, #4294967295
 8004ec4:	4628      	mov	r0, r5
 8004ec6:	bd38      	pop	{r3, r4, r5, pc}
 8004ec8:	8993      	ldrh	r3, [r2, #12]
 8004eca:	f023 0320 	bic.w	r3, r3, #32
 8004ece:	8193      	strh	r3, [r2, #12]
 8004ed0:	6853      	ldr	r3, [r2, #4]
 8004ed2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8004ed4:	b2cd      	uxtb	r5, r1
 8004ed6:	b18a      	cbz	r2, 8004efc <_sungetc_r+0x44>
 8004ed8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8004eda:	429a      	cmp	r2, r3
 8004edc:	dd08      	ble.n	8004ef0 <_sungetc_r+0x38>
 8004ede:	6823      	ldr	r3, [r4, #0]
 8004ee0:	1e5a      	subs	r2, r3, #1
 8004ee2:	6022      	str	r2, [r4, #0]
 8004ee4:	f803 5c01 	strb.w	r5, [r3, #-1]
 8004ee8:	6863      	ldr	r3, [r4, #4]
 8004eea:	3301      	adds	r3, #1
 8004eec:	6063      	str	r3, [r4, #4]
 8004eee:	e7e9      	b.n	8004ec4 <_sungetc_r+0xc>
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	f000 fb34 	bl	800555e <__submore>
 8004ef6:	2800      	cmp	r0, #0
 8004ef8:	d0f1      	beq.n	8004ede <_sungetc_r+0x26>
 8004efa:	e7e1      	b.n	8004ec0 <_sungetc_r+0x8>
 8004efc:	6921      	ldr	r1, [r4, #16]
 8004efe:	6822      	ldr	r2, [r4, #0]
 8004f00:	b141      	cbz	r1, 8004f14 <_sungetc_r+0x5c>
 8004f02:	4291      	cmp	r1, r2
 8004f04:	d206      	bcs.n	8004f14 <_sungetc_r+0x5c>
 8004f06:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8004f0a:	42a9      	cmp	r1, r5
 8004f0c:	d102      	bne.n	8004f14 <_sungetc_r+0x5c>
 8004f0e:	3a01      	subs	r2, #1
 8004f10:	6022      	str	r2, [r4, #0]
 8004f12:	e7ea      	b.n	8004eea <_sungetc_r+0x32>
 8004f14:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8004f18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f1c:	6363      	str	r3, [r4, #52]	@ 0x34
 8004f1e:	2303      	movs	r3, #3
 8004f20:	63a3      	str	r3, [r4, #56]	@ 0x38
 8004f22:	4623      	mov	r3, r4
 8004f24:	f803 5f46 	strb.w	r5, [r3, #70]!
 8004f28:	6023      	str	r3, [r4, #0]
 8004f2a:	2301      	movs	r3, #1
 8004f2c:	e7de      	b.n	8004eec <_sungetc_r+0x34>

08004f2e <__ssrefill_r>:
 8004f2e:	b510      	push	{r4, lr}
 8004f30:	460c      	mov	r4, r1
 8004f32:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8004f34:	b169      	cbz	r1, 8004f52 <__ssrefill_r+0x24>
 8004f36:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004f3a:	4299      	cmp	r1, r3
 8004f3c:	d001      	beq.n	8004f42 <__ssrefill_r+0x14>
 8004f3e:	f7ff fec3 	bl	8004cc8 <_free_r>
 8004f42:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004f44:	6063      	str	r3, [r4, #4]
 8004f46:	2000      	movs	r0, #0
 8004f48:	6360      	str	r0, [r4, #52]	@ 0x34
 8004f4a:	b113      	cbz	r3, 8004f52 <__ssrefill_r+0x24>
 8004f4c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8004f4e:	6023      	str	r3, [r4, #0]
 8004f50:	bd10      	pop	{r4, pc}
 8004f52:	6923      	ldr	r3, [r4, #16]
 8004f54:	6023      	str	r3, [r4, #0]
 8004f56:	2300      	movs	r3, #0
 8004f58:	6063      	str	r3, [r4, #4]
 8004f5a:	89a3      	ldrh	r3, [r4, #12]
 8004f5c:	f043 0320 	orr.w	r3, r3, #32
 8004f60:	81a3      	strh	r3, [r4, #12]
 8004f62:	f04f 30ff 	mov.w	r0, #4294967295
 8004f66:	e7f3      	b.n	8004f50 <__ssrefill_r+0x22>

08004f68 <__ssvfiscanf_r>:
 8004f68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f6c:	460c      	mov	r4, r1
 8004f6e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8004f72:	2100      	movs	r1, #0
 8004f74:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8004f78:	49a5      	ldr	r1, [pc, #660]	@ (8005210 <__ssvfiscanf_r+0x2a8>)
 8004f7a:	91a0      	str	r1, [sp, #640]	@ 0x280
 8004f7c:	f10d 0804 	add.w	r8, sp, #4
 8004f80:	49a4      	ldr	r1, [pc, #656]	@ (8005214 <__ssvfiscanf_r+0x2ac>)
 8004f82:	4fa5      	ldr	r7, [pc, #660]	@ (8005218 <__ssvfiscanf_r+0x2b0>)
 8004f84:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8004f88:	4606      	mov	r6, r0
 8004f8a:	91a1      	str	r1, [sp, #644]	@ 0x284
 8004f8c:	9300      	str	r3, [sp, #0]
 8004f8e:	7813      	ldrb	r3, [r2, #0]
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	f000 8158 	beq.w	8005246 <__ssvfiscanf_r+0x2de>
 8004f96:	5cf9      	ldrb	r1, [r7, r3]
 8004f98:	f011 0108 	ands.w	r1, r1, #8
 8004f9c:	f102 0501 	add.w	r5, r2, #1
 8004fa0:	d019      	beq.n	8004fd6 <__ssvfiscanf_r+0x6e>
 8004fa2:	6863      	ldr	r3, [r4, #4]
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	dd0f      	ble.n	8004fc8 <__ssvfiscanf_r+0x60>
 8004fa8:	6823      	ldr	r3, [r4, #0]
 8004faa:	781a      	ldrb	r2, [r3, #0]
 8004fac:	5cba      	ldrb	r2, [r7, r2]
 8004fae:	0712      	lsls	r2, r2, #28
 8004fb0:	d401      	bmi.n	8004fb6 <__ssvfiscanf_r+0x4e>
 8004fb2:	462a      	mov	r2, r5
 8004fb4:	e7eb      	b.n	8004f8e <__ssvfiscanf_r+0x26>
 8004fb6:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8004fb8:	3201      	adds	r2, #1
 8004fba:	9245      	str	r2, [sp, #276]	@ 0x114
 8004fbc:	6862      	ldr	r2, [r4, #4]
 8004fbe:	3301      	adds	r3, #1
 8004fc0:	3a01      	subs	r2, #1
 8004fc2:	6062      	str	r2, [r4, #4]
 8004fc4:	6023      	str	r3, [r4, #0]
 8004fc6:	e7ec      	b.n	8004fa2 <__ssvfiscanf_r+0x3a>
 8004fc8:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8004fca:	4621      	mov	r1, r4
 8004fcc:	4630      	mov	r0, r6
 8004fce:	4798      	blx	r3
 8004fd0:	2800      	cmp	r0, #0
 8004fd2:	d0e9      	beq.n	8004fa8 <__ssvfiscanf_r+0x40>
 8004fd4:	e7ed      	b.n	8004fb2 <__ssvfiscanf_r+0x4a>
 8004fd6:	2b25      	cmp	r3, #37	@ 0x25
 8004fd8:	d012      	beq.n	8005000 <__ssvfiscanf_r+0x98>
 8004fda:	4699      	mov	r9, r3
 8004fdc:	6863      	ldr	r3, [r4, #4]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	f340 8093 	ble.w	800510a <__ssvfiscanf_r+0x1a2>
 8004fe4:	6822      	ldr	r2, [r4, #0]
 8004fe6:	7813      	ldrb	r3, [r2, #0]
 8004fe8:	454b      	cmp	r3, r9
 8004fea:	f040 812c 	bne.w	8005246 <__ssvfiscanf_r+0x2de>
 8004fee:	6863      	ldr	r3, [r4, #4]
 8004ff0:	3b01      	subs	r3, #1
 8004ff2:	6063      	str	r3, [r4, #4]
 8004ff4:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8004ff6:	3201      	adds	r2, #1
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	6022      	str	r2, [r4, #0]
 8004ffc:	9345      	str	r3, [sp, #276]	@ 0x114
 8004ffe:	e7d8      	b.n	8004fb2 <__ssvfiscanf_r+0x4a>
 8005000:	9141      	str	r1, [sp, #260]	@ 0x104
 8005002:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005004:	7853      	ldrb	r3, [r2, #1]
 8005006:	2b2a      	cmp	r3, #42	@ 0x2a
 8005008:	bf02      	ittt	eq
 800500a:	2310      	moveq	r3, #16
 800500c:	1c95      	addeq	r5, r2, #2
 800500e:	9341      	streq	r3, [sp, #260]	@ 0x104
 8005010:	220a      	movs	r2, #10
 8005012:	46a9      	mov	r9, r5
 8005014:	f819 1b01 	ldrb.w	r1, [r9], #1
 8005018:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800501c:	2b09      	cmp	r3, #9
 800501e:	d91e      	bls.n	800505e <__ssvfiscanf_r+0xf6>
 8005020:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 800521c <__ssvfiscanf_r+0x2b4>
 8005024:	2203      	movs	r2, #3
 8005026:	4650      	mov	r0, sl
 8005028:	f7fb f8fa 	bl	8000220 <memchr>
 800502c:	b138      	cbz	r0, 800503e <__ssvfiscanf_r+0xd6>
 800502e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005030:	eba0 000a 	sub.w	r0, r0, sl
 8005034:	2301      	movs	r3, #1
 8005036:	4083      	lsls	r3, r0
 8005038:	4313      	orrs	r3, r2
 800503a:	9341      	str	r3, [sp, #260]	@ 0x104
 800503c:	464d      	mov	r5, r9
 800503e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005042:	2b78      	cmp	r3, #120	@ 0x78
 8005044:	d806      	bhi.n	8005054 <__ssvfiscanf_r+0xec>
 8005046:	2b57      	cmp	r3, #87	@ 0x57
 8005048:	d810      	bhi.n	800506c <__ssvfiscanf_r+0x104>
 800504a:	2b25      	cmp	r3, #37	@ 0x25
 800504c:	d0c5      	beq.n	8004fda <__ssvfiscanf_r+0x72>
 800504e:	d857      	bhi.n	8005100 <__ssvfiscanf_r+0x198>
 8005050:	2b00      	cmp	r3, #0
 8005052:	d065      	beq.n	8005120 <__ssvfiscanf_r+0x1b8>
 8005054:	2303      	movs	r3, #3
 8005056:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005058:	230a      	movs	r3, #10
 800505a:	9342      	str	r3, [sp, #264]	@ 0x108
 800505c:	e078      	b.n	8005150 <__ssvfiscanf_r+0x1e8>
 800505e:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005060:	fb02 1103 	mla	r1, r2, r3, r1
 8005064:	3930      	subs	r1, #48	@ 0x30
 8005066:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005068:	464d      	mov	r5, r9
 800506a:	e7d2      	b.n	8005012 <__ssvfiscanf_r+0xaa>
 800506c:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005070:	2a20      	cmp	r2, #32
 8005072:	d8ef      	bhi.n	8005054 <__ssvfiscanf_r+0xec>
 8005074:	a101      	add	r1, pc, #4	@ (adr r1, 800507c <__ssvfiscanf_r+0x114>)
 8005076:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800507a:	bf00      	nop
 800507c:	0800512f 	.word	0x0800512f
 8005080:	08005055 	.word	0x08005055
 8005084:	08005055 	.word	0x08005055
 8005088:	08005189 	.word	0x08005189
 800508c:	08005055 	.word	0x08005055
 8005090:	08005055 	.word	0x08005055
 8005094:	08005055 	.word	0x08005055
 8005098:	08005055 	.word	0x08005055
 800509c:	08005055 	.word	0x08005055
 80050a0:	08005055 	.word	0x08005055
 80050a4:	08005055 	.word	0x08005055
 80050a8:	0800519f 	.word	0x0800519f
 80050ac:	08005185 	.word	0x08005185
 80050b0:	08005107 	.word	0x08005107
 80050b4:	08005107 	.word	0x08005107
 80050b8:	08005107 	.word	0x08005107
 80050bc:	08005055 	.word	0x08005055
 80050c0:	08005141 	.word	0x08005141
 80050c4:	08005055 	.word	0x08005055
 80050c8:	08005055 	.word	0x08005055
 80050cc:	08005055 	.word	0x08005055
 80050d0:	08005055 	.word	0x08005055
 80050d4:	080051af 	.word	0x080051af
 80050d8:	08005149 	.word	0x08005149
 80050dc:	08005127 	.word	0x08005127
 80050e0:	08005055 	.word	0x08005055
 80050e4:	08005055 	.word	0x08005055
 80050e8:	080051ab 	.word	0x080051ab
 80050ec:	08005055 	.word	0x08005055
 80050f0:	08005185 	.word	0x08005185
 80050f4:	08005055 	.word	0x08005055
 80050f8:	08005055 	.word	0x08005055
 80050fc:	0800512f 	.word	0x0800512f
 8005100:	3b45      	subs	r3, #69	@ 0x45
 8005102:	2b02      	cmp	r3, #2
 8005104:	d8a6      	bhi.n	8005054 <__ssvfiscanf_r+0xec>
 8005106:	2305      	movs	r3, #5
 8005108:	e021      	b.n	800514e <__ssvfiscanf_r+0x1e6>
 800510a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800510c:	4621      	mov	r1, r4
 800510e:	4630      	mov	r0, r6
 8005110:	4798      	blx	r3
 8005112:	2800      	cmp	r0, #0
 8005114:	f43f af66 	beq.w	8004fe4 <__ssvfiscanf_r+0x7c>
 8005118:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800511a:	2800      	cmp	r0, #0
 800511c:	f040 808b 	bne.w	8005236 <__ssvfiscanf_r+0x2ce>
 8005120:	f04f 30ff 	mov.w	r0, #4294967295
 8005124:	e08b      	b.n	800523e <__ssvfiscanf_r+0x2d6>
 8005126:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005128:	f042 0220 	orr.w	r2, r2, #32
 800512c:	9241      	str	r2, [sp, #260]	@ 0x104
 800512e:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005130:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005134:	9241      	str	r2, [sp, #260]	@ 0x104
 8005136:	2210      	movs	r2, #16
 8005138:	2b6e      	cmp	r3, #110	@ 0x6e
 800513a:	9242      	str	r2, [sp, #264]	@ 0x108
 800513c:	d902      	bls.n	8005144 <__ssvfiscanf_r+0x1dc>
 800513e:	e005      	b.n	800514c <__ssvfiscanf_r+0x1e4>
 8005140:	2300      	movs	r3, #0
 8005142:	9342      	str	r3, [sp, #264]	@ 0x108
 8005144:	2303      	movs	r3, #3
 8005146:	e002      	b.n	800514e <__ssvfiscanf_r+0x1e6>
 8005148:	2308      	movs	r3, #8
 800514a:	9342      	str	r3, [sp, #264]	@ 0x108
 800514c:	2304      	movs	r3, #4
 800514e:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005150:	6863      	ldr	r3, [r4, #4]
 8005152:	2b00      	cmp	r3, #0
 8005154:	dd39      	ble.n	80051ca <__ssvfiscanf_r+0x262>
 8005156:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005158:	0659      	lsls	r1, r3, #25
 800515a:	d404      	bmi.n	8005166 <__ssvfiscanf_r+0x1fe>
 800515c:	6823      	ldr	r3, [r4, #0]
 800515e:	781a      	ldrb	r2, [r3, #0]
 8005160:	5cba      	ldrb	r2, [r7, r2]
 8005162:	0712      	lsls	r2, r2, #28
 8005164:	d438      	bmi.n	80051d8 <__ssvfiscanf_r+0x270>
 8005166:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8005168:	2b02      	cmp	r3, #2
 800516a:	dc47      	bgt.n	80051fc <__ssvfiscanf_r+0x294>
 800516c:	466b      	mov	r3, sp
 800516e:	4622      	mov	r2, r4
 8005170:	a941      	add	r1, sp, #260	@ 0x104
 8005172:	4630      	mov	r0, r6
 8005174:	f000 f86c 	bl	8005250 <_scanf_chars>
 8005178:	2801      	cmp	r0, #1
 800517a:	d064      	beq.n	8005246 <__ssvfiscanf_r+0x2de>
 800517c:	2802      	cmp	r0, #2
 800517e:	f47f af18 	bne.w	8004fb2 <__ssvfiscanf_r+0x4a>
 8005182:	e7c9      	b.n	8005118 <__ssvfiscanf_r+0x1b0>
 8005184:	220a      	movs	r2, #10
 8005186:	e7d7      	b.n	8005138 <__ssvfiscanf_r+0x1d0>
 8005188:	4629      	mov	r1, r5
 800518a:	4640      	mov	r0, r8
 800518c:	f000 f9ae 	bl	80054ec <__sccl>
 8005190:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8005192:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005196:	9341      	str	r3, [sp, #260]	@ 0x104
 8005198:	4605      	mov	r5, r0
 800519a:	2301      	movs	r3, #1
 800519c:	e7d7      	b.n	800514e <__ssvfiscanf_r+0x1e6>
 800519e:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80051a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80051a4:	9341      	str	r3, [sp, #260]	@ 0x104
 80051a6:	2300      	movs	r3, #0
 80051a8:	e7d1      	b.n	800514e <__ssvfiscanf_r+0x1e6>
 80051aa:	2302      	movs	r3, #2
 80051ac:	e7cf      	b.n	800514e <__ssvfiscanf_r+0x1e6>
 80051ae:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80051b0:	06c3      	lsls	r3, r0, #27
 80051b2:	f53f aefe 	bmi.w	8004fb2 <__ssvfiscanf_r+0x4a>
 80051b6:	9b00      	ldr	r3, [sp, #0]
 80051b8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80051ba:	1d19      	adds	r1, r3, #4
 80051bc:	9100      	str	r1, [sp, #0]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	07c0      	lsls	r0, r0, #31
 80051c2:	bf4c      	ite	mi
 80051c4:	801a      	strhmi	r2, [r3, #0]
 80051c6:	601a      	strpl	r2, [r3, #0]
 80051c8:	e6f3      	b.n	8004fb2 <__ssvfiscanf_r+0x4a>
 80051ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80051cc:	4621      	mov	r1, r4
 80051ce:	4630      	mov	r0, r6
 80051d0:	4798      	blx	r3
 80051d2:	2800      	cmp	r0, #0
 80051d4:	d0bf      	beq.n	8005156 <__ssvfiscanf_r+0x1ee>
 80051d6:	e79f      	b.n	8005118 <__ssvfiscanf_r+0x1b0>
 80051d8:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80051da:	3201      	adds	r2, #1
 80051dc:	9245      	str	r2, [sp, #276]	@ 0x114
 80051de:	6862      	ldr	r2, [r4, #4]
 80051e0:	3a01      	subs	r2, #1
 80051e2:	2a00      	cmp	r2, #0
 80051e4:	6062      	str	r2, [r4, #4]
 80051e6:	dd02      	ble.n	80051ee <__ssvfiscanf_r+0x286>
 80051e8:	3301      	adds	r3, #1
 80051ea:	6023      	str	r3, [r4, #0]
 80051ec:	e7b6      	b.n	800515c <__ssvfiscanf_r+0x1f4>
 80051ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80051f0:	4621      	mov	r1, r4
 80051f2:	4630      	mov	r0, r6
 80051f4:	4798      	blx	r3
 80051f6:	2800      	cmp	r0, #0
 80051f8:	d0b0      	beq.n	800515c <__ssvfiscanf_r+0x1f4>
 80051fa:	e78d      	b.n	8005118 <__ssvfiscanf_r+0x1b0>
 80051fc:	2b04      	cmp	r3, #4
 80051fe:	dc0f      	bgt.n	8005220 <__ssvfiscanf_r+0x2b8>
 8005200:	466b      	mov	r3, sp
 8005202:	4622      	mov	r2, r4
 8005204:	a941      	add	r1, sp, #260	@ 0x104
 8005206:	4630      	mov	r0, r6
 8005208:	f000 f87c 	bl	8005304 <_scanf_i>
 800520c:	e7b4      	b.n	8005178 <__ssvfiscanf_r+0x210>
 800520e:	bf00      	nop
 8005210:	08004eb9 	.word	0x08004eb9
 8005214:	08004f2f 	.word	0x08004f2f
 8005218:	080058bc 	.word	0x080058bc
 800521c:	0800589c 	.word	0x0800589c
 8005220:	4b0a      	ldr	r3, [pc, #40]	@ (800524c <__ssvfiscanf_r+0x2e4>)
 8005222:	2b00      	cmp	r3, #0
 8005224:	f43f aec5 	beq.w	8004fb2 <__ssvfiscanf_r+0x4a>
 8005228:	466b      	mov	r3, sp
 800522a:	4622      	mov	r2, r4
 800522c:	a941      	add	r1, sp, #260	@ 0x104
 800522e:	4630      	mov	r0, r6
 8005230:	f3af 8000 	nop.w
 8005234:	e7a0      	b.n	8005178 <__ssvfiscanf_r+0x210>
 8005236:	89a3      	ldrh	r3, [r4, #12]
 8005238:	065b      	lsls	r3, r3, #25
 800523a:	f53f af71 	bmi.w	8005120 <__ssvfiscanf_r+0x1b8>
 800523e:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8005242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005246:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8005248:	e7f9      	b.n	800523e <__ssvfiscanf_r+0x2d6>
 800524a:	bf00      	nop
 800524c:	00000000 	.word	0x00000000

08005250 <_scanf_chars>:
 8005250:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005254:	4615      	mov	r5, r2
 8005256:	688a      	ldr	r2, [r1, #8]
 8005258:	4680      	mov	r8, r0
 800525a:	460c      	mov	r4, r1
 800525c:	b932      	cbnz	r2, 800526c <_scanf_chars+0x1c>
 800525e:	698a      	ldr	r2, [r1, #24]
 8005260:	2a00      	cmp	r2, #0
 8005262:	bf14      	ite	ne
 8005264:	f04f 32ff 	movne.w	r2, #4294967295
 8005268:	2201      	moveq	r2, #1
 800526a:	608a      	str	r2, [r1, #8]
 800526c:	6822      	ldr	r2, [r4, #0]
 800526e:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8005300 <_scanf_chars+0xb0>
 8005272:	06d1      	lsls	r1, r2, #27
 8005274:	bf5f      	itttt	pl
 8005276:	681a      	ldrpl	r2, [r3, #0]
 8005278:	1d11      	addpl	r1, r2, #4
 800527a:	6019      	strpl	r1, [r3, #0]
 800527c:	6816      	ldrpl	r6, [r2, #0]
 800527e:	2700      	movs	r7, #0
 8005280:	69a0      	ldr	r0, [r4, #24]
 8005282:	b188      	cbz	r0, 80052a8 <_scanf_chars+0x58>
 8005284:	2801      	cmp	r0, #1
 8005286:	d107      	bne.n	8005298 <_scanf_chars+0x48>
 8005288:	682b      	ldr	r3, [r5, #0]
 800528a:	781a      	ldrb	r2, [r3, #0]
 800528c:	6963      	ldr	r3, [r4, #20]
 800528e:	5c9b      	ldrb	r3, [r3, r2]
 8005290:	b953      	cbnz	r3, 80052a8 <_scanf_chars+0x58>
 8005292:	2f00      	cmp	r7, #0
 8005294:	d031      	beq.n	80052fa <_scanf_chars+0xaa>
 8005296:	e022      	b.n	80052de <_scanf_chars+0x8e>
 8005298:	2802      	cmp	r0, #2
 800529a:	d120      	bne.n	80052de <_scanf_chars+0x8e>
 800529c:	682b      	ldr	r3, [r5, #0]
 800529e:	781b      	ldrb	r3, [r3, #0]
 80052a0:	f819 3003 	ldrb.w	r3, [r9, r3]
 80052a4:	071b      	lsls	r3, r3, #28
 80052a6:	d41a      	bmi.n	80052de <_scanf_chars+0x8e>
 80052a8:	6823      	ldr	r3, [r4, #0]
 80052aa:	06da      	lsls	r2, r3, #27
 80052ac:	bf5e      	ittt	pl
 80052ae:	682b      	ldrpl	r3, [r5, #0]
 80052b0:	781b      	ldrbpl	r3, [r3, #0]
 80052b2:	f806 3b01 	strbpl.w	r3, [r6], #1
 80052b6:	682a      	ldr	r2, [r5, #0]
 80052b8:	686b      	ldr	r3, [r5, #4]
 80052ba:	3201      	adds	r2, #1
 80052bc:	602a      	str	r2, [r5, #0]
 80052be:	68a2      	ldr	r2, [r4, #8]
 80052c0:	3b01      	subs	r3, #1
 80052c2:	3a01      	subs	r2, #1
 80052c4:	606b      	str	r3, [r5, #4]
 80052c6:	3701      	adds	r7, #1
 80052c8:	60a2      	str	r2, [r4, #8]
 80052ca:	b142      	cbz	r2, 80052de <_scanf_chars+0x8e>
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	dcd7      	bgt.n	8005280 <_scanf_chars+0x30>
 80052d0:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80052d4:	4629      	mov	r1, r5
 80052d6:	4640      	mov	r0, r8
 80052d8:	4798      	blx	r3
 80052da:	2800      	cmp	r0, #0
 80052dc:	d0d0      	beq.n	8005280 <_scanf_chars+0x30>
 80052de:	6823      	ldr	r3, [r4, #0]
 80052e0:	f013 0310 	ands.w	r3, r3, #16
 80052e4:	d105      	bne.n	80052f2 <_scanf_chars+0xa2>
 80052e6:	68e2      	ldr	r2, [r4, #12]
 80052e8:	3201      	adds	r2, #1
 80052ea:	60e2      	str	r2, [r4, #12]
 80052ec:	69a2      	ldr	r2, [r4, #24]
 80052ee:	b102      	cbz	r2, 80052f2 <_scanf_chars+0xa2>
 80052f0:	7033      	strb	r3, [r6, #0]
 80052f2:	6923      	ldr	r3, [r4, #16]
 80052f4:	443b      	add	r3, r7
 80052f6:	6123      	str	r3, [r4, #16]
 80052f8:	2000      	movs	r0, #0
 80052fa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80052fe:	bf00      	nop
 8005300:	080058bc 	.word	0x080058bc

08005304 <_scanf_i>:
 8005304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005308:	4698      	mov	r8, r3
 800530a:	4b74      	ldr	r3, [pc, #464]	@ (80054dc <_scanf_i+0x1d8>)
 800530c:	460c      	mov	r4, r1
 800530e:	4682      	mov	sl, r0
 8005310:	4616      	mov	r6, r2
 8005312:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8005316:	b087      	sub	sp, #28
 8005318:	ab03      	add	r3, sp, #12
 800531a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800531e:	4b70      	ldr	r3, [pc, #448]	@ (80054e0 <_scanf_i+0x1dc>)
 8005320:	69a1      	ldr	r1, [r4, #24]
 8005322:	4a70      	ldr	r2, [pc, #448]	@ (80054e4 <_scanf_i+0x1e0>)
 8005324:	2903      	cmp	r1, #3
 8005326:	bf08      	it	eq
 8005328:	461a      	moveq	r2, r3
 800532a:	68a3      	ldr	r3, [r4, #8]
 800532c:	9201      	str	r2, [sp, #4]
 800532e:	1e5a      	subs	r2, r3, #1
 8005330:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005334:	bf88      	it	hi
 8005336:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800533a:	4627      	mov	r7, r4
 800533c:	bf82      	ittt	hi
 800533e:	eb03 0905 	addhi.w	r9, r3, r5
 8005342:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8005346:	60a3      	strhi	r3, [r4, #8]
 8005348:	f857 3b1c 	ldr.w	r3, [r7], #28
 800534c:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005350:	bf98      	it	ls
 8005352:	f04f 0900 	movls.w	r9, #0
 8005356:	6023      	str	r3, [r4, #0]
 8005358:	463d      	mov	r5, r7
 800535a:	f04f 0b00 	mov.w	fp, #0
 800535e:	6831      	ldr	r1, [r6, #0]
 8005360:	ab03      	add	r3, sp, #12
 8005362:	7809      	ldrb	r1, [r1, #0]
 8005364:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8005368:	2202      	movs	r2, #2
 800536a:	f7fa ff59 	bl	8000220 <memchr>
 800536e:	b328      	cbz	r0, 80053bc <_scanf_i+0xb8>
 8005370:	f1bb 0f01 	cmp.w	fp, #1
 8005374:	d159      	bne.n	800542a <_scanf_i+0x126>
 8005376:	6862      	ldr	r2, [r4, #4]
 8005378:	b92a      	cbnz	r2, 8005386 <_scanf_i+0x82>
 800537a:	6822      	ldr	r2, [r4, #0]
 800537c:	2108      	movs	r1, #8
 800537e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005382:	6061      	str	r1, [r4, #4]
 8005384:	6022      	str	r2, [r4, #0]
 8005386:	6822      	ldr	r2, [r4, #0]
 8005388:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800538c:	6022      	str	r2, [r4, #0]
 800538e:	68a2      	ldr	r2, [r4, #8]
 8005390:	1e51      	subs	r1, r2, #1
 8005392:	60a1      	str	r1, [r4, #8]
 8005394:	b192      	cbz	r2, 80053bc <_scanf_i+0xb8>
 8005396:	6832      	ldr	r2, [r6, #0]
 8005398:	1c51      	adds	r1, r2, #1
 800539a:	6031      	str	r1, [r6, #0]
 800539c:	7812      	ldrb	r2, [r2, #0]
 800539e:	f805 2b01 	strb.w	r2, [r5], #1
 80053a2:	6872      	ldr	r2, [r6, #4]
 80053a4:	3a01      	subs	r2, #1
 80053a6:	2a00      	cmp	r2, #0
 80053a8:	6072      	str	r2, [r6, #4]
 80053aa:	dc07      	bgt.n	80053bc <_scanf_i+0xb8>
 80053ac:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80053b0:	4631      	mov	r1, r6
 80053b2:	4650      	mov	r0, sl
 80053b4:	4790      	blx	r2
 80053b6:	2800      	cmp	r0, #0
 80053b8:	f040 8085 	bne.w	80054c6 <_scanf_i+0x1c2>
 80053bc:	f10b 0b01 	add.w	fp, fp, #1
 80053c0:	f1bb 0f03 	cmp.w	fp, #3
 80053c4:	d1cb      	bne.n	800535e <_scanf_i+0x5a>
 80053c6:	6863      	ldr	r3, [r4, #4]
 80053c8:	b90b      	cbnz	r3, 80053ce <_scanf_i+0xca>
 80053ca:	230a      	movs	r3, #10
 80053cc:	6063      	str	r3, [r4, #4]
 80053ce:	6863      	ldr	r3, [r4, #4]
 80053d0:	4945      	ldr	r1, [pc, #276]	@ (80054e8 <_scanf_i+0x1e4>)
 80053d2:	6960      	ldr	r0, [r4, #20]
 80053d4:	1ac9      	subs	r1, r1, r3
 80053d6:	f000 f889 	bl	80054ec <__sccl>
 80053da:	f04f 0b00 	mov.w	fp, #0
 80053de:	68a3      	ldr	r3, [r4, #8]
 80053e0:	6822      	ldr	r2, [r4, #0]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d03d      	beq.n	8005462 <_scanf_i+0x15e>
 80053e6:	6831      	ldr	r1, [r6, #0]
 80053e8:	6960      	ldr	r0, [r4, #20]
 80053ea:	f891 c000 	ldrb.w	ip, [r1]
 80053ee:	f810 000c 	ldrb.w	r0, [r0, ip]
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d035      	beq.n	8005462 <_scanf_i+0x15e>
 80053f6:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 80053fa:	d124      	bne.n	8005446 <_scanf_i+0x142>
 80053fc:	0510      	lsls	r0, r2, #20
 80053fe:	d522      	bpl.n	8005446 <_scanf_i+0x142>
 8005400:	f10b 0b01 	add.w	fp, fp, #1
 8005404:	f1b9 0f00 	cmp.w	r9, #0
 8005408:	d003      	beq.n	8005412 <_scanf_i+0x10e>
 800540a:	3301      	adds	r3, #1
 800540c:	f109 39ff 	add.w	r9, r9, #4294967295
 8005410:	60a3      	str	r3, [r4, #8]
 8005412:	6873      	ldr	r3, [r6, #4]
 8005414:	3b01      	subs	r3, #1
 8005416:	2b00      	cmp	r3, #0
 8005418:	6073      	str	r3, [r6, #4]
 800541a:	dd1b      	ble.n	8005454 <_scanf_i+0x150>
 800541c:	6833      	ldr	r3, [r6, #0]
 800541e:	3301      	adds	r3, #1
 8005420:	6033      	str	r3, [r6, #0]
 8005422:	68a3      	ldr	r3, [r4, #8]
 8005424:	3b01      	subs	r3, #1
 8005426:	60a3      	str	r3, [r4, #8]
 8005428:	e7d9      	b.n	80053de <_scanf_i+0xda>
 800542a:	f1bb 0f02 	cmp.w	fp, #2
 800542e:	d1ae      	bne.n	800538e <_scanf_i+0x8a>
 8005430:	6822      	ldr	r2, [r4, #0]
 8005432:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8005436:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800543a:	d1bf      	bne.n	80053bc <_scanf_i+0xb8>
 800543c:	2110      	movs	r1, #16
 800543e:	6061      	str	r1, [r4, #4]
 8005440:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005444:	e7a2      	b.n	800538c <_scanf_i+0x88>
 8005446:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800544a:	6022      	str	r2, [r4, #0]
 800544c:	780b      	ldrb	r3, [r1, #0]
 800544e:	f805 3b01 	strb.w	r3, [r5], #1
 8005452:	e7de      	b.n	8005412 <_scanf_i+0x10e>
 8005454:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8005458:	4631      	mov	r1, r6
 800545a:	4650      	mov	r0, sl
 800545c:	4798      	blx	r3
 800545e:	2800      	cmp	r0, #0
 8005460:	d0df      	beq.n	8005422 <_scanf_i+0x11e>
 8005462:	6823      	ldr	r3, [r4, #0]
 8005464:	05d9      	lsls	r1, r3, #23
 8005466:	d50d      	bpl.n	8005484 <_scanf_i+0x180>
 8005468:	42bd      	cmp	r5, r7
 800546a:	d909      	bls.n	8005480 <_scanf_i+0x17c>
 800546c:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005470:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005474:	4632      	mov	r2, r6
 8005476:	4650      	mov	r0, sl
 8005478:	4798      	blx	r3
 800547a:	f105 39ff 	add.w	r9, r5, #4294967295
 800547e:	464d      	mov	r5, r9
 8005480:	42bd      	cmp	r5, r7
 8005482:	d028      	beq.n	80054d6 <_scanf_i+0x1d2>
 8005484:	6822      	ldr	r2, [r4, #0]
 8005486:	f012 0210 	ands.w	r2, r2, #16
 800548a:	d113      	bne.n	80054b4 <_scanf_i+0x1b0>
 800548c:	702a      	strb	r2, [r5, #0]
 800548e:	6863      	ldr	r3, [r4, #4]
 8005490:	9e01      	ldr	r6, [sp, #4]
 8005492:	4639      	mov	r1, r7
 8005494:	4650      	mov	r0, sl
 8005496:	47b0      	blx	r6
 8005498:	f8d8 3000 	ldr.w	r3, [r8]
 800549c:	6821      	ldr	r1, [r4, #0]
 800549e:	1d1a      	adds	r2, r3, #4
 80054a0:	f8c8 2000 	str.w	r2, [r8]
 80054a4:	f011 0f20 	tst.w	r1, #32
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	d00f      	beq.n	80054cc <_scanf_i+0x1c8>
 80054ac:	6018      	str	r0, [r3, #0]
 80054ae:	68e3      	ldr	r3, [r4, #12]
 80054b0:	3301      	adds	r3, #1
 80054b2:	60e3      	str	r3, [r4, #12]
 80054b4:	6923      	ldr	r3, [r4, #16]
 80054b6:	1bed      	subs	r5, r5, r7
 80054b8:	445d      	add	r5, fp
 80054ba:	442b      	add	r3, r5
 80054bc:	6123      	str	r3, [r4, #16]
 80054be:	2000      	movs	r0, #0
 80054c0:	b007      	add	sp, #28
 80054c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054c6:	f04f 0b00 	mov.w	fp, #0
 80054ca:	e7ca      	b.n	8005462 <_scanf_i+0x15e>
 80054cc:	07ca      	lsls	r2, r1, #31
 80054ce:	bf4c      	ite	mi
 80054d0:	8018      	strhmi	r0, [r3, #0]
 80054d2:	6018      	strpl	r0, [r3, #0]
 80054d4:	e7eb      	b.n	80054ae <_scanf_i+0x1aa>
 80054d6:	2001      	movs	r0, #1
 80054d8:	e7f2      	b.n	80054c0 <_scanf_i+0x1bc>
 80054da:	bf00      	nop
 80054dc:	08005878 	.word	0x08005878
 80054e0:	08005761 	.word	0x08005761
 80054e4:	08005841 	.word	0x08005841
 80054e8:	080058b0 	.word	0x080058b0

080054ec <__sccl>:
 80054ec:	b570      	push	{r4, r5, r6, lr}
 80054ee:	780b      	ldrb	r3, [r1, #0]
 80054f0:	4604      	mov	r4, r0
 80054f2:	2b5e      	cmp	r3, #94	@ 0x5e
 80054f4:	bf0b      	itete	eq
 80054f6:	784b      	ldrbeq	r3, [r1, #1]
 80054f8:	1c4a      	addne	r2, r1, #1
 80054fa:	1c8a      	addeq	r2, r1, #2
 80054fc:	2100      	movne	r1, #0
 80054fe:	bf08      	it	eq
 8005500:	2101      	moveq	r1, #1
 8005502:	3801      	subs	r0, #1
 8005504:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 8005508:	f800 1f01 	strb.w	r1, [r0, #1]!
 800550c:	42a8      	cmp	r0, r5
 800550e:	d1fb      	bne.n	8005508 <__sccl+0x1c>
 8005510:	b90b      	cbnz	r3, 8005516 <__sccl+0x2a>
 8005512:	1e50      	subs	r0, r2, #1
 8005514:	bd70      	pop	{r4, r5, r6, pc}
 8005516:	f081 0101 	eor.w	r1, r1, #1
 800551a:	54e1      	strb	r1, [r4, r3]
 800551c:	4610      	mov	r0, r2
 800551e:	4602      	mov	r2, r0
 8005520:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005524:	2d2d      	cmp	r5, #45	@ 0x2d
 8005526:	d005      	beq.n	8005534 <__sccl+0x48>
 8005528:	2d5d      	cmp	r5, #93	@ 0x5d
 800552a:	d016      	beq.n	800555a <__sccl+0x6e>
 800552c:	2d00      	cmp	r5, #0
 800552e:	d0f1      	beq.n	8005514 <__sccl+0x28>
 8005530:	462b      	mov	r3, r5
 8005532:	e7f2      	b.n	800551a <__sccl+0x2e>
 8005534:	7846      	ldrb	r6, [r0, #1]
 8005536:	2e5d      	cmp	r6, #93	@ 0x5d
 8005538:	d0fa      	beq.n	8005530 <__sccl+0x44>
 800553a:	42b3      	cmp	r3, r6
 800553c:	dcf8      	bgt.n	8005530 <__sccl+0x44>
 800553e:	3002      	adds	r0, #2
 8005540:	461a      	mov	r2, r3
 8005542:	3201      	adds	r2, #1
 8005544:	4296      	cmp	r6, r2
 8005546:	54a1      	strb	r1, [r4, r2]
 8005548:	dcfb      	bgt.n	8005542 <__sccl+0x56>
 800554a:	1af2      	subs	r2, r6, r3
 800554c:	3a01      	subs	r2, #1
 800554e:	1c5d      	adds	r5, r3, #1
 8005550:	42b3      	cmp	r3, r6
 8005552:	bfa8      	it	ge
 8005554:	2200      	movge	r2, #0
 8005556:	18ab      	adds	r3, r5, r2
 8005558:	e7e1      	b.n	800551e <__sccl+0x32>
 800555a:	4610      	mov	r0, r2
 800555c:	e7da      	b.n	8005514 <__sccl+0x28>

0800555e <__submore>:
 800555e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005562:	460c      	mov	r4, r1
 8005564:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005566:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800556a:	4299      	cmp	r1, r3
 800556c:	d11d      	bne.n	80055aa <__submore+0x4c>
 800556e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005572:	f7ff fc15 	bl	8004da0 <_malloc_r>
 8005576:	b918      	cbnz	r0, 8005580 <__submore+0x22>
 8005578:	f04f 30ff 	mov.w	r0, #4294967295
 800557c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005580:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005584:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005586:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800558a:	6360      	str	r0, [r4, #52]	@ 0x34
 800558c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 8005590:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 8005594:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 8005598:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800559c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80055a0:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80055a4:	6020      	str	r0, [r4, #0]
 80055a6:	2000      	movs	r0, #0
 80055a8:	e7e8      	b.n	800557c <__submore+0x1e>
 80055aa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80055ac:	0077      	lsls	r7, r6, #1
 80055ae:	463a      	mov	r2, r7
 80055b0:	f000 f82e 	bl	8005610 <_realloc_r>
 80055b4:	4605      	mov	r5, r0
 80055b6:	2800      	cmp	r0, #0
 80055b8:	d0de      	beq.n	8005578 <__submore+0x1a>
 80055ba:	eb00 0806 	add.w	r8, r0, r6
 80055be:	4601      	mov	r1, r0
 80055c0:	4632      	mov	r2, r6
 80055c2:	4640      	mov	r0, r8
 80055c4:	f000 f816 	bl	80055f4 <memcpy>
 80055c8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80055cc:	f8c4 8000 	str.w	r8, [r4]
 80055d0:	e7e9      	b.n	80055a6 <__submore+0x48>
	...

080055d4 <_sbrk_r>:
 80055d4:	b538      	push	{r3, r4, r5, lr}
 80055d6:	4d06      	ldr	r5, [pc, #24]	@ (80055f0 <_sbrk_r+0x1c>)
 80055d8:	2300      	movs	r3, #0
 80055da:	4604      	mov	r4, r0
 80055dc:	4608      	mov	r0, r1
 80055de:	602b      	str	r3, [r5, #0]
 80055e0:	f7fb fd76 	bl	80010d0 <_sbrk>
 80055e4:	1c43      	adds	r3, r0, #1
 80055e6:	d102      	bne.n	80055ee <_sbrk_r+0x1a>
 80055e8:	682b      	ldr	r3, [r5, #0]
 80055ea:	b103      	cbz	r3, 80055ee <_sbrk_r+0x1a>
 80055ec:	6023      	str	r3, [r4, #0]
 80055ee:	bd38      	pop	{r3, r4, r5, pc}
 80055f0:	200003e4 	.word	0x200003e4

080055f4 <memcpy>:
 80055f4:	440a      	add	r2, r1
 80055f6:	4291      	cmp	r1, r2
 80055f8:	f100 33ff 	add.w	r3, r0, #4294967295
 80055fc:	d100      	bne.n	8005600 <memcpy+0xc>
 80055fe:	4770      	bx	lr
 8005600:	b510      	push	{r4, lr}
 8005602:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005606:	f803 4f01 	strb.w	r4, [r3, #1]!
 800560a:	4291      	cmp	r1, r2
 800560c:	d1f9      	bne.n	8005602 <memcpy+0xe>
 800560e:	bd10      	pop	{r4, pc}

08005610 <_realloc_r>:
 8005610:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005614:	4680      	mov	r8, r0
 8005616:	4615      	mov	r5, r2
 8005618:	460c      	mov	r4, r1
 800561a:	b921      	cbnz	r1, 8005626 <_realloc_r+0x16>
 800561c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005620:	4611      	mov	r1, r2
 8005622:	f7ff bbbd 	b.w	8004da0 <_malloc_r>
 8005626:	b92a      	cbnz	r2, 8005634 <_realloc_r+0x24>
 8005628:	f7ff fb4e 	bl	8004cc8 <_free_r>
 800562c:	2400      	movs	r4, #0
 800562e:	4620      	mov	r0, r4
 8005630:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005634:	f000 f906 	bl	8005844 <_malloc_usable_size_r>
 8005638:	4285      	cmp	r5, r0
 800563a:	4606      	mov	r6, r0
 800563c:	d802      	bhi.n	8005644 <_realloc_r+0x34>
 800563e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005642:	d8f4      	bhi.n	800562e <_realloc_r+0x1e>
 8005644:	4629      	mov	r1, r5
 8005646:	4640      	mov	r0, r8
 8005648:	f7ff fbaa 	bl	8004da0 <_malloc_r>
 800564c:	4607      	mov	r7, r0
 800564e:	2800      	cmp	r0, #0
 8005650:	d0ec      	beq.n	800562c <_realloc_r+0x1c>
 8005652:	42b5      	cmp	r5, r6
 8005654:	462a      	mov	r2, r5
 8005656:	4621      	mov	r1, r4
 8005658:	bf28      	it	cs
 800565a:	4632      	movcs	r2, r6
 800565c:	f7ff ffca 	bl	80055f4 <memcpy>
 8005660:	4621      	mov	r1, r4
 8005662:	4640      	mov	r0, r8
 8005664:	f7ff fb30 	bl	8004cc8 <_free_r>
 8005668:	463c      	mov	r4, r7
 800566a:	e7e0      	b.n	800562e <_realloc_r+0x1e>

0800566c <_strtol_l.constprop.0>:
 800566c:	2b24      	cmp	r3, #36	@ 0x24
 800566e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005672:	4686      	mov	lr, r0
 8005674:	4690      	mov	r8, r2
 8005676:	d801      	bhi.n	800567c <_strtol_l.constprop.0+0x10>
 8005678:	2b01      	cmp	r3, #1
 800567a:	d106      	bne.n	800568a <_strtol_l.constprop.0+0x1e>
 800567c:	f7ff faf0 	bl	8004c60 <__errno>
 8005680:	2316      	movs	r3, #22
 8005682:	6003      	str	r3, [r0, #0]
 8005684:	2000      	movs	r0, #0
 8005686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800568a:	4834      	ldr	r0, [pc, #208]	@ (800575c <_strtol_l.constprop.0+0xf0>)
 800568c:	460d      	mov	r5, r1
 800568e:	462a      	mov	r2, r5
 8005690:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005694:	5d06      	ldrb	r6, [r0, r4]
 8005696:	f016 0608 	ands.w	r6, r6, #8
 800569a:	d1f8      	bne.n	800568e <_strtol_l.constprop.0+0x22>
 800569c:	2c2d      	cmp	r4, #45	@ 0x2d
 800569e:	d12d      	bne.n	80056fc <_strtol_l.constprop.0+0x90>
 80056a0:	782c      	ldrb	r4, [r5, #0]
 80056a2:	2601      	movs	r6, #1
 80056a4:	1c95      	adds	r5, r2, #2
 80056a6:	f033 0210 	bics.w	r2, r3, #16
 80056aa:	d109      	bne.n	80056c0 <_strtol_l.constprop.0+0x54>
 80056ac:	2c30      	cmp	r4, #48	@ 0x30
 80056ae:	d12a      	bne.n	8005706 <_strtol_l.constprop.0+0x9a>
 80056b0:	782a      	ldrb	r2, [r5, #0]
 80056b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80056b6:	2a58      	cmp	r2, #88	@ 0x58
 80056b8:	d125      	bne.n	8005706 <_strtol_l.constprop.0+0x9a>
 80056ba:	786c      	ldrb	r4, [r5, #1]
 80056bc:	2310      	movs	r3, #16
 80056be:	3502      	adds	r5, #2
 80056c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80056c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80056c8:	2200      	movs	r2, #0
 80056ca:	fbbc f9f3 	udiv	r9, ip, r3
 80056ce:	4610      	mov	r0, r2
 80056d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80056d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80056d8:	2f09      	cmp	r7, #9
 80056da:	d81b      	bhi.n	8005714 <_strtol_l.constprop.0+0xa8>
 80056dc:	463c      	mov	r4, r7
 80056de:	42a3      	cmp	r3, r4
 80056e0:	dd27      	ble.n	8005732 <_strtol_l.constprop.0+0xc6>
 80056e2:	1c57      	adds	r7, r2, #1
 80056e4:	d007      	beq.n	80056f6 <_strtol_l.constprop.0+0x8a>
 80056e6:	4581      	cmp	r9, r0
 80056e8:	d320      	bcc.n	800572c <_strtol_l.constprop.0+0xc0>
 80056ea:	d101      	bne.n	80056f0 <_strtol_l.constprop.0+0x84>
 80056ec:	45a2      	cmp	sl, r4
 80056ee:	db1d      	blt.n	800572c <_strtol_l.constprop.0+0xc0>
 80056f0:	fb00 4003 	mla	r0, r0, r3, r4
 80056f4:	2201      	movs	r2, #1
 80056f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80056fa:	e7eb      	b.n	80056d4 <_strtol_l.constprop.0+0x68>
 80056fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80056fe:	bf04      	itt	eq
 8005700:	782c      	ldrbeq	r4, [r5, #0]
 8005702:	1c95      	addeq	r5, r2, #2
 8005704:	e7cf      	b.n	80056a6 <_strtol_l.constprop.0+0x3a>
 8005706:	2b00      	cmp	r3, #0
 8005708:	d1da      	bne.n	80056c0 <_strtol_l.constprop.0+0x54>
 800570a:	2c30      	cmp	r4, #48	@ 0x30
 800570c:	bf0c      	ite	eq
 800570e:	2308      	moveq	r3, #8
 8005710:	230a      	movne	r3, #10
 8005712:	e7d5      	b.n	80056c0 <_strtol_l.constprop.0+0x54>
 8005714:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005718:	2f19      	cmp	r7, #25
 800571a:	d801      	bhi.n	8005720 <_strtol_l.constprop.0+0xb4>
 800571c:	3c37      	subs	r4, #55	@ 0x37
 800571e:	e7de      	b.n	80056de <_strtol_l.constprop.0+0x72>
 8005720:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005724:	2f19      	cmp	r7, #25
 8005726:	d804      	bhi.n	8005732 <_strtol_l.constprop.0+0xc6>
 8005728:	3c57      	subs	r4, #87	@ 0x57
 800572a:	e7d8      	b.n	80056de <_strtol_l.constprop.0+0x72>
 800572c:	f04f 32ff 	mov.w	r2, #4294967295
 8005730:	e7e1      	b.n	80056f6 <_strtol_l.constprop.0+0x8a>
 8005732:	1c53      	adds	r3, r2, #1
 8005734:	d108      	bne.n	8005748 <_strtol_l.constprop.0+0xdc>
 8005736:	2322      	movs	r3, #34	@ 0x22
 8005738:	f8ce 3000 	str.w	r3, [lr]
 800573c:	4660      	mov	r0, ip
 800573e:	f1b8 0f00 	cmp.w	r8, #0
 8005742:	d0a0      	beq.n	8005686 <_strtol_l.constprop.0+0x1a>
 8005744:	1e69      	subs	r1, r5, #1
 8005746:	e006      	b.n	8005756 <_strtol_l.constprop.0+0xea>
 8005748:	b106      	cbz	r6, 800574c <_strtol_l.constprop.0+0xe0>
 800574a:	4240      	negs	r0, r0
 800574c:	f1b8 0f00 	cmp.w	r8, #0
 8005750:	d099      	beq.n	8005686 <_strtol_l.constprop.0+0x1a>
 8005752:	2a00      	cmp	r2, #0
 8005754:	d1f6      	bne.n	8005744 <_strtol_l.constprop.0+0xd8>
 8005756:	f8c8 1000 	str.w	r1, [r8]
 800575a:	e794      	b.n	8005686 <_strtol_l.constprop.0+0x1a>
 800575c:	080058bc 	.word	0x080058bc

08005760 <_strtol_r>:
 8005760:	f7ff bf84 	b.w	800566c <_strtol_l.constprop.0>

08005764 <_strtoul_l.constprop.0>:
 8005764:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005768:	4e34      	ldr	r6, [pc, #208]	@ (800583c <_strtoul_l.constprop.0+0xd8>)
 800576a:	4686      	mov	lr, r0
 800576c:	460d      	mov	r5, r1
 800576e:	4628      	mov	r0, r5
 8005770:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005774:	5d37      	ldrb	r7, [r6, r4]
 8005776:	f017 0708 	ands.w	r7, r7, #8
 800577a:	d1f8      	bne.n	800576e <_strtoul_l.constprop.0+0xa>
 800577c:	2c2d      	cmp	r4, #45	@ 0x2d
 800577e:	d12f      	bne.n	80057e0 <_strtoul_l.constprop.0+0x7c>
 8005780:	782c      	ldrb	r4, [r5, #0]
 8005782:	2701      	movs	r7, #1
 8005784:	1c85      	adds	r5, r0, #2
 8005786:	f033 0010 	bics.w	r0, r3, #16
 800578a:	d109      	bne.n	80057a0 <_strtoul_l.constprop.0+0x3c>
 800578c:	2c30      	cmp	r4, #48	@ 0x30
 800578e:	d12c      	bne.n	80057ea <_strtoul_l.constprop.0+0x86>
 8005790:	7828      	ldrb	r0, [r5, #0]
 8005792:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005796:	2858      	cmp	r0, #88	@ 0x58
 8005798:	d127      	bne.n	80057ea <_strtoul_l.constprop.0+0x86>
 800579a:	786c      	ldrb	r4, [r5, #1]
 800579c:	2310      	movs	r3, #16
 800579e:	3502      	adds	r5, #2
 80057a0:	f04f 38ff 	mov.w	r8, #4294967295
 80057a4:	2600      	movs	r6, #0
 80057a6:	fbb8 f8f3 	udiv	r8, r8, r3
 80057aa:	fb03 f908 	mul.w	r9, r3, r8
 80057ae:	ea6f 0909 	mvn.w	r9, r9
 80057b2:	4630      	mov	r0, r6
 80057b4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 80057b8:	f1bc 0f09 	cmp.w	ip, #9
 80057bc:	d81c      	bhi.n	80057f8 <_strtoul_l.constprop.0+0x94>
 80057be:	4664      	mov	r4, ip
 80057c0:	42a3      	cmp	r3, r4
 80057c2:	dd2a      	ble.n	800581a <_strtoul_l.constprop.0+0xb6>
 80057c4:	f1b6 3fff 	cmp.w	r6, #4294967295
 80057c8:	d007      	beq.n	80057da <_strtoul_l.constprop.0+0x76>
 80057ca:	4580      	cmp	r8, r0
 80057cc:	d322      	bcc.n	8005814 <_strtoul_l.constprop.0+0xb0>
 80057ce:	d101      	bne.n	80057d4 <_strtoul_l.constprop.0+0x70>
 80057d0:	45a1      	cmp	r9, r4
 80057d2:	db1f      	blt.n	8005814 <_strtoul_l.constprop.0+0xb0>
 80057d4:	fb00 4003 	mla	r0, r0, r3, r4
 80057d8:	2601      	movs	r6, #1
 80057da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80057de:	e7e9      	b.n	80057b4 <_strtoul_l.constprop.0+0x50>
 80057e0:	2c2b      	cmp	r4, #43	@ 0x2b
 80057e2:	bf04      	itt	eq
 80057e4:	782c      	ldrbeq	r4, [r5, #0]
 80057e6:	1c85      	addeq	r5, r0, #2
 80057e8:	e7cd      	b.n	8005786 <_strtoul_l.constprop.0+0x22>
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1d8      	bne.n	80057a0 <_strtoul_l.constprop.0+0x3c>
 80057ee:	2c30      	cmp	r4, #48	@ 0x30
 80057f0:	bf0c      	ite	eq
 80057f2:	2308      	moveq	r3, #8
 80057f4:	230a      	movne	r3, #10
 80057f6:	e7d3      	b.n	80057a0 <_strtoul_l.constprop.0+0x3c>
 80057f8:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 80057fc:	f1bc 0f19 	cmp.w	ip, #25
 8005800:	d801      	bhi.n	8005806 <_strtoul_l.constprop.0+0xa2>
 8005802:	3c37      	subs	r4, #55	@ 0x37
 8005804:	e7dc      	b.n	80057c0 <_strtoul_l.constprop.0+0x5c>
 8005806:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800580a:	f1bc 0f19 	cmp.w	ip, #25
 800580e:	d804      	bhi.n	800581a <_strtoul_l.constprop.0+0xb6>
 8005810:	3c57      	subs	r4, #87	@ 0x57
 8005812:	e7d5      	b.n	80057c0 <_strtoul_l.constprop.0+0x5c>
 8005814:	f04f 36ff 	mov.w	r6, #4294967295
 8005818:	e7df      	b.n	80057da <_strtoul_l.constprop.0+0x76>
 800581a:	1c73      	adds	r3, r6, #1
 800581c:	d106      	bne.n	800582c <_strtoul_l.constprop.0+0xc8>
 800581e:	2322      	movs	r3, #34	@ 0x22
 8005820:	f8ce 3000 	str.w	r3, [lr]
 8005824:	4630      	mov	r0, r6
 8005826:	b932      	cbnz	r2, 8005836 <_strtoul_l.constprop.0+0xd2>
 8005828:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800582c:	b107      	cbz	r7, 8005830 <_strtoul_l.constprop.0+0xcc>
 800582e:	4240      	negs	r0, r0
 8005830:	2a00      	cmp	r2, #0
 8005832:	d0f9      	beq.n	8005828 <_strtoul_l.constprop.0+0xc4>
 8005834:	b106      	cbz	r6, 8005838 <_strtoul_l.constprop.0+0xd4>
 8005836:	1e69      	subs	r1, r5, #1
 8005838:	6011      	str	r1, [r2, #0]
 800583a:	e7f5      	b.n	8005828 <_strtoul_l.constprop.0+0xc4>
 800583c:	080058bc 	.word	0x080058bc

08005840 <_strtoul_r>:
 8005840:	f7ff bf90 	b.w	8005764 <_strtoul_l.constprop.0>

08005844 <_malloc_usable_size_r>:
 8005844:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005848:	1f18      	subs	r0, r3, #4
 800584a:	2b00      	cmp	r3, #0
 800584c:	bfbc      	itt	lt
 800584e:	580b      	ldrlt	r3, [r1, r0]
 8005850:	18c0      	addlt	r0, r0, r3
 8005852:	4770      	bx	lr

08005854 <_init>:
 8005854:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005856:	bf00      	nop
 8005858:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800585a:	bc08      	pop	{r3}
 800585c:	469e      	mov	lr, r3
 800585e:	4770      	bx	lr

08005860 <_fini>:
 8005860:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005862:	bf00      	nop
 8005864:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005866:	bc08      	pop	{r3}
 8005868:	469e      	mov	lr, r3
 800586a:	4770      	bx	lr
