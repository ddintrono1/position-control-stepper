
Project-control-stepper.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ac0  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08005c90  08005c90  00006c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005de0  08005de0  000070d8  2**0
                  CONTENTS
  4 .ARM          00000008  08005de0  08005de0  00006de0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005de8  08005de8  000070d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005de8  08005de8  00006de8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005dec  08005dec  00006dec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000d8  20000000  08005df0  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000378  200000d8  08005ec8  000070d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000450  08005ec8  00007450  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000070d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000136c3  00000000  00000000  00007108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b63  00000000  00000000  0001a7cb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010d8  00000000  00000000  0001d330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d3c  00000000  00000000  0001e408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000232da  00000000  00000000  0001f144  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a34  00000000  00000000  0004241e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3c4d  00000000  00000000  00058e52  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0012ca9f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d64  00000000  00000000  0012cae4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000072  00000000  00000000  00131848  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200000d8 	.word	0x200000d8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005c78 	.word	0x08005c78

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200000dc 	.word	0x200000dc
 800020c:	08005c78 	.word	0x08005c78

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96a 	b.w	80005ac <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	460c      	mov	r4, r1
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d14e      	bne.n	800039a <__udivmoddi4+0xaa>
 80002fc:	4694      	mov	ip, r2
 80002fe:	458c      	cmp	ip, r1
 8000300:	4686      	mov	lr, r0
 8000302:	fab2 f282 	clz	r2, r2
 8000306:	d962      	bls.n	80003ce <__udivmoddi4+0xde>
 8000308:	b14a      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030a:	f1c2 0320 	rsb	r3, r2, #32
 800030e:	4091      	lsls	r1, r2
 8000310:	fa20 f303 	lsr.w	r3, r0, r3
 8000314:	fa0c fc02 	lsl.w	ip, ip, r2
 8000318:	4319      	orrs	r1, r3
 800031a:	fa00 fe02 	lsl.w	lr, r0, r2
 800031e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000322:	fa1f f68c 	uxth.w	r6, ip
 8000326:	fbb1 f4f7 	udiv	r4, r1, r7
 800032a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800032e:	fb07 1114 	mls	r1, r7, r4, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb04 f106 	mul.w	r1, r4, r6
 800033a:	4299      	cmp	r1, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x64>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f104 30ff 	add.w	r0, r4, #4294967295
 8000346:	f080 8112 	bcs.w	800056e <__udivmoddi4+0x27e>
 800034a:	4299      	cmp	r1, r3
 800034c:	f240 810f 	bls.w	800056e <__udivmoddi4+0x27e>
 8000350:	3c02      	subs	r4, #2
 8000352:	4463      	add	r3, ip
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	fa1f f38e 	uxth.w	r3, lr
 800035a:	fbb1 f0f7 	udiv	r0, r1, r7
 800035e:	fb07 1110 	mls	r1, r7, r0, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb00 f606 	mul.w	r6, r0, r6
 800036a:	429e      	cmp	r6, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x94>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f100 31ff 	add.w	r1, r0, #4294967295
 8000376:	f080 80fc 	bcs.w	8000572 <__udivmoddi4+0x282>
 800037a:	429e      	cmp	r6, r3
 800037c:	f240 80f9 	bls.w	8000572 <__udivmoddi4+0x282>
 8000380:	4463      	add	r3, ip
 8000382:	3802      	subs	r0, #2
 8000384:	1b9b      	subs	r3, r3, r6
 8000386:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800038a:	2100      	movs	r1, #0
 800038c:	b11d      	cbz	r5, 8000396 <__udivmoddi4+0xa6>
 800038e:	40d3      	lsrs	r3, r2
 8000390:	2200      	movs	r2, #0
 8000392:	e9c5 3200 	strd	r3, r2, [r5]
 8000396:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039a:	428b      	cmp	r3, r1
 800039c:	d905      	bls.n	80003aa <__udivmoddi4+0xba>
 800039e:	b10d      	cbz	r5, 80003a4 <__udivmoddi4+0xb4>
 80003a0:	e9c5 0100 	strd	r0, r1, [r5]
 80003a4:	2100      	movs	r1, #0
 80003a6:	4608      	mov	r0, r1
 80003a8:	e7f5      	b.n	8000396 <__udivmoddi4+0xa6>
 80003aa:	fab3 f183 	clz	r1, r3
 80003ae:	2900      	cmp	r1, #0
 80003b0:	d146      	bne.n	8000440 <__udivmoddi4+0x150>
 80003b2:	42a3      	cmp	r3, r4
 80003b4:	d302      	bcc.n	80003bc <__udivmoddi4+0xcc>
 80003b6:	4290      	cmp	r0, r2
 80003b8:	f0c0 80f0 	bcc.w	800059c <__udivmoddi4+0x2ac>
 80003bc:	1a86      	subs	r6, r0, r2
 80003be:	eb64 0303 	sbc.w	r3, r4, r3
 80003c2:	2001      	movs	r0, #1
 80003c4:	2d00      	cmp	r5, #0
 80003c6:	d0e6      	beq.n	8000396 <__udivmoddi4+0xa6>
 80003c8:	e9c5 6300 	strd	r6, r3, [r5]
 80003cc:	e7e3      	b.n	8000396 <__udivmoddi4+0xa6>
 80003ce:	2a00      	cmp	r2, #0
 80003d0:	f040 8090 	bne.w	80004f4 <__udivmoddi4+0x204>
 80003d4:	eba1 040c 	sub.w	r4, r1, ip
 80003d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003dc:	fa1f f78c 	uxth.w	r7, ip
 80003e0:	2101      	movs	r1, #1
 80003e2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003e6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ea:	fb08 4416 	mls	r4, r8, r6, r4
 80003ee:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003f2:	fb07 f006 	mul.w	r0, r7, r6
 80003f6:	4298      	cmp	r0, r3
 80003f8:	d908      	bls.n	800040c <__udivmoddi4+0x11c>
 80003fa:	eb1c 0303 	adds.w	r3, ip, r3
 80003fe:	f106 34ff 	add.w	r4, r6, #4294967295
 8000402:	d202      	bcs.n	800040a <__udivmoddi4+0x11a>
 8000404:	4298      	cmp	r0, r3
 8000406:	f200 80cd 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 800040a:	4626      	mov	r6, r4
 800040c:	1a1c      	subs	r4, r3, r0
 800040e:	fa1f f38e 	uxth.w	r3, lr
 8000412:	fbb4 f0f8 	udiv	r0, r4, r8
 8000416:	fb08 4410 	mls	r4, r8, r0, r4
 800041a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800041e:	fb00 f707 	mul.w	r7, r0, r7
 8000422:	429f      	cmp	r7, r3
 8000424:	d908      	bls.n	8000438 <__udivmoddi4+0x148>
 8000426:	eb1c 0303 	adds.w	r3, ip, r3
 800042a:	f100 34ff 	add.w	r4, r0, #4294967295
 800042e:	d202      	bcs.n	8000436 <__udivmoddi4+0x146>
 8000430:	429f      	cmp	r7, r3
 8000432:	f200 80b0 	bhi.w	8000596 <__udivmoddi4+0x2a6>
 8000436:	4620      	mov	r0, r4
 8000438:	1bdb      	subs	r3, r3, r7
 800043a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800043e:	e7a5      	b.n	800038c <__udivmoddi4+0x9c>
 8000440:	f1c1 0620 	rsb	r6, r1, #32
 8000444:	408b      	lsls	r3, r1
 8000446:	fa22 f706 	lsr.w	r7, r2, r6
 800044a:	431f      	orrs	r7, r3
 800044c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000450:	fa04 f301 	lsl.w	r3, r4, r1
 8000454:	ea43 030c 	orr.w	r3, r3, ip
 8000458:	40f4      	lsrs	r4, r6
 800045a:	fa00 f801 	lsl.w	r8, r0, r1
 800045e:	0c38      	lsrs	r0, r7, #16
 8000460:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000464:	fbb4 fef0 	udiv	lr, r4, r0
 8000468:	fa1f fc87 	uxth.w	ip, r7
 800046c:	fb00 441e 	mls	r4, r0, lr, r4
 8000470:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000474:	fb0e f90c 	mul.w	r9, lr, ip
 8000478:	45a1      	cmp	r9, r4
 800047a:	fa02 f201 	lsl.w	r2, r2, r1
 800047e:	d90a      	bls.n	8000496 <__udivmoddi4+0x1a6>
 8000480:	193c      	adds	r4, r7, r4
 8000482:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000486:	f080 8084 	bcs.w	8000592 <__udivmoddi4+0x2a2>
 800048a:	45a1      	cmp	r9, r4
 800048c:	f240 8081 	bls.w	8000592 <__udivmoddi4+0x2a2>
 8000490:	f1ae 0e02 	sub.w	lr, lr, #2
 8000494:	443c      	add	r4, r7
 8000496:	eba4 0409 	sub.w	r4, r4, r9
 800049a:	fa1f f983 	uxth.w	r9, r3
 800049e:	fbb4 f3f0 	udiv	r3, r4, r0
 80004a2:	fb00 4413 	mls	r4, r0, r3, r4
 80004a6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004aa:	fb03 fc0c 	mul.w	ip, r3, ip
 80004ae:	45a4      	cmp	ip, r4
 80004b0:	d907      	bls.n	80004c2 <__udivmoddi4+0x1d2>
 80004b2:	193c      	adds	r4, r7, r4
 80004b4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004b8:	d267      	bcs.n	800058a <__udivmoddi4+0x29a>
 80004ba:	45a4      	cmp	ip, r4
 80004bc:	d965      	bls.n	800058a <__udivmoddi4+0x29a>
 80004be:	3b02      	subs	r3, #2
 80004c0:	443c      	add	r4, r7
 80004c2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004c6:	fba0 9302 	umull	r9, r3, r0, r2
 80004ca:	eba4 040c 	sub.w	r4, r4, ip
 80004ce:	429c      	cmp	r4, r3
 80004d0:	46ce      	mov	lr, r9
 80004d2:	469c      	mov	ip, r3
 80004d4:	d351      	bcc.n	800057a <__udivmoddi4+0x28a>
 80004d6:	d04e      	beq.n	8000576 <__udivmoddi4+0x286>
 80004d8:	b155      	cbz	r5, 80004f0 <__udivmoddi4+0x200>
 80004da:	ebb8 030e 	subs.w	r3, r8, lr
 80004de:	eb64 040c 	sbc.w	r4, r4, ip
 80004e2:	fa04 f606 	lsl.w	r6, r4, r6
 80004e6:	40cb      	lsrs	r3, r1
 80004e8:	431e      	orrs	r6, r3
 80004ea:	40cc      	lsrs	r4, r1
 80004ec:	e9c5 6400 	strd	r6, r4, [r5]
 80004f0:	2100      	movs	r1, #0
 80004f2:	e750      	b.n	8000396 <__udivmoddi4+0xa6>
 80004f4:	f1c2 0320 	rsb	r3, r2, #32
 80004f8:	fa20 f103 	lsr.w	r1, r0, r3
 80004fc:	fa0c fc02 	lsl.w	ip, ip, r2
 8000500:	fa24 f303 	lsr.w	r3, r4, r3
 8000504:	4094      	lsls	r4, r2
 8000506:	430c      	orrs	r4, r1
 8000508:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800050c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000510:	fa1f f78c 	uxth.w	r7, ip
 8000514:	fbb3 f0f8 	udiv	r0, r3, r8
 8000518:	fb08 3110 	mls	r1, r8, r0, r3
 800051c:	0c23      	lsrs	r3, r4, #16
 800051e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000522:	fb00 f107 	mul.w	r1, r0, r7
 8000526:	4299      	cmp	r1, r3
 8000528:	d908      	bls.n	800053c <__udivmoddi4+0x24c>
 800052a:	eb1c 0303 	adds.w	r3, ip, r3
 800052e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000532:	d22c      	bcs.n	800058e <__udivmoddi4+0x29e>
 8000534:	4299      	cmp	r1, r3
 8000536:	d92a      	bls.n	800058e <__udivmoddi4+0x29e>
 8000538:	3802      	subs	r0, #2
 800053a:	4463      	add	r3, ip
 800053c:	1a5b      	subs	r3, r3, r1
 800053e:	b2a4      	uxth	r4, r4
 8000540:	fbb3 f1f8 	udiv	r1, r3, r8
 8000544:	fb08 3311 	mls	r3, r8, r1, r3
 8000548:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800054c:	fb01 f307 	mul.w	r3, r1, r7
 8000550:	42a3      	cmp	r3, r4
 8000552:	d908      	bls.n	8000566 <__udivmoddi4+0x276>
 8000554:	eb1c 0404 	adds.w	r4, ip, r4
 8000558:	f101 36ff 	add.w	r6, r1, #4294967295
 800055c:	d213      	bcs.n	8000586 <__udivmoddi4+0x296>
 800055e:	42a3      	cmp	r3, r4
 8000560:	d911      	bls.n	8000586 <__udivmoddi4+0x296>
 8000562:	3902      	subs	r1, #2
 8000564:	4464      	add	r4, ip
 8000566:	1ae4      	subs	r4, r4, r3
 8000568:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800056c:	e739      	b.n	80003e2 <__udivmoddi4+0xf2>
 800056e:	4604      	mov	r4, r0
 8000570:	e6f0      	b.n	8000354 <__udivmoddi4+0x64>
 8000572:	4608      	mov	r0, r1
 8000574:	e706      	b.n	8000384 <__udivmoddi4+0x94>
 8000576:	45c8      	cmp	r8, r9
 8000578:	d2ae      	bcs.n	80004d8 <__udivmoddi4+0x1e8>
 800057a:	ebb9 0e02 	subs.w	lr, r9, r2
 800057e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000582:	3801      	subs	r0, #1
 8000584:	e7a8      	b.n	80004d8 <__udivmoddi4+0x1e8>
 8000586:	4631      	mov	r1, r6
 8000588:	e7ed      	b.n	8000566 <__udivmoddi4+0x276>
 800058a:	4603      	mov	r3, r0
 800058c:	e799      	b.n	80004c2 <__udivmoddi4+0x1d2>
 800058e:	4630      	mov	r0, r6
 8000590:	e7d4      	b.n	800053c <__udivmoddi4+0x24c>
 8000592:	46d6      	mov	lr, sl
 8000594:	e77f      	b.n	8000496 <__udivmoddi4+0x1a6>
 8000596:	4463      	add	r3, ip
 8000598:	3802      	subs	r0, #2
 800059a:	e74d      	b.n	8000438 <__udivmoddi4+0x148>
 800059c:	4606      	mov	r6, r0
 800059e:	4623      	mov	r3, r4
 80005a0:	4608      	mov	r0, r1
 80005a2:	e70f      	b.n	80003c4 <__udivmoddi4+0xd4>
 80005a4:	3e02      	subs	r6, #2
 80005a6:	4463      	add	r3, ip
 80005a8:	e730      	b.n	800040c <__udivmoddi4+0x11c>
 80005aa:	bf00      	nop

080005ac <__aeabi_idiv0>:
 80005ac:	4770      	bx	lr
 80005ae:	bf00      	nop

080005b0 <Command_Init>:
uint8_t g1_message[] = "G1 command launched\r\n";
uint8_t m203_message[] = "M203 command launched\r\n";
uint8_t m204_message[] = "M204 command launched\r\n";


void Command_Init(Command *command, Stepper *stepper){
 80005b0:	b480      	push	{r7}
 80005b2:	b083      	sub	sp, #12
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
 80005b8:	6039      	str	r1, [r7, #0]
	command->stepper = stepper;
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	683a      	ldr	r2, [r7, #0]
 80005be:	601a      	str	r2, [r3, #0]

	// Setting default speeds and accelerations
	command->travelSpeed = 40;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	2228      	movs	r2, #40	@ 0x28
 80005c4:	62da      	str	r2, [r3, #44]	@ 0x2c
	command->workSpeed = 20;
 80005c6:	687b      	ldr	r3, [r7, #4]
 80005c8:	2214      	movs	r2, #20
 80005ca:	631a      	str	r2, [r3, #48]	@ 0x30
	command->travelAcceleration = 30;
 80005cc:	687b      	ldr	r3, [r7, #4]
 80005ce:	221e      	movs	r2, #30
 80005d0:	635a      	str	r2, [r3, #52]	@ 0x34
	command->workAcceleration = 15;
 80005d2:	687b      	ldr	r3, [r7, #4]
 80005d4:	220f      	movs	r2, #15
 80005d6:	639a      	str	r2, [r3, #56]	@ 0x38

}
 80005d8:	bf00      	nop
 80005da:	370c      	adds	r7, #12
 80005dc:	46bd      	mov	sp, r7
 80005de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e2:	4770      	bx	lr

080005e4 <Command_Parse>:

void Command_Parse(Command *command, uint8_t string[]){
 80005e4:	b590      	push	{r4, r7, lr}
 80005e6:	b085      	sub	sp, #20
 80005e8:	af02      	add	r7, sp, #8
 80005ea:	6078      	str	r0, [r7, #4]
 80005ec:	6039      	str	r1, [r7, #0]
	// String setting
	strcpy((char *) command->string, (char *) string);
 80005ee:	687b      	ldr	r3, [r7, #4]
 80005f0:	3304      	adds	r3, #4
 80005f2:	6839      	ldr	r1, [r7, #0]
 80005f4:	4618      	mov	r0, r3
 80005f6:	f004 fd71 	bl	80050dc <strcpy>

	// String parsing
	sscanf((char *) command->string, "%c %d %c %d", &(command->command_id), &(command->command_num), &(command->flag_id), &(command->flag_num));
 80005fa:	687b      	ldr	r3, [r7, #4]
 80005fc:	1d18      	adds	r0, r3, #4
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	f103 0118 	add.w	r1, r3, #24
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	f103 041c 	add.w	r4, r3, #28
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	3320      	adds	r3, #32
 800060e:	687a      	ldr	r2, [r7, #4]
 8000610:	3224      	adds	r2, #36	@ 0x24
 8000612:	9201      	str	r2, [sp, #4]
 8000614:	9300      	str	r3, [sp, #0]
 8000616:	4623      	mov	r3, r4
 8000618:	460a      	mov	r2, r1
 800061a:	4903      	ldr	r1, [pc, #12]	@ (8000628 <Command_Parse+0x44>)
 800061c:	f004 fcfe 	bl	800501c <siscanf>
}
 8000620:	bf00      	nop
 8000622:	370c      	adds	r7, #12
 8000624:	46bd      	mov	sp, r7
 8000626:	bd90      	pop	{r4, r7, pc}
 8000628:	08005c90 	.word	0x08005c90

0800062c <Command_Clear>:

void Command_Clear(Command *command){
 800062c:	b580      	push	{r7, lr}
 800062e:	b082      	sub	sp, #8
 8000630:	af00      	add	r7, sp, #0
 8000632:	6078      	str	r0, [r7, #4]
	memset(command->string, 0, sizeof(command->string));
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	3304      	adds	r3, #4
 8000638:	2214      	movs	r2, #20
 800063a:	2100      	movs	r1, #0
 800063c:	4618      	mov	r0, r3
 800063e:	f004 fd19 	bl	8005074 <memset>
	command->command_id = 0;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	2200      	movs	r2, #0
 8000646:	761a      	strb	r2, [r3, #24]
	command->command_num = 0;
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	2200      	movs	r2, #0
 800064c:	61da      	str	r2, [r3, #28]
	command->flag_id = 0;
 800064e:	687b      	ldr	r3, [r7, #4]
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2020 	strb.w	r2, [r3, #32]
	command->flag_num = 0;
 8000656:	687b      	ldr	r3, [r7, #4]
 8000658:	2200      	movs	r2, #0
 800065a:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800065c:	bf00      	nop
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}

08000664 <Command_Execute>:

void Command_Execute(Command *command){
 8000664:	b580      	push	{r7, lr}
 8000666:	b082      	sub	sp, #8
 8000668:	af00      	add	r7, sp, #0
 800066a:	6078      	str	r0, [r7, #4]
	if (command->command_id == 'G' && command-> command_num == 0){
 800066c:	687b      	ldr	r3, [r7, #4]
 800066e:	7e1b      	ldrb	r3, [r3, #24]
 8000670:	2b47      	cmp	r3, #71	@ 0x47
 8000672:	d107      	bne.n	8000684 <Command_Execute+0x20>
 8000674:	687b      	ldr	r3, [r7, #4]
 8000676:	69db      	ldr	r3, [r3, #28]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d103      	bne.n	8000684 <Command_Execute+0x20>
		Command_G0(command);
 800067c:	6878      	ldr	r0, [r7, #4]
 800067e:	f000 f833 	bl	80006e8 <Command_G0>
 8000682:	e029      	b.n	80006d8 <Command_Execute+0x74>
	}
	else if (command->command_id == 'G' && command->command_num == 1){
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	7e1b      	ldrb	r3, [r3, #24]
 8000688:	2b47      	cmp	r3, #71	@ 0x47
 800068a:	d107      	bne.n	800069c <Command_Execute+0x38>
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	69db      	ldr	r3, [r3, #28]
 8000690:	2b01      	cmp	r3, #1
 8000692:	d103      	bne.n	800069c <Command_Execute+0x38>
		Command_G1(command);
 8000694:	6878      	ldr	r0, [r7, #4]
 8000696:	f000 f869 	bl	800076c <Command_G1>
 800069a:	e01d      	b.n	80006d8 <Command_Execute+0x74>
	}
	else if (command->command_id == 'M' && command->command_num == 203){
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	7e1b      	ldrb	r3, [r3, #24]
 80006a0:	2b4d      	cmp	r3, #77	@ 0x4d
 80006a2:	d107      	bne.n	80006b4 <Command_Execute+0x50>
 80006a4:	687b      	ldr	r3, [r7, #4]
 80006a6:	69db      	ldr	r3, [r3, #28]
 80006a8:	2bcb      	cmp	r3, #203	@ 0xcb
 80006aa:	d103      	bne.n	80006b4 <Command_Execute+0x50>
		Command_M203(command);
 80006ac:	6878      	ldr	r0, [r7, #4]
 80006ae:	f000 f89f 	bl	80007f0 <Command_M203>
 80006b2:	e011      	b.n	80006d8 <Command_Execute+0x74>
	}
	else if (command->command_id == 'M' && command->command_num == 204){
 80006b4:	687b      	ldr	r3, [r7, #4]
 80006b6:	7e1b      	ldrb	r3, [r3, #24]
 80006b8:	2b4d      	cmp	r3, #77	@ 0x4d
 80006ba:	d107      	bne.n	80006cc <Command_Execute+0x68>
 80006bc:	687b      	ldr	r3, [r7, #4]
 80006be:	69db      	ldr	r3, [r3, #28]
 80006c0:	2bcc      	cmp	r3, #204	@ 0xcc
 80006c2:	d103      	bne.n	80006cc <Command_Execute+0x68>
		Command_M204(command);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	f000 f8c5 	bl	8000854 <Command_M204>
 80006ca:	e005      	b.n	80006d8 <Command_Execute+0x74>
	}
	else {
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));
 80006cc:	2219      	movs	r2, #25
 80006ce:	4904      	ldr	r1, [pc, #16]	@ (80006e0 <Command_Execute+0x7c>)
 80006d0:	4804      	ldr	r0, [pc, #16]	@ (80006e4 <Command_Execute+0x80>)
 80006d2:	f003 fd49 	bl	8004168 <HAL_UART_Transmit_IT>
	}
}
 80006d6:	bf00      	nop
 80006d8:	bf00      	nop
 80006da:	3708      	adds	r7, #8
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	20000000 	.word	0x20000000
 80006e4:	200002bc 	.word	0x200002bc

080006e8 <Command_G0>:

void Command_G0(Command *command){
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b082      	sub	sp, #8
 80006ec:	af00      	add	r7, sp, #0
 80006ee:	6078      	str	r0, [r7, #4]
	// This command handles the pulses number before stopping
	__HAL_TIM_SET_AUTORELOAD(&htim3, command->flag_num);
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80006f4:	4b1a      	ldr	r3, [pc, #104]	@ (8000760 <Command_G0+0x78>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	62da      	str	r2, [r3, #44]	@ 0x2c
 80006fa:	687b      	ldr	r3, [r7, #4]
 80006fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006fe:	461a      	mov	r2, r3
 8000700:	4b17      	ldr	r3, [pc, #92]	@ (8000760 <Command_G0+0x78>)
 8000702:	60da      	str	r2, [r3, #12]
	Stepper_SetSpeedLimit(command->stepper, command->travelSpeed);
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800070c:	ee07 3a90 	vmov	s15, r3
 8000710:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000714:	eeb0 0a67 	vmov.f32	s0, s15
 8000718:	4610      	mov	r0, r2
 800071a:	f000 fc97 	bl	800104c <Stepper_SetSpeedLimit>
	Stepper_SetAcceleration(command->stepper, command->travelAcceleration);
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681a      	ldr	r2, [r3, #0]
 8000722:	687b      	ldr	r3, [r7, #4]
 8000724:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000726:	ee07 3a90 	vmov	s15, r3
 800072a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800072e:	eeb0 0a67 	vmov.f32	s0, s15
 8000732:	4610      	mov	r0, r2
 8000734:	f000 fd0c 	bl	8001150 <Stepper_SetAcceleration>
	HAL_UART_Transmit_IT(&huart2, g0_message, sizeof(g0_message));
 8000738:	2216      	movs	r2, #22
 800073a:	490a      	ldr	r1, [pc, #40]	@ (8000764 <Command_G0+0x7c>)
 800073c:	480a      	ldr	r0, [pc, #40]	@ (8000768 <Command_G0+0x80>)
 800073e:	f003 fd13 	bl	8004168 <HAL_UART_Transmit_IT>
	Stepper_Enable(command->stepper);
 8000742:	687b      	ldr	r3, [r7, #4]
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	4618      	mov	r0, r3
 8000748:	f000 fb9c 	bl	8000e84 <Stepper_Enable>
	Stepper_Start(command->stepper);
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	4618      	mov	r0, r3
 8000752:	f000 fbb7 	bl	8000ec4 <Stepper_Start>
}
 8000756:	bf00      	nop
 8000758:	3708      	adds	r7, #8
 800075a:	46bd      	mov	sp, r7
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	2000022c 	.word	0x2000022c
 8000764:	2000001c 	.word	0x2000001c
 8000768:	200002bc 	.word	0x200002bc

0800076c <Command_G1>:

void Command_G1(Command *command){
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	// This command handles the pulses number before stopping
	__HAL_TIM_SET_AUTORELOAD(&htim3, command->flag_num);
 8000774:	687b      	ldr	r3, [r7, #4]
 8000776:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000778:	4b1b      	ldr	r3, [pc, #108]	@ (80007e8 <Command_G1+0x7c>)
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000782:	461a      	mov	r2, r3
 8000784:	4b18      	ldr	r3, [pc, #96]	@ (80007e8 <Command_G1+0x7c>)
 8000786:	60da      	str	r2, [r3, #12]
	Stepper_SetSpeedLimit(command->stepper, command->workSpeed);
 8000788:	687b      	ldr	r3, [r7, #4]
 800078a:	681a      	ldr	r2, [r3, #0]
 800078c:	687b      	ldr	r3, [r7, #4]
 800078e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000790:	ee07 3a90 	vmov	s15, r3
 8000794:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000798:	eeb0 0a67 	vmov.f32	s0, s15
 800079c:	4610      	mov	r0, r2
 800079e:	f000 fc55 	bl	800104c <Stepper_SetSpeedLimit>
	Stepper_SetAcceleration(command->stepper, command->workAcceleration);
 80007a2:	687b      	ldr	r3, [r7, #4]
 80007a4:	681a      	ldr	r2, [r3, #0]
 80007a6:	687b      	ldr	r3, [r7, #4]
 80007a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80007aa:	ee07 3a90 	vmov	s15, r3
 80007ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80007b2:	eeb0 0a67 	vmov.f32	s0, s15
 80007b6:	4610      	mov	r0, r2
 80007b8:	f000 fcca 	bl	8001150 <Stepper_SetAcceleration>
	HAL_UART_Transmit_IT(command->stepper, g1_message, sizeof(g1_message));
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	2216      	movs	r2, #22
 80007c2:	490a      	ldr	r1, [pc, #40]	@ (80007ec <Command_G1+0x80>)
 80007c4:	4618      	mov	r0, r3
 80007c6:	f003 fccf 	bl	8004168 <HAL_UART_Transmit_IT>
	Stepper_Enable(command->stepper);
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 fb58 	bl	8000e84 <Stepper_Enable>
	Stepper_Start(command->stepper);
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4618      	mov	r0, r3
 80007da:	f000 fb73 	bl	8000ec4 <Stepper_Start>
}
 80007de:	bf00      	nop
 80007e0:	3708      	adds	r7, #8
 80007e2:	46bd      	mov	sp, r7
 80007e4:	bd80      	pop	{r7, pc}
 80007e6:	bf00      	nop
 80007e8:	2000022c 	.word	0x2000022c
 80007ec:	20000034 	.word	0x20000034

080007f0 <Command_M203>:

void Command_M203(Command *command){
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b082      	sub	sp, #8
 80007f4:	af00      	add	r7, sp, #0
 80007f6:	6078      	str	r0, [r7, #4]
	// This command sets the travelling or working speed
	if (command->flag_id == 'T'){
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	f893 3020 	ldrb.w	r3, [r3, #32]
 80007fe:	2b54      	cmp	r3, #84	@ 0x54
 8000800:	d109      	bne.n	8000816 <Command_M203+0x26>
		// Modify travelling speed
		command->travelSpeed = command->flag_num;
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	62da      	str	r2, [r3, #44]	@ 0x2c
		HAL_UART_Transmit_IT(&huart2, m203_message, sizeof(m203_message));
 800080a:	2218      	movs	r2, #24
 800080c:	490e      	ldr	r1, [pc, #56]	@ (8000848 <Command_M203+0x58>)
 800080e:	480f      	ldr	r0, [pc, #60]	@ (800084c <Command_M203+0x5c>)
 8000810:	f003 fcaa 	bl	8004168 <HAL_UART_Transmit_IT>
		HAL_UART_Transmit_IT(&huart2, m203_message, sizeof(m203_message));
	}
	else {
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));
	}
}
 8000814:	e013      	b.n	800083e <Command_M203+0x4e>
	else if (command->flag_id == 'S'){
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	f893 3020 	ldrb.w	r3, [r3, #32]
 800081c:	2b53      	cmp	r3, #83	@ 0x53
 800081e:	d109      	bne.n	8000834 <Command_M203+0x44>
		command->workSpeed = command->flag_num;
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	631a      	str	r2, [r3, #48]	@ 0x30
		HAL_UART_Transmit_IT(&huart2, m203_message, sizeof(m203_message));
 8000828:	2218      	movs	r2, #24
 800082a:	4907      	ldr	r1, [pc, #28]	@ (8000848 <Command_M203+0x58>)
 800082c:	4807      	ldr	r0, [pc, #28]	@ (800084c <Command_M203+0x5c>)
 800082e:	f003 fc9b 	bl	8004168 <HAL_UART_Transmit_IT>
}
 8000832:	e004      	b.n	800083e <Command_M203+0x4e>
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));
 8000834:	2219      	movs	r2, #25
 8000836:	4906      	ldr	r1, [pc, #24]	@ (8000850 <Command_M203+0x60>)
 8000838:	4804      	ldr	r0, [pc, #16]	@ (800084c <Command_M203+0x5c>)
 800083a:	f003 fc95 	bl	8004168 <HAL_UART_Transmit_IT>
}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	2000004c 	.word	0x2000004c
 800084c:	200002bc 	.word	0x200002bc
 8000850:	20000000 	.word	0x20000000

08000854 <Command_M204>:

void Command_M204(Command *command){
 8000854:	b580      	push	{r7, lr}
 8000856:	b082      	sub	sp, #8
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
	if (command->flag_id == 'T'){
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000862:	2b54      	cmp	r3, #84	@ 0x54
 8000864:	d109      	bne.n	800087a <Command_M204+0x26>
		// Modify traveling acceleration
		command->travelAcceleration = command->flag_num;
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800086a:	687b      	ldr	r3, [r7, #4]
 800086c:	635a      	str	r2, [r3, #52]	@ 0x34
		HAL_UART_Transmit_IT(&huart2, m204_message, sizeof(m204_message));
 800086e:	2218      	movs	r2, #24
 8000870:	490e      	ldr	r1, [pc, #56]	@ (80008ac <Command_M204+0x58>)
 8000872:	480f      	ldr	r0, [pc, #60]	@ (80008b0 <Command_M204+0x5c>)
 8000874:	f003 fc78 	bl	8004168 <HAL_UART_Transmit_IT>
	}
	else {
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));

	}
}
 8000878:	e013      	b.n	80008a2 <Command_M204+0x4e>
	else if (command->flag_id == 'S'){
 800087a:	687b      	ldr	r3, [r7, #4]
 800087c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8000880:	2b53      	cmp	r3, #83	@ 0x53
 8000882:	d109      	bne.n	8000898 <Command_M204+0x44>
		command->workAcceleration = command->flag_num;
 8000884:	687b      	ldr	r3, [r7, #4]
 8000886:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	639a      	str	r2, [r3, #56]	@ 0x38
		HAL_UART_Transmit_IT(&huart2, m204_message, sizeof(m204_message));
 800088c:	2218      	movs	r2, #24
 800088e:	4907      	ldr	r1, [pc, #28]	@ (80008ac <Command_M204+0x58>)
 8000890:	4807      	ldr	r0, [pc, #28]	@ (80008b0 <Command_M204+0x5c>)
 8000892:	f003 fc69 	bl	8004168 <HAL_UART_Transmit_IT>
}
 8000896:	e004      	b.n	80008a2 <Command_M204+0x4e>
		HAL_UART_Transmit_IT(&huart2, error_message, sizeof(error_message));
 8000898:	2219      	movs	r2, #25
 800089a:	4906      	ldr	r1, [pc, #24]	@ (80008b4 <Command_M204+0x60>)
 800089c:	4804      	ldr	r0, [pc, #16]	@ (80008b0 <Command_M204+0x5c>)
 800089e:	f003 fc63 	bl	8004168 <HAL_UART_Transmit_IT>
}
 80008a2:	bf00      	nop
 80008a4:	3708      	adds	r7, #8
 80008a6:	46bd      	mov	sp, r7
 80008a8:	bd80      	pop	{r7, pc}
 80008aa:	bf00      	nop
 80008ac:	20000064 	.word	0x20000064
 80008b0:	200002bc 	.word	0x200002bc
 80008b4:	20000000 	.word	0x20000000

080008b8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b08a      	sub	sp, #40	@ 0x28
 80008bc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008be:	f107 0314 	add.w	r3, r7, #20
 80008c2:	2200      	movs	r2, #0
 80008c4:	601a      	str	r2, [r3, #0]
 80008c6:	605a      	str	r2, [r3, #4]
 80008c8:	609a      	str	r2, [r3, #8]
 80008ca:	60da      	str	r2, [r3, #12]
 80008cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ce:	2300      	movs	r3, #0
 80008d0:	613b      	str	r3, [r7, #16]
 80008d2:	4b47      	ldr	r3, [pc, #284]	@ (80009f0 <MX_GPIO_Init+0x138>)
 80008d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008d6:	4a46      	ldr	r2, [pc, #280]	@ (80009f0 <MX_GPIO_Init+0x138>)
 80008d8:	f043 0304 	orr.w	r3, r3, #4
 80008dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80008de:	4b44      	ldr	r3, [pc, #272]	@ (80009f0 <MX_GPIO_Init+0x138>)
 80008e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008e2:	f003 0304 	and.w	r3, r3, #4
 80008e6:	613b      	str	r3, [r7, #16]
 80008e8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ea:	2300      	movs	r3, #0
 80008ec:	60fb      	str	r3, [r7, #12]
 80008ee:	4b40      	ldr	r3, [pc, #256]	@ (80009f0 <MX_GPIO_Init+0x138>)
 80008f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008f2:	4a3f      	ldr	r2, [pc, #252]	@ (80009f0 <MX_GPIO_Init+0x138>)
 80008f4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008f8:	6313      	str	r3, [r2, #48]	@ 0x30
 80008fa:	4b3d      	ldr	r3, [pc, #244]	@ (80009f0 <MX_GPIO_Init+0x138>)
 80008fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000902:	60fb      	str	r3, [r7, #12]
 8000904:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	2300      	movs	r3, #0
 8000908:	60bb      	str	r3, [r7, #8]
 800090a:	4b39      	ldr	r3, [pc, #228]	@ (80009f0 <MX_GPIO_Init+0x138>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800090e:	4a38      	ldr	r2, [pc, #224]	@ (80009f0 <MX_GPIO_Init+0x138>)
 8000910:	f043 0301 	orr.w	r3, r3, #1
 8000914:	6313      	str	r3, [r2, #48]	@ 0x30
 8000916:	4b36      	ldr	r3, [pc, #216]	@ (80009f0 <MX_GPIO_Init+0x138>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	f003 0301 	and.w	r3, r3, #1
 800091e:	60bb      	str	r3, [r7, #8]
 8000920:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000922:	2300      	movs	r3, #0
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	4b32      	ldr	r3, [pc, #200]	@ (80009f0 <MX_GPIO_Init+0x138>)
 8000928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800092a:	4a31      	ldr	r2, [pc, #196]	@ (80009f0 <MX_GPIO_Init+0x138>)
 800092c:	f043 0302 	orr.w	r3, r3, #2
 8000930:	6313      	str	r3, [r2, #48]	@ 0x30
 8000932:	4b2f      	ldr	r3, [pc, #188]	@ (80009f0 <MX_GPIO_Init+0x138>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000936:	f003 0302 	and.w	r3, r3, #2
 800093a:	607b      	str	r3, [r7, #4]
 800093c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LD2_Pin|MS2_Pin|MS1_Pin, GPIO_PIN_RESET);
 800093e:	2200      	movs	r2, #0
 8000940:	f44f 51c1 	mov.w	r1, #6176	@ 0x1820
 8000944:	482b      	ldr	r0, [pc, #172]	@ (80009f4 <MX_GPIO_Init+0x13c>)
 8000946:	f001 fab5 	bl	8001eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 800094a:	2200      	movs	r2, #0
 800094c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000950:	4829      	ldr	r0, [pc, #164]	@ (80009f8 <MX_GPIO_Init+0x140>)
 8000952:	f001 faaf 	bl	8001eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, ENABLE_Pin|DIR_Pin, GPIO_PIN_RESET);
 8000956:	2200      	movs	r2, #0
 8000958:	f44f 51a0 	mov.w	r1, #5120	@ 0x1400
 800095c:	4827      	ldr	r0, [pc, #156]	@ (80009fc <MX_GPIO_Init+0x144>)
 800095e:	f001 faa9 	bl	8001eb4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000962:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000966:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000968:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 800096c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	2300      	movs	r3, #0
 8000970:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 0314 	add.w	r3, r7, #20
 8000976:	4619      	mov	r1, r3
 8000978:	4820      	ldr	r0, [pc, #128]	@ (80009fc <MX_GPIO_Init+0x144>)
 800097a:	f001 f907 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = LD2_Pin|MS2_Pin|MS1_Pin;
 800097e:	f44f 53c1 	mov.w	r3, #6176	@ 0x1820
 8000982:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000984:	2301      	movs	r3, #1
 8000986:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000988:	2300      	movs	r3, #0
 800098a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800098c:	2300      	movs	r3, #0
 800098e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000990:	f107 0314 	add.w	r3, r7, #20
 8000994:	4619      	mov	r1, r3
 8000996:	4817      	ldr	r0, [pc, #92]	@ (80009f4 <MX_GPIO_Init+0x13c>)
 8000998:	f001 f8f8 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = MS3_Pin;
 800099c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80009a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009a2:	2301      	movs	r3, #1
 80009a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MS3_GPIO_Port, &GPIO_InitStruct);
 80009ae:	f107 0314 	add.w	r3, r7, #20
 80009b2:	4619      	mov	r1, r3
 80009b4:	4810      	ldr	r0, [pc, #64]	@ (80009f8 <MX_GPIO_Init+0x140>)
 80009b6:	f001 f8e9 	bl	8001b8c <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = ENABLE_Pin|DIR_Pin;
 80009ba:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80009be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c0:	2301      	movs	r3, #1
 80009c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c4:	2300      	movs	r3, #0
 80009c6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c8:	2300      	movs	r3, #0
 80009ca:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009cc:	f107 0314 	add.w	r3, r7, #20
 80009d0:	4619      	mov	r1, r3
 80009d2:	480a      	ldr	r0, [pc, #40]	@ (80009fc <MX_GPIO_Init+0x144>)
 80009d4:	f001 f8da 	bl	8001b8c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2100      	movs	r1, #0
 80009dc:	2028      	movs	r0, #40	@ 0x28
 80009de:	f001 f80c 	bl	80019fa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80009e2:	2028      	movs	r0, #40	@ 0x28
 80009e4:	f001 f825 	bl	8001a32 <HAL_NVIC_EnableIRQ>

}
 80009e8:	bf00      	nop
 80009ea:	3728      	adds	r7, #40	@ 0x28
 80009ec:	46bd      	mov	sp, r7
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	40023800 	.word	0x40023800
 80009f4:	40020000 	.word	0x40020000
 80009f8:	40020400 	.word	0x40020400
 80009fc:	40020800 	.word	0x40020800

08000a00 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000a00:	b580      	push	{r7, lr}
 8000a02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000a04:	4b12      	ldr	r3, [pc, #72]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a06:	4a13      	ldr	r2, [pc, #76]	@ (8000a54 <MX_I2C1_Init+0x54>)
 8000a08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000a0a:	4b11      	ldr	r3, [pc, #68]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a0c:	4a12      	ldr	r2, [pc, #72]	@ (8000a58 <MX_I2C1_Init+0x58>)
 8000a0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000a10:	4b0f      	ldr	r3, [pc, #60]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000a16:	4b0e      	ldr	r3, [pc, #56]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000a1c:	4b0c      	ldr	r3, [pc, #48]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a1e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8000a22:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000a24:	4b0a      	ldr	r3, [pc, #40]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000a2a:	4b09      	ldr	r3, [pc, #36]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000a30:	4b07      	ldr	r3, [pc, #28]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000a36:	4b06      	ldr	r3, [pc, #24]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000a3c:	4804      	ldr	r0, [pc, #16]	@ (8000a50 <MX_I2C1_Init+0x50>)
 8000a3e:	f001 fa77 	bl	8001f30 <HAL_I2C_Init>
 8000a42:	4603      	mov	r3, r0
 8000a44:	2b00      	cmp	r3, #0
 8000a46:	d001      	beq.n	8000a4c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000a48:	f000 f9a8 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000a4c:	bf00      	nop
 8000a4e:	bd80      	pop	{r7, pc}
 8000a50:	200000f4 	.word	0x200000f4
 8000a54:	40005400 	.word	0x40005400
 8000a58:	000186a0 	.word	0x000186a0

08000a5c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b08a      	sub	sp, #40	@ 0x28
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a64:	f107 0314 	add.w	r3, r7, #20
 8000a68:	2200      	movs	r2, #0
 8000a6a:	601a      	str	r2, [r3, #0]
 8000a6c:	605a      	str	r2, [r3, #4]
 8000a6e:	609a      	str	r2, [r3, #8]
 8000a70:	60da      	str	r2, [r3, #12]
 8000a72:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	681b      	ldr	r3, [r3, #0]
 8000a78:	4a19      	ldr	r2, [pc, #100]	@ (8000ae0 <HAL_I2C_MspInit+0x84>)
 8000a7a:	4293      	cmp	r3, r2
 8000a7c:	d12b      	bne.n	8000ad6 <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a7e:	2300      	movs	r3, #0
 8000a80:	613b      	str	r3, [r7, #16]
 8000a82:	4b18      	ldr	r3, [pc, #96]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a86:	4a17      	ldr	r2, [pc, #92]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a88:	f043 0302 	orr.w	r3, r3, #2
 8000a8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000a8e:	4b15      	ldr	r3, [pc, #84]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000a92:	f003 0302 	and.w	r3, r3, #2
 8000a96:	613b      	str	r3, [r7, #16]
 8000a98:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000a9a:	23c0      	movs	r3, #192	@ 0xc0
 8000a9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a9e:	2312      	movs	r3, #18
 8000aa0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aa6:	2303      	movs	r3, #3
 8000aa8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000aaa:	2304      	movs	r3, #4
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000aae:	f107 0314 	add.w	r3, r7, #20
 8000ab2:	4619      	mov	r1, r3
 8000ab4:	480c      	ldr	r0, [pc, #48]	@ (8000ae8 <HAL_I2C_MspInit+0x8c>)
 8000ab6:	f001 f869 	bl	8001b8c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000aba:	2300      	movs	r3, #0
 8000abc:	60fb      	str	r3, [r7, #12]
 8000abe:	4b09      	ldr	r3, [pc, #36]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ac0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ac2:	4a08      	ldr	r2, [pc, #32]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000ac4:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000ac8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000aca:	4b06      	ldr	r3, [pc, #24]	@ (8000ae4 <HAL_I2C_MspInit+0x88>)
 8000acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000ace:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000ad2:	60fb      	str	r3, [r7, #12]
 8000ad4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	3728      	adds	r7, #40	@ 0x28
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40005400 	.word	0x40005400
 8000ae4:	40023800 	.word	0x40023800
 8000ae8:	40020400 	.word	0x40020400

08000aec <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b08a      	sub	sp, #40	@ 0x28
 8000af0:	af0a      	add	r7, sp, #40	@ 0x28
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000af2:	f000 fe35 	bl	8001760 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000af6:	f000 f859 	bl	8000bac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000afa:	f7ff fedd 	bl	80008b8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000afe:	f000 fd8b 	bl	8001618 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000b02:	f000 fbfb 	bl	80012fc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000b06:	f000 fc71 	bl	80013ec <MX_TIM3_Init>
  MX_TIM6_Init();
 8000b0a:	f000 fcbd 	bl	8001488 <MX_TIM6_Init>
  MX_I2C1_Init();
 8000b0e:	f7ff ff77 	bl	8000a00 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  // Reset interrupt flags before starting the timers
  __HAL_TIM_CLEAR_FLAG(&htim3, TIM_FLAG_UPDATE);
 8000b12:	4b1c      	ldr	r3, [pc, #112]	@ (8000b84 <main+0x98>)
 8000b14:	681b      	ldr	r3, [r3, #0]
 8000b16:	f06f 0201 	mvn.w	r2, #1
 8000b1a:	611a      	str	r2, [r3, #16]

  // Start slave timer
  HAL_TIM_Base_Start_IT(&htim3);
 8000b1c:	4819      	ldr	r0, [pc, #100]	@ (8000b84 <main+0x98>)
 8000b1e:	f002 f983 	bl	8002e28 <HAL_TIM_Base_Start_IT>

  // Create stepper instance
  Stepper_Init(&nema_17, 0.05, GPIOC, GPIO_PIN_10, &htim2, GPIOA, GPIO_PIN_0, GPIOC, GPIO_PIN_12, GPIOA, GPIO_PIN_12, GPIOA, GPIO_PIN_11, GPIOB, GPIO_PIN_12);
 8000b22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b26:	9309      	str	r3, [sp, #36]	@ 0x24
 8000b28:	4b17      	ldr	r3, [pc, #92]	@ (8000b88 <main+0x9c>)
 8000b2a:	9308      	str	r3, [sp, #32]
 8000b2c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b30:	9307      	str	r3, [sp, #28]
 8000b32:	4b16      	ldr	r3, [pc, #88]	@ (8000b8c <main+0xa0>)
 8000b34:	9306      	str	r3, [sp, #24]
 8000b36:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b3a:	9305      	str	r3, [sp, #20]
 8000b3c:	4b13      	ldr	r3, [pc, #76]	@ (8000b8c <main+0xa0>)
 8000b3e:	9304      	str	r3, [sp, #16]
 8000b40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000b44:	9303      	str	r3, [sp, #12]
 8000b46:	4b12      	ldr	r3, [pc, #72]	@ (8000b90 <main+0xa4>)
 8000b48:	9302      	str	r3, [sp, #8]
 8000b4a:	2301      	movs	r3, #1
 8000b4c:	9301      	str	r3, [sp, #4]
 8000b4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b8c <main+0xa0>)
 8000b50:	9300      	str	r3, [sp, #0]
 8000b52:	4b10      	ldr	r3, [pc, #64]	@ (8000b94 <main+0xa8>)
 8000b54:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000b58:	490d      	ldr	r1, [pc, #52]	@ (8000b90 <main+0xa4>)
 8000b5a:	ed9f 0a0f 	vldr	s0, [pc, #60]	@ 8000b98 <main+0xac>
 8000b5e:	480f      	ldr	r0, [pc, #60]	@ (8000b9c <main+0xb0>)
 8000b60:	f000 f922 	bl	8000da8 <Stepper_Init>

  // Create command instance
  Command_Init(&g_command, &nema_17);
 8000b64:	490d      	ldr	r1, [pc, #52]	@ (8000b9c <main+0xb0>)
 8000b66:	480e      	ldr	r0, [pc, #56]	@ (8000ba0 <main+0xb4>)
 8000b68:	f7ff fd22 	bl	80005b0 <Command_Init>

  // Start uart connection
  HAL_UART_Receive_IT(&huart2, rx_data, 1);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	490d      	ldr	r1, [pc, #52]	@ (8000ba4 <main+0xb8>)
 8000b70:	480d      	ldr	r0, [pc, #52]	@ (8000ba8 <main+0xbc>)
 8000b72:	f003 fb2f 	bl	80041d4 <HAL_UART_Receive_IT>

  // Set microstep
  Stepper_SetMicroStep(&nema_17, QUARTER_STEP);
 8000b76:	2104      	movs	r1, #4
 8000b78:	4808      	ldr	r0, [pc, #32]	@ (8000b9c <main+0xb0>)
 8000b7a:	f000 f9d1 	bl	8000f20 <Stepper_SetMicroStep>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000b7e:	bf00      	nop
 8000b80:	e7fd      	b.n	8000b7e <main+0x92>
 8000b82:	bf00      	nop
 8000b84:	2000022c 	.word	0x2000022c
 8000b88:	40020400 	.word	0x40020400
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020800 	.word	0x40020800
 8000b94:	200001e4 	.word	0x200001e4
 8000b98:	3d4ccccd 	.word	0x3d4ccccd
 8000b9c:	20000148 	.word	0x20000148
 8000ba0:	2000018c 	.word	0x2000018c
 8000ba4:	200001c8 	.word	0x200001c8
 8000ba8:	200002bc 	.word	0x200002bc

08000bac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b094      	sub	sp, #80	@ 0x50
 8000bb0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb2:	f107 031c 	add.w	r3, r7, #28
 8000bb6:	2234      	movs	r2, #52	@ 0x34
 8000bb8:	2100      	movs	r1, #0
 8000bba:	4618      	mov	r0, r3
 8000bbc:	f004 fa5a 	bl	8005074 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc0:	f107 0308 	add.w	r3, r7, #8
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	601a      	str	r2, [r3, #0]
 8000bc8:	605a      	str	r2, [r3, #4]
 8000bca:	609a      	str	r2, [r3, #8]
 8000bcc:	60da      	str	r2, [r3, #12]
 8000bce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	607b      	str	r3, [r7, #4]
 8000bd4:	4b2a      	ldr	r3, [pc, #168]	@ (8000c80 <SystemClock_Config+0xd4>)
 8000bd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bd8:	4a29      	ldr	r2, [pc, #164]	@ (8000c80 <SystemClock_Config+0xd4>)
 8000bda:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bde:	6413      	str	r3, [r2, #64]	@ 0x40
 8000be0:	4b27      	ldr	r3, [pc, #156]	@ (8000c80 <SystemClock_Config+0xd4>)
 8000be2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000be4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000be8:	607b      	str	r3, [r7, #4]
 8000bea:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000bec:	2300      	movs	r3, #0
 8000bee:	603b      	str	r3, [r7, #0]
 8000bf0:	4b24      	ldr	r3, [pc, #144]	@ (8000c84 <SystemClock_Config+0xd8>)
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000bf8:	4a22      	ldr	r2, [pc, #136]	@ (8000c84 <SystemClock_Config+0xd8>)
 8000bfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bfe:	6013      	str	r3, [r2, #0]
 8000c00:	4b20      	ldr	r3, [pc, #128]	@ (8000c84 <SystemClock_Config+0xd8>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000c08:	603b      	str	r3, [r7, #0]
 8000c0a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c0c:	2302      	movs	r3, #2
 8000c0e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c10:	2301      	movs	r3, #1
 8000c12:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c14:	2310      	movs	r3, #16
 8000c16:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c18:	2302      	movs	r3, #2
 8000c1a:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c20:	2310      	movs	r3, #16
 8000c22:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c24:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000c28:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c2a:	2304      	movs	r3, #4
 8000c2c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000c2e:	2302      	movs	r3, #2
 8000c30:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000c32:	2302      	movs	r3, #2
 8000c34:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c36:	f107 031c 	add.w	r3, r7, #28
 8000c3a:	4618      	mov	r0, r3
 8000c3c:	f001 fe06 	bl	800284c <HAL_RCC_OscConfig>
 8000c40:	4603      	mov	r3, r0
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d001      	beq.n	8000c4a <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8000c46:	f000 f8a9 	bl	8000d9c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4a:	230f      	movs	r3, #15
 8000c4c:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c4e:	2302      	movs	r3, #2
 8000c50:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c52:	2300      	movs	r3, #0
 8000c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c56:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000c5a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c60:	f107 0308 	add.w	r3, r7, #8
 8000c64:	2102      	movs	r1, #2
 8000c66:	4618      	mov	r0, r3
 8000c68:	f001 faa6 	bl	80021b8 <HAL_RCC_ClockConfig>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <SystemClock_Config+0xca>
  {
    Error_Handler();
 8000c72:	f000 f893 	bl	8000d9c <Error_Handler>
  }
}
 8000c76:	bf00      	nop
 8000c78:	3750      	adds	r7, #80	@ 0x50
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023800 	.word	0x40023800
 8000c84:	40007000 	.word	0x40007000

08000c88 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART2){
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	4a18      	ldr	r2, [pc, #96]	@ (8000cf8 <HAL_UART_RxCpltCallback+0x70>)
 8000c96:	4293      	cmp	r3, r2
 8000c98:	d129      	bne.n	8000cee <HAL_UART_RxCpltCallback+0x66>

		if (*(rx_data+cnt) == '\r'){
 8000c9a:	4b18      	ldr	r3, [pc, #96]	@ (8000cfc <HAL_UART_RxCpltCallback+0x74>)
 8000c9c:	781b      	ldrb	r3, [r3, #0]
 8000c9e:	461a      	mov	r2, r3
 8000ca0:	4b17      	ldr	r3, [pc, #92]	@ (8000d00 <HAL_UART_RxCpltCallback+0x78>)
 8000ca2:	4413      	add	r3, r2
 8000ca4:	781b      	ldrb	r3, [r3, #0]
 8000ca6:	2b0d      	cmp	r3, #13
 8000ca8:	d111      	bne.n	8000cce <HAL_UART_RxCpltCallback+0x46>
			Command_Parse(&g_command, rx_data);
 8000caa:	4915      	ldr	r1, [pc, #84]	@ (8000d00 <HAL_UART_RxCpltCallback+0x78>)
 8000cac:	4815      	ldr	r0, [pc, #84]	@ (8000d04 <HAL_UART_RxCpltCallback+0x7c>)
 8000cae:	f7ff fc99 	bl	80005e4 <Command_Parse>
			Command_Execute(&g_command);
 8000cb2:	4814      	ldr	r0, [pc, #80]	@ (8000d04 <HAL_UART_RxCpltCallback+0x7c>)
 8000cb4:	f7ff fcd6 	bl	8000664 <Command_Execute>
			cnt = -1;
 8000cb8:	4b10      	ldr	r3, [pc, #64]	@ (8000cfc <HAL_UART_RxCpltCallback+0x74>)
 8000cba:	22ff      	movs	r2, #255	@ 0xff
 8000cbc:	701a      	strb	r2, [r3, #0]
			memset(rx_data,0,sizeof(rx_data));
 8000cbe:	2214      	movs	r2, #20
 8000cc0:	2100      	movs	r1, #0
 8000cc2:	480f      	ldr	r0, [pc, #60]	@ (8000d00 <HAL_UART_RxCpltCallback+0x78>)
 8000cc4:	f004 f9d6 	bl	8005074 <memset>
			Command_Clear(&g_command);
 8000cc8:	480e      	ldr	r0, [pc, #56]	@ (8000d04 <HAL_UART_RxCpltCallback+0x7c>)
 8000cca:	f7ff fcaf 	bl	800062c <Command_Clear>
		}
		cnt++;
 8000cce:	4b0b      	ldr	r3, [pc, #44]	@ (8000cfc <HAL_UART_RxCpltCallback+0x74>)
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	3301      	adds	r3, #1
 8000cd4:	b2da      	uxtb	r2, r3
 8000cd6:	4b09      	ldr	r3, [pc, #36]	@ (8000cfc <HAL_UART_RxCpltCallback+0x74>)
 8000cd8:	701a      	strb	r2, [r3, #0]
		HAL_UART_Receive_IT(&huart2, rx_data+cnt, 1);
 8000cda:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <HAL_UART_RxCpltCallback+0x74>)
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	461a      	mov	r2, r3
 8000ce0:	4b07      	ldr	r3, [pc, #28]	@ (8000d00 <HAL_UART_RxCpltCallback+0x78>)
 8000ce2:	4413      	add	r3, r2
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	4619      	mov	r1, r3
 8000ce8:	4807      	ldr	r0, [pc, #28]	@ (8000d08 <HAL_UART_RxCpltCallback+0x80>)
 8000cea:	f003 fa73 	bl	80041d4 <HAL_UART_Receive_IT>
	}
}
 8000cee:	bf00      	nop
 8000cf0:	3708      	adds	r7, #8
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40004400 	.word	0x40004400
 8000cfc:	200001dc 	.word	0x200001dc
 8000d00:	200001c8 	.word	0x200001c8
 8000d04:	2000018c 	.word	0x2000018c
 8000d08:	200002bc 	.word	0x200002bc

08000d0c <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8000d0c:	b580      	push	{r7, lr}
 8000d0e:	b082      	sub	sp, #8
 8000d10:	af00      	add	r7, sp, #0
 8000d12:	6078      	str	r0, [r7, #4]

	// tim3 handles distances
	if (htim->Instance == TIM3){
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
 8000d18:	4a1a      	ldr	r2, [pc, #104]	@ (8000d84 <HAL_TIM_PeriodElapsedCallback+0x78>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d105      	bne.n	8000d2a <HAL_TIM_PeriodElapsedCallback+0x1e>
		Stepper_Stop(&nema_17);
 8000d1e:	481a      	ldr	r0, [pc, #104]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d20:	f000 f8ea 	bl	8000ef8 <Stepper_Stop>
		Stepper_Disable(&nema_17);
 8000d24:	4818      	ldr	r0, [pc, #96]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d26:	f000 f8bd 	bl	8000ea4 <Stepper_Disable>
	}

	if (htim->Instance == TIM6){
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	4a17      	ldr	r2, [pc, #92]	@ (8000d8c <HAL_TIM_PeriodElapsedCallback+0x80>)
 8000d30:	4293      	cmp	r3, r2
 8000d32:	d123      	bne.n	8000d7c <HAL_TIM_PeriodElapsedCallback+0x70>

		if (nema_17.speed < nema_17.speedLimit){
 8000d34:	4b14      	ldr	r3, [pc, #80]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d36:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8000d3a:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d3c:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8000d40:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d48:	d50c      	bpl.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0x58>
			// The division by 100 is due to 100 interrupts per sec
			Stepper_SpeedUp(&nema_17, (float) nema_17.acceleration / 100);
 8000d4a:	4b0f      	ldr	r3, [pc, #60]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d4c:	edd3 7a10 	vldr	s15, [r3, #64]	@ 0x40
 8000d50:	eddf 6a0f 	vldr	s13, [pc, #60]	@ 8000d90 <HAL_TIM_PeriodElapsedCallback+0x84>
 8000d54:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8000d58:	eeb0 0a47 	vmov.f32	s0, s14
 8000d5c:	480a      	ldr	r0, [pc, #40]	@ (8000d88 <HAL_TIM_PeriodElapsedCallback+0x7c>)
 8000d5e:	f000 f9e1 	bl	8001124 <Stepper_SpeedUp>
			HAL_TIM_Base_Stop_IT(&htim6);
			__HAL_TIM_SET_COUNTER(&htim6, 0);
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
		}
	}
}
 8000d62:	e00b      	b.n	8000d7c <HAL_TIM_PeriodElapsedCallback+0x70>
			HAL_TIM_Base_Stop_IT(&htim6);
 8000d64:	480b      	ldr	r0, [pc, #44]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d66:	f002 f8cf 	bl	8002f08 <HAL_TIM_Base_Stop_IT>
			__HAL_TIM_SET_COUNTER(&htim6, 0);
 8000d6a:	4b0a      	ldr	r3, [pc, #40]	@ (8000d94 <HAL_TIM_PeriodElapsedCallback+0x88>)
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	2200      	movs	r2, #0
 8000d70:	625a      	str	r2, [r3, #36]	@ 0x24
			HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_SET);
 8000d72:	2201      	movs	r2, #1
 8000d74:	2120      	movs	r1, #32
 8000d76:	4808      	ldr	r0, [pc, #32]	@ (8000d98 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 8000d78:	f001 f89c 	bl	8001eb4 <HAL_GPIO_WritePin>
}
 8000d7c:	bf00      	nop
 8000d7e:	3708      	adds	r7, #8
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40000400 	.word	0x40000400
 8000d88:	20000148 	.word	0x20000148
 8000d8c:	40001000 	.word	0x40001000
 8000d90:	42c80000 	.word	0x42c80000
 8000d94:	20000274 	.word	0x20000274
 8000d98:	40020000 	.word	0x40020000

08000d9c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000da0:	b672      	cpsid	i
}
 8000da2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000da4:	bf00      	nop
 8000da6:	e7fd      	b.n	8000da4 <Error_Handler+0x8>

08000da8 <Stepper_Init>:

extern TIM_HandleTypeDef htim6;


void Stepper_Init(Stepper* stepper, float stepDist, GPIO_TypeDef* enablePort, uint16_t enablePin, TIM_HandleTypeDef* htim, GPIO_TypeDef* stepPort, uint16_t stepPin, GPIO_TypeDef* dirPort, uint16_t dirPin,
		GPIO_TypeDef* ms1Port, uint16_t ms1Pin, GPIO_TypeDef* ms2Port, uint16_t ms2Pin, GPIO_TypeDef* ms3Port, uint16_t ms3Pin){
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b086      	sub	sp, #24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	6178      	str	r0, [r7, #20]
 8000db0:	ed87 0a04 	vstr	s0, [r7, #16]
 8000db4:	60f9      	str	r1, [r7, #12]
 8000db6:	607b      	str	r3, [r7, #4]
 8000db8:	4613      	mov	r3, r2
 8000dba:	817b      	strh	r3, [r7, #10]
	stepper->htim = htim;
 8000dbc:	697b      	ldr	r3, [r7, #20]
 8000dbe:	687a      	ldr	r2, [r7, #4]
 8000dc0:	601a      	str	r2, [r3, #0]
	stepper->stepDist = stepDist;
 8000dc2:	697b      	ldr	r3, [r7, #20]
 8000dc4:	693a      	ldr	r2, [r7, #16]
 8000dc6:	605a      	str	r2, [r3, #4]
	stepper->enablePort = enablePort;
 8000dc8:	697b      	ldr	r3, [r7, #20]
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	609a      	str	r2, [r3, #8]
	stepper->enablePin = enablePin;
 8000dce:	697b      	ldr	r3, [r7, #20]
 8000dd0:	897a      	ldrh	r2, [r7, #10]
 8000dd2:	819a      	strh	r2, [r3, #12]
	stepper->stepPort = stepPort;
 8000dd4:	697b      	ldr	r3, [r7, #20]
 8000dd6:	6a3a      	ldr	r2, [r7, #32]
 8000dd8:	611a      	str	r2, [r3, #16]
	stepper->stepPin = stepPin;
 8000dda:	697b      	ldr	r3, [r7, #20]
 8000ddc:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8000dde:	829a      	strh	r2, [r3, #20]
	stepper->dirPort = dirPort;
 8000de0:	697b      	ldr	r3, [r7, #20]
 8000de2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000de4:	619a      	str	r2, [r3, #24]
	stepper->dirPin = dirPin;
 8000de6:	697b      	ldr	r3, [r7, #20]
 8000de8:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8000dea:	839a      	strh	r2, [r3, #28]
	stepper->ms1Port = ms1Port;
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8000df0:	621a      	str	r2, [r3, #32]
	stepper->ms1Pin = ms1Pin;
 8000df2:	697b      	ldr	r3, [r7, #20]
 8000df4:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8000df6:	849a      	strh	r2, [r3, #36]	@ 0x24
	stepper->ms2Port = ms2Port;
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000dfc:	629a      	str	r2, [r3, #40]	@ 0x28
	stepper->ms2Pin = ms2Pin;
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	8fba      	ldrh	r2, [r7, #60]	@ 0x3c
 8000e02:	859a      	strh	r2, [r3, #44]	@ 0x2c
	stepper->ms3Port = ms3Port;
 8000e04:	697b      	ldr	r3, [r7, #20]
 8000e06:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8000e08:	631a      	str	r2, [r3, #48]	@ 0x30
	stepper->ms3Pin = ms3Pin;
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	f8b7 2044 	ldrh.w	r2, [r7, #68]	@ 0x44
 8000e10:	869a      	strh	r2, [r3, #52]	@ 0x34

	// Set default not enabled (NOT ENABLED = HIGH)
	HAL_GPIO_WritePin(enablePort, enablePin, GPIO_PIN_SET);
 8000e12:	897b      	ldrh	r3, [r7, #10]
 8000e14:	2201      	movs	r2, #1
 8000e16:	4619      	mov	r1, r3
 8000e18:	68f8      	ldr	r0, [r7, #12]
 8000e1a:	f001 f84b 	bl	8001eb4 <HAL_GPIO_WritePin>

	// Set default speed
	stepper->htim->Instance->ARR = 839999;
 8000e1e:	697b      	ldr	r3, [r7, #20]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	4a14      	ldr	r2, [pc, #80]	@ (8000e78 <Stepper_Init+0xd0>)
 8000e26:	62da      	str	r2, [r3, #44]	@ 0x2c
	stepper->htim->Instance->PSC = 0;
 8000e28:	697b      	ldr	r3, [r7, #20]
 8000e2a:	681b      	ldr	r3, [r3, #0]
 8000e2c:	681b      	ldr	r3, [r3, #0]
 8000e2e:	2200      	movs	r2, #0
 8000e30:	629a      	str	r2, [r3, #40]	@ 0x28
	stepper->speed = (float) clk_freq*stepper->stepDist/((stepper->htim->Instance->ARR+1)*(stepper->htim->Instance->PSC+1));
 8000e32:	697b      	ldr	r3, [r7, #20]
 8000e34:	edd3 7a01 	vldr	s15, [r3, #4]
 8000e38:	ed9f 7a10 	vldr	s14, [pc, #64]	@ 8000e7c <Stepper_Init+0xd4>
 8000e3c:	ee67 6a87 	vmul.f32	s13, s15, s14
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e48:	3301      	adds	r3, #1
 8000e4a:	697a      	ldr	r2, [r7, #20]
 8000e4c:	6812      	ldr	r2, [r2, #0]
 8000e4e:	6812      	ldr	r2, [r2, #0]
 8000e50:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8000e52:	3201      	adds	r2, #1
 8000e54:	fb02 f303 	mul.w	r3, r2, r3
 8000e58:	ee07 3a90 	vmov	s15, r3
 8000e5c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000e60:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000e64:	697b      	ldr	r3, [r7, #20]
 8000e66:	edc3 7a0e 	vstr	s15, [r3, #56]	@ 0x38

	// Set default acceleration
	stepper->acceleration = 30;
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	4a04      	ldr	r2, [pc, #16]	@ (8000e80 <Stepper_Init+0xd8>)
 8000e6e:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8000e70:	bf00      	nop
 8000e72:	3718      	adds	r7, #24
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	000cd13f 	.word	0x000cd13f
 8000e7c:	4ca037a0 	.word	0x4ca037a0
 8000e80:	41f00000 	.word	0x41f00000

08000e84 <Stepper_Enable>:

void Stepper_Enable(Stepper* stepper){
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(stepper->enablePort, stepper->enablePin, GPIO_PIN_RESET);
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6898      	ldr	r0, [r3, #8]
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	899b      	ldrh	r3, [r3, #12]
 8000e94:	2200      	movs	r2, #0
 8000e96:	4619      	mov	r1, r3
 8000e98:	f001 f80c 	bl	8001eb4 <HAL_GPIO_WritePin>
}
 8000e9c:	bf00      	nop
 8000e9e:	3708      	adds	r7, #8
 8000ea0:	46bd      	mov	sp, r7
 8000ea2:	bd80      	pop	{r7, pc}

08000ea4 <Stepper_Disable>:

void Stepper_Disable(Stepper *stepper){
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b082      	sub	sp, #8
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
	HAL_GPIO_WritePin(stepper->enablePort, stepper->enablePin, GPIO_PIN_SET);
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	6898      	ldr	r0, [r3, #8]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	899b      	ldrh	r3, [r3, #12]
 8000eb4:	2201      	movs	r2, #1
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	f000 fffc 	bl	8001eb4 <HAL_GPIO_WritePin>
}
 8000ebc:	bf00      	nop
 8000ebe:	3708      	adds	r7, #8
 8000ec0:	46bd      	mov	sp, r7
 8000ec2:	bd80      	pop	{r7, pc}

08000ec4 <Stepper_Start>:

void Stepper_Start(Stepper* stepper){
 8000ec4:	b580      	push	{r7, lr}
 8000ec6:	b082      	sub	sp, #8
 8000ec8:	af00      	add	r7, sp, #0
 8000eca:	6078      	str	r0, [r7, #4]

	// Reset speed at launching
	Stepper_SetSpeed(stepper, 0);
 8000ecc:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 8000ef0 <Stepper_Start+0x2c>
 8000ed0:	6878      	ldr	r0, [r7, #4]
 8000ed2:	f000 f8cb 	bl	800106c <Stepper_SetSpeed>

	// Start PWM timer which pulses the stepper
	HAL_TIM_PWM_Start(stepper->htim, TIM_CHANNEL_1);
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	2100      	movs	r1, #0
 8000edc:	4618      	mov	r0, r3
 8000ede:	f002 f89b 	bl	8003018 <HAL_TIM_PWM_Start>

	// Start timer responsible for accelerating the stepper
	HAL_TIM_Base_Start_IT(&htim6);
 8000ee2:	4804      	ldr	r0, [pc, #16]	@ (8000ef4 <Stepper_Start+0x30>)
 8000ee4:	f001 ffa0 	bl	8002e28 <HAL_TIM_Base_Start_IT>

}
 8000ee8:	bf00      	nop
 8000eea:	3708      	adds	r7, #8
 8000eec:	46bd      	mov	sp, r7
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	00000000 	.word	0x00000000
 8000ef4:	20000274 	.word	0x20000274

08000ef8 <Stepper_Stop>:

void Stepper_Stop(Stepper* stepper){
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b082      	sub	sp, #8
 8000efc:	af00      	add	r7, sp, #0
 8000efe:	6078      	str	r0, [r7, #4]

	// Start PWM timer which pulses the stepper
	HAL_TIM_PWM_Stop(stepper->htim, TIM_CHANNEL_1);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	2100      	movs	r1, #0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f002 f94e 	bl	80031a8 <HAL_TIM_PWM_Stop>

	// Stop the timer responsible for accelerating the motor
	HAL_TIM_Base_Stop_IT(&htim6);
 8000f0c:	4803      	ldr	r0, [pc, #12]	@ (8000f1c <Stepper_Stop+0x24>)
 8000f0e:	f001 fffb 	bl	8002f08 <HAL_TIM_Base_Stop_IT>
}
 8000f12:	bf00      	nop
 8000f14:	3708      	adds	r7, #8
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	20000274 	.word	0x20000274

08000f20 <Stepper_SetMicroStep>:

void Stepper_SetDirection(Stepper* stepper, Direction direction){
	HAL_GPIO_WritePin(stepper->dirPort, stepper->dirPin, direction);
}

void Stepper_SetMicroStep(Stepper* stepper, MicrosteppingMode divider){
 8000f20:	b580      	push	{r7, lr}
 8000f22:	b082      	sub	sp, #8
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
 8000f28:	460b      	mov	r3, r1
 8000f2a:	70fb      	strb	r3, [r7, #3]
	switch (divider){
 8000f2c:	78fb      	ldrb	r3, [r7, #3]
 8000f2e:	3b01      	subs	r3, #1
 8000f30:	2b0f      	cmp	r3, #15
 8000f32:	f200 8082 	bhi.w	800103a <Stepper_SetMicroStep+0x11a>
 8000f36:	a201      	add	r2, pc, #4	@ (adr r2, 8000f3c <Stepper_SetMicroStep+0x1c>)
 8000f38:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f3c:	08000f7d 	.word	0x08000f7d
 8000f40:	08000fa3 	.word	0x08000fa3
 8000f44:	0800103b 	.word	0x0800103b
 8000f48:	08000fc9 	.word	0x08000fc9
 8000f4c:	0800103b 	.word	0x0800103b
 8000f50:	0800103b 	.word	0x0800103b
 8000f54:	0800103b 	.word	0x0800103b
 8000f58:	08000fef 	.word	0x08000fef
 8000f5c:	0800103b 	.word	0x0800103b
 8000f60:	0800103b 	.word	0x0800103b
 8000f64:	0800103b 	.word	0x0800103b
 8000f68:	0800103b 	.word	0x0800103b
 8000f6c:	0800103b 	.word	0x0800103b
 8000f70:	0800103b 	.word	0x0800103b
 8000f74:	0800103b 	.word	0x0800103b
 8000f78:	08001015 	.word	0x08001015

	case FULL_STEP:
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET);
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f82:	4830      	ldr	r0, [pc, #192]	@ (8001044 <Stepper_SetMicroStep+0x124>)
 8000f84:	f000 ff96 	bl	8001eb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_RESET);
 8000f88:	2200      	movs	r2, #0
 8000f8a:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000f8e:	482d      	ldr	r0, [pc, #180]	@ (8001044 <Stepper_SetMicroStep+0x124>)
 8000f90:	f000 ff90 	bl	8001eb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 8000f94:	2200      	movs	r2, #0
 8000f96:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f9a:	482b      	ldr	r0, [pc, #172]	@ (8001048 <Stepper_SetMicroStep+0x128>)
 8000f9c:	f000 ff8a 	bl	8001eb4 <HAL_GPIO_WritePin>
		break;
 8000fa0:	e04c      	b.n	800103c <Stepper_SetMicroStep+0x11c>
	case HALF_STEP:
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_SET);
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fa8:	4826      	ldr	r0, [pc, #152]	@ (8001044 <Stepper_SetMicroStep+0x124>)
 8000faa:	f000 ff83 	bl	8001eb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fb4:	4823      	ldr	r0, [pc, #140]	@ (8001044 <Stepper_SetMicroStep+0x124>)
 8000fb6:	f000 ff7d 	bl	8001eb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fc0:	4821      	ldr	r0, [pc, #132]	@ (8001048 <Stepper_SetMicroStep+0x128>)
 8000fc2:	f000 ff77 	bl	8001eb4 <HAL_GPIO_WritePin>
		break;
 8000fc6:	e039      	b.n	800103c <Stepper_SetMicroStep+0x11c>
	case QUARTER_STEP:
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_RESET);
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fce:	481d      	ldr	r0, [pc, #116]	@ (8001044 <Stepper_SetMicroStep+0x124>)
 8000fd0:	f000 ff70 	bl	8001eb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 8000fd4:	2201      	movs	r2, #1
 8000fd6:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000fda:	481a      	ldr	r0, [pc, #104]	@ (8001044 <Stepper_SetMicroStep+0x124>)
 8000fdc:	f000 ff6a 	bl	8001eb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fe6:	4818      	ldr	r0, [pc, #96]	@ (8001048 <Stepper_SetMicroStep+0x128>)
 8000fe8:	f000 ff64 	bl	8001eb4 <HAL_GPIO_WritePin>
		break;
 8000fec:	e026      	b.n	800103c <Stepper_SetMicroStep+0x11c>
	case EIGHTH_STEP:
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_SET);
 8000fee:	2201      	movs	r2, #1
 8000ff0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000ff4:	4813      	ldr	r0, [pc, #76]	@ (8001044 <Stepper_SetMicroStep+0x124>)
 8000ff6:	f000 ff5d 	bl	8001eb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 8000ffa:	2201      	movs	r2, #1
 8000ffc:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001000:	4810      	ldr	r0, [pc, #64]	@ (8001044 <Stepper_SetMicroStep+0x124>)
 8001002:	f000 ff57 	bl	8001eb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_RESET);
 8001006:	2200      	movs	r2, #0
 8001008:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800100c:	480e      	ldr	r0, [pc, #56]	@ (8001048 <Stepper_SetMicroStep+0x128>)
 800100e:	f000 ff51 	bl	8001eb4 <HAL_GPIO_WritePin>
		break;
 8001012:	e013      	b.n	800103c <Stepper_SetMicroStep+0x11c>
	case SIXTEENTH_STEP:
		HAL_GPIO_WritePin(MS1_GPIO_Port, MS1_Pin, GPIO_PIN_SET);
 8001014:	2201      	movs	r2, #1
 8001016:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800101a:	480a      	ldr	r0, [pc, #40]	@ (8001044 <Stepper_SetMicroStep+0x124>)
 800101c:	f000 ff4a 	bl	8001eb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS2_GPIO_Port, MS2_Pin, GPIO_PIN_SET);
 8001020:	2201      	movs	r2, #1
 8001022:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8001026:	4807      	ldr	r0, [pc, #28]	@ (8001044 <Stepper_SetMicroStep+0x124>)
 8001028:	f000 ff44 	bl	8001eb4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(MS3_GPIO_Port, MS3_Pin, GPIO_PIN_SET);
 800102c:	2201      	movs	r2, #1
 800102e:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001032:	4805      	ldr	r0, [pc, #20]	@ (8001048 <Stepper_SetMicroStep+0x128>)
 8001034:	f000 ff3e 	bl	8001eb4 <HAL_GPIO_WritePin>
		break;
 8001038:	e000      	b.n	800103c <Stepper_SetMicroStep+0x11c>
	default:
		break;
 800103a:	bf00      	nop
	}
}
 800103c:	bf00      	nop
 800103e:	3708      	adds	r7, #8
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40020000 	.word	0x40020000
 8001048:	40020400 	.word	0x40020400

0800104c <Stepper_SetSpeedLimit>:

void Stepper_SetSpeedLimit(Stepper* stepper, float speedLimit){
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
 8001054:	ed87 0a00 	vstr	s0, [r7]
	stepper->speedLimit = speedLimit;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	683a      	ldr	r2, [r7, #0]
 800105c:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
	...

0800106c <Stepper_SetSpeed>:

void Stepper_SetSpeed(Stepper* stepper, float speed){
 800106c:	b480      	push	{r7}
 800106e:	b083      	sub	sp, #12
 8001070:	af00      	add	r7, sp, #0
 8001072:	6078      	str	r0, [r7, #4]
 8001074:	ed87 0a00 	vstr	s0, [r7]
	stepper->speed = speed;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	683a      	ldr	r2, [r7, #0]
 800107c:	639a      	str	r2, [r3, #56]	@ 0x38
	// resetting the CNT to avoid CNT>ARR when speeding up (ARR decreases)
	__HAL_TIM_SET_COUNTER(stepper->htim,0);
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	681b      	ldr	r3, [r3, #0]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	2200      	movs	r2, #0
 8001086:	625a      	str	r2, [r3, #36]	@ 0x24
	__HAL_TIM_SET_AUTORELOAD(stepper->htim, (uint32_t) clk_freq*stepper->stepDist/(stepper->speed*(stepper->htim->Instance->PSC+1))-1);
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	edd3 7a01 	vldr	s15, [r3, #4]
 800108e:	ed9f 7a24 	vldr	s14, [pc, #144]	@ 8001120 <Stepper_SetSpeed+0xb4>
 8001092:	ee67 6a87 	vmul.f32	s13, s15, s14
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010a4:	3301      	adds	r3, #1
 80010a6:	ee07 3a90 	vmov	s15, r3
 80010aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010b6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80010ba:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010c8:	ee17 2a90 	vmov	r2, s15
 80010cc:	62da      	str	r2, [r3, #44]	@ 0x2c
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80010d4:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 8001120 <Stepper_SetSpeed+0xb4>
 80010d8:	ee67 6a87 	vmul.f32	s13, s15, s14
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80010ea:	3301      	adds	r3, #1
 80010ec:	ee07 3a90 	vmov	s15, r3
 80010f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80010f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80010fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001100:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800110c:	ee17 2a90 	vmov	r2, s15
 8001110:	60da      	str	r2, [r3, #12]
}
 8001112:	bf00      	nop
 8001114:	370c      	adds	r7, #12
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	4ca037a0 	.word	0x4ca037a0

08001124 <Stepper_SpeedUp>:

void Stepper_SpeedUp(Stepper *stepper, float deltaSpeed){
 8001124:	b580      	push	{r7, lr}
 8001126:	b082      	sub	sp, #8
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
 800112c:	ed87 0a00 	vstr	s0, [r7]
	Stepper_SetSpeed(stepper, stepper->speed + deltaSpeed);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	ed93 7a0e 	vldr	s14, [r3, #56]	@ 0x38
 8001136:	edd7 7a00 	vldr	s15, [r7]
 800113a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800113e:	eeb0 0a67 	vmov.f32	s0, s15
 8001142:	6878      	ldr	r0, [r7, #4]
 8001144:	f7ff ff92 	bl	800106c <Stepper_SetSpeed>
}
 8001148:	bf00      	nop
 800114a:	3708      	adds	r7, #8
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}

08001150 <Stepper_SetAcceleration>:

void Stepper_SetAcceleration(Stepper *stepper, float acceleration){
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	ed87 0a00 	vstr	s0, [r7]
	stepper->acceleration = acceleration;
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	683a      	ldr	r2, [r7, #0]
 8001160:	641a      	str	r2, [r3, #64]	@ 0x40
}
 8001162:	bf00      	nop
 8001164:	370c      	adds	r7, #12
 8001166:	46bd      	mov	sp, r7
 8001168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800116c:	4770      	bx	lr
	...

08001170 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b10      	ldr	r3, [pc, #64]	@ (80011bc <HAL_MspInit+0x4c>)
 800117c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800117e:	4a0f      	ldr	r2, [pc, #60]	@ (80011bc <HAL_MspInit+0x4c>)
 8001180:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001184:	6453      	str	r3, [r2, #68]	@ 0x44
 8001186:	4b0d      	ldr	r3, [pc, #52]	@ (80011bc <HAL_MspInit+0x4c>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800118a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b09      	ldr	r3, [pc, #36]	@ (80011bc <HAL_MspInit+0x4c>)
 8001198:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800119a:	4a08      	ldr	r2, [pc, #32]	@ (80011bc <HAL_MspInit+0x4c>)
 800119c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80011a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80011a2:	4b06      	ldr	r3, [pc, #24]	@ (80011bc <HAL_MspInit+0x4c>)
 80011a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80011a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80011ae:	2007      	movs	r0, #7
 80011b0:	f000 fc18 	bl	80019e4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011b4:	bf00      	nop
 80011b6:	3708      	adds	r7, #8
 80011b8:	46bd      	mov	sp, r7
 80011ba:	bd80      	pop	{r7, pc}
 80011bc:	40023800 	.word	0x40023800

080011c0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <NMI_Handler+0x4>

080011c8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011c8:	b480      	push	{r7}
 80011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011cc:	bf00      	nop
 80011ce:	e7fd      	b.n	80011cc <HardFault_Handler+0x4>

080011d0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011d4:	bf00      	nop
 80011d6:	e7fd      	b.n	80011d4 <MemManage_Handler+0x4>

080011d8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011d8:	b480      	push	{r7}
 80011da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011dc:	bf00      	nop
 80011de:	e7fd      	b.n	80011dc <BusFault_Handler+0x4>

080011e0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011e0:	b480      	push	{r7}
 80011e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011e4:	bf00      	nop
 80011e6:	e7fd      	b.n	80011e4 <UsageFault_Handler+0x4>

080011e8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011e8:	b480      	push	{r7}
 80011ea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ec:	bf00      	nop
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011f6:	b480      	push	{r7}
 80011f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011fa:	bf00      	nop
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001204:	b480      	push	{r7}
 8001206:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	46bd      	mov	sp, r7
 800120c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001210:	4770      	bx	lr

08001212 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001212:	b580      	push	{r7, lr}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001216:	f000 faf5 	bl	8001804 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
	...

08001220 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001224:	4802      	ldr	r0, [pc, #8]	@ (8001230 <TIM3_IRQHandler+0x10>)
 8001226:	f002 f82f 	bl	8003288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	2000022c 	.word	0x2000022c

08001234 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001238:	4802      	ldr	r0, [pc, #8]	@ (8001244 <USART2_IRQHandler+0x10>)
 800123a:	f002 fff1 	bl	8004220 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800123e:	bf00      	nop
 8001240:	bd80      	pop	{r7, pc}
 8001242:	bf00      	nop
 8001244:	200002bc 	.word	0x200002bc

08001248 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 800124c:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001250:	f000 fe4a 	bl	8001ee8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001254:	bf00      	nop
 8001256:	bd80      	pop	{r7, pc}

08001258 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt and DAC1, DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800125c:	4802      	ldr	r0, [pc, #8]	@ (8001268 <TIM6_DAC_IRQHandler+0x10>)
 800125e:	f002 f813 	bl	8003288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001262:	bf00      	nop
 8001264:	bd80      	pop	{r7, pc}
 8001266:	bf00      	nop
 8001268:	20000274 	.word	0x20000274

0800126c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b086      	sub	sp, #24
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001274:	4a14      	ldr	r2, [pc, #80]	@ (80012c8 <_sbrk+0x5c>)
 8001276:	4b15      	ldr	r3, [pc, #84]	@ (80012cc <_sbrk+0x60>)
 8001278:	1ad3      	subs	r3, r2, r3
 800127a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001280:	4b13      	ldr	r3, [pc, #76]	@ (80012d0 <_sbrk+0x64>)
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	2b00      	cmp	r3, #0
 8001286:	d102      	bne.n	800128e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001288:	4b11      	ldr	r3, [pc, #68]	@ (80012d0 <_sbrk+0x64>)
 800128a:	4a12      	ldr	r2, [pc, #72]	@ (80012d4 <_sbrk+0x68>)
 800128c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800128e:	4b10      	ldr	r3, [pc, #64]	@ (80012d0 <_sbrk+0x64>)
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	4413      	add	r3, r2
 8001296:	693a      	ldr	r2, [r7, #16]
 8001298:	429a      	cmp	r2, r3
 800129a:	d207      	bcs.n	80012ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800129c:	f003 fef2 	bl	8005084 <__errno>
 80012a0:	4603      	mov	r3, r0
 80012a2:	220c      	movs	r2, #12
 80012a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80012a6:	f04f 33ff 	mov.w	r3, #4294967295
 80012aa:	e009      	b.n	80012c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012ac:	4b08      	ldr	r3, [pc, #32]	@ (80012d0 <_sbrk+0x64>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012b2:	4b07      	ldr	r3, [pc, #28]	@ (80012d0 <_sbrk+0x64>)
 80012b4:	681a      	ldr	r2, [r3, #0]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	4413      	add	r3, r2
 80012ba:	4a05      	ldr	r2, [pc, #20]	@ (80012d0 <_sbrk+0x64>)
 80012bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012be:	68fb      	ldr	r3, [r7, #12]
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	3718      	adds	r7, #24
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20020000 	.word	0x20020000
 80012cc:	00000400 	.word	0x00000400
 80012d0:	200001e0 	.word	0x200001e0
 80012d4:	20000450 	.word	0x20000450

080012d8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012d8:	b480      	push	{r7}
 80012da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012dc:	4b06      	ldr	r3, [pc, #24]	@ (80012f8 <SystemInit+0x20>)
 80012de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012e2:	4a05      	ldr	r2, [pc, #20]	@ (80012f8 <SystemInit+0x20>)
 80012e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012ec:	bf00      	nop
 80012ee:	46bd      	mov	sp, r7
 80012f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f4:	4770      	bx	lr
 80012f6:	bf00      	nop
 80012f8:	e000ed00 	.word	0xe000ed00

080012fc <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08e      	sub	sp, #56	@ 0x38
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001302:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]
 800130c:	609a      	str	r2, [r3, #8]
 800130e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001310:	f107 0320 	add.w	r3, r7, #32
 8001314:	2200      	movs	r2, #0
 8001316:	601a      	str	r2, [r3, #0]
 8001318:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800131a:	1d3b      	adds	r3, r7, #4
 800131c:	2200      	movs	r2, #0
 800131e:	601a      	str	r2, [r3, #0]
 8001320:	605a      	str	r2, [r3, #4]
 8001322:	609a      	str	r2, [r3, #8]
 8001324:	60da      	str	r2, [r3, #12]
 8001326:	611a      	str	r2, [r3, #16]
 8001328:	615a      	str	r2, [r3, #20]
 800132a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800132c:	4b2d      	ldr	r3, [pc, #180]	@ (80013e4 <MX_TIM2_Init+0xe8>)
 800132e:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001332:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001334:	4b2b      	ldr	r3, [pc, #172]	@ (80013e4 <MX_TIM2_Init+0xe8>)
 8001336:	2200      	movs	r2, #0
 8001338:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800133a:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <MX_TIM2_Init+0xe8>)
 800133c:	2200      	movs	r2, #0
 800133e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 839999;
 8001340:	4b28      	ldr	r3, [pc, #160]	@ (80013e4 <MX_TIM2_Init+0xe8>)
 8001342:	4a29      	ldr	r2, [pc, #164]	@ (80013e8 <MX_TIM2_Init+0xec>)
 8001344:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001346:	4b27      	ldr	r3, [pc, #156]	@ (80013e4 <MX_TIM2_Init+0xe8>)
 8001348:	2200      	movs	r2, #0
 800134a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800134c:	4b25      	ldr	r3, [pc, #148]	@ (80013e4 <MX_TIM2_Init+0xe8>)
 800134e:	2200      	movs	r2, #0
 8001350:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001352:	4824      	ldr	r0, [pc, #144]	@ (80013e4 <MX_TIM2_Init+0xe8>)
 8001354:	f001 fd18 	bl	8002d88 <HAL_TIM_Base_Init>
 8001358:	4603      	mov	r3, r0
 800135a:	2b00      	cmp	r3, #0
 800135c:	d001      	beq.n	8001362 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800135e:	f7ff fd1d 	bl	8000d9c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001362:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001366:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001368:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800136c:	4619      	mov	r1, r3
 800136e:	481d      	ldr	r0, [pc, #116]	@ (80013e4 <MX_TIM2_Init+0xe8>)
 8001370:	f002 f93c 	bl	80035ec <HAL_TIM_ConfigClockSource>
 8001374:	4603      	mov	r3, r0
 8001376:	2b00      	cmp	r3, #0
 8001378:	d001      	beq.n	800137e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800137a:	f7ff fd0f 	bl	8000d9c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800137e:	4819      	ldr	r0, [pc, #100]	@ (80013e4 <MX_TIM2_Init+0xe8>)
 8001380:	f001 fdf1 	bl	8002f66 <HAL_TIM_PWM_Init>
 8001384:	4603      	mov	r3, r0
 8001386:	2b00      	cmp	r3, #0
 8001388:	d001      	beq.n	800138e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800138a:	f7ff fd07 	bl	8000d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800138e:	2320      	movs	r3, #32
 8001390:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001392:	2380      	movs	r3, #128	@ 0x80
 8001394:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001396:	f107 0320 	add.w	r3, r7, #32
 800139a:	4619      	mov	r1, r3
 800139c:	4811      	ldr	r0, [pc, #68]	@ (80013e4 <MX_TIM2_Init+0xe8>)
 800139e:	f002 fe03 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80013a2:	4603      	mov	r3, r0
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d001      	beq.n	80013ac <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 80013a8:	f7ff fcf8 	bl	8000d9c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013ac:	2360      	movs	r3, #96	@ 0x60
 80013ae:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10000;
 80013b0:	f242 7310 	movw	r3, #10000	@ 0x2710
 80013b4:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013b6:	2300      	movs	r3, #0
 80013b8:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2200      	movs	r2, #0
 80013c2:	4619      	mov	r1, r3
 80013c4:	4807      	ldr	r0, [pc, #28]	@ (80013e4 <MX_TIM2_Init+0xe8>)
 80013c6:	f002 f84f 	bl	8003468 <HAL_TIM_PWM_ConfigChannel>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80013d0:	f7ff fce4 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80013d4:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <MX_TIM2_Init+0xe8>)
 80013d6:	f000 f8e7 	bl	80015a8 <HAL_TIM_MspPostInit>

}
 80013da:	bf00      	nop
 80013dc:	3738      	adds	r7, #56	@ 0x38
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200001e4 	.word	0x200001e4
 80013e8:	000cd13f 	.word	0x000cd13f

080013ec <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b088      	sub	sp, #32
 80013f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80013f2:	f107 030c 	add.w	r3, r7, #12
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
 8001400:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001402:	1d3b      	adds	r3, r7, #4
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800140a:	4b1d      	ldr	r3, [pc, #116]	@ (8001480 <MX_TIM3_Init+0x94>)
 800140c:	4a1d      	ldr	r2, [pc, #116]	@ (8001484 <MX_TIM3_Init+0x98>)
 800140e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001410:	4b1b      	ldr	r3, [pc, #108]	@ (8001480 <MX_TIM3_Init+0x94>)
 8001412:	2200      	movs	r2, #0
 8001414:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b1a      	ldr	r3, [pc, #104]	@ (8001480 <MX_TIM3_Init+0x94>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 200;
 800141c:	4b18      	ldr	r3, [pc, #96]	@ (8001480 <MX_TIM3_Init+0x94>)
 800141e:	22c8      	movs	r2, #200	@ 0xc8
 8001420:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001422:	4b17      	ldr	r3, [pc, #92]	@ (8001480 <MX_TIM3_Init+0x94>)
 8001424:	2200      	movs	r2, #0
 8001426:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001428:	4b15      	ldr	r3, [pc, #84]	@ (8001480 <MX_TIM3_Init+0x94>)
 800142a:	2200      	movs	r2, #0
 800142c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800142e:	4814      	ldr	r0, [pc, #80]	@ (8001480 <MX_TIM3_Init+0x94>)
 8001430:	f001 fcaa 	bl	8002d88 <HAL_TIM_Base_Init>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 800143a:	f7ff fcaf 	bl	8000d9c <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_EXTERNAL1;
 800143e:	2307      	movs	r3, #7
 8001440:	60fb      	str	r3, [r7, #12]
  sSlaveConfig.InputTrigger = TIM_TS_ITR1;
 8001442:	2310      	movs	r3, #16
 8001444:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_SlaveConfigSynchro(&htim3, &sSlaveConfig) != HAL_OK)
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4619      	mov	r1, r3
 800144c:	480c      	ldr	r0, [pc, #48]	@ (8001480 <MX_TIM3_Init+0x94>)
 800144e:	f002 f994 	bl	800377a <HAL_TIM_SlaveConfigSynchro>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 8001458:	f7ff fca0 	bl	8000d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001464:	1d3b      	adds	r3, r7, #4
 8001466:	4619      	mov	r1, r3
 8001468:	4805      	ldr	r0, [pc, #20]	@ (8001480 <MX_TIM3_Init+0x94>)
 800146a:	f002 fd9d 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 8001474:	f7ff fc92 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001478:	bf00      	nop
 800147a:	3720      	adds	r7, #32
 800147c:	46bd      	mov	sp, r7
 800147e:	bd80      	pop	{r7, pc}
 8001480:	2000022c 	.word	0x2000022c
 8001484:	40000400 	.word	0x40000400

08001488 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800148e:	463b      	mov	r3, r7
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <MX_TIM6_Init+0x64>)
 8001498:	4a15      	ldr	r2, [pc, #84]	@ (80014f0 <MX_TIM6_Init+0x68>)
 800149a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 1000;
 800149c:	4b13      	ldr	r3, [pc, #76]	@ (80014ec <MX_TIM6_Init+0x64>)
 800149e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80014a2:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014a4:	4b11      	ldr	r3, [pc, #68]	@ (80014ec <MX_TIM6_Init+0x64>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 8400;
 80014aa:	4b10      	ldr	r3, [pc, #64]	@ (80014ec <MX_TIM6_Init+0x64>)
 80014ac:	f242 02d0 	movw	r2, #8400	@ 0x20d0
 80014b0:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014b2:	4b0e      	ldr	r3, [pc, #56]	@ (80014ec <MX_TIM6_Init+0x64>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80014b8:	480c      	ldr	r0, [pc, #48]	@ (80014ec <MX_TIM6_Init+0x64>)
 80014ba:	f001 fc65 	bl	8002d88 <HAL_TIM_Base_Init>
 80014be:	4603      	mov	r3, r0
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d001      	beq.n	80014c8 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80014c4:	f7ff fc6a 	bl	8000d9c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014c8:	2300      	movs	r3, #0
 80014ca:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014cc:	2300      	movs	r3, #0
 80014ce:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80014d0:	463b      	mov	r3, r7
 80014d2:	4619      	mov	r1, r3
 80014d4:	4805      	ldr	r0, [pc, #20]	@ (80014ec <MX_TIM6_Init+0x64>)
 80014d6:	f002 fd67 	bl	8003fa8 <HAL_TIMEx_MasterConfigSynchronization>
 80014da:	4603      	mov	r3, r0
 80014dc:	2b00      	cmp	r3, #0
 80014de:	d001      	beq.n	80014e4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 80014e0:	f7ff fc5c 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80014e4:	bf00      	nop
 80014e6:	3708      	adds	r7, #8
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	20000274 	.word	0x20000274
 80014f0:	40001000 	.word	0x40001000

080014f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b086      	sub	sp, #24
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001504:	d10e      	bne.n	8001524 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	617b      	str	r3, [r7, #20]
 800150a:	4b24      	ldr	r3, [pc, #144]	@ (800159c <HAL_TIM_Base_MspInit+0xa8>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150e:	4a23      	ldr	r2, [pc, #140]	@ (800159c <HAL_TIM_Base_MspInit+0xa8>)
 8001510:	f043 0301 	orr.w	r3, r3, #1
 8001514:	6413      	str	r3, [r2, #64]	@ 0x40
 8001516:	4b21      	ldr	r3, [pc, #132]	@ (800159c <HAL_TIM_Base_MspInit+0xa8>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800151a:	f003 0301 	and.w	r3, r3, #1
 800151e:	617b      	str	r3, [r7, #20]
 8001520:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001522:	e036      	b.n	8001592 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM3)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	4a1d      	ldr	r2, [pc, #116]	@ (80015a0 <HAL_TIM_Base_MspInit+0xac>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d116      	bne.n	800155c <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	613b      	str	r3, [r7, #16]
 8001532:	4b1a      	ldr	r3, [pc, #104]	@ (800159c <HAL_TIM_Base_MspInit+0xa8>)
 8001534:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001536:	4a19      	ldr	r2, [pc, #100]	@ (800159c <HAL_TIM_Base_MspInit+0xa8>)
 8001538:	f043 0302 	orr.w	r3, r3, #2
 800153c:	6413      	str	r3, [r2, #64]	@ 0x40
 800153e:	4b17      	ldr	r3, [pc, #92]	@ (800159c <HAL_TIM_Base_MspInit+0xa8>)
 8001540:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	613b      	str	r3, [r7, #16]
 8001548:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800154a:	2200      	movs	r2, #0
 800154c:	2100      	movs	r1, #0
 800154e:	201d      	movs	r0, #29
 8001550:	f000 fa53 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001554:	201d      	movs	r0, #29
 8001556:	f000 fa6c 	bl	8001a32 <HAL_NVIC_EnableIRQ>
}
 800155a:	e01a      	b.n	8001592 <HAL_TIM_Base_MspInit+0x9e>
  else if(tim_baseHandle->Instance==TIM6)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a10      	ldr	r2, [pc, #64]	@ (80015a4 <HAL_TIM_Base_MspInit+0xb0>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d115      	bne.n	8001592 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	60fb      	str	r3, [r7, #12]
 800156a:	4b0c      	ldr	r3, [pc, #48]	@ (800159c <HAL_TIM_Base_MspInit+0xa8>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156e:	4a0b      	ldr	r2, [pc, #44]	@ (800159c <HAL_TIM_Base_MspInit+0xa8>)
 8001570:	f043 0310 	orr.w	r3, r3, #16
 8001574:	6413      	str	r3, [r2, #64]	@ 0x40
 8001576:	4b09      	ldr	r3, [pc, #36]	@ (800159c <HAL_TIM_Base_MspInit+0xa8>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800157a:	f003 0310 	and.w	r3, r3, #16
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2036      	movs	r0, #54	@ 0x36
 8001588:	f000 fa37 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800158c:	2036      	movs	r0, #54	@ 0x36
 800158e:	f000 fa50 	bl	8001a32 <HAL_NVIC_EnableIRQ>
}
 8001592:	bf00      	nop
 8001594:	3718      	adds	r7, #24
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	40023800 	.word	0x40023800
 80015a0:	40000400 	.word	0x40000400
 80015a4:	40001000 	.word	0x40001000

080015a8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b0:	f107 030c 	add.w	r3, r7, #12
 80015b4:	2200      	movs	r2, #0
 80015b6:	601a      	str	r2, [r3, #0]
 80015b8:	605a      	str	r2, [r3, #4]
 80015ba:	609a      	str	r2, [r3, #8]
 80015bc:	60da      	str	r2, [r3, #12]
 80015be:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80015c8:	d11d      	bne.n	8001606 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b10      	ldr	r3, [pc, #64]	@ (8001610 <HAL_TIM_MspPostInit+0x68>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a0f      	ldr	r2, [pc, #60]	@ (8001610 <HAL_TIM_MspPostInit+0x68>)
 80015d4:	f043 0301 	orr.w	r3, r3, #1
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <HAL_TIM_MspPostInit+0x68>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0301 	and.w	r3, r3, #1
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015e6:	2301      	movs	r3, #1
 80015e8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015f2:	2300      	movs	r3, #0
 80015f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80015f6:	2301      	movs	r3, #1
 80015f8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 030c 	add.w	r3, r7, #12
 80015fe:	4619      	mov	r1, r3
 8001600:	4804      	ldr	r0, [pc, #16]	@ (8001614 <HAL_TIM_MspPostInit+0x6c>)
 8001602:	f000 fac3 	bl	8001b8c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001606:	bf00      	nop
 8001608:	3720      	adds	r7, #32
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	40023800 	.word	0x40023800
 8001614:	40020000 	.word	0x40020000

08001618 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800161c:	4b11      	ldr	r3, [pc, #68]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 800161e:	4a12      	ldr	r2, [pc, #72]	@ (8001668 <MX_USART2_UART_Init+0x50>)
 8001620:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001622:	4b10      	ldr	r3, [pc, #64]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 8001624:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001628:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800162a:	4b0e      	ldr	r3, [pc, #56]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 800162c:	2200      	movs	r2, #0
 800162e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001630:	4b0c      	ldr	r3, [pc, #48]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 8001632:	2200      	movs	r2, #0
 8001634:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001636:	4b0b      	ldr	r3, [pc, #44]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 8001638:	2200      	movs	r2, #0
 800163a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800163c:	4b09      	ldr	r3, [pc, #36]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 800163e:	220c      	movs	r2, #12
 8001640:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001642:	4b08      	ldr	r3, [pc, #32]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001648:	4b06      	ldr	r3, [pc, #24]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 800164a:	2200      	movs	r2, #0
 800164c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800164e:	4805      	ldr	r0, [pc, #20]	@ (8001664 <MX_USART2_UART_Init+0x4c>)
 8001650:	f002 fd3a 	bl	80040c8 <HAL_UART_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	2b00      	cmp	r3, #0
 8001658:	d001      	beq.n	800165e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800165a:	f7ff fb9f 	bl	8000d9c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800165e:	bf00      	nop
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	200002bc 	.word	0x200002bc
 8001668:	40004400 	.word	0x40004400

0800166c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	@ 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART2)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a1d      	ldr	r2, [pc, #116]	@ (8001700 <HAL_UART_MspInit+0x94>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d133      	bne.n	80016f6 <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b1c      	ldr	r3, [pc, #112]	@ (8001704 <HAL_UART_MspInit+0x98>)
 8001694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001696:	4a1b      	ldr	r2, [pc, #108]	@ (8001704 <HAL_UART_MspInit+0x98>)
 8001698:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800169c:	6413      	str	r3, [r2, #64]	@ 0x40
 800169e:	4b19      	ldr	r3, [pc, #100]	@ (8001704 <HAL_UART_MspInit+0x98>)
 80016a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b15      	ldr	r3, [pc, #84]	@ (8001704 <HAL_UART_MspInit+0x98>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016b2:	4a14      	ldr	r2, [pc, #80]	@ (8001704 <HAL_UART_MspInit+0x98>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80016ba:	4b12      	ldr	r3, [pc, #72]	@ (8001704 <HAL_UART_MspInit+0x98>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80016c6:	230c      	movs	r3, #12
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80016d6:	2307      	movs	r3, #7
 80016d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	4809      	ldr	r0, [pc, #36]	@ (8001708 <HAL_UART_MspInit+0x9c>)
 80016e2:	f000 fa53 	bl	8001b8c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80016e6:	2200      	movs	r2, #0
 80016e8:	2100      	movs	r1, #0
 80016ea:	2026      	movs	r0, #38	@ 0x26
 80016ec:	f000 f985 	bl	80019fa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80016f0:	2026      	movs	r0, #38	@ 0x26
 80016f2:	f000 f99e 	bl	8001a32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80016f6:	bf00      	nop
 80016f8:	3728      	adds	r7, #40	@ 0x28
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}
 80016fe:	bf00      	nop
 8001700:	40004400 	.word	0x40004400
 8001704:	40023800 	.word	0x40023800
 8001708:	40020000 	.word	0x40020000

0800170c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800170c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001744 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001710:	f7ff fde2 	bl	80012d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001714:	480c      	ldr	r0, [pc, #48]	@ (8001748 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001716:	490d      	ldr	r1, [pc, #52]	@ (800174c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001718:	4a0d      	ldr	r2, [pc, #52]	@ (8001750 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800171a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800171c:	e002      	b.n	8001724 <LoopCopyDataInit>

0800171e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800171e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001720:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001722:	3304      	adds	r3, #4

08001724 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001724:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001726:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001728:	d3f9      	bcc.n	800171e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800172a:	4a0a      	ldr	r2, [pc, #40]	@ (8001754 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800172c:	4c0a      	ldr	r4, [pc, #40]	@ (8001758 <LoopFillZerobss+0x22>)
  movs r3, #0
 800172e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001730:	e001      	b.n	8001736 <LoopFillZerobss>

08001732 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001732:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001734:	3204      	adds	r2, #4

08001736 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001736:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001738:	d3fb      	bcc.n	8001732 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800173a:	f003 fca9 	bl	8005090 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800173e:	f7ff f9d5 	bl	8000aec <main>
  bx  lr    
 8001742:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001744:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001748:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800174c:	200000d8 	.word	0x200000d8
  ldr r2, =_sidata
 8001750:	08005df0 	.word	0x08005df0
  ldr r2, =_sbss
 8001754:	200000d8 	.word	0x200000d8
  ldr r4, =_ebss
 8001758:	20000450 	.word	0x20000450

0800175c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800175c:	e7fe      	b.n	800175c <ADC_IRQHandler>
	...

08001760 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001760:	b580      	push	{r7, lr}
 8001762:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001764:	4b0e      	ldr	r3, [pc, #56]	@ (80017a0 <HAL_Init+0x40>)
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	4a0d      	ldr	r2, [pc, #52]	@ (80017a0 <HAL_Init+0x40>)
 800176a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800176e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001770:	4b0b      	ldr	r3, [pc, #44]	@ (80017a0 <HAL_Init+0x40>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a0a      	ldr	r2, [pc, #40]	@ (80017a0 <HAL_Init+0x40>)
 8001776:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800177a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800177c:	4b08      	ldr	r3, [pc, #32]	@ (80017a0 <HAL_Init+0x40>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	4a07      	ldr	r2, [pc, #28]	@ (80017a0 <HAL_Init+0x40>)
 8001782:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001786:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001788:	2003      	movs	r0, #3
 800178a:	f000 f92b 	bl	80019e4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800178e:	2000      	movs	r0, #0
 8001790:	f000 f808 	bl	80017a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001794:	f7ff fcec 	bl	8001170 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001798:	2300      	movs	r3, #0
}
 800179a:	4618      	mov	r0, r3
 800179c:	bd80      	pop	{r7, pc}
 800179e:	bf00      	nop
 80017a0:	40023c00 	.word	0x40023c00

080017a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
 80017aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017ac:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <HAL_InitTick+0x54>)
 80017ae:	681a      	ldr	r2, [r3, #0]
 80017b0:	4b12      	ldr	r3, [pc, #72]	@ (80017fc <HAL_InitTick+0x58>)
 80017b2:	781b      	ldrb	r3, [r3, #0]
 80017b4:	4619      	mov	r1, r3
 80017b6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80017ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80017be:	fbb2 f3f3 	udiv	r3, r2, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	f000 f943 	bl	8001a4e <HAL_SYSTICK_Config>
 80017c8:	4603      	mov	r3, r0
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d001      	beq.n	80017d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017ce:	2301      	movs	r3, #1
 80017d0:	e00e      	b.n	80017f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	2b0f      	cmp	r3, #15
 80017d6:	d80a      	bhi.n	80017ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80017d8:	2200      	movs	r2, #0
 80017da:	6879      	ldr	r1, [r7, #4]
 80017dc:	f04f 30ff 	mov.w	r0, #4294967295
 80017e0:	f000 f90b 	bl	80019fa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80017e4:	4a06      	ldr	r2, [pc, #24]	@ (8001800 <HAL_InitTick+0x5c>)
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
 80017ec:	e000      	b.n	80017f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
}
 80017f0:	4618      	mov	r0, r3
 80017f2:	3708      	adds	r7, #8
 80017f4:	46bd      	mov	sp, r7
 80017f6:	bd80      	pop	{r7, pc}
 80017f8:	2000007c 	.word	0x2000007c
 80017fc:	20000084 	.word	0x20000084
 8001800:	20000080 	.word	0x20000080

08001804 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001808:	4b06      	ldr	r3, [pc, #24]	@ (8001824 <HAL_IncTick+0x20>)
 800180a:	781b      	ldrb	r3, [r3, #0]
 800180c:	461a      	mov	r2, r3
 800180e:	4b06      	ldr	r3, [pc, #24]	@ (8001828 <HAL_IncTick+0x24>)
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4413      	add	r3, r2
 8001814:	4a04      	ldr	r2, [pc, #16]	@ (8001828 <HAL_IncTick+0x24>)
 8001816:	6013      	str	r3, [r2, #0]
}
 8001818:	bf00      	nop
 800181a:	46bd      	mov	sp, r7
 800181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001820:	4770      	bx	lr
 8001822:	bf00      	nop
 8001824:	20000084 	.word	0x20000084
 8001828:	20000304 	.word	0x20000304

0800182c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return uwTick;
 8001830:	4b03      	ldr	r3, [pc, #12]	@ (8001840 <HAL_GetTick+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000304 	.word	0x20000304

08001844 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001844:	b480      	push	{r7}
 8001846:	b085      	sub	sp, #20
 8001848:	af00      	add	r7, sp, #0
 800184a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	f003 0307 	and.w	r3, r3, #7
 8001852:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001854:	4b0c      	ldr	r3, [pc, #48]	@ (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800185a:	68ba      	ldr	r2, [r7, #8]
 800185c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001860:	4013      	ands	r3, r2
 8001862:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001868:	68bb      	ldr	r3, [r7, #8]
 800186a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800186c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001870:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001874:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001876:	4a04      	ldr	r2, [pc, #16]	@ (8001888 <__NVIC_SetPriorityGrouping+0x44>)
 8001878:	68bb      	ldr	r3, [r7, #8]
 800187a:	60d3      	str	r3, [r2, #12]
}
 800187c:	bf00      	nop
 800187e:	3714      	adds	r7, #20
 8001880:	46bd      	mov	sp, r7
 8001882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001886:	4770      	bx	lr
 8001888:	e000ed00 	.word	0xe000ed00

0800188c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800188c:	b480      	push	{r7}
 800188e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001890:	4b04      	ldr	r3, [pc, #16]	@ (80018a4 <__NVIC_GetPriorityGrouping+0x18>)
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	0a1b      	lsrs	r3, r3, #8
 8001896:	f003 0307 	and.w	r3, r3, #7
}
 800189a:	4618      	mov	r0, r3
 800189c:	46bd      	mov	sp, r7
 800189e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a2:	4770      	bx	lr
 80018a4:	e000ed00 	.word	0xe000ed00

080018a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018a8:	b480      	push	{r7}
 80018aa:	b083      	sub	sp, #12
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	4603      	mov	r3, r0
 80018b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	db0b      	blt.n	80018d2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018ba:	79fb      	ldrb	r3, [r7, #7]
 80018bc:	f003 021f 	and.w	r2, r3, #31
 80018c0:	4907      	ldr	r1, [pc, #28]	@ (80018e0 <__NVIC_EnableIRQ+0x38>)
 80018c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c6:	095b      	lsrs	r3, r3, #5
 80018c8:	2001      	movs	r0, #1
 80018ca:	fa00 f202 	lsl.w	r2, r0, r2
 80018ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	e000e100 	.word	0xe000e100

080018e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018e4:	b480      	push	{r7}
 80018e6:	b083      	sub	sp, #12
 80018e8:	af00      	add	r7, sp, #0
 80018ea:	4603      	mov	r3, r0
 80018ec:	6039      	str	r1, [r7, #0]
 80018ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	db0a      	blt.n	800190e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018f8:	683b      	ldr	r3, [r7, #0]
 80018fa:	b2da      	uxtb	r2, r3
 80018fc:	490c      	ldr	r1, [pc, #48]	@ (8001930 <__NVIC_SetPriority+0x4c>)
 80018fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001902:	0112      	lsls	r2, r2, #4
 8001904:	b2d2      	uxtb	r2, r2
 8001906:	440b      	add	r3, r1
 8001908:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800190c:	e00a      	b.n	8001924 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800190e:	683b      	ldr	r3, [r7, #0]
 8001910:	b2da      	uxtb	r2, r3
 8001912:	4908      	ldr	r1, [pc, #32]	@ (8001934 <__NVIC_SetPriority+0x50>)
 8001914:	79fb      	ldrb	r3, [r7, #7]
 8001916:	f003 030f 	and.w	r3, r3, #15
 800191a:	3b04      	subs	r3, #4
 800191c:	0112      	lsls	r2, r2, #4
 800191e:	b2d2      	uxtb	r2, r2
 8001920:	440b      	add	r3, r1
 8001922:	761a      	strb	r2, [r3, #24]
}
 8001924:	bf00      	nop
 8001926:	370c      	adds	r7, #12
 8001928:	46bd      	mov	sp, r7
 800192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192e:	4770      	bx	lr
 8001930:	e000e100 	.word	0xe000e100
 8001934:	e000ed00 	.word	0xe000ed00

08001938 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001938:	b480      	push	{r7}
 800193a:	b089      	sub	sp, #36	@ 0x24
 800193c:	af00      	add	r7, sp, #0
 800193e:	60f8      	str	r0, [r7, #12]
 8001940:	60b9      	str	r1, [r7, #8]
 8001942:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001944:	68fb      	ldr	r3, [r7, #12]
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	f1c3 0307 	rsb	r3, r3, #7
 8001952:	2b04      	cmp	r3, #4
 8001954:	bf28      	it	cs
 8001956:	2304      	movcs	r3, #4
 8001958:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800195a:	69fb      	ldr	r3, [r7, #28]
 800195c:	3304      	adds	r3, #4
 800195e:	2b06      	cmp	r3, #6
 8001960:	d902      	bls.n	8001968 <NVIC_EncodePriority+0x30>
 8001962:	69fb      	ldr	r3, [r7, #28]
 8001964:	3b03      	subs	r3, #3
 8001966:	e000      	b.n	800196a <NVIC_EncodePriority+0x32>
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800196c:	f04f 32ff 	mov.w	r2, #4294967295
 8001970:	69bb      	ldr	r3, [r7, #24]
 8001972:	fa02 f303 	lsl.w	r3, r2, r3
 8001976:	43da      	mvns	r2, r3
 8001978:	68bb      	ldr	r3, [r7, #8]
 800197a:	401a      	ands	r2, r3
 800197c:	697b      	ldr	r3, [r7, #20]
 800197e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001980:	f04f 31ff 	mov.w	r1, #4294967295
 8001984:	697b      	ldr	r3, [r7, #20]
 8001986:	fa01 f303 	lsl.w	r3, r1, r3
 800198a:	43d9      	mvns	r1, r3
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001990:	4313      	orrs	r3, r2
         );
}
 8001992:	4618      	mov	r0, r3
 8001994:	3724      	adds	r7, #36	@ 0x24
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
	...

080019a0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	3b01      	subs	r3, #1
 80019ac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80019b0:	d301      	bcc.n	80019b6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80019b2:	2301      	movs	r3, #1
 80019b4:	e00f      	b.n	80019d6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019b6:	4a0a      	ldr	r2, [pc, #40]	@ (80019e0 <SysTick_Config+0x40>)
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3b01      	subs	r3, #1
 80019bc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019be:	210f      	movs	r1, #15
 80019c0:	f04f 30ff 	mov.w	r0, #4294967295
 80019c4:	f7ff ff8e 	bl	80018e4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019c8:	4b05      	ldr	r3, [pc, #20]	@ (80019e0 <SysTick_Config+0x40>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ce:	4b04      	ldr	r3, [pc, #16]	@ (80019e0 <SysTick_Config+0x40>)
 80019d0:	2207      	movs	r2, #7
 80019d2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019d4:	2300      	movs	r3, #0
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3708      	adds	r7, #8
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
 80019de:	bf00      	nop
 80019e0:	e000e010 	.word	0xe000e010

080019e4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b082      	sub	sp, #8
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019ec:	6878      	ldr	r0, [r7, #4]
 80019ee:	f7ff ff29 	bl	8001844 <__NVIC_SetPriorityGrouping>
}
 80019f2:	bf00      	nop
 80019f4:	3708      	adds	r7, #8
 80019f6:	46bd      	mov	sp, r7
 80019f8:	bd80      	pop	{r7, pc}

080019fa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b086      	sub	sp, #24
 80019fe:	af00      	add	r7, sp, #0
 8001a00:	4603      	mov	r3, r0
 8001a02:	60b9      	str	r1, [r7, #8]
 8001a04:	607a      	str	r2, [r7, #4]
 8001a06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a08:	2300      	movs	r3, #0
 8001a0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a0c:	f7ff ff3e 	bl	800188c <__NVIC_GetPriorityGrouping>
 8001a10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a12:	687a      	ldr	r2, [r7, #4]
 8001a14:	68b9      	ldr	r1, [r7, #8]
 8001a16:	6978      	ldr	r0, [r7, #20]
 8001a18:	f7ff ff8e 	bl	8001938 <NVIC_EncodePriority>
 8001a1c:	4602      	mov	r2, r0
 8001a1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a22:	4611      	mov	r1, r2
 8001a24:	4618      	mov	r0, r3
 8001a26:	f7ff ff5d 	bl	80018e4 <__NVIC_SetPriority>
}
 8001a2a:	bf00      	nop
 8001a2c:	3718      	adds	r7, #24
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	4603      	mov	r3, r0
 8001a3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff ff31 	bl	80018a8 <__NVIC_EnableIRQ>
}
 8001a46:	bf00      	nop
 8001a48:	3708      	adds	r7, #8
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}

08001a4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a4e:	b580      	push	{r7, lr}
 8001a50:	b082      	sub	sp, #8
 8001a52:	af00      	add	r7, sp, #0
 8001a54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a56:	6878      	ldr	r0, [r7, #4]
 8001a58:	f7ff ffa2 	bl	80019a0 <SysTick_Config>
 8001a5c:	4603      	mov	r3, r0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}

08001a66 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001a66:	b580      	push	{r7, lr}
 8001a68:	b084      	sub	sp, #16
 8001a6a:	af00      	add	r7, sp, #0
 8001a6c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a72:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001a74:	f7ff feda 	bl	800182c <HAL_GetTick>
 8001a78:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001a80:	b2db      	uxtb	r3, r3
 8001a82:	2b02      	cmp	r3, #2
 8001a84:	d008      	beq.n	8001a98 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2280      	movs	r2, #128	@ 0x80
 8001a8a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	2200      	movs	r2, #0
 8001a90:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e052      	b.n	8001b3e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	681a      	ldr	r2, [r3, #0]
 8001a9e:	687b      	ldr	r3, [r7, #4]
 8001aa0:	681b      	ldr	r3, [r3, #0]
 8001aa2:	f022 0216 	bic.w	r2, r2, #22
 8001aa6:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	695a      	ldr	r2, [r3, #20]
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001ab6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	d103      	bne.n	8001ac8 <HAL_DMA_Abort+0x62>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d007      	beq.n	8001ad8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	f022 0208 	bic.w	r2, r2, #8
 8001ad6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	681a      	ldr	r2, [r3, #0]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f022 0201 	bic.w	r2, r2, #1
 8001ae6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001ae8:	e013      	b.n	8001b12 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001aea:	f7ff fe9f 	bl	800182c <HAL_GetTick>
 8001aee:	4602      	mov	r2, r0
 8001af0:	68bb      	ldr	r3, [r7, #8]
 8001af2:	1ad3      	subs	r3, r2, r3
 8001af4:	2b05      	cmp	r3, #5
 8001af6:	d90c      	bls.n	8001b12 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2220      	movs	r2, #32
 8001afc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2203      	movs	r2, #3
 8001b02:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8001b0e:	2303      	movs	r3, #3
 8001b10:	e015      	b.n	8001b3e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	f003 0301 	and.w	r3, r3, #1
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d1e4      	bne.n	8001aea <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001b24:	223f      	movs	r2, #63	@ 0x3f
 8001b26:	409a      	lsls	r2, r3
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8001b3c:	2300      	movs	r3, #0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3710      	adds	r7, #16
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}

08001b46 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b46:	b480      	push	{r7}
 8001b48:	b083      	sub	sp, #12
 8001b4a:	af00      	add	r7, sp, #0
 8001b4c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b54:	b2db      	uxtb	r3, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d004      	beq.n	8001b64 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	2280      	movs	r2, #128	@ 0x80
 8001b5e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b60:	2301      	movs	r3, #1
 8001b62:	e00c      	b.n	8001b7e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	2205      	movs	r2, #5
 8001b68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	681a      	ldr	r2, [r3, #0]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f022 0201 	bic.w	r2, r2, #1
 8001b7a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b7c:	2300      	movs	r3, #0
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b8c:	b480      	push	{r7}
 8001b8e:	b089      	sub	sp, #36	@ 0x24
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
 8001b94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001b96:	2300      	movs	r3, #0
 8001b98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61fb      	str	r3, [r7, #28]
 8001ba6:	e165      	b.n	8001e74 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001ba8:	2201      	movs	r2, #1
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	fa02 f303 	lsl.w	r3, r2, r3
 8001bb0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bb2:	683b      	ldr	r3, [r7, #0]
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	697a      	ldr	r2, [r7, #20]
 8001bb8:	4013      	ands	r3, r2
 8001bba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bbc:	693a      	ldr	r2, [r7, #16]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	429a      	cmp	r2, r3
 8001bc2:	f040 8154 	bne.w	8001e6e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f003 0303 	and.w	r3, r3, #3
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d005      	beq.n	8001bde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d130      	bne.n	8001c40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c14:	2201      	movs	r2, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 0201 	and.w	r2, r3, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	f003 0303 	and.w	r3, r3, #3
 8001c48:	2b03      	cmp	r3, #3
 8001c4a:	d017      	beq.n	8001c7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	68db      	ldr	r3, [r3, #12]
 8001c50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c52:	69fb      	ldr	r3, [r7, #28]
 8001c54:	005b      	lsls	r3, r3, #1
 8001c56:	2203      	movs	r2, #3
 8001c58:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5c:	43db      	mvns	r3, r3
 8001c5e:	69ba      	ldr	r2, [r7, #24]
 8001c60:	4013      	ands	r3, r2
 8001c62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	689a      	ldr	r2, [r3, #8]
 8001c68:	69fb      	ldr	r3, [r7, #28]
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	4313      	orrs	r3, r2
 8001c74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69ba      	ldr	r2, [r7, #24]
 8001c7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c7c:	683b      	ldr	r3, [r7, #0]
 8001c7e:	685b      	ldr	r3, [r3, #4]
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	2b02      	cmp	r3, #2
 8001c86:	d123      	bne.n	8001cd0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001c88:	69fb      	ldr	r3, [r7, #28]
 8001c8a:	08da      	lsrs	r2, r3, #3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	3208      	adds	r2, #8
 8001c90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001c96:	69fb      	ldr	r3, [r7, #28]
 8001c98:	f003 0307 	and.w	r3, r3, #7
 8001c9c:	009b      	lsls	r3, r3, #2
 8001c9e:	220f      	movs	r2, #15
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	691a      	ldr	r2, [r3, #16]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f003 0307 	and.w	r3, r3, #7
 8001cb6:	009b      	lsls	r3, r3, #2
 8001cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	4313      	orrs	r3, r2
 8001cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	08da      	lsrs	r2, r3, #3
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	3208      	adds	r2, #8
 8001cca:	69b9      	ldr	r1, [r7, #24]
 8001ccc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cd6:	69fb      	ldr	r3, [r7, #28]
 8001cd8:	005b      	lsls	r3, r3, #1
 8001cda:	2203      	movs	r2, #3
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	69ba      	ldr	r2, [r7, #24]
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 0203 	and.w	r2, r3, #3
 8001cf0:	69fb      	ldr	r3, [r7, #28]
 8001cf2:	005b      	lsls	r3, r3, #1
 8001cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	4313      	orrs	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	69ba      	ldr	r2, [r7, #24]
 8001d02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f000 80ae 	beq.w	8001e6e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d12:	2300      	movs	r3, #0
 8001d14:	60fb      	str	r3, [r7, #12]
 8001d16:	4b5d      	ldr	r3, [pc, #372]	@ (8001e8c <HAL_GPIO_Init+0x300>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d1a:	4a5c      	ldr	r2, [pc, #368]	@ (8001e8c <HAL_GPIO_Init+0x300>)
 8001d1c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d20:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d22:	4b5a      	ldr	r3, [pc, #360]	@ (8001e8c <HAL_GPIO_Init+0x300>)
 8001d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d26:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d2e:	4a58      	ldr	r2, [pc, #352]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	089b      	lsrs	r3, r3, #2
 8001d34:	3302      	adds	r3, #2
 8001d36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d3c:	69fb      	ldr	r3, [r7, #28]
 8001d3e:	f003 0303 	and.w	r3, r3, #3
 8001d42:	009b      	lsls	r3, r3, #2
 8001d44:	220f      	movs	r2, #15
 8001d46:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4a:	43db      	mvns	r3, r3
 8001d4c:	69ba      	ldr	r2, [r7, #24]
 8001d4e:	4013      	ands	r3, r2
 8001d50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	4a4f      	ldr	r2, [pc, #316]	@ (8001e94 <HAL_GPIO_Init+0x308>)
 8001d56:	4293      	cmp	r3, r2
 8001d58:	d025      	beq.n	8001da6 <HAL_GPIO_Init+0x21a>
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4a4e      	ldr	r2, [pc, #312]	@ (8001e98 <HAL_GPIO_Init+0x30c>)
 8001d5e:	4293      	cmp	r3, r2
 8001d60:	d01f      	beq.n	8001da2 <HAL_GPIO_Init+0x216>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	4a4d      	ldr	r2, [pc, #308]	@ (8001e9c <HAL_GPIO_Init+0x310>)
 8001d66:	4293      	cmp	r3, r2
 8001d68:	d019      	beq.n	8001d9e <HAL_GPIO_Init+0x212>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	4a4c      	ldr	r2, [pc, #304]	@ (8001ea0 <HAL_GPIO_Init+0x314>)
 8001d6e:	4293      	cmp	r3, r2
 8001d70:	d013      	beq.n	8001d9a <HAL_GPIO_Init+0x20e>
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	4a4b      	ldr	r2, [pc, #300]	@ (8001ea4 <HAL_GPIO_Init+0x318>)
 8001d76:	4293      	cmp	r3, r2
 8001d78:	d00d      	beq.n	8001d96 <HAL_GPIO_Init+0x20a>
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	4a4a      	ldr	r2, [pc, #296]	@ (8001ea8 <HAL_GPIO_Init+0x31c>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d007      	beq.n	8001d92 <HAL_GPIO_Init+0x206>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a49      	ldr	r2, [pc, #292]	@ (8001eac <HAL_GPIO_Init+0x320>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d101      	bne.n	8001d8e <HAL_GPIO_Init+0x202>
 8001d8a:	2306      	movs	r3, #6
 8001d8c:	e00c      	b.n	8001da8 <HAL_GPIO_Init+0x21c>
 8001d8e:	2307      	movs	r3, #7
 8001d90:	e00a      	b.n	8001da8 <HAL_GPIO_Init+0x21c>
 8001d92:	2305      	movs	r3, #5
 8001d94:	e008      	b.n	8001da8 <HAL_GPIO_Init+0x21c>
 8001d96:	2304      	movs	r3, #4
 8001d98:	e006      	b.n	8001da8 <HAL_GPIO_Init+0x21c>
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e004      	b.n	8001da8 <HAL_GPIO_Init+0x21c>
 8001d9e:	2302      	movs	r3, #2
 8001da0:	e002      	b.n	8001da8 <HAL_GPIO_Init+0x21c>
 8001da2:	2301      	movs	r3, #1
 8001da4:	e000      	b.n	8001da8 <HAL_GPIO_Init+0x21c>
 8001da6:	2300      	movs	r3, #0
 8001da8:	69fa      	ldr	r2, [r7, #28]
 8001daa:	f002 0203 	and.w	r2, r2, #3
 8001dae:	0092      	lsls	r2, r2, #2
 8001db0:	4093      	lsls	r3, r2
 8001db2:	69ba      	ldr	r2, [r7, #24]
 8001db4:	4313      	orrs	r3, r2
 8001db6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001db8:	4935      	ldr	r1, [pc, #212]	@ (8001e90 <HAL_GPIO_Init+0x304>)
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	089b      	lsrs	r3, r3, #2
 8001dbe:	3302      	adds	r3, #2
 8001dc0:	69ba      	ldr	r2, [r7, #24]
 8001dc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001dc6:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb0 <HAL_GPIO_Init+0x324>)
 8001dc8:	689b      	ldr	r3, [r3, #8]
 8001dca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dcc:	693b      	ldr	r3, [r7, #16]
 8001dce:	43db      	mvns	r3, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001dea:	4a31      	ldr	r2, [pc, #196]	@ (8001eb0 <HAL_GPIO_Init+0x324>)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001df0:	4b2f      	ldr	r3, [pc, #188]	@ (8001eb0 <HAL_GPIO_Init+0x324>)
 8001df2:	68db      	ldr	r3, [r3, #12]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001df6:	693b      	ldr	r3, [r7, #16]
 8001df8:	43db      	mvns	r3, r3
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e00:	683b      	ldr	r3, [r7, #0]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d003      	beq.n	8001e14 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e0c:	69ba      	ldr	r2, [r7, #24]
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	4313      	orrs	r3, r2
 8001e12:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e14:	4a26      	ldr	r2, [pc, #152]	@ (8001eb0 <HAL_GPIO_Init+0x324>)
 8001e16:	69bb      	ldr	r3, [r7, #24]
 8001e18:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e1a:	4b25      	ldr	r3, [pc, #148]	@ (8001eb0 <HAL_GPIO_Init+0x324>)
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e20:	693b      	ldr	r3, [r7, #16]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	4013      	ands	r3, r2
 8001e28:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	685b      	ldr	r3, [r3, #4]
 8001e2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d003      	beq.n	8001e3e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e36:	69ba      	ldr	r2, [r7, #24]
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	4313      	orrs	r3, r2
 8001e3c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e3e:	4a1c      	ldr	r2, [pc, #112]	@ (8001eb0 <HAL_GPIO_Init+0x324>)
 8001e40:	69bb      	ldr	r3, [r7, #24]
 8001e42:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e44:	4b1a      	ldr	r3, [pc, #104]	@ (8001eb0 <HAL_GPIO_Init+0x324>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	43db      	mvns	r3, r3
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	4013      	ands	r3, r2
 8001e52:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d003      	beq.n	8001e68 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e68:	4a11      	ldr	r2, [pc, #68]	@ (8001eb0 <HAL_GPIO_Init+0x324>)
 8001e6a:	69bb      	ldr	r3, [r7, #24]
 8001e6c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e6e:	69fb      	ldr	r3, [r7, #28]
 8001e70:	3301      	adds	r3, #1
 8001e72:	61fb      	str	r3, [r7, #28]
 8001e74:	69fb      	ldr	r3, [r7, #28]
 8001e76:	2b0f      	cmp	r3, #15
 8001e78:	f67f ae96 	bls.w	8001ba8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e7c:	bf00      	nop
 8001e7e:	bf00      	nop
 8001e80:	3724      	adds	r7, #36	@ 0x24
 8001e82:	46bd      	mov	sp, r7
 8001e84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e88:	4770      	bx	lr
 8001e8a:	bf00      	nop
 8001e8c:	40023800 	.word	0x40023800
 8001e90:	40013800 	.word	0x40013800
 8001e94:	40020000 	.word	0x40020000
 8001e98:	40020400 	.word	0x40020400
 8001e9c:	40020800 	.word	0x40020800
 8001ea0:	40020c00 	.word	0x40020c00
 8001ea4:	40021000 	.word	0x40021000
 8001ea8:	40021400 	.word	0x40021400
 8001eac:	40021800 	.word	0x40021800
 8001eb0:	40013c00 	.word	0x40013c00

08001eb4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	460b      	mov	r3, r1
 8001ebe:	807b      	strh	r3, [r7, #2]
 8001ec0:	4613      	mov	r3, r2
 8001ec2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ec4:	787b      	ldrb	r3, [r7, #1]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d003      	beq.n	8001ed2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eca:	887a      	ldrh	r2, [r7, #2]
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ed0:	e003      	b.n	8001eda <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001ed2:	887b      	ldrh	r3, [r7, #2]
 8001ed4:	041a      	lsls	r2, r3, #16
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	619a      	str	r2, [r3, #24]
}
 8001eda:	bf00      	nop
 8001edc:	370c      	adds	r7, #12
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee4:	4770      	bx	lr
	...

08001ee8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b082      	sub	sp, #8
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	4603      	mov	r3, r0
 8001ef0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001ef2:	4b08      	ldr	r3, [pc, #32]	@ (8001f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001ef4:	695a      	ldr	r2, [r3, #20]
 8001ef6:	88fb      	ldrh	r3, [r7, #6]
 8001ef8:	4013      	ands	r3, r2
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d006      	beq.n	8001f0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001efe:	4a05      	ldr	r2, [pc, #20]	@ (8001f14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f00:	88fb      	ldrh	r3, [r7, #6]
 8001f02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f04:	88fb      	ldrh	r3, [r7, #6]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f000 f806 	bl	8001f18 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f0c:	bf00      	nop
 8001f0e:	3708      	adds	r7, #8
 8001f10:	46bd      	mov	sp, r7
 8001f12:	bd80      	pop	{r7, pc}
 8001f14:	40013c00 	.word	0x40013c00

08001f18 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f18:	b480      	push	{r7}
 8001f1a:	b083      	sub	sp, #12
 8001f1c:	af00      	add	r7, sp, #0
 8001f1e:	4603      	mov	r3, r0
 8001f20:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
	...

08001f30 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f30:	b580      	push	{r7, lr}
 8001f32:	b084      	sub	sp, #16
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d101      	bne.n	8001f42 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f3e:	2301      	movs	r3, #1
 8001f40:	e12b      	b.n	800219a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001f48:	b2db      	uxtb	r3, r3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d106      	bne.n	8001f5c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2200      	movs	r2, #0
 8001f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7fe fd80 	bl	8000a5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2224      	movs	r2, #36	@ 0x24
 8001f60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	681a      	ldr	r2, [r3, #0]
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	f022 0201 	bic.w	r2, r2, #1
 8001f72:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f82:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001f92:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001f94:	f000 fa02 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8001f98:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	685b      	ldr	r3, [r3, #4]
 8001f9e:	4a81      	ldr	r2, [pc, #516]	@ (80021a4 <HAL_I2C_Init+0x274>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d807      	bhi.n	8001fb4 <HAL_I2C_Init+0x84>
 8001fa4:	68fb      	ldr	r3, [r7, #12]
 8001fa6:	4a80      	ldr	r2, [pc, #512]	@ (80021a8 <HAL_I2C_Init+0x278>)
 8001fa8:	4293      	cmp	r3, r2
 8001faa:	bf94      	ite	ls
 8001fac:	2301      	movls	r3, #1
 8001fae:	2300      	movhi	r3, #0
 8001fb0:	b2db      	uxtb	r3, r3
 8001fb2:	e006      	b.n	8001fc2 <HAL_I2C_Init+0x92>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4a7d      	ldr	r2, [pc, #500]	@ (80021ac <HAL_I2C_Init+0x27c>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	bf94      	ite	ls
 8001fbc:	2301      	movls	r3, #1
 8001fbe:	2300      	movhi	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d001      	beq.n	8001fca <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	e0e7      	b.n	800219a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	4a78      	ldr	r2, [pc, #480]	@ (80021b0 <HAL_I2C_Init+0x280>)
 8001fce:	fba2 2303 	umull	r2, r3, r2, r3
 8001fd2:	0c9b      	lsrs	r3, r3, #18
 8001fd4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	685b      	ldr	r3, [r3, #4]
 8001fdc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	68ba      	ldr	r2, [r7, #8]
 8001fe6:	430a      	orrs	r2, r1
 8001fe8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	6a1b      	ldr	r3, [r3, #32]
 8001ff0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	4a6a      	ldr	r2, [pc, #424]	@ (80021a4 <HAL_I2C_Init+0x274>)
 8001ffa:	4293      	cmp	r3, r2
 8001ffc:	d802      	bhi.n	8002004 <HAL_I2C_Init+0xd4>
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	3301      	adds	r3, #1
 8002002:	e009      	b.n	8002018 <HAL_I2C_Init+0xe8>
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800200a:	fb02 f303 	mul.w	r3, r2, r3
 800200e:	4a69      	ldr	r2, [pc, #420]	@ (80021b4 <HAL_I2C_Init+0x284>)
 8002010:	fba2 2303 	umull	r2, r3, r2, r3
 8002014:	099b      	lsrs	r3, r3, #6
 8002016:	3301      	adds	r3, #1
 8002018:	687a      	ldr	r2, [r7, #4]
 800201a:	6812      	ldr	r2, [r2, #0]
 800201c:	430b      	orrs	r3, r1
 800201e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	69db      	ldr	r3, [r3, #28]
 8002026:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800202a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	685b      	ldr	r3, [r3, #4]
 8002032:	495c      	ldr	r1, [pc, #368]	@ (80021a4 <HAL_I2C_Init+0x274>)
 8002034:	428b      	cmp	r3, r1
 8002036:	d819      	bhi.n	800206c <HAL_I2C_Init+0x13c>
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	1e59      	subs	r1, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	005b      	lsls	r3, r3, #1
 8002042:	fbb1 f3f3 	udiv	r3, r1, r3
 8002046:	1c59      	adds	r1, r3, #1
 8002048:	f640 73fc 	movw	r3, #4092	@ 0xffc
 800204c:	400b      	ands	r3, r1
 800204e:	2b00      	cmp	r3, #0
 8002050:	d00a      	beq.n	8002068 <HAL_I2C_Init+0x138>
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1e59      	subs	r1, r3, #1
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	005b      	lsls	r3, r3, #1
 800205c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002060:	3301      	adds	r3, #1
 8002062:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002066:	e051      	b.n	800210c <HAL_I2C_Init+0x1dc>
 8002068:	2304      	movs	r3, #4
 800206a:	e04f      	b.n	800210c <HAL_I2C_Init+0x1dc>
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	689b      	ldr	r3, [r3, #8]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d111      	bne.n	8002098 <HAL_I2C_Init+0x168>
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	1e58      	subs	r0, r3, #1
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6859      	ldr	r1, [r3, #4]
 800207c:	460b      	mov	r3, r1
 800207e:	005b      	lsls	r3, r3, #1
 8002080:	440b      	add	r3, r1
 8002082:	fbb0 f3f3 	udiv	r3, r0, r3
 8002086:	3301      	adds	r3, #1
 8002088:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800208c:	2b00      	cmp	r3, #0
 800208e:	bf0c      	ite	eq
 8002090:	2301      	moveq	r3, #1
 8002092:	2300      	movne	r3, #0
 8002094:	b2db      	uxtb	r3, r3
 8002096:	e012      	b.n	80020be <HAL_I2C_Init+0x18e>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	1e58      	subs	r0, r3, #1
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6859      	ldr	r1, [r3, #4]
 80020a0:	460b      	mov	r3, r1
 80020a2:	009b      	lsls	r3, r3, #2
 80020a4:	440b      	add	r3, r1
 80020a6:	0099      	lsls	r1, r3, #2
 80020a8:	440b      	add	r3, r1
 80020aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80020ae:	3301      	adds	r3, #1
 80020b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	bf0c      	ite	eq
 80020b8:	2301      	moveq	r3, #1
 80020ba:	2300      	movne	r3, #0
 80020bc:	b2db      	uxtb	r3, r3
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d001      	beq.n	80020c6 <HAL_I2C_Init+0x196>
 80020c2:	2301      	movs	r3, #1
 80020c4:	e022      	b.n	800210c <HAL_I2C_Init+0x1dc>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10e      	bne.n	80020ec <HAL_I2C_Init+0x1bc>
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1e58      	subs	r0, r3, #1
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6859      	ldr	r1, [r3, #4]
 80020d6:	460b      	mov	r3, r1
 80020d8:	005b      	lsls	r3, r3, #1
 80020da:	440b      	add	r3, r1
 80020dc:	fbb0 f3f3 	udiv	r3, r0, r3
 80020e0:	3301      	adds	r3, #1
 80020e2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020e6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80020ea:	e00f      	b.n	800210c <HAL_I2C_Init+0x1dc>
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	1e58      	subs	r0, r3, #1
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6859      	ldr	r1, [r3, #4]
 80020f4:	460b      	mov	r3, r1
 80020f6:	009b      	lsls	r3, r3, #2
 80020f8:	440b      	add	r3, r1
 80020fa:	0099      	lsls	r1, r3, #2
 80020fc:	440b      	add	r3, r1
 80020fe:	fbb0 f3f3 	udiv	r3, r0, r3
 8002102:	3301      	adds	r3, #1
 8002104:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002108:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800210c:	6879      	ldr	r1, [r7, #4]
 800210e:	6809      	ldr	r1, [r1, #0]
 8002110:	4313      	orrs	r3, r2
 8002112:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	69da      	ldr	r2, [r3, #28]
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6a1b      	ldr	r3, [r3, #32]
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	430a      	orrs	r2, r1
 800212e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800213a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800213e:	687a      	ldr	r2, [r7, #4]
 8002140:	6911      	ldr	r1, [r2, #16]
 8002142:	687a      	ldr	r2, [r7, #4]
 8002144:	68d2      	ldr	r2, [r2, #12]
 8002146:	4311      	orrs	r1, r2
 8002148:	687a      	ldr	r2, [r7, #4]
 800214a:	6812      	ldr	r2, [r2, #0]
 800214c:	430b      	orrs	r3, r1
 800214e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	68db      	ldr	r3, [r3, #12]
 8002156:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695a      	ldr	r2, [r3, #20]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	699b      	ldr	r3, [r3, #24]
 8002162:	431a      	orrs	r2, r3
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	430a      	orrs	r2, r1
 800216a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	f042 0201 	orr.w	r2, r2, #1
 800217a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2200      	movs	r2, #0
 8002180:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2220      	movs	r2, #32
 8002186:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	2200      	movs	r2, #0
 800218e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002198:	2300      	movs	r3, #0
}
 800219a:	4618      	mov	r0, r3
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	000186a0 	.word	0x000186a0
 80021a8:	001e847f 	.word	0x001e847f
 80021ac:	003d08ff 	.word	0x003d08ff
 80021b0:	431bde83 	.word	0x431bde83
 80021b4:	10624dd3 	.word	0x10624dd3

080021b8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b084      	sub	sp, #16
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
 80021c0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d101      	bne.n	80021cc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80021c8:	2301      	movs	r3, #1
 80021ca:	e0cc      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80021cc:	4b68      	ldr	r3, [pc, #416]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 030f 	and.w	r3, r3, #15
 80021d4:	683a      	ldr	r2, [r7, #0]
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d90c      	bls.n	80021f4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021da:	4b65      	ldr	r3, [pc, #404]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021dc:	683a      	ldr	r2, [r7, #0]
 80021de:	b2d2      	uxtb	r2, r2
 80021e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80021e2:	4b63      	ldr	r3, [pc, #396]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80021e4:	681b      	ldr	r3, [r3, #0]
 80021e6:	f003 030f 	and.w	r3, r3, #15
 80021ea:	683a      	ldr	r2, [r7, #0]
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d001      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e0b8      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0302 	and.w	r3, r3, #2
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d020      	beq.n	8002242 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f003 0304 	and.w	r3, r3, #4
 8002208:	2b00      	cmp	r3, #0
 800220a:	d005      	beq.n	8002218 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800220c:	4b59      	ldr	r3, [pc, #356]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	4a58      	ldr	r2, [pc, #352]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002212:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002216:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	f003 0308 	and.w	r3, r3, #8
 8002220:	2b00      	cmp	r3, #0
 8002222:	d005      	beq.n	8002230 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002224:	4b53      	ldr	r3, [pc, #332]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002226:	689b      	ldr	r3, [r3, #8]
 8002228:	4a52      	ldr	r2, [pc, #328]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800222a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800222e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002230:	4b50      	ldr	r3, [pc, #320]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002232:	689b      	ldr	r3, [r3, #8]
 8002234:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	689b      	ldr	r3, [r3, #8]
 800223c:	494d      	ldr	r1, [pc, #308]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800223e:	4313      	orrs	r3, r2
 8002240:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f003 0301 	and.w	r3, r3, #1
 800224a:	2b00      	cmp	r3, #0
 800224c:	d044      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	2b01      	cmp	r3, #1
 8002254:	d107      	bne.n	8002266 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002256:	4b47      	ldr	r3, [pc, #284]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800225e:	2b00      	cmp	r3, #0
 8002260:	d119      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002262:	2301      	movs	r3, #1
 8002264:	e07f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	2b02      	cmp	r3, #2
 800226c:	d003      	beq.n	8002276 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002272:	2b03      	cmp	r3, #3
 8002274:	d107      	bne.n	8002286 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002276:	4b3f      	ldr	r3, [pc, #252]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800227e:	2b00      	cmp	r3, #0
 8002280:	d109      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002282:	2301      	movs	r3, #1
 8002284:	e06f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002286:	4b3b      	ldr	r3, [pc, #236]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0302 	and.w	r3, r3, #2
 800228e:	2b00      	cmp	r3, #0
 8002290:	d101      	bne.n	8002296 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e067      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002296:	4b37      	ldr	r3, [pc, #220]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002298:	689b      	ldr	r3, [r3, #8]
 800229a:	f023 0203 	bic.w	r2, r3, #3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	4934      	ldr	r1, [pc, #208]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 80022a4:	4313      	orrs	r3, r2
 80022a6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022a8:	f7ff fac0 	bl	800182c <HAL_GetTick>
 80022ac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022ae:	e00a      	b.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022b0:	f7ff fabc 	bl	800182c <HAL_GetTick>
 80022b4:	4602      	mov	r2, r0
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	1ad3      	subs	r3, r2, r3
 80022ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022be:	4293      	cmp	r3, r2
 80022c0:	d901      	bls.n	80022c6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022c2:	2303      	movs	r3, #3
 80022c4:	e04f      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022c6:	4b2b      	ldr	r3, [pc, #172]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	f003 020c 	and.w	r2, r3, #12
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	009b      	lsls	r3, r3, #2
 80022d4:	429a      	cmp	r2, r3
 80022d6:	d1eb      	bne.n	80022b0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80022d8:	4b25      	ldr	r3, [pc, #148]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f003 030f 	and.w	r3, r3, #15
 80022e0:	683a      	ldr	r2, [r7, #0]
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d20c      	bcs.n	8002300 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e6:	4b22      	ldr	r3, [pc, #136]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022e8:	683a      	ldr	r2, [r7, #0]
 80022ea:	b2d2      	uxtb	r2, r2
 80022ec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022ee:	4b20      	ldr	r3, [pc, #128]	@ (8002370 <HAL_RCC_ClockConfig+0x1b8>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 030f 	and.w	r3, r3, #15
 80022f6:	683a      	ldr	r2, [r7, #0]
 80022f8:	429a      	cmp	r2, r3
 80022fa:	d001      	beq.n	8002300 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80022fc:	2301      	movs	r3, #1
 80022fe:	e032      	b.n	8002366 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0304 	and.w	r3, r3, #4
 8002308:	2b00      	cmp	r3, #0
 800230a:	d008      	beq.n	800231e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800230c:	4b19      	ldr	r3, [pc, #100]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800230e:	689b      	ldr	r3, [r3, #8]
 8002310:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	68db      	ldr	r3, [r3, #12]
 8002318:	4916      	ldr	r1, [pc, #88]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800231a:	4313      	orrs	r3, r2
 800231c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0308 	and.w	r3, r3, #8
 8002326:	2b00      	cmp	r3, #0
 8002328:	d009      	beq.n	800233e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800232a:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800232c:	689b      	ldr	r3, [r3, #8]
 800232e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	691b      	ldr	r3, [r3, #16]
 8002336:	00db      	lsls	r3, r3, #3
 8002338:	490e      	ldr	r1, [pc, #56]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 800233a:	4313      	orrs	r3, r2
 800233c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800233e:	f000 f855 	bl	80023ec <HAL_RCC_GetSysClockFreq>
 8002342:	4602      	mov	r2, r0
 8002344:	4b0b      	ldr	r3, [pc, #44]	@ (8002374 <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	091b      	lsrs	r3, r3, #4
 800234a:	f003 030f 	and.w	r3, r3, #15
 800234e:	490a      	ldr	r1, [pc, #40]	@ (8002378 <HAL_RCC_ClockConfig+0x1c0>)
 8002350:	5ccb      	ldrb	r3, [r1, r3]
 8002352:	fa22 f303 	lsr.w	r3, r2, r3
 8002356:	4a09      	ldr	r2, [pc, #36]	@ (800237c <HAL_RCC_ClockConfig+0x1c4>)
 8002358:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800235a:	4b09      	ldr	r3, [pc, #36]	@ (8002380 <HAL_RCC_ClockConfig+0x1c8>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f7ff fa20 	bl	80017a4 <HAL_InitTick>

  return HAL_OK;
 8002364:	2300      	movs	r3, #0
}
 8002366:	4618      	mov	r0, r3
 8002368:	3710      	adds	r7, #16
 800236a:	46bd      	mov	sp, r7
 800236c:	bd80      	pop	{r7, pc}
 800236e:	bf00      	nop
 8002370:	40023c00 	.word	0x40023c00
 8002374:	40023800 	.word	0x40023800
 8002378:	08005ca8 	.word	0x08005ca8
 800237c:	2000007c 	.word	0x2000007c
 8002380:	20000080 	.word	0x20000080

08002384 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002384:	b480      	push	{r7}
 8002386:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002388:	4b03      	ldr	r3, [pc, #12]	@ (8002398 <HAL_RCC_GetHCLKFreq+0x14>)
 800238a:	681b      	ldr	r3, [r3, #0]
}
 800238c:	4618      	mov	r0, r3
 800238e:	46bd      	mov	sp, r7
 8002390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002394:	4770      	bx	lr
 8002396:	bf00      	nop
 8002398:	2000007c 	.word	0x2000007c

0800239c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023a0:	f7ff fff0 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023a4:	4602      	mov	r2, r0
 80023a6:	4b05      	ldr	r3, [pc, #20]	@ (80023bc <HAL_RCC_GetPCLK1Freq+0x20>)
 80023a8:	689b      	ldr	r3, [r3, #8]
 80023aa:	0a9b      	lsrs	r3, r3, #10
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	4903      	ldr	r1, [pc, #12]	@ (80023c0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023b2:	5ccb      	ldrb	r3, [r1, r3]
 80023b4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	bd80      	pop	{r7, pc}
 80023bc:	40023800 	.word	0x40023800
 80023c0:	08005cb8 	.word	0x08005cb8

080023c4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80023c8:	f7ff ffdc 	bl	8002384 <HAL_RCC_GetHCLKFreq>
 80023cc:	4602      	mov	r2, r0
 80023ce:	4b05      	ldr	r3, [pc, #20]	@ (80023e4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	0b5b      	lsrs	r3, r3, #13
 80023d4:	f003 0307 	and.w	r3, r3, #7
 80023d8:	4903      	ldr	r1, [pc, #12]	@ (80023e8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023da:	5ccb      	ldrb	r3, [r1, r3]
 80023dc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40023800 	.word	0x40023800
 80023e8:	08005cb8 	.word	0x08005cb8

080023ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023ec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023f0:	b0ae      	sub	sp, #184	@ 0xb8
 80023f2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80023f4:	2300      	movs	r3, #0
 80023f6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80023fa:	2300      	movs	r3, #0
 80023fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002400:	2300      	movs	r3, #0
 8002402:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002406:	2300      	movs	r3, #0
 8002408:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 800240c:	2300      	movs	r3, #0
 800240e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002412:	4bcb      	ldr	r3, [pc, #812]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 8002414:	689b      	ldr	r3, [r3, #8]
 8002416:	f003 030c 	and.w	r3, r3, #12
 800241a:	2b0c      	cmp	r3, #12
 800241c:	f200 8206 	bhi.w	800282c <HAL_RCC_GetSysClockFreq+0x440>
 8002420:	a201      	add	r2, pc, #4	@ (adr r2, 8002428 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002422:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002426:	bf00      	nop
 8002428:	0800245d 	.word	0x0800245d
 800242c:	0800282d 	.word	0x0800282d
 8002430:	0800282d 	.word	0x0800282d
 8002434:	0800282d 	.word	0x0800282d
 8002438:	08002465 	.word	0x08002465
 800243c:	0800282d 	.word	0x0800282d
 8002440:	0800282d 	.word	0x0800282d
 8002444:	0800282d 	.word	0x0800282d
 8002448:	0800246d 	.word	0x0800246d
 800244c:	0800282d 	.word	0x0800282d
 8002450:	0800282d 	.word	0x0800282d
 8002454:	0800282d 	.word	0x0800282d
 8002458:	0800265d 	.word	0x0800265d
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800245c:	4bb9      	ldr	r3, [pc, #740]	@ (8002744 <HAL_RCC_GetSysClockFreq+0x358>)
 800245e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002462:	e1e7      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002464:	4bb8      	ldr	r3, [pc, #736]	@ (8002748 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002466:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800246a:	e1e3      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800246c:	4bb4      	ldr	r3, [pc, #720]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002474:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002478:	4bb1      	ldr	r3, [pc, #708]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d071      	beq.n	8002568 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002484:	4bae      	ldr	r3, [pc, #696]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 8002486:	685b      	ldr	r3, [r3, #4]
 8002488:	099b      	lsrs	r3, r3, #6
 800248a:	2200      	movs	r2, #0
 800248c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002490:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002494:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002498:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800249c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80024a0:	2300      	movs	r3, #0
 80024a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80024a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80024aa:	4622      	mov	r2, r4
 80024ac:	462b      	mov	r3, r5
 80024ae:	f04f 0000 	mov.w	r0, #0
 80024b2:	f04f 0100 	mov.w	r1, #0
 80024b6:	0159      	lsls	r1, r3, #5
 80024b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80024bc:	0150      	lsls	r0, r2, #5
 80024be:	4602      	mov	r2, r0
 80024c0:	460b      	mov	r3, r1
 80024c2:	4621      	mov	r1, r4
 80024c4:	1a51      	subs	r1, r2, r1
 80024c6:	6439      	str	r1, [r7, #64]	@ 0x40
 80024c8:	4629      	mov	r1, r5
 80024ca:	eb63 0301 	sbc.w	r3, r3, r1
 80024ce:	647b      	str	r3, [r7, #68]	@ 0x44
 80024d0:	f04f 0200 	mov.w	r2, #0
 80024d4:	f04f 0300 	mov.w	r3, #0
 80024d8:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 80024dc:	4649      	mov	r1, r9
 80024de:	018b      	lsls	r3, r1, #6
 80024e0:	4641      	mov	r1, r8
 80024e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80024e6:	4641      	mov	r1, r8
 80024e8:	018a      	lsls	r2, r1, #6
 80024ea:	4641      	mov	r1, r8
 80024ec:	1a51      	subs	r1, r2, r1
 80024ee:	63b9      	str	r1, [r7, #56]	@ 0x38
 80024f0:	4649      	mov	r1, r9
 80024f2:	eb63 0301 	sbc.w	r3, r3, r1
 80024f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002504:	4649      	mov	r1, r9
 8002506:	00cb      	lsls	r3, r1, #3
 8002508:	4641      	mov	r1, r8
 800250a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800250e:	4641      	mov	r1, r8
 8002510:	00ca      	lsls	r2, r1, #3
 8002512:	4610      	mov	r0, r2
 8002514:	4619      	mov	r1, r3
 8002516:	4603      	mov	r3, r0
 8002518:	4622      	mov	r2, r4
 800251a:	189b      	adds	r3, r3, r2
 800251c:	633b      	str	r3, [r7, #48]	@ 0x30
 800251e:	462b      	mov	r3, r5
 8002520:	460a      	mov	r2, r1
 8002522:	eb42 0303 	adc.w	r3, r2, r3
 8002526:	637b      	str	r3, [r7, #52]	@ 0x34
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002534:	4629      	mov	r1, r5
 8002536:	024b      	lsls	r3, r1, #9
 8002538:	4621      	mov	r1, r4
 800253a:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800253e:	4621      	mov	r1, r4
 8002540:	024a      	lsls	r2, r1, #9
 8002542:	4610      	mov	r0, r2
 8002544:	4619      	mov	r1, r3
 8002546:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800254a:	2200      	movs	r2, #0
 800254c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002550:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002554:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002558:	f7fd feb2 	bl	80002c0 <__aeabi_uldivmod>
 800255c:	4602      	mov	r2, r0
 800255e:	460b      	mov	r3, r1
 8002560:	4613      	mov	r3, r2
 8002562:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002566:	e067      	b.n	8002638 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002568:	4b75      	ldr	r3, [pc, #468]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	099b      	lsrs	r3, r3, #6
 800256e:	2200      	movs	r2, #0
 8002570:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002574:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002578:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800257c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002580:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002582:	2300      	movs	r3, #0
 8002584:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002586:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800258a:	4622      	mov	r2, r4
 800258c:	462b      	mov	r3, r5
 800258e:	f04f 0000 	mov.w	r0, #0
 8002592:	f04f 0100 	mov.w	r1, #0
 8002596:	0159      	lsls	r1, r3, #5
 8002598:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800259c:	0150      	lsls	r0, r2, #5
 800259e:	4602      	mov	r2, r0
 80025a0:	460b      	mov	r3, r1
 80025a2:	4621      	mov	r1, r4
 80025a4:	1a51      	subs	r1, r2, r1
 80025a6:	62b9      	str	r1, [r7, #40]	@ 0x28
 80025a8:	4629      	mov	r1, r5
 80025aa:	eb63 0301 	sbc.w	r3, r3, r1
 80025ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80025b0:	f04f 0200 	mov.w	r2, #0
 80025b4:	f04f 0300 	mov.w	r3, #0
 80025b8:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 80025bc:	4649      	mov	r1, r9
 80025be:	018b      	lsls	r3, r1, #6
 80025c0:	4641      	mov	r1, r8
 80025c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80025c6:	4641      	mov	r1, r8
 80025c8:	018a      	lsls	r2, r1, #6
 80025ca:	4641      	mov	r1, r8
 80025cc:	ebb2 0a01 	subs.w	sl, r2, r1
 80025d0:	4649      	mov	r1, r9
 80025d2:	eb63 0b01 	sbc.w	fp, r3, r1
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	f04f 0300 	mov.w	r3, #0
 80025de:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80025e2:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80025e6:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80025ea:	4692      	mov	sl, r2
 80025ec:	469b      	mov	fp, r3
 80025ee:	4623      	mov	r3, r4
 80025f0:	eb1a 0303 	adds.w	r3, sl, r3
 80025f4:	623b      	str	r3, [r7, #32]
 80025f6:	462b      	mov	r3, r5
 80025f8:	eb4b 0303 	adc.w	r3, fp, r3
 80025fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80025fe:	f04f 0200 	mov.w	r2, #0
 8002602:	f04f 0300 	mov.w	r3, #0
 8002606:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 800260a:	4629      	mov	r1, r5
 800260c:	028b      	lsls	r3, r1, #10
 800260e:	4621      	mov	r1, r4
 8002610:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002614:	4621      	mov	r1, r4
 8002616:	028a      	lsls	r2, r1, #10
 8002618:	4610      	mov	r0, r2
 800261a:	4619      	mov	r1, r3
 800261c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002620:	2200      	movs	r2, #0
 8002622:	673b      	str	r3, [r7, #112]	@ 0x70
 8002624:	677a      	str	r2, [r7, #116]	@ 0x74
 8002626:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 800262a:	f7fd fe49 	bl	80002c0 <__aeabi_uldivmod>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4613      	mov	r3, r2
 8002634:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002638:	4b41      	ldr	r3, [pc, #260]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	0c1b      	lsrs	r3, r3, #16
 800263e:	f003 0303 	and.w	r3, r3, #3
 8002642:	3301      	adds	r3, #1
 8002644:	005b      	lsls	r3, r3, #1
 8002646:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 800264a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800264e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002652:	fbb2 f3f3 	udiv	r3, r2, r3
 8002656:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800265a:	e0eb      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800265c:	4b38      	ldr	r3, [pc, #224]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 800265e:	685b      	ldr	r3, [r3, #4]
 8002660:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002664:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002668:	4b35      	ldr	r3, [pc, #212]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002670:	2b00      	cmp	r3, #0
 8002672:	d06b      	beq.n	800274c <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002674:	4b32      	ldr	r3, [pc, #200]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x354>)
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	099b      	lsrs	r3, r3, #6
 800267a:	2200      	movs	r2, #0
 800267c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800267e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002680:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002682:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002686:	663b      	str	r3, [r7, #96]	@ 0x60
 8002688:	2300      	movs	r3, #0
 800268a:	667b      	str	r3, [r7, #100]	@ 0x64
 800268c:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002690:	4622      	mov	r2, r4
 8002692:	462b      	mov	r3, r5
 8002694:	f04f 0000 	mov.w	r0, #0
 8002698:	f04f 0100 	mov.w	r1, #0
 800269c:	0159      	lsls	r1, r3, #5
 800269e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80026a2:	0150      	lsls	r0, r2, #5
 80026a4:	4602      	mov	r2, r0
 80026a6:	460b      	mov	r3, r1
 80026a8:	4621      	mov	r1, r4
 80026aa:	1a51      	subs	r1, r2, r1
 80026ac:	61b9      	str	r1, [r7, #24]
 80026ae:	4629      	mov	r1, r5
 80026b0:	eb63 0301 	sbc.w	r3, r3, r1
 80026b4:	61fb      	str	r3, [r7, #28]
 80026b6:	f04f 0200 	mov.w	r2, #0
 80026ba:	f04f 0300 	mov.w	r3, #0
 80026be:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 80026c2:	4659      	mov	r1, fp
 80026c4:	018b      	lsls	r3, r1, #6
 80026c6:	4651      	mov	r1, sl
 80026c8:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026cc:	4651      	mov	r1, sl
 80026ce:	018a      	lsls	r2, r1, #6
 80026d0:	4651      	mov	r1, sl
 80026d2:	ebb2 0801 	subs.w	r8, r2, r1
 80026d6:	4659      	mov	r1, fp
 80026d8:	eb63 0901 	sbc.w	r9, r3, r1
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026e8:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026ec:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026f0:	4690      	mov	r8, r2
 80026f2:	4699      	mov	r9, r3
 80026f4:	4623      	mov	r3, r4
 80026f6:	eb18 0303 	adds.w	r3, r8, r3
 80026fa:	613b      	str	r3, [r7, #16]
 80026fc:	462b      	mov	r3, r5
 80026fe:	eb49 0303 	adc.w	r3, r9, r3
 8002702:	617b      	str	r3, [r7, #20]
 8002704:	f04f 0200 	mov.w	r2, #0
 8002708:	f04f 0300 	mov.w	r3, #0
 800270c:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002710:	4629      	mov	r1, r5
 8002712:	024b      	lsls	r3, r1, #9
 8002714:	4621      	mov	r1, r4
 8002716:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800271a:	4621      	mov	r1, r4
 800271c:	024a      	lsls	r2, r1, #9
 800271e:	4610      	mov	r0, r2
 8002720:	4619      	mov	r1, r3
 8002722:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002726:	2200      	movs	r2, #0
 8002728:	65bb      	str	r3, [r7, #88]	@ 0x58
 800272a:	65fa      	str	r2, [r7, #92]	@ 0x5c
 800272c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002730:	f7fd fdc6 	bl	80002c0 <__aeabi_uldivmod>
 8002734:	4602      	mov	r2, r0
 8002736:	460b      	mov	r3, r1
 8002738:	4613      	mov	r3, r2
 800273a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800273e:	e065      	b.n	800280c <HAL_RCC_GetSysClockFreq+0x420>
 8002740:	40023800 	.word	0x40023800
 8002744:	00f42400 	.word	0x00f42400
 8002748:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800274c:	4b3d      	ldr	r3, [pc, #244]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x458>)
 800274e:	685b      	ldr	r3, [r3, #4]
 8002750:	099b      	lsrs	r3, r3, #6
 8002752:	2200      	movs	r2, #0
 8002754:	4618      	mov	r0, r3
 8002756:	4611      	mov	r1, r2
 8002758:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800275c:	653b      	str	r3, [r7, #80]	@ 0x50
 800275e:	2300      	movs	r3, #0
 8002760:	657b      	str	r3, [r7, #84]	@ 0x54
 8002762:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002766:	4642      	mov	r2, r8
 8002768:	464b      	mov	r3, r9
 800276a:	f04f 0000 	mov.w	r0, #0
 800276e:	f04f 0100 	mov.w	r1, #0
 8002772:	0159      	lsls	r1, r3, #5
 8002774:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002778:	0150      	lsls	r0, r2, #5
 800277a:	4602      	mov	r2, r0
 800277c:	460b      	mov	r3, r1
 800277e:	4641      	mov	r1, r8
 8002780:	1a51      	subs	r1, r2, r1
 8002782:	60b9      	str	r1, [r7, #8]
 8002784:	4649      	mov	r1, r9
 8002786:	eb63 0301 	sbc.w	r3, r3, r1
 800278a:	60fb      	str	r3, [r7, #12]
 800278c:	f04f 0200 	mov.w	r2, #0
 8002790:	f04f 0300 	mov.w	r3, #0
 8002794:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002798:	4659      	mov	r1, fp
 800279a:	018b      	lsls	r3, r1, #6
 800279c:	4651      	mov	r1, sl
 800279e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027a2:	4651      	mov	r1, sl
 80027a4:	018a      	lsls	r2, r1, #6
 80027a6:	4651      	mov	r1, sl
 80027a8:	1a54      	subs	r4, r2, r1
 80027aa:	4659      	mov	r1, fp
 80027ac:	eb63 0501 	sbc.w	r5, r3, r1
 80027b0:	f04f 0200 	mov.w	r2, #0
 80027b4:	f04f 0300 	mov.w	r3, #0
 80027b8:	00eb      	lsls	r3, r5, #3
 80027ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80027be:	00e2      	lsls	r2, r4, #3
 80027c0:	4614      	mov	r4, r2
 80027c2:	461d      	mov	r5, r3
 80027c4:	4643      	mov	r3, r8
 80027c6:	18e3      	adds	r3, r4, r3
 80027c8:	603b      	str	r3, [r7, #0]
 80027ca:	464b      	mov	r3, r9
 80027cc:	eb45 0303 	adc.w	r3, r5, r3
 80027d0:	607b      	str	r3, [r7, #4]
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	f04f 0300 	mov.w	r3, #0
 80027da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80027de:	4629      	mov	r1, r5
 80027e0:	028b      	lsls	r3, r1, #10
 80027e2:	4621      	mov	r1, r4
 80027e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027e8:	4621      	mov	r1, r4
 80027ea:	028a      	lsls	r2, r1, #10
 80027ec:	4610      	mov	r0, r2
 80027ee:	4619      	mov	r1, r3
 80027f0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027f4:	2200      	movs	r2, #0
 80027f6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80027f8:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80027fa:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027fe:	f7fd fd5f 	bl	80002c0 <__aeabi_uldivmod>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4613      	mov	r3, r2
 8002808:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 800280c:	4b0d      	ldr	r3, [pc, #52]	@ (8002844 <HAL_RCC_GetSysClockFreq+0x458>)
 800280e:	685b      	ldr	r3, [r3, #4]
 8002810:	0f1b      	lsrs	r3, r3, #28
 8002812:	f003 0307 	and.w	r3, r3, #7
 8002816:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 800281a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800281e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002822:	fbb2 f3f3 	udiv	r3, r2, r3
 8002826:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800282a:	e003      	b.n	8002834 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800282c:	4b06      	ldr	r3, [pc, #24]	@ (8002848 <HAL_RCC_GetSysClockFreq+0x45c>)
 800282e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002832:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002834:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002838:	4618      	mov	r0, r3
 800283a:	37b8      	adds	r7, #184	@ 0xb8
 800283c:	46bd      	mov	sp, r7
 800283e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002842:	bf00      	nop
 8002844:	40023800 	.word	0x40023800
 8002848:	00f42400 	.word	0x00f42400

0800284c <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b086      	sub	sp, #24
 8002850:	af00      	add	r7, sp, #0
 8002852:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d101      	bne.n	800285e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800285a:	2301      	movs	r3, #1
 800285c:	e28d      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	f003 0301 	and.w	r3, r3, #1
 8002866:	2b00      	cmp	r3, #0
 8002868:	f000 8083 	beq.w	8002972 <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800286c:	4b94      	ldr	r3, [pc, #592]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 030c 	and.w	r3, r3, #12
 8002874:	2b04      	cmp	r3, #4
 8002876:	d019      	beq.n	80028ac <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002878:	4b91      	ldr	r3, [pc, #580]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 030c 	and.w	r3, r3, #12
        || \
 8002880:	2b08      	cmp	r3, #8
 8002882:	d106      	bne.n	8002892 <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002884:	4b8e      	ldr	r3, [pc, #568]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800288c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002890:	d00c      	beq.n	80028ac <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002892:	4b8b      	ldr	r3, [pc, #556]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002894:	689b      	ldr	r3, [r3, #8]
 8002896:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 800289a:	2b0c      	cmp	r3, #12
 800289c:	d112      	bne.n	80028c4 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800289e:	4b88      	ldr	r3, [pc, #544]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028a0:	685b      	ldr	r3, [r3, #4]
 80028a2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80028a6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80028aa:	d10b      	bne.n	80028c4 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ac:	4b84      	ldr	r3, [pc, #528]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d05b      	beq.n	8002970 <HAL_RCC_OscConfig+0x124>
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d157      	bne.n	8002970 <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 80028c0:	2301      	movs	r3, #1
 80028c2:	e25a      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80028cc:	d106      	bne.n	80028dc <HAL_RCC_OscConfig+0x90>
 80028ce:	4b7c      	ldr	r3, [pc, #496]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	4a7b      	ldr	r2, [pc, #492]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028d4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028d8:	6013      	str	r3, [r2, #0]
 80028da:	e01d      	b.n	8002918 <HAL_RCC_OscConfig+0xcc>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80028e4:	d10c      	bne.n	8002900 <HAL_RCC_OscConfig+0xb4>
 80028e6:	4b76      	ldr	r3, [pc, #472]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	4a75      	ldr	r2, [pc, #468]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028ec:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80028f0:	6013      	str	r3, [r2, #0]
 80028f2:	4b73      	ldr	r3, [pc, #460]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4a72      	ldr	r2, [pc, #456]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80028f8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028fc:	6013      	str	r3, [r2, #0]
 80028fe:	e00b      	b.n	8002918 <HAL_RCC_OscConfig+0xcc>
 8002900:	4b6f      	ldr	r3, [pc, #444]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a6e      	ldr	r2, [pc, #440]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002906:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800290a:	6013      	str	r3, [r2, #0]
 800290c:	4b6c      	ldr	r3, [pc, #432]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	4a6b      	ldr	r2, [pc, #428]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002912:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002916:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d013      	beq.n	8002948 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002920:	f7fe ff84 	bl	800182c <HAL_GetTick>
 8002924:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002926:	e008      	b.n	800293a <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002928:	f7fe ff80 	bl	800182c <HAL_GetTick>
 800292c:	4602      	mov	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	2b64      	cmp	r3, #100	@ 0x64
 8002934:	d901      	bls.n	800293a <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002936:	2303      	movs	r3, #3
 8002938:	e21f      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800293a:	4b61      	ldr	r3, [pc, #388]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002942:	2b00      	cmp	r3, #0
 8002944:	d0f0      	beq.n	8002928 <HAL_RCC_OscConfig+0xdc>
 8002946:	e014      	b.n	8002972 <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002948:	f7fe ff70 	bl	800182c <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800294e:	e008      	b.n	8002962 <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002950:	f7fe ff6c 	bl	800182c <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	2b64      	cmp	r3, #100	@ 0x64
 800295c:	d901      	bls.n	8002962 <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 800295e:	2303      	movs	r3, #3
 8002960:	e20b      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002962:	4b57      	ldr	r3, [pc, #348]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800296a:	2b00      	cmp	r3, #0
 800296c:	d1f0      	bne.n	8002950 <HAL_RCC_OscConfig+0x104>
 800296e:	e000      	b.n	8002972 <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002970:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d06f      	beq.n	8002a5e <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800297e:	4b50      	ldr	r3, [pc, #320]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002980:	689b      	ldr	r3, [r3, #8]
 8002982:	f003 030c 	and.w	r3, r3, #12
 8002986:	2b00      	cmp	r3, #0
 8002988:	d017      	beq.n	80029ba <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 800298a:	4b4d      	ldr	r3, [pc, #308]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 030c 	and.w	r3, r3, #12
        || \
 8002992:	2b08      	cmp	r3, #8
 8002994:	d105      	bne.n	80029a2 <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002996:	4b4a      	ldr	r3, [pc, #296]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d00b      	beq.n	80029ba <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029a2:	4b47      	ldr	r3, [pc, #284]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80029a4:	689b      	ldr	r3, [r3, #8]
 80029a6:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 80029aa:	2b0c      	cmp	r3, #12
 80029ac:	d11c      	bne.n	80029e8 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ae:	4b44      	ldr	r3, [pc, #272]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d116      	bne.n	80029e8 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029ba:	4b41      	ldr	r3, [pc, #260]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d005      	beq.n	80029d2 <HAL_RCC_OscConfig+0x186>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68db      	ldr	r3, [r3, #12]
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d001      	beq.n	80029d2 <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e1d3      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80029d2:	4b3b      	ldr	r3, [pc, #236]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	691b      	ldr	r3, [r3, #16]
 80029de:	00db      	lsls	r3, r3, #3
 80029e0:	4937      	ldr	r1, [pc, #220]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80029e6:	e03a      	b.n	8002a5e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	d020      	beq.n	8002a32 <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80029f0:	4b34      	ldr	r3, [pc, #208]	@ (8002ac4 <HAL_RCC_OscConfig+0x278>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029f6:	f7fe ff19 	bl	800182c <HAL_GetTick>
 80029fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029fc:	e008      	b.n	8002a10 <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80029fe:	f7fe ff15 	bl	800182c <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	693b      	ldr	r3, [r7, #16]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d901      	bls.n	8002a10 <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	e1b4      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a10:	4b2b      	ldr	r3, [pc, #172]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f003 0302 	and.w	r3, r3, #2
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d0f0      	beq.n	80029fe <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1c:	4b28      	ldr	r3, [pc, #160]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	691b      	ldr	r3, [r3, #16]
 8002a28:	00db      	lsls	r3, r3, #3
 8002a2a:	4925      	ldr	r1, [pc, #148]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002a2c:	4313      	orrs	r3, r2
 8002a2e:	600b      	str	r3, [r1, #0]
 8002a30:	e015      	b.n	8002a5e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a32:	4b24      	ldr	r3, [pc, #144]	@ (8002ac4 <HAL_RCC_OscConfig+0x278>)
 8002a34:	2200      	movs	r2, #0
 8002a36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a38:	f7fe fef8 	bl	800182c <HAL_GetTick>
 8002a3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a3e:	e008      	b.n	8002a52 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a40:	f7fe fef4 	bl	800182c <HAL_GetTick>
 8002a44:	4602      	mov	r2, r0
 8002a46:	693b      	ldr	r3, [r7, #16]
 8002a48:	1ad3      	subs	r3, r2, r3
 8002a4a:	2b02      	cmp	r3, #2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e193      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a52:	4b1b      	ldr	r3, [pc, #108]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0302 	and.w	r3, r3, #2
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d1f0      	bne.n	8002a40 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d036      	beq.n	8002ad8 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	695b      	ldr	r3, [r3, #20]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d016      	beq.n	8002aa0 <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002a72:	4b15      	ldr	r3, [pc, #84]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002a74:	2201      	movs	r2, #1
 8002a76:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a78:	f7fe fed8 	bl	800182c <HAL_GetTick>
 8002a7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a7e:	e008      	b.n	8002a92 <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002a80:	f7fe fed4 	bl	800182c <HAL_GetTick>
 8002a84:	4602      	mov	r2, r0
 8002a86:	693b      	ldr	r3, [r7, #16]
 8002a88:	1ad3      	subs	r3, r2, r3
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e173      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002a92:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac0 <HAL_RCC_OscConfig+0x274>)
 8002a94:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002a96:	f003 0302 	and.w	r3, r3, #2
 8002a9a:	2b00      	cmp	r3, #0
 8002a9c:	d0f0      	beq.n	8002a80 <HAL_RCC_OscConfig+0x234>
 8002a9e:	e01b      	b.n	8002ad8 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002aa0:	4b09      	ldr	r3, [pc, #36]	@ (8002ac8 <HAL_RCC_OscConfig+0x27c>)
 8002aa2:	2200      	movs	r2, #0
 8002aa4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002aa6:	f7fe fec1 	bl	800182c <HAL_GetTick>
 8002aaa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002aac:	e00e      	b.n	8002acc <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002aae:	f7fe febd 	bl	800182c <HAL_GetTick>
 8002ab2:	4602      	mov	r2, r0
 8002ab4:	693b      	ldr	r3, [r7, #16]
 8002ab6:	1ad3      	subs	r3, r2, r3
 8002ab8:	2b02      	cmp	r3, #2
 8002aba:	d907      	bls.n	8002acc <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002abc:	2303      	movs	r3, #3
 8002abe:	e15c      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
 8002ac0:	40023800 	.word	0x40023800
 8002ac4:	42470000 	.word	0x42470000
 8002ac8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002acc:	4b8a      	ldr	r3, [pc, #552]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002ace:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002ad0:	f003 0302 	and.w	r3, r3, #2
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d1ea      	bne.n	8002aae <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	f003 0304 	and.w	r3, r3, #4
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	f000 8097 	beq.w	8002c14 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002ae6:	2300      	movs	r3, #0
 8002ae8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002aea:	4b83      	ldr	r3, [pc, #524]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002aec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002aee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d10f      	bne.n	8002b16 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002af6:	2300      	movs	r3, #0
 8002af8:	60bb      	str	r3, [r7, #8]
 8002afa:	4b7f      	ldr	r3, [pc, #508]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002afc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002afe:	4a7e      	ldr	r2, [pc, #504]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b00:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b04:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b06:	4b7c      	ldr	r3, [pc, #496]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b0e:	60bb      	str	r3, [r7, #8]
 8002b10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b12:	2301      	movs	r3, #1
 8002b14:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b16:	4b79      	ldr	r3, [pc, #484]	@ (8002cfc <HAL_RCC_OscConfig+0x4b0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d118      	bne.n	8002b54 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002b22:	4b76      	ldr	r3, [pc, #472]	@ (8002cfc <HAL_RCC_OscConfig+0x4b0>)
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a75      	ldr	r2, [pc, #468]	@ (8002cfc <HAL_RCC_OscConfig+0x4b0>)
 8002b28:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002b2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b2e:	f7fe fe7d 	bl	800182c <HAL_GetTick>
 8002b32:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b34:	e008      	b.n	8002b48 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b36:	f7fe fe79 	bl	800182c <HAL_GetTick>
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	693b      	ldr	r3, [r7, #16]
 8002b3e:	1ad3      	subs	r3, r2, r3
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d901      	bls.n	8002b48 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002b44:	2303      	movs	r3, #3
 8002b46:	e118      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002b48:	4b6c      	ldr	r3, [pc, #432]	@ (8002cfc <HAL_RCC_OscConfig+0x4b0>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d0f0      	beq.n	8002b36 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	689b      	ldr	r3, [r3, #8]
 8002b58:	2b01      	cmp	r3, #1
 8002b5a:	d106      	bne.n	8002b6a <HAL_RCC_OscConfig+0x31e>
 8002b5c:	4b66      	ldr	r3, [pc, #408]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b60:	4a65      	ldr	r2, [pc, #404]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b62:	f043 0301 	orr.w	r3, r3, #1
 8002b66:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b68:	e01c      	b.n	8002ba4 <HAL_RCC_OscConfig+0x358>
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	2b05      	cmp	r3, #5
 8002b70:	d10c      	bne.n	8002b8c <HAL_RCC_OscConfig+0x340>
 8002b72:	4b61      	ldr	r3, [pc, #388]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b74:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b76:	4a60      	ldr	r2, [pc, #384]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b78:	f043 0304 	orr.w	r3, r3, #4
 8002b7c:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b7e:	4b5e      	ldr	r3, [pc, #376]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b80:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b82:	4a5d      	ldr	r2, [pc, #372]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b84:	f043 0301 	orr.w	r3, r3, #1
 8002b88:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b8a:	e00b      	b.n	8002ba4 <HAL_RCC_OscConfig+0x358>
 8002b8c:	4b5a      	ldr	r3, [pc, #360]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b8e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b90:	4a59      	ldr	r2, [pc, #356]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b92:	f023 0301 	bic.w	r3, r3, #1
 8002b96:	6713      	str	r3, [r2, #112]	@ 0x70
 8002b98:	4b57      	ldr	r3, [pc, #348]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002b9c:	4a56      	ldr	r2, [pc, #344]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002b9e:	f023 0304 	bic.w	r3, r3, #4
 8002ba2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d015      	beq.n	8002bd8 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bac:	f7fe fe3e 	bl	800182c <HAL_GetTick>
 8002bb0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bb2:	e00a      	b.n	8002bca <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002bb4:	f7fe fe3a 	bl	800182c <HAL_GetTick>
 8002bb8:	4602      	mov	r2, r0
 8002bba:	693b      	ldr	r3, [r7, #16]
 8002bbc:	1ad3      	subs	r3, r2, r3
 8002bbe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d901      	bls.n	8002bca <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	e0d7      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002bca:	4b4b      	ldr	r3, [pc, #300]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002bcc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bce:	f003 0302 	and.w	r3, r3, #2
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d0ee      	beq.n	8002bb4 <HAL_RCC_OscConfig+0x368>
 8002bd6:	e014      	b.n	8002c02 <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bd8:	f7fe fe28 	bl	800182c <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bde:	e00a      	b.n	8002bf6 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002be0:	f7fe fe24 	bl	800182c <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002bee:	4293      	cmp	r3, r2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e0c1      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002bf6:	4b40      	ldr	r3, [pc, #256]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002bf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002bfa:	f003 0302 	and.w	r3, r3, #2
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1ee      	bne.n	8002be0 <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c02:	7dfb      	ldrb	r3, [r7, #23]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d105      	bne.n	8002c14 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c08:	4b3b      	ldr	r3, [pc, #236]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c0c:	4a3a      	ldr	r2, [pc, #232]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002c0e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002c12:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	699b      	ldr	r3, [r3, #24]
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	f000 80ad 	beq.w	8002d78 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002c1e:	4b36      	ldr	r3, [pc, #216]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 030c 	and.w	r3, r3, #12
 8002c26:	2b08      	cmp	r3, #8
 8002c28:	d060      	beq.n	8002cec <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	699b      	ldr	r3, [r3, #24]
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d145      	bne.n	8002cbe <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c32:	4b33      	ldr	r3, [pc, #204]	@ (8002d00 <HAL_RCC_OscConfig+0x4b4>)
 8002c34:	2200      	movs	r2, #0
 8002c36:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c38:	f7fe fdf8 	bl	800182c <HAL_GetTick>
 8002c3c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c3e:	e008      	b.n	8002c52 <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c40:	f7fe fdf4 	bl	800182c <HAL_GetTick>
 8002c44:	4602      	mov	r2, r0
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	1ad3      	subs	r3, r2, r3
 8002c4a:	2b02      	cmp	r3, #2
 8002c4c:	d901      	bls.n	8002c52 <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002c4e:	2303      	movs	r3, #3
 8002c50:	e093      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c52:	4b29      	ldr	r3, [pc, #164]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d1f0      	bne.n	8002c40 <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	69da      	ldr	r2, [r3, #28]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	6a1b      	ldr	r3, [r3, #32]
 8002c66:	431a      	orrs	r2, r3
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c6c:	019b      	lsls	r3, r3, #6
 8002c6e:	431a      	orrs	r2, r3
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c74:	085b      	lsrs	r3, r3, #1
 8002c76:	3b01      	subs	r3, #1
 8002c78:	041b      	lsls	r3, r3, #16
 8002c7a:	431a      	orrs	r2, r3
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	061b      	lsls	r3, r3, #24
 8002c82:	431a      	orrs	r2, r3
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c88:	071b      	lsls	r3, r3, #28
 8002c8a:	491b      	ldr	r1, [pc, #108]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002c90:	4b1b      	ldr	r3, [pc, #108]	@ (8002d00 <HAL_RCC_OscConfig+0x4b4>)
 8002c92:	2201      	movs	r2, #1
 8002c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c96:	f7fe fdc9 	bl	800182c <HAL_GetTick>
 8002c9a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c9c:	e008      	b.n	8002cb0 <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c9e:	f7fe fdc5 	bl	800182c <HAL_GetTick>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	1ad3      	subs	r3, r2, r3
 8002ca8:	2b02      	cmp	r3, #2
 8002caa:	d901      	bls.n	8002cb0 <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002cac:	2303      	movs	r3, #3
 8002cae:	e064      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002cb0:	4b11      	ldr	r3, [pc, #68]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d0f0      	beq.n	8002c9e <HAL_RCC_OscConfig+0x452>
 8002cbc:	e05c      	b.n	8002d78 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cbe:	4b10      	ldr	r3, [pc, #64]	@ (8002d00 <HAL_RCC_OscConfig+0x4b4>)
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cc4:	f7fe fdb2 	bl	800182c <HAL_GetTick>
 8002cc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cca:	e008      	b.n	8002cde <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ccc:	f7fe fdae 	bl	800182c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	2b02      	cmp	r3, #2
 8002cd8:	d901      	bls.n	8002cde <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002cda:	2303      	movs	r3, #3
 8002cdc:	e04d      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cde:	4b06      	ldr	r3, [pc, #24]	@ (8002cf8 <HAL_RCC_OscConfig+0x4ac>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ce6:	2b00      	cmp	r3, #0
 8002ce8:	d1f0      	bne.n	8002ccc <HAL_RCC_OscConfig+0x480>
 8002cea:	e045      	b.n	8002d78 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	699b      	ldr	r3, [r3, #24]
 8002cf0:	2b01      	cmp	r3, #1
 8002cf2:	d107      	bne.n	8002d04 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	e040      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
 8002cf8:	40023800 	.word	0x40023800
 8002cfc:	40007000 	.word	0x40007000
 8002d00:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002d04:	4b1f      	ldr	r3, [pc, #124]	@ (8002d84 <HAL_RCC_OscConfig+0x538>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	699b      	ldr	r3, [r3, #24]
 8002d0e:	2b01      	cmp	r3, #1
 8002d10:	d030      	beq.n	8002d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d129      	bne.n	8002d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d2a:	429a      	cmp	r2, r3
 8002d2c:	d122      	bne.n	8002d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002d34:	4013      	ands	r3, r2
 8002d36:	687a      	ldr	r2, [r7, #4]
 8002d38:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002d3a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d119      	bne.n	8002d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d4a:	085b      	lsrs	r3, r3, #1
 8002d4c:	3b01      	subs	r3, #1
 8002d4e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002d50:	429a      	cmp	r2, r3
 8002d52:	d10f      	bne.n	8002d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d5e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002d60:	429a      	cmp	r2, r3
 8002d62:	d107      	bne.n	8002d74 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d6e:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002d70:	429a      	cmp	r2, r3
 8002d72:	d001      	beq.n	8002d78 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e000      	b.n	8002d7a <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3718      	adds	r7, #24
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
 8002d82:	bf00      	nop
 8002d84:	40023800 	.word	0x40023800

08002d88 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b082      	sub	sp, #8
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d101      	bne.n	8002d9a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d96:	2301      	movs	r3, #1
 8002d98:	e041      	b.n	8002e1e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002da0:	b2db      	uxtb	r3, r3
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d106      	bne.n	8002db4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	2200      	movs	r2, #0
 8002daa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f7fe fba0 	bl	80014f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2202      	movs	r2, #2
 8002db8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681a      	ldr	r2, [r3, #0]
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	3304      	adds	r3, #4
 8002dc4:	4619      	mov	r1, r3
 8002dc6:	4610      	mov	r0, r2
 8002dc8:	f000 fd42 	bl	8003850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	4618      	mov	r0, r3
 8002e20:	3708      	adds	r7, #8
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}
	...

08002e28 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	b085      	sub	sp, #20
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e36:	b2db      	uxtb	r3, r3
 8002e38:	2b01      	cmp	r3, #1
 8002e3a:	d001      	beq.n	8002e40 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e3c:	2301      	movs	r3, #1
 8002e3e:	e04e      	b.n	8002ede <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	2202      	movs	r2, #2
 8002e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	68da      	ldr	r2, [r3, #12]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	f042 0201 	orr.w	r2, r2, #1
 8002e56:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a23      	ldr	r2, [pc, #140]	@ (8002eec <HAL_TIM_Base_Start_IT+0xc4>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d022      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002e6a:	d01d      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4a1f      	ldr	r2, [pc, #124]	@ (8002ef0 <HAL_TIM_Base_Start_IT+0xc8>)
 8002e72:	4293      	cmp	r3, r2
 8002e74:	d018      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002ef4 <HAL_TIM_Base_Start_IT+0xcc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d013      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	4a1c      	ldr	r2, [pc, #112]	@ (8002ef8 <HAL_TIM_Base_Start_IT+0xd0>)
 8002e86:	4293      	cmp	r3, r2
 8002e88:	d00e      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4a1b      	ldr	r2, [pc, #108]	@ (8002efc <HAL_TIM_Base_Start_IT+0xd4>)
 8002e90:	4293      	cmp	r3, r2
 8002e92:	d009      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4a19      	ldr	r2, [pc, #100]	@ (8002f00 <HAL_TIM_Base_Start_IT+0xd8>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d004      	beq.n	8002ea8 <HAL_TIM_Base_Start_IT+0x80>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a18      	ldr	r2, [pc, #96]	@ (8002f04 <HAL_TIM_Base_Start_IT+0xdc>)
 8002ea4:	4293      	cmp	r3, r2
 8002ea6:	d111      	bne.n	8002ecc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689b      	ldr	r3, [r3, #8]
 8002eae:	f003 0307 	and.w	r3, r3, #7
 8002eb2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	2b06      	cmp	r3, #6
 8002eb8:	d010      	beq.n	8002edc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	681a      	ldr	r2, [r3, #0]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f042 0201 	orr.w	r2, r2, #1
 8002ec8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eca:	e007      	b.n	8002edc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f042 0201 	orr.w	r2, r2, #1
 8002eda:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3714      	adds	r7, #20
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40010000 	.word	0x40010000
 8002ef0:	40000400 	.word	0x40000400
 8002ef4:	40000800 	.word	0x40000800
 8002ef8:	40000c00 	.word	0x40000c00
 8002efc:	40010400 	.word	0x40010400
 8002f00:	40014000 	.word	0x40014000
 8002f04:	40001800 	.word	0x40001800

08002f08 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b083      	sub	sp, #12
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68da      	ldr	r2, [r3, #12]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	6a1a      	ldr	r2, [r3, #32]
 8002f26:	f241 1311 	movw	r3, #4369	@ 0x1111
 8002f2a:	4013      	ands	r3, r2
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d10f      	bne.n	8002f50 <HAL_TIM_Base_Stop_IT+0x48>
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	6a1a      	ldr	r2, [r3, #32]
 8002f36:	f240 4344 	movw	r3, #1092	@ 0x444
 8002f3a:	4013      	ands	r3, r2
 8002f3c:	2b00      	cmp	r3, #0
 8002f3e:	d107      	bne.n	8002f50 <HAL_TIM_Base_Stop_IT+0x48>
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f022 0201 	bic.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2201      	movs	r2, #1
 8002f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Return function status */
  return HAL_OK;
 8002f58:	2300      	movs	r3, #0
}
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	370c      	adds	r7, #12
 8002f5e:	46bd      	mov	sp, r7
 8002f60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f64:	4770      	bx	lr

08002f66 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002f66:	b580      	push	{r7, lr}
 8002f68:	b082      	sub	sp, #8
 8002f6a:	af00      	add	r7, sp, #0
 8002f6c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d101      	bne.n	8002f78 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002f74:	2301      	movs	r3, #1
 8002f76:	e041      	b.n	8002ffc <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b00      	cmp	r3, #0
 8002f82:	d106      	bne.n	8002f92 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2200      	movs	r2, #0
 8002f88:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 f839 	bl	8003004 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2202      	movs	r2, #2
 8002f96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	f000 fc53 	bl	8003850 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2201      	movs	r2, #1
 8002fae:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2201      	movs	r2, #1
 8002fb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2201      	movs	r2, #1
 8002fbe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2201      	movs	r2, #1
 8002fee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	2201      	movs	r2, #1
 8002ff6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ffa:	2300      	movs	r3, #0
}
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	3708      	adds	r7, #8
 8003000:	46bd      	mov	sp, r7
 8003002:	bd80      	pop	{r7, pc}

08003004 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b084      	sub	sp, #16
 800301c:	af00      	add	r7, sp, #0
 800301e:	6078      	str	r0, [r7, #4]
 8003020:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d109      	bne.n	800303c <HAL_TIM_PWM_Start+0x24>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800302e:	b2db      	uxtb	r3, r3
 8003030:	2b01      	cmp	r3, #1
 8003032:	bf14      	ite	ne
 8003034:	2301      	movne	r3, #1
 8003036:	2300      	moveq	r3, #0
 8003038:	b2db      	uxtb	r3, r3
 800303a:	e022      	b.n	8003082 <HAL_TIM_PWM_Start+0x6a>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	2b04      	cmp	r3, #4
 8003040:	d109      	bne.n	8003056 <HAL_TIM_PWM_Start+0x3e>
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003048:	b2db      	uxtb	r3, r3
 800304a:	2b01      	cmp	r3, #1
 800304c:	bf14      	ite	ne
 800304e:	2301      	movne	r3, #1
 8003050:	2300      	moveq	r3, #0
 8003052:	b2db      	uxtb	r3, r3
 8003054:	e015      	b.n	8003082 <HAL_TIM_PWM_Start+0x6a>
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	2b08      	cmp	r3, #8
 800305a:	d109      	bne.n	8003070 <HAL_TIM_PWM_Start+0x58>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003062:	b2db      	uxtb	r3, r3
 8003064:	2b01      	cmp	r3, #1
 8003066:	bf14      	ite	ne
 8003068:	2301      	movne	r3, #1
 800306a:	2300      	moveq	r3, #0
 800306c:	b2db      	uxtb	r3, r3
 800306e:	e008      	b.n	8003082 <HAL_TIM_PWM_Start+0x6a>
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003076:	b2db      	uxtb	r3, r3
 8003078:	2b01      	cmp	r3, #1
 800307a:	bf14      	ite	ne
 800307c:	2301      	movne	r3, #1
 800307e:	2300      	moveq	r3, #0
 8003080:	b2db      	uxtb	r3, r3
 8003082:	2b00      	cmp	r3, #0
 8003084:	d001      	beq.n	800308a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e07c      	b.n	8003184 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d104      	bne.n	800309a <HAL_TIM_PWM_Start+0x82>
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2202      	movs	r2, #2
 8003094:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003098:	e013      	b.n	80030c2 <HAL_TIM_PWM_Start+0xaa>
 800309a:	683b      	ldr	r3, [r7, #0]
 800309c:	2b04      	cmp	r3, #4
 800309e:	d104      	bne.n	80030aa <HAL_TIM_PWM_Start+0x92>
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	2202      	movs	r2, #2
 80030a4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80030a8:	e00b      	b.n	80030c2 <HAL_TIM_PWM_Start+0xaa>
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	2b08      	cmp	r3, #8
 80030ae:	d104      	bne.n	80030ba <HAL_TIM_PWM_Start+0xa2>
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	2202      	movs	r2, #2
 80030b4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80030b8:	e003      	b.n	80030c2 <HAL_TIM_PWM_Start+0xaa>
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	2202      	movs	r2, #2
 80030be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	2201      	movs	r2, #1
 80030c8:	6839      	ldr	r1, [r7, #0]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 ff47 	bl	8003f5e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a2d      	ldr	r2, [pc, #180]	@ (800318c <HAL_TIM_PWM_Start+0x174>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d004      	beq.n	80030e4 <HAL_TIM_PWM_Start+0xcc>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a2c      	ldr	r2, [pc, #176]	@ (8003190 <HAL_TIM_PWM_Start+0x178>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d101      	bne.n	80030e8 <HAL_TIM_PWM_Start+0xd0>
 80030e4:	2301      	movs	r3, #1
 80030e6:	e000      	b.n	80030ea <HAL_TIM_PWM_Start+0xd2>
 80030e8:	2300      	movs	r3, #0
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d007      	beq.n	80030fe <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030fc:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	4a22      	ldr	r2, [pc, #136]	@ (800318c <HAL_TIM_PWM_Start+0x174>)
 8003104:	4293      	cmp	r3, r2
 8003106:	d022      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003110:	d01d      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	4a1f      	ldr	r2, [pc, #124]	@ (8003194 <HAL_TIM_PWM_Start+0x17c>)
 8003118:	4293      	cmp	r3, r2
 800311a:	d018      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1d      	ldr	r2, [pc, #116]	@ (8003198 <HAL_TIM_PWM_Start+0x180>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a1c      	ldr	r2, [pc, #112]	@ (800319c <HAL_TIM_PWM_Start+0x184>)
 800312c:	4293      	cmp	r3, r2
 800312e:	d00e      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4a16      	ldr	r2, [pc, #88]	@ (8003190 <HAL_TIM_PWM_Start+0x178>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d009      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	4a18      	ldr	r2, [pc, #96]	@ (80031a0 <HAL_TIM_PWM_Start+0x188>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d004      	beq.n	800314e <HAL_TIM_PWM_Start+0x136>
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	4a16      	ldr	r2, [pc, #88]	@ (80031a4 <HAL_TIM_PWM_Start+0x18c>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d111      	bne.n	8003172 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	f003 0307 	and.w	r3, r3, #7
 8003158:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	2b06      	cmp	r3, #6
 800315e:	d010      	beq.n	8003182 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	f042 0201 	orr.w	r2, r2, #1
 800316e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003170:	e007      	b.n	8003182 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	681a      	ldr	r2, [r3, #0]
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	f042 0201 	orr.w	r2, r2, #1
 8003180:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}
 800318c:	40010000 	.word	0x40010000
 8003190:	40010400 	.word	0x40010400
 8003194:	40000400 	.word	0x40000400
 8003198:	40000800 	.word	0x40000800
 800319c:	40000c00 	.word	0x40000c00
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40001800 	.word	0x40001800

080031a8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	b082      	sub	sp, #8
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
 80031b0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	2200      	movs	r2, #0
 80031b8:	6839      	ldr	r1, [r7, #0]
 80031ba:	4618      	mov	r0, r3
 80031bc:	f000 fecf 	bl	8003f5e <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	4a2e      	ldr	r2, [pc, #184]	@ (8003280 <HAL_TIM_PWM_Stop+0xd8>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d004      	beq.n	80031d4 <HAL_TIM_PWM_Stop+0x2c>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2d      	ldr	r2, [pc, #180]	@ (8003284 <HAL_TIM_PWM_Stop+0xdc>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d101      	bne.n	80031d8 <HAL_TIM_PWM_Stop+0x30>
 80031d4:	2301      	movs	r3, #1
 80031d6:	e000      	b.n	80031da <HAL_TIM_PWM_Stop+0x32>
 80031d8:	2300      	movs	r3, #0
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d017      	beq.n	800320e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	6a1a      	ldr	r2, [r3, #32]
 80031e4:	f241 1311 	movw	r3, #4369	@ 0x1111
 80031e8:	4013      	ands	r3, r2
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d10f      	bne.n	800320e <HAL_TIM_PWM_Stop+0x66>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	6a1a      	ldr	r2, [r3, #32]
 80031f4:	f240 4344 	movw	r3, #1092	@ 0x444
 80031f8:	4013      	ands	r3, r2
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d107      	bne.n	800320e <HAL_TIM_PWM_Stop+0x66>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800320c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	6a1a      	ldr	r2, [r3, #32]
 8003214:	f241 1311 	movw	r3, #4369	@ 0x1111
 8003218:	4013      	ands	r3, r2
 800321a:	2b00      	cmp	r3, #0
 800321c:	d10f      	bne.n	800323e <HAL_TIM_PWM_Stop+0x96>
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	6a1a      	ldr	r2, [r3, #32]
 8003224:	f240 4344 	movw	r3, #1092	@ 0x444
 8003228:	4013      	ands	r3, r2
 800322a:	2b00      	cmp	r3, #0
 800322c:	d107      	bne.n	800323e <HAL_TIM_PWM_Stop+0x96>
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 0201 	bic.w	r2, r2, #1
 800323c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800323e:	683b      	ldr	r3, [r7, #0]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d104      	bne.n	800324e <HAL_TIM_PWM_Stop+0xa6>
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800324c:	e013      	b.n	8003276 <HAL_TIM_PWM_Stop+0xce>
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	2b04      	cmp	r3, #4
 8003252:	d104      	bne.n	800325e <HAL_TIM_PWM_Stop+0xb6>
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	2201      	movs	r2, #1
 8003258:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800325c:	e00b      	b.n	8003276 <HAL_TIM_PWM_Stop+0xce>
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	2b08      	cmp	r3, #8
 8003262:	d104      	bne.n	800326e <HAL_TIM_PWM_Stop+0xc6>
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	2201      	movs	r2, #1
 8003268:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800326c:	e003      	b.n	8003276 <HAL_TIM_PWM_Stop+0xce>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Return function status */
  return HAL_OK;
 8003276:	2300      	movs	r3, #0
}
 8003278:	4618      	mov	r0, r3
 800327a:	3708      	adds	r7, #8
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40010000 	.word	0x40010000
 8003284:	40010400 	.word	0x40010400

08003288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68db      	ldr	r3, [r3, #12]
 8003296:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	691b      	ldr	r3, [r3, #16]
 800329e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d020      	beq.n	80032ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f003 0302 	and.w	r3, r3, #2
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d01b      	beq.n	80032ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f06f 0202 	mvn.w	r2, #2
 80032bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2201      	movs	r2, #1
 80032c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	699b      	ldr	r3, [r3, #24]
 80032ca:	f003 0303 	and.w	r3, r3, #3
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d003      	beq.n	80032da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80032d2:	6878      	ldr	r0, [r7, #4]
 80032d4:	f000 fa9d 	bl	8003812 <HAL_TIM_IC_CaptureCallback>
 80032d8:	e005      	b.n	80032e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80032da:	6878      	ldr	r0, [r7, #4]
 80032dc:	f000 fa8f 	bl	80037fe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80032e0:	6878      	ldr	r0, [r7, #4]
 80032e2:	f000 faa0 	bl	8003826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	2200      	movs	r2, #0
 80032ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80032ec:	68bb      	ldr	r3, [r7, #8]
 80032ee:	f003 0304 	and.w	r3, r3, #4
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d020      	beq.n	8003338 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	f003 0304 	and.w	r3, r3, #4
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d01b      	beq.n	8003338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f06f 0204 	mvn.w	r2, #4
 8003308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	2202      	movs	r2, #2
 800330e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699b      	ldr	r3, [r3, #24]
 8003316:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 fa77 	bl	8003812 <HAL_TIM_IC_CaptureCallback>
 8003324:	e005      	b.n	8003332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003326:	6878      	ldr	r0, [r7, #4]
 8003328:	f000 fa69 	bl	80037fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800332c:	6878      	ldr	r0, [r7, #4]
 800332e:	f000 fa7a 	bl	8003826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	2200      	movs	r2, #0
 8003336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003338:	68bb      	ldr	r3, [r7, #8]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d020      	beq.n	8003384 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	f003 0308 	and.w	r3, r3, #8
 8003348:	2b00      	cmp	r3, #0
 800334a:	d01b      	beq.n	8003384 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f06f 0208 	mvn.w	r2, #8
 8003354:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	2204      	movs	r2, #4
 800335a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	69db      	ldr	r3, [r3, #28]
 8003362:	f003 0303 	and.w	r3, r3, #3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d003      	beq.n	8003372 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800336a:	6878      	ldr	r0, [r7, #4]
 800336c:	f000 fa51 	bl	8003812 <HAL_TIM_IC_CaptureCallback>
 8003370:	e005      	b.n	800337e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f000 fa43 	bl	80037fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003378:	6878      	ldr	r0, [r7, #4]
 800337a:	f000 fa54 	bl	8003826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	2200      	movs	r2, #0
 8003382:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	f003 0310 	and.w	r3, r3, #16
 800338a:	2b00      	cmp	r3, #0
 800338c:	d020      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	f003 0310 	and.w	r3, r3, #16
 8003394:	2b00      	cmp	r3, #0
 8003396:	d01b      	beq.n	80033d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f06f 0210 	mvn.w	r2, #16
 80033a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	2208      	movs	r2, #8
 80033a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d003      	beq.n	80033be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f000 fa2b 	bl	8003812 <HAL_TIM_IC_CaptureCallback>
 80033bc:	e005      	b.n	80033ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80033be:	6878      	ldr	r0, [r7, #4]
 80033c0:	f000 fa1d 	bl	80037fe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 fa2e 	bl	8003826 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80033d0:	68bb      	ldr	r3, [r7, #8]
 80033d2:	f003 0301 	and.w	r3, r3, #1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00c      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	f003 0301 	and.w	r3, r3, #1
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	f06f 0201 	mvn.w	r2, #1
 80033ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fd fc8c 	bl	8000d0c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80033f4:	68bb      	ldr	r3, [r7, #8]
 80033f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033fa:	2b00      	cmp	r3, #0
 80033fc:	d00c      	beq.n	8003418 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003404:	2b00      	cmp	r3, #0
 8003406:	d007      	beq.n	8003418 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f000 fe4e 	bl	80040b4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003418:	68bb      	ldr	r3, [r7, #8]
 800341a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800341e:	2b00      	cmp	r3, #0
 8003420:	d00c      	beq.n	800343c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003428:	2b00      	cmp	r3, #0
 800342a:	d007      	beq.n	800343c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003434:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f000 f9ff 	bl	800383a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	f003 0320 	and.w	r3, r3, #32
 8003442:	2b00      	cmp	r3, #0
 8003444:	d00c      	beq.n	8003460 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f003 0320 	and.w	r3, r3, #32
 800344c:	2b00      	cmp	r3, #0
 800344e:	d007      	beq.n	8003460 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f06f 0220 	mvn.w	r2, #32
 8003458:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800345a:	6878      	ldr	r0, [r7, #4]
 800345c:	f000 fe20 	bl	80040a0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003460:	bf00      	nop
 8003462:	3710      	adds	r7, #16
 8003464:	46bd      	mov	sp, r7
 8003466:	bd80      	pop	{r7, pc}

08003468 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b086      	sub	sp, #24
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800347e:	2b01      	cmp	r3, #1
 8003480:	d101      	bne.n	8003486 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003482:	2302      	movs	r3, #2
 8003484:	e0ae      	b.n	80035e4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2201      	movs	r2, #1
 800348a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2b0c      	cmp	r3, #12
 8003492:	f200 809f 	bhi.w	80035d4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003496:	a201      	add	r2, pc, #4	@ (adr r2, 800349c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003498:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800349c:	080034d1 	.word	0x080034d1
 80034a0:	080035d5 	.word	0x080035d5
 80034a4:	080035d5 	.word	0x080035d5
 80034a8:	080035d5 	.word	0x080035d5
 80034ac:	08003511 	.word	0x08003511
 80034b0:	080035d5 	.word	0x080035d5
 80034b4:	080035d5 	.word	0x080035d5
 80034b8:	080035d5 	.word	0x080035d5
 80034bc:	08003553 	.word	0x08003553
 80034c0:	080035d5 	.word	0x080035d5
 80034c4:	080035d5 	.word	0x080035d5
 80034c8:	080035d5 	.word	0x080035d5
 80034cc:	08003593 	.word	0x08003593
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	4618      	mov	r0, r3
 80034d8:	f000 fa66 	bl	80039a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	699a      	ldr	r2, [r3, #24]
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f042 0208 	orr.w	r2, r2, #8
 80034ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	699a      	ldr	r2, [r3, #24]
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f022 0204 	bic.w	r2, r2, #4
 80034fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	6999      	ldr	r1, [r3, #24]
 8003502:	68bb      	ldr	r3, [r7, #8]
 8003504:	691a      	ldr	r2, [r3, #16]
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	430a      	orrs	r2, r1
 800350c:	619a      	str	r2, [r3, #24]
      break;
 800350e:	e064      	b.n	80035da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68b9      	ldr	r1, [r7, #8]
 8003516:	4618      	mov	r0, r3
 8003518:	f000 fab6 	bl	8003a88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	699a      	ldr	r2, [r3, #24]
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800352a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	699a      	ldr	r2, [r3, #24]
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800353a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	6999      	ldr	r1, [r3, #24]
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	691b      	ldr	r3, [r3, #16]
 8003546:	021a      	lsls	r2, r3, #8
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	430a      	orrs	r2, r1
 800354e:	619a      	str	r2, [r3, #24]
      break;
 8003550:	e043      	b.n	80035da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68b9      	ldr	r1, [r7, #8]
 8003558:	4618      	mov	r0, r3
 800355a:	f000 fb0b 	bl	8003b74 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	69da      	ldr	r2, [r3, #28]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f042 0208 	orr.w	r2, r2, #8
 800356c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	69da      	ldr	r2, [r3, #28]
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f022 0204 	bic.w	r2, r2, #4
 800357c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	69d9      	ldr	r1, [r3, #28]
 8003584:	68bb      	ldr	r3, [r7, #8]
 8003586:	691a      	ldr	r2, [r3, #16]
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	430a      	orrs	r2, r1
 800358e:	61da      	str	r2, [r3, #28]
      break;
 8003590:	e023      	b.n	80035da <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	68b9      	ldr	r1, [r7, #8]
 8003598:	4618      	mov	r0, r3
 800359a:	f000 fb5f 	bl	8003c5c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	69da      	ldr	r2, [r3, #28]
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80035ac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	69da      	ldr	r2, [r3, #28]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035bc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	69d9      	ldr	r1, [r3, #28]
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	691b      	ldr	r3, [r3, #16]
 80035c8:	021a      	lsls	r2, r3, #8
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	61da      	str	r2, [r3, #28]
      break;
 80035d2:	e002      	b.n	80035da <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	75fb      	strb	r3, [r7, #23]
      break;
 80035d8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80035e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e4:	4618      	mov	r0, r3
 80035e6:	3718      	adds	r7, #24
 80035e8:	46bd      	mov	sp, r7
 80035ea:	bd80      	pop	{r7, pc}

080035ec <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80035f6:	2300      	movs	r3, #0
 80035f8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003600:	2b01      	cmp	r3, #1
 8003602:	d101      	bne.n	8003608 <HAL_TIM_ConfigClockSource+0x1c>
 8003604:	2302      	movs	r3, #2
 8003606:	e0b4      	b.n	8003772 <HAL_TIM_ConfigClockSource+0x186>
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	2201      	movs	r2, #1
 800360c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2202      	movs	r2, #2
 8003614:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	689b      	ldr	r3, [r3, #8]
 800361e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003626:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003628:	68bb      	ldr	r3, [r7, #8]
 800362a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800362e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	68ba      	ldr	r2, [r7, #8]
 8003636:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003640:	d03e      	beq.n	80036c0 <HAL_TIM_ConfigClockSource+0xd4>
 8003642:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003646:	f200 8087 	bhi.w	8003758 <HAL_TIM_ConfigClockSource+0x16c>
 800364a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800364e:	f000 8086 	beq.w	800375e <HAL_TIM_ConfigClockSource+0x172>
 8003652:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003656:	d87f      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x16c>
 8003658:	2b70      	cmp	r3, #112	@ 0x70
 800365a:	d01a      	beq.n	8003692 <HAL_TIM_ConfigClockSource+0xa6>
 800365c:	2b70      	cmp	r3, #112	@ 0x70
 800365e:	d87b      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x16c>
 8003660:	2b60      	cmp	r3, #96	@ 0x60
 8003662:	d050      	beq.n	8003706 <HAL_TIM_ConfigClockSource+0x11a>
 8003664:	2b60      	cmp	r3, #96	@ 0x60
 8003666:	d877      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x16c>
 8003668:	2b50      	cmp	r3, #80	@ 0x50
 800366a:	d03c      	beq.n	80036e6 <HAL_TIM_ConfigClockSource+0xfa>
 800366c:	2b50      	cmp	r3, #80	@ 0x50
 800366e:	d873      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x16c>
 8003670:	2b40      	cmp	r3, #64	@ 0x40
 8003672:	d058      	beq.n	8003726 <HAL_TIM_ConfigClockSource+0x13a>
 8003674:	2b40      	cmp	r3, #64	@ 0x40
 8003676:	d86f      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x16c>
 8003678:	2b30      	cmp	r3, #48	@ 0x30
 800367a:	d064      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x15a>
 800367c:	2b30      	cmp	r3, #48	@ 0x30
 800367e:	d86b      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x16c>
 8003680:	2b20      	cmp	r3, #32
 8003682:	d060      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x15a>
 8003684:	2b20      	cmp	r3, #32
 8003686:	d867      	bhi.n	8003758 <HAL_TIM_ConfigClockSource+0x16c>
 8003688:	2b00      	cmp	r3, #0
 800368a:	d05c      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x15a>
 800368c:	2b10      	cmp	r3, #16
 800368e:	d05a      	beq.n	8003746 <HAL_TIM_ConfigClockSource+0x15a>
 8003690:	e062      	b.n	8003758 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036a2:	f000 fc3c 	bl	8003f1e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	689b      	ldr	r3, [r3, #8]
 80036ac:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80036b4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	68ba      	ldr	r2, [r7, #8]
 80036bc:	609a      	str	r2, [r3, #8]
      break;
 80036be:	e04f      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80036cc:	683b      	ldr	r3, [r7, #0]
 80036ce:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80036d0:	f000 fc25 	bl	8003f1e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	689a      	ldr	r2, [r3, #8]
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80036e2:	609a      	str	r2, [r3, #8]
      break;
 80036e4:	e03c      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80036f2:	461a      	mov	r2, r3
 80036f4:	f000 fb99 	bl	8003e2a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	2150      	movs	r1, #80	@ 0x50
 80036fe:	4618      	mov	r0, r3
 8003700:	f000 fbf2 	bl	8003ee8 <TIM_ITRx_SetConfig>
      break;
 8003704:	e02c      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003712:	461a      	mov	r2, r3
 8003714:	f000 fbb8 	bl	8003e88 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	2160      	movs	r1, #96	@ 0x60
 800371e:	4618      	mov	r0, r3
 8003720:	f000 fbe2 	bl	8003ee8 <TIM_ITRx_SetConfig>
      break;
 8003724:	e01c      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003732:	461a      	mov	r2, r3
 8003734:	f000 fb79 	bl	8003e2a <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	2140      	movs	r1, #64	@ 0x40
 800373e:	4618      	mov	r0, r3
 8003740:	f000 fbd2 	bl	8003ee8 <TIM_ITRx_SetConfig>
      break;
 8003744:	e00c      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	683b      	ldr	r3, [r7, #0]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	4619      	mov	r1, r3
 8003750:	4610      	mov	r0, r2
 8003752:	f000 fbc9 	bl	8003ee8 <TIM_ITRx_SetConfig>
      break;
 8003756:	e003      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	73fb      	strb	r3, [r7, #15]
      break;
 800375c:	e000      	b.n	8003760 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800375e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2201      	movs	r2, #1
 8003764:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2200      	movs	r2, #0
 800376c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003770:	7bfb      	ldrb	r3, [r7, #15]
}
 8003772:	4618      	mov	r0, r3
 8003774:	3710      	adds	r7, #16
 8003776:	46bd      	mov	sp, r7
 8003778:	bd80      	pop	{r7, pc}

0800377a <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 800377a:	b580      	push	{r7, lr}
 800377c:	b082      	sub	sp, #8
 800377e:	af00      	add	r7, sp, #0
 8003780:	6078      	str	r0, [r7, #4]
 8003782:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800378a:	2b01      	cmp	r3, #1
 800378c:	d101      	bne.n	8003792 <HAL_TIM_SlaveConfigSynchro+0x18>
 800378e:	2302      	movs	r3, #2
 8003790:	e031      	b.n	80037f6 <HAL_TIM_SlaveConfigSynchro+0x7c>
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2202      	movs	r2, #2
 800379e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80037a2:	6839      	ldr	r1, [r7, #0]
 80037a4:	6878      	ldr	r0, [r7, #4]
 80037a6:	f000 faaf 	bl	8003d08 <TIM_SlaveTimer_SetConfig>
 80037aa:	4603      	mov	r3, r0
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d009      	beq.n	80037c4 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	2201      	movs	r2, #1
 80037b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    __HAL_UNLOCK(htim);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2200      	movs	r2, #0
 80037bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    return HAL_ERROR;
 80037c0:	2301      	movs	r3, #1
 80037c2:	e018      	b.n	80037f6 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80037d2:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	68da      	ldr	r2, [r3, #12]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80037e2:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80037f4:	2300      	movs	r3, #0
}
 80037f6:	4618      	mov	r0, r3
 80037f8:	3708      	adds	r7, #8
 80037fa:	46bd      	mov	sp, r7
 80037fc:	bd80      	pop	{r7, pc}

080037fe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80037fe:	b480      	push	{r7}
 8003800:	b083      	sub	sp, #12
 8003802:	af00      	add	r7, sp, #0
 8003804:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003806:	bf00      	nop
 8003808:	370c      	adds	r7, #12
 800380a:	46bd      	mov	sp, r7
 800380c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003810:	4770      	bx	lr

08003812 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003812:	b480      	push	{r7}
 8003814:	b083      	sub	sp, #12
 8003816:	af00      	add	r7, sp, #0
 8003818:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800381a:	bf00      	nop
 800381c:	370c      	adds	r7, #12
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr

08003826 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003826:	b480      	push	{r7}
 8003828:	b083      	sub	sp, #12
 800382a:	af00      	add	r7, sp, #0
 800382c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800382e:	bf00      	nop
 8003830:	370c      	adds	r7, #12
 8003832:	46bd      	mov	sp, r7
 8003834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003838:	4770      	bx	lr

0800383a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800383a:	b480      	push	{r7}
 800383c:	b083      	sub	sp, #12
 800383e:	af00      	add	r7, sp, #0
 8003840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003842:	bf00      	nop
 8003844:	370c      	adds	r7, #12
 8003846:	46bd      	mov	sp, r7
 8003848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800384c:	4770      	bx	lr
	...

08003850 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003850:	b480      	push	{r7}
 8003852:	b085      	sub	sp, #20
 8003854:	af00      	add	r7, sp, #0
 8003856:	6078      	str	r0, [r7, #4]
 8003858:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	4a46      	ldr	r2, [pc, #280]	@ (800397c <TIM_Base_SetConfig+0x12c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d013      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800386e:	d00f      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a43      	ldr	r2, [pc, #268]	@ (8003980 <TIM_Base_SetConfig+0x130>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d00b      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	4a42      	ldr	r2, [pc, #264]	@ (8003984 <TIM_Base_SetConfig+0x134>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d007      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	4a41      	ldr	r2, [pc, #260]	@ (8003988 <TIM_Base_SetConfig+0x138>)
 8003884:	4293      	cmp	r3, r2
 8003886:	d003      	beq.n	8003890 <TIM_Base_SetConfig+0x40>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a40      	ldr	r2, [pc, #256]	@ (800398c <TIM_Base_SetConfig+0x13c>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d108      	bne.n	80038a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003896:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	4313      	orrs	r3, r2
 80038a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	4a35      	ldr	r2, [pc, #212]	@ (800397c <TIM_Base_SetConfig+0x12c>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d02b      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80038b0:	d027      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	4a32      	ldr	r2, [pc, #200]	@ (8003980 <TIM_Base_SetConfig+0x130>)
 80038b6:	4293      	cmp	r3, r2
 80038b8:	d023      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	4a31      	ldr	r2, [pc, #196]	@ (8003984 <TIM_Base_SetConfig+0x134>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d01f      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	4a30      	ldr	r2, [pc, #192]	@ (8003988 <TIM_Base_SetConfig+0x138>)
 80038c6:	4293      	cmp	r3, r2
 80038c8:	d01b      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	4a2f      	ldr	r2, [pc, #188]	@ (800398c <TIM_Base_SetConfig+0x13c>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d017      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a2e      	ldr	r2, [pc, #184]	@ (8003990 <TIM_Base_SetConfig+0x140>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d013      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4a2d      	ldr	r2, [pc, #180]	@ (8003994 <TIM_Base_SetConfig+0x144>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d00f      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	4a2c      	ldr	r2, [pc, #176]	@ (8003998 <TIM_Base_SetConfig+0x148>)
 80038e6:	4293      	cmp	r3, r2
 80038e8:	d00b      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	4a2b      	ldr	r2, [pc, #172]	@ (800399c <TIM_Base_SetConfig+0x14c>)
 80038ee:	4293      	cmp	r3, r2
 80038f0:	d007      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4a2a      	ldr	r2, [pc, #168]	@ (80039a0 <TIM_Base_SetConfig+0x150>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d003      	beq.n	8003902 <TIM_Base_SetConfig+0xb2>
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	4a29      	ldr	r2, [pc, #164]	@ (80039a4 <TIM_Base_SetConfig+0x154>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d108      	bne.n	8003914 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003908:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	68fa      	ldr	r2, [r7, #12]
 8003910:	4313      	orrs	r3, r2
 8003912:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	68fa      	ldr	r2, [r7, #12]
 8003926:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	681a      	ldr	r2, [r3, #0]
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	4a10      	ldr	r2, [pc, #64]	@ (800397c <TIM_Base_SetConfig+0x12c>)
 800393c:	4293      	cmp	r3, r2
 800393e:	d003      	beq.n	8003948 <TIM_Base_SetConfig+0xf8>
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	4a12      	ldr	r2, [pc, #72]	@ (800398c <TIM_Base_SetConfig+0x13c>)
 8003944:	4293      	cmp	r3, r2
 8003946:	d103      	bne.n	8003950 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003948:	683b      	ldr	r3, [r7, #0]
 800394a:	691a      	ldr	r2, [r3, #16]
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	f003 0301 	and.w	r3, r3, #1
 800395e:	2b01      	cmp	r3, #1
 8003960:	d105      	bne.n	800396e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	691b      	ldr	r3, [r3, #16]
 8003966:	f023 0201 	bic.w	r2, r3, #1
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	611a      	str	r2, [r3, #16]
  }
}
 800396e:	bf00      	nop
 8003970:	3714      	adds	r7, #20
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40010000 	.word	0x40010000
 8003980:	40000400 	.word	0x40000400
 8003984:	40000800 	.word	0x40000800
 8003988:	40000c00 	.word	0x40000c00
 800398c:	40010400 	.word	0x40010400
 8003990:	40014000 	.word	0x40014000
 8003994:	40014400 	.word	0x40014400
 8003998:	40014800 	.word	0x40014800
 800399c:	40001800 	.word	0x40001800
 80039a0:	40001c00 	.word	0x40001c00
 80039a4:	40002000 	.word	0x40002000

080039a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	6078      	str	r0, [r7, #4]
 80039b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a1b      	ldr	r3, [r3, #32]
 80039bc:	f023 0201 	bic.w	r2, r3, #1
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	685b      	ldr	r3, [r3, #4]
 80039c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	699b      	ldr	r3, [r3, #24]
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	f023 0303 	bic.w	r3, r3, #3
 80039de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80039ea:	697b      	ldr	r3, [r7, #20]
 80039ec:	f023 0302 	bic.w	r3, r3, #2
 80039f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	697a      	ldr	r2, [r7, #20]
 80039f8:	4313      	orrs	r3, r2
 80039fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a20      	ldr	r2, [pc, #128]	@ (8003a80 <TIM_OC1_SetConfig+0xd8>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d003      	beq.n	8003a0c <TIM_OC1_SetConfig+0x64>
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	4a1f      	ldr	r2, [pc, #124]	@ (8003a84 <TIM_OC1_SetConfig+0xdc>)
 8003a08:	4293      	cmp	r3, r2
 8003a0a:	d10c      	bne.n	8003a26 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003a0c:	697b      	ldr	r3, [r7, #20]
 8003a0e:	f023 0308 	bic.w	r3, r3, #8
 8003a12:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	68db      	ldr	r3, [r3, #12]
 8003a18:	697a      	ldr	r2, [r7, #20]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f023 0304 	bic.w	r3, r3, #4
 8003a24:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	4a15      	ldr	r2, [pc, #84]	@ (8003a80 <TIM_OC1_SetConfig+0xd8>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d003      	beq.n	8003a36 <TIM_OC1_SetConfig+0x8e>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	4a14      	ldr	r2, [pc, #80]	@ (8003a84 <TIM_OC1_SetConfig+0xdc>)
 8003a32:	4293      	cmp	r3, r2
 8003a34:	d111      	bne.n	8003a5a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003a36:	693b      	ldr	r3, [r7, #16]
 8003a38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003a3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003a44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	695b      	ldr	r3, [r3, #20]
 8003a4a:	693a      	ldr	r2, [r7, #16]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003a50:	683b      	ldr	r3, [r7, #0]
 8003a52:	699b      	ldr	r3, [r3, #24]
 8003a54:	693a      	ldr	r2, [r7, #16]
 8003a56:	4313      	orrs	r3, r2
 8003a58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	693a      	ldr	r2, [r7, #16]
 8003a5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	68fa      	ldr	r2, [r7, #12]
 8003a64:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003a66:	683b      	ldr	r3, [r7, #0]
 8003a68:	685a      	ldr	r2, [r3, #4]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	697a      	ldr	r2, [r7, #20]
 8003a72:	621a      	str	r2, [r3, #32]
}
 8003a74:	bf00      	nop
 8003a76:	371c      	adds	r7, #28
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr
 8003a80:	40010000 	.word	0x40010000
 8003a84:	40010400 	.word	0x40010400

08003a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	b087      	sub	sp, #28
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
 8003a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a1b      	ldr	r3, [r3, #32]
 8003a96:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a1b      	ldr	r3, [r3, #32]
 8003a9c:	f023 0210 	bic.w	r2, r3, #16
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	685b      	ldr	r3, [r3, #4]
 8003aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	699b      	ldr	r3, [r3, #24]
 8003aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	021b      	lsls	r3, r3, #8
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f023 0320 	bic.w	r3, r3, #32
 8003ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	011b      	lsls	r3, r3, #4
 8003ada:	697a      	ldr	r2, [r7, #20]
 8003adc:	4313      	orrs	r3, r2
 8003ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	4a22      	ldr	r2, [pc, #136]	@ (8003b6c <TIM_OC2_SetConfig+0xe4>)
 8003ae4:	4293      	cmp	r3, r2
 8003ae6:	d003      	beq.n	8003af0 <TIM_OC2_SetConfig+0x68>
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	4a21      	ldr	r2, [pc, #132]	@ (8003b70 <TIM_OC2_SetConfig+0xe8>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d10d      	bne.n	8003b0c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003af0:	697b      	ldr	r3, [r7, #20]
 8003af2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003af6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003af8:	683b      	ldr	r3, [r7, #0]
 8003afa:	68db      	ldr	r3, [r3, #12]
 8003afc:	011b      	lsls	r3, r3, #4
 8003afe:	697a      	ldr	r2, [r7, #20]
 8003b00:	4313      	orrs	r3, r2
 8003b02:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003b04:	697b      	ldr	r3, [r7, #20]
 8003b06:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003b0a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	4a17      	ldr	r2, [pc, #92]	@ (8003b6c <TIM_OC2_SetConfig+0xe4>)
 8003b10:	4293      	cmp	r3, r2
 8003b12:	d003      	beq.n	8003b1c <TIM_OC2_SetConfig+0x94>
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a16      	ldr	r2, [pc, #88]	@ (8003b70 <TIM_OC2_SetConfig+0xe8>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d113      	bne.n	8003b44 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003b1c:	693b      	ldr	r3, [r7, #16]
 8003b1e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003b22:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003b24:	693b      	ldr	r3, [r7, #16]
 8003b26:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003b2a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	695b      	ldr	r3, [r3, #20]
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	693a      	ldr	r2, [r7, #16]
 8003b34:	4313      	orrs	r3, r2
 8003b36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	699b      	ldr	r3, [r3, #24]
 8003b3c:	009b      	lsls	r3, r3, #2
 8003b3e:	693a      	ldr	r2, [r7, #16]
 8003b40:	4313      	orrs	r3, r2
 8003b42:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	693a      	ldr	r2, [r7, #16]
 8003b48:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	68fa      	ldr	r2, [r7, #12]
 8003b4e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685a      	ldr	r2, [r3, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	621a      	str	r2, [r3, #32]
}
 8003b5e:	bf00      	nop
 8003b60:	371c      	adds	r7, #28
 8003b62:	46bd      	mov	sp, r7
 8003b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b68:	4770      	bx	lr
 8003b6a:	bf00      	nop
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	40010400 	.word	0x40010400

08003b74 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b74:	b480      	push	{r7}
 8003b76:	b087      	sub	sp, #28
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	6a1b      	ldr	r3, [r3, #32]
 8003b82:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	6a1b      	ldr	r3, [r3, #32]
 8003b88:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003ba2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	f023 0303 	bic.w	r3, r3, #3
 8003baa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bac:	683b      	ldr	r3, [r7, #0]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	68fa      	ldr	r2, [r7, #12]
 8003bb2:	4313      	orrs	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003bbc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	689b      	ldr	r3, [r3, #8]
 8003bc2:	021b      	lsls	r3, r3, #8
 8003bc4:	697a      	ldr	r2, [r7, #20]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	4a21      	ldr	r2, [pc, #132]	@ (8003c54 <TIM_OC3_SetConfig+0xe0>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d003      	beq.n	8003bda <TIM_OC3_SetConfig+0x66>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	4a20      	ldr	r2, [pc, #128]	@ (8003c58 <TIM_OC3_SetConfig+0xe4>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d10d      	bne.n	8003bf6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003be0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003be2:	683b      	ldr	r3, [r7, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	021b      	lsls	r3, r3, #8
 8003be8:	697a      	ldr	r2, [r7, #20]
 8003bea:	4313      	orrs	r3, r2
 8003bec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003bee:	697b      	ldr	r3, [r7, #20]
 8003bf0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bf4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	4a16      	ldr	r2, [pc, #88]	@ (8003c54 <TIM_OC3_SetConfig+0xe0>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d003      	beq.n	8003c06 <TIM_OC3_SetConfig+0x92>
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	4a15      	ldr	r2, [pc, #84]	@ (8003c58 <TIM_OC3_SetConfig+0xe4>)
 8003c02:	4293      	cmp	r3, r2
 8003c04:	d113      	bne.n	8003c2e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c0c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003c14:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003c16:	683b      	ldr	r3, [r7, #0]
 8003c18:	695b      	ldr	r3, [r3, #20]
 8003c1a:	011b      	lsls	r3, r3, #4
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	4313      	orrs	r3, r2
 8003c20:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003c22:	683b      	ldr	r3, [r7, #0]
 8003c24:	699b      	ldr	r3, [r3, #24]
 8003c26:	011b      	lsls	r3, r3, #4
 8003c28:	693a      	ldr	r2, [r7, #16]
 8003c2a:	4313      	orrs	r3, r2
 8003c2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	693a      	ldr	r2, [r7, #16]
 8003c32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	68fa      	ldr	r2, [r7, #12]
 8003c38:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	685a      	ldr	r2, [r3, #4]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	697a      	ldr	r2, [r7, #20]
 8003c46:	621a      	str	r2, [r3, #32]
}
 8003c48:	bf00      	nop
 8003c4a:	371c      	adds	r7, #28
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c52:	4770      	bx	lr
 8003c54:	40010000 	.word	0x40010000
 8003c58:	40010400 	.word	0x40010400

08003c5c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b087      	sub	sp, #28
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
 8003c64:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	6a1b      	ldr	r3, [r3, #32]
 8003c6a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	6a1b      	ldr	r3, [r3, #32]
 8003c70:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	69db      	ldr	r3, [r3, #28]
 8003c82:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003c8a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003c92:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	021b      	lsls	r3, r3, #8
 8003c9a:	68fa      	ldr	r2, [r7, #12]
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ca0:	693b      	ldr	r3, [r7, #16]
 8003ca2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ca6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003ca8:	683b      	ldr	r3, [r7, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	031b      	lsls	r3, r3, #12
 8003cae:	693a      	ldr	r2, [r7, #16]
 8003cb0:	4313      	orrs	r3, r2
 8003cb2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	4a12      	ldr	r2, [pc, #72]	@ (8003d00 <TIM_OC4_SetConfig+0xa4>)
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d003      	beq.n	8003cc4 <TIM_OC4_SetConfig+0x68>
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	4a11      	ldr	r2, [pc, #68]	@ (8003d04 <TIM_OC4_SetConfig+0xa8>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d109      	bne.n	8003cd8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003cc4:	697b      	ldr	r3, [r7, #20]
 8003cc6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003cca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003ccc:	683b      	ldr	r3, [r7, #0]
 8003cce:	695b      	ldr	r3, [r3, #20]
 8003cd0:	019b      	lsls	r3, r3, #6
 8003cd2:	697a      	ldr	r2, [r7, #20]
 8003cd4:	4313      	orrs	r3, r2
 8003cd6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	697a      	ldr	r2, [r7, #20]
 8003cdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	68fa      	ldr	r2, [r7, #12]
 8003ce2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003ce4:	683b      	ldr	r3, [r7, #0]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	693a      	ldr	r2, [r7, #16]
 8003cf0:	621a      	str	r2, [r3, #32]
}
 8003cf2:	bf00      	nop
 8003cf4:	371c      	adds	r7, #28
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	40010000 	.word	0x40010000
 8003d04:	40010400 	.word	0x40010400

08003d08 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  const TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	b086      	sub	sp, #24
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
 8003d10:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d12:	2300      	movs	r3, #0
 8003d14:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	689b      	ldr	r3, [r3, #8]
 8003d1c:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d1e:	693b      	ldr	r3, [r7, #16]
 8003d20:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003d24:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	685b      	ldr	r3, [r3, #4]
 8003d2a:	693a      	ldr	r2, [r7, #16]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	f023 0307 	bic.w	r3, r3, #7
 8003d36:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	693a      	ldr	r2, [r7, #16]
 8003d3e:	4313      	orrs	r3, r2
 8003d40:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	693a      	ldr	r2, [r7, #16]
 8003d48:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	2b70      	cmp	r3, #112	@ 0x70
 8003d50:	d01a      	beq.n	8003d88 <TIM_SlaveTimer_SetConfig+0x80>
 8003d52:	2b70      	cmp	r3, #112	@ 0x70
 8003d54:	d860      	bhi.n	8003e18 <TIM_SlaveTimer_SetConfig+0x110>
 8003d56:	2b60      	cmp	r3, #96	@ 0x60
 8003d58:	d054      	beq.n	8003e04 <TIM_SlaveTimer_SetConfig+0xfc>
 8003d5a:	2b60      	cmp	r3, #96	@ 0x60
 8003d5c:	d85c      	bhi.n	8003e18 <TIM_SlaveTimer_SetConfig+0x110>
 8003d5e:	2b50      	cmp	r3, #80	@ 0x50
 8003d60:	d046      	beq.n	8003df0 <TIM_SlaveTimer_SetConfig+0xe8>
 8003d62:	2b50      	cmp	r3, #80	@ 0x50
 8003d64:	d858      	bhi.n	8003e18 <TIM_SlaveTimer_SetConfig+0x110>
 8003d66:	2b40      	cmp	r3, #64	@ 0x40
 8003d68:	d019      	beq.n	8003d9e <TIM_SlaveTimer_SetConfig+0x96>
 8003d6a:	2b40      	cmp	r3, #64	@ 0x40
 8003d6c:	d854      	bhi.n	8003e18 <TIM_SlaveTimer_SetConfig+0x110>
 8003d6e:	2b30      	cmp	r3, #48	@ 0x30
 8003d70:	d055      	beq.n	8003e1e <TIM_SlaveTimer_SetConfig+0x116>
 8003d72:	2b30      	cmp	r3, #48	@ 0x30
 8003d74:	d850      	bhi.n	8003e18 <TIM_SlaveTimer_SetConfig+0x110>
 8003d76:	2b20      	cmp	r3, #32
 8003d78:	d051      	beq.n	8003e1e <TIM_SlaveTimer_SetConfig+0x116>
 8003d7a:	2b20      	cmp	r3, #32
 8003d7c:	d84c      	bhi.n	8003e18 <TIM_SlaveTimer_SetConfig+0x110>
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d04d      	beq.n	8003e1e <TIM_SlaveTimer_SetConfig+0x116>
 8003d82:	2b10      	cmp	r3, #16
 8003d84:	d04b      	beq.n	8003e1e <TIM_SlaveTimer_SetConfig+0x116>
 8003d86:	e047      	b.n	8003e18 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	6818      	ldr	r0, [r3, #0]
                        sSlaveConfig->TriggerPrescaler,
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	68d9      	ldr	r1, [r3, #12]
                        sSlaveConfig->TriggerPolarity,
 8003d90:	683b      	ldr	r3, [r7, #0]
 8003d92:	689a      	ldr	r2, [r3, #8]
                        sSlaveConfig->TriggerFilter);
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	691b      	ldr	r3, [r3, #16]
      TIM_ETR_SetConfig(htim->Instance,
 8003d98:	f000 f8c1 	bl	8003f1e <TIM_ETR_SetConfig>
      break;
 8003d9c:	e040      	b.n	8003e20 <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8003d9e:	683b      	ldr	r3, [r7, #0]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	2b05      	cmp	r3, #5
 8003da4:	d101      	bne.n	8003daa <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e03b      	b.n	8003e22 <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	6a1b      	ldr	r3, [r3, #32]
 8003db0:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	6a1a      	ldr	r2, [r3, #32]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f022 0201 	bic.w	r2, r2, #1
 8003dc0:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003dd0:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8003dd2:	683b      	ldr	r3, [r7, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	011b      	lsls	r3, r3, #4
 8003dd8:	68ba      	ldr	r2, [r7, #8]
 8003dda:	4313      	orrs	r3, r2
 8003ddc:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68ba      	ldr	r2, [r7, #8]
 8003de4:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68fa      	ldr	r2, [r7, #12]
 8003dec:	621a      	str	r2, [r3, #32]
      break;
 8003dee:	e017      	b.n	8003e20 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003df8:	683b      	ldr	r3, [r7, #0]
 8003dfa:	691b      	ldr	r3, [r3, #16]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003dfc:	461a      	mov	r2, r3
 8003dfe:	f000 f814 	bl	8003e2a <TIM_TI1_ConfigInputStage>
      break;
 8003e02:	e00d      	b.n	8003e20 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6818      	ldr	r0, [r3, #0]
                               sSlaveConfig->TriggerPolarity,
 8003e08:	683b      	ldr	r3, [r7, #0]
 8003e0a:	6899      	ldr	r1, [r3, #8]
                               sSlaveConfig->TriggerFilter);
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	691b      	ldr	r3, [r3, #16]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e10:	461a      	mov	r2, r3
 8003e12:	f000 f839 	bl	8003e88 <TIM_TI2_ConfigInputStage>
      break;
 8003e16:	e003      	b.n	8003e20 <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8003e18:	2301      	movs	r3, #1
 8003e1a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e1c:	e000      	b.n	8003e20 <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8003e1e:	bf00      	nop
  }

  return status;
 8003e20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3718      	adds	r7, #24
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}

08003e2a <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e2a:	b480      	push	{r7}
 8003e2c:	b087      	sub	sp, #28
 8003e2e:	af00      	add	r7, sp, #0
 8003e30:	60f8      	str	r0, [r7, #12]
 8003e32:	60b9      	str	r1, [r7, #8]
 8003e34:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6a1b      	ldr	r3, [r3, #32]
 8003e3a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	f023 0201 	bic.w	r2, r3, #1
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	699b      	ldr	r3, [r3, #24]
 8003e4c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003e4e:	693b      	ldr	r3, [r7, #16]
 8003e50:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003e54:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	011b      	lsls	r3, r3, #4
 8003e5a:	693a      	ldr	r2, [r7, #16]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	f023 030a 	bic.w	r3, r3, #10
 8003e66:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003e68:	697a      	ldr	r2, [r7, #20]
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4313      	orrs	r3, r2
 8003e6e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	693a      	ldr	r2, [r7, #16]
 8003e74:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	621a      	str	r2, [r3, #32]
}
 8003e7c:	bf00      	nop
 8003e7e:	371c      	adds	r7, #28
 8003e80:	46bd      	mov	sp, r7
 8003e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e86:	4770      	bx	lr

08003e88 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003e88:	b480      	push	{r7}
 8003e8a:	b087      	sub	sp, #28
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	6a1b      	ldr	r3, [r3, #32]
 8003e98:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	6a1b      	ldr	r3, [r3, #32]
 8003e9e:	f023 0210 	bic.w	r2, r3, #16
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	699b      	ldr	r3, [r3, #24]
 8003eaa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003eac:	693b      	ldr	r3, [r7, #16]
 8003eae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003eb2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	031b      	lsls	r3, r3, #12
 8003eb8:	693a      	ldr	r2, [r7, #16]
 8003eba:	4313      	orrs	r3, r2
 8003ebc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003ebe:	697b      	ldr	r3, [r7, #20]
 8003ec0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003ec4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	011b      	lsls	r3, r3, #4
 8003eca:	697a      	ldr	r2, [r7, #20]
 8003ecc:	4313      	orrs	r3, r2
 8003ece:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	693a      	ldr	r2, [r7, #16]
 8003ed4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	697a      	ldr	r2, [r7, #20]
 8003eda:	621a      	str	r2, [r3, #32]
}
 8003edc:	bf00      	nop
 8003ede:	371c      	adds	r7, #28
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee6:	4770      	bx	lr

08003ee8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ee8:	b480      	push	{r7}
 8003eea:	b085      	sub	sp, #20
 8003eec:	af00      	add	r7, sp, #0
 8003eee:	6078      	str	r0, [r7, #4]
 8003ef0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	689b      	ldr	r3, [r3, #8]
 8003ef6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003efe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003f00:	683a      	ldr	r2, [r7, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	f043 0307 	orr.w	r3, r3, #7
 8003f0a:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	609a      	str	r2, [r3, #8]
}
 8003f12:	bf00      	nop
 8003f14:	3714      	adds	r7, #20
 8003f16:	46bd      	mov	sp, r7
 8003f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f1c:	4770      	bx	lr

08003f1e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003f1e:	b480      	push	{r7}
 8003f20:	b087      	sub	sp, #28
 8003f22:	af00      	add	r7, sp, #0
 8003f24:	60f8      	str	r0, [r7, #12]
 8003f26:	60b9      	str	r1, [r7, #8]
 8003f28:	607a      	str	r2, [r7, #4]
 8003f2a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f32:	697b      	ldr	r3, [r7, #20]
 8003f34:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003f38:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	021a      	lsls	r2, r3, #8
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	431a      	orrs	r2, r3
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	697a      	ldr	r2, [r7, #20]
 8003f50:	609a      	str	r2, [r3, #8]
}
 8003f52:	bf00      	nop
 8003f54:	371c      	adds	r7, #28
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b087      	sub	sp, #28
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	60f8      	str	r0, [r7, #12]
 8003f66:	60b9      	str	r1, [r7, #8]
 8003f68:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003f6a:	68bb      	ldr	r3, [r7, #8]
 8003f6c:	f003 031f 	and.w	r3, r3, #31
 8003f70:	2201      	movs	r2, #1
 8003f72:	fa02 f303 	lsl.w	r3, r2, r3
 8003f76:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	6a1a      	ldr	r2, [r3, #32]
 8003f7c:	697b      	ldr	r3, [r7, #20]
 8003f7e:	43db      	mvns	r3, r3
 8003f80:	401a      	ands	r2, r3
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	6a1a      	ldr	r2, [r3, #32]
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	f003 031f 	and.w	r3, r3, #31
 8003f90:	6879      	ldr	r1, [r7, #4]
 8003f92:	fa01 f303 	lsl.w	r3, r1, r3
 8003f96:	431a      	orrs	r2, r3
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	621a      	str	r2, [r3, #32]
}
 8003f9c:	bf00      	nop
 8003f9e:	371c      	adds	r7, #28
 8003fa0:	46bd      	mov	sp, r7
 8003fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fa6:	4770      	bx	lr

08003fa8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003fa8:	b480      	push	{r7}
 8003faa:	b085      	sub	sp, #20
 8003fac:	af00      	add	r7, sp, #0
 8003fae:	6078      	str	r0, [r7, #4]
 8003fb0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fb8:	2b01      	cmp	r3, #1
 8003fba:	d101      	bne.n	8003fc0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	e05a      	b.n	8004076 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2201      	movs	r2, #1
 8003fc4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	2202      	movs	r2, #2
 8003fcc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003fe6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	68fa      	ldr	r2, [r7, #12]
 8003fee:	4313      	orrs	r3, r2
 8003ff0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	68fa      	ldr	r2, [r7, #12]
 8003ff8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4a21      	ldr	r2, [pc, #132]	@ (8004084 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004000:	4293      	cmp	r3, r2
 8004002:	d022      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800400c:	d01d      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4a1d      	ldr	r2, [pc, #116]	@ (8004088 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004014:	4293      	cmp	r3, r2
 8004016:	d018      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a1b      	ldr	r2, [pc, #108]	@ (800408c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d013      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	4a1a      	ldr	r2, [pc, #104]	@ (8004090 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004028:	4293      	cmp	r3, r2
 800402a:	d00e      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4a18      	ldr	r2, [pc, #96]	@ (8004094 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004032:	4293      	cmp	r3, r2
 8004034:	d009      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4a17      	ldr	r2, [pc, #92]	@ (8004098 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800403c:	4293      	cmp	r3, r2
 800403e:	d004      	beq.n	800404a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	4a15      	ldr	r2, [pc, #84]	@ (800409c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d10c      	bne.n	8004064 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004050:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	685b      	ldr	r3, [r3, #4]
 8004056:	68ba      	ldr	r2, [r7, #8]
 8004058:	4313      	orrs	r3, r2
 800405a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	68ba      	ldr	r2, [r7, #8]
 8004062:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2201      	movs	r2, #1
 8004068:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004074:	2300      	movs	r3, #0
}
 8004076:	4618      	mov	r0, r3
 8004078:	3714      	adds	r7, #20
 800407a:	46bd      	mov	sp, r7
 800407c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004080:	4770      	bx	lr
 8004082:	bf00      	nop
 8004084:	40010000 	.word	0x40010000
 8004088:	40000400 	.word	0x40000400
 800408c:	40000800 	.word	0x40000800
 8004090:	40000c00 	.word	0x40000c00
 8004094:	40010400 	.word	0x40010400
 8004098:	40014000 	.word	0x40014000
 800409c:	40001800 	.word	0x40001800

080040a0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80040a0:	b480      	push	{r7}
 80040a2:	b083      	sub	sp, #12
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80040a8:	bf00      	nop
 80040aa:	370c      	adds	r7, #12
 80040ac:	46bd      	mov	sp, r7
 80040ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b2:	4770      	bx	lr

080040b4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b083      	sub	sp, #12
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80040bc:	bf00      	nop
 80040be:	370c      	adds	r7, #12
 80040c0:	46bd      	mov	sp, r7
 80040c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040c6:	4770      	bx	lr

080040c8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b082      	sub	sp, #8
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d101      	bne.n	80040da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e042      	b.n	8004160 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d106      	bne.n	80040f4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f7fd fabc 	bl	800166c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2224      	movs	r2, #36	@ 0x24
 80040f8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	68da      	ldr	r2, [r3, #12]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800410a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800410c:	6878      	ldr	r0, [r7, #4]
 800410e:	f000 fd11 	bl	8004b34 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	691a      	ldr	r2, [r3, #16]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004120:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	695a      	ldr	r2, [r3, #20]
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004130:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	68da      	ldr	r2, [r3, #12]
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004140:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	2200      	movs	r2, #0
 8004146:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	2220      	movs	r2, #32
 800414c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	2220      	movs	r2, #32
 8004154:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2200      	movs	r2, #0
 800415c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800415e:	2300      	movs	r3, #0
}
 8004160:	4618      	mov	r0, r3
 8004162:	3708      	adds	r7, #8
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8004168:	b480      	push	{r7}
 800416a:	b085      	sub	sp, #20
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	4613      	mov	r3, r2
 8004174:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800417c:	b2db      	uxtb	r3, r3
 800417e:	2b20      	cmp	r3, #32
 8004180:	d121      	bne.n	80041c6 <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	2b00      	cmp	r3, #0
 8004186:	d002      	beq.n	800418e <HAL_UART_Transmit_IT+0x26>
 8004188:	88fb      	ldrh	r3, [r7, #6]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e01a      	b.n	80041c8 <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	68ba      	ldr	r2, [r7, #8]
 8004196:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	88fa      	ldrh	r2, [r7, #6]
 800419c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	88fa      	ldrh	r2, [r7, #6]
 80041a2:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	2200      	movs	r2, #0
 80041a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	2221      	movs	r2, #33	@ 0x21
 80041ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68da      	ldr	r2, [r3, #12]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80041c0:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 80041c2:	2300      	movs	r3, #0
 80041c4:	e000      	b.n	80041c8 <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 80041c6:	2302      	movs	r3, #2
  }
}
 80041c8:	4618      	mov	r0, r3
 80041ca:	3714      	adds	r7, #20
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b084      	sub	sp, #16
 80041d8:	af00      	add	r7, sp, #0
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	4613      	mov	r3, r2
 80041e0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b20      	cmp	r3, #32
 80041ec:	d112      	bne.n	8004214 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d002      	beq.n	80041fa <HAL_UART_Receive_IT+0x26>
 80041f4:	88fb      	ldrh	r3, [r7, #6]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d101      	bne.n	80041fe <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e00b      	b.n	8004216 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2200      	movs	r2, #0
 8004202:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004204:	88fb      	ldrh	r3, [r7, #6]
 8004206:	461a      	mov	r2, r3
 8004208:	68b9      	ldr	r1, [r7, #8]
 800420a:	68f8      	ldr	r0, [r7, #12]
 800420c:	f000 faba 	bl	8004784 <UART_Start_Receive_IT>
 8004210:	4603      	mov	r3, r0
 8004212:	e000      	b.n	8004216 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004214:	2302      	movs	r3, #2
  }
}
 8004216:	4618      	mov	r0, r3
 8004218:	3710      	adds	r7, #16
 800421a:	46bd      	mov	sp, r7
 800421c:	bd80      	pop	{r7, pc}
	...

08004220 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b0ba      	sub	sp, #232	@ 0xe8
 8004224:	af00      	add	r7, sp, #0
 8004226:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	68db      	ldr	r3, [r3, #12]
 8004238:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	681b      	ldr	r3, [r3, #0]
 8004240:	695b      	ldr	r3, [r3, #20]
 8004242:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004246:	2300      	movs	r3, #0
 8004248:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 800424c:	2300      	movs	r3, #0
 800424e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004256:	f003 030f 	and.w	r3, r3, #15
 800425a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 800425e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004262:	2b00      	cmp	r3, #0
 8004264:	d10f      	bne.n	8004286 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004266:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800426a:	f003 0320 	and.w	r3, r3, #32
 800426e:	2b00      	cmp	r3, #0
 8004270:	d009      	beq.n	8004286 <HAL_UART_IRQHandler+0x66>
 8004272:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004276:	f003 0320 	and.w	r3, r3, #32
 800427a:	2b00      	cmp	r3, #0
 800427c:	d003      	beq.n	8004286 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800427e:	6878      	ldr	r0, [r7, #4]
 8004280:	f000 fb99 	bl	80049b6 <UART_Receive_IT>
      return;
 8004284:	e25b      	b.n	800473e <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004286:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800428a:	2b00      	cmp	r3, #0
 800428c:	f000 80de 	beq.w	800444c <HAL_UART_IRQHandler+0x22c>
 8004290:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004294:	f003 0301 	and.w	r3, r3, #1
 8004298:	2b00      	cmp	r3, #0
 800429a:	d106      	bne.n	80042aa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800429c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042a0:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	f000 80d1 	beq.w	800444c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042ae:	f003 0301 	and.w	r3, r3, #1
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d00b      	beq.n	80042ce <HAL_UART_IRQHandler+0xae>
 80042b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d005      	beq.n	80042ce <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042c6:	f043 0201 	orr.w	r2, r3, #1
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042d2:	f003 0304 	and.w	r3, r3, #4
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d00b      	beq.n	80042f2 <HAL_UART_IRQHandler+0xd2>
 80042da:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d005      	beq.n	80042f2 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042ea:	f043 0202 	orr.w	r2, r3, #2
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80042f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042f6:	f003 0302 	and.w	r3, r3, #2
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00b      	beq.n	8004316 <HAL_UART_IRQHandler+0xf6>
 80042fe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004302:	f003 0301 	and.w	r3, r3, #1
 8004306:	2b00      	cmp	r3, #0
 8004308:	d005      	beq.n	8004316 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800430e:	f043 0204 	orr.w	r2, r3, #4
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800431a:	f003 0308 	and.w	r3, r3, #8
 800431e:	2b00      	cmp	r3, #0
 8004320:	d011      	beq.n	8004346 <HAL_UART_IRQHandler+0x126>
 8004322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004326:	f003 0320 	and.w	r3, r3, #32
 800432a:	2b00      	cmp	r3, #0
 800432c:	d105      	bne.n	800433a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800432e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004332:	f003 0301 	and.w	r3, r3, #1
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800433e:	f043 0208 	orr.w	r2, r3, #8
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800434a:	2b00      	cmp	r3, #0
 800434c:	f000 81f2 	beq.w	8004734 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004350:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004354:	f003 0320 	and.w	r3, r3, #32
 8004358:	2b00      	cmp	r3, #0
 800435a:	d008      	beq.n	800436e <HAL_UART_IRQHandler+0x14e>
 800435c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004360:	f003 0320 	and.w	r3, r3, #32
 8004364:	2b00      	cmp	r3, #0
 8004366:	d002      	beq.n	800436e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f000 fb24 	bl	80049b6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	695b      	ldr	r3, [r3, #20]
 8004374:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004378:	2b40      	cmp	r3, #64	@ 0x40
 800437a:	bf0c      	ite	eq
 800437c:	2301      	moveq	r3, #1
 800437e:	2300      	movne	r3, #0
 8004380:	b2db      	uxtb	r3, r3
 8004382:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800438a:	f003 0308 	and.w	r3, r3, #8
 800438e:	2b00      	cmp	r3, #0
 8004390:	d103      	bne.n	800439a <HAL_UART_IRQHandler+0x17a>
 8004392:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004396:	2b00      	cmp	r3, #0
 8004398:	d04f      	beq.n	800443a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800439a:	6878      	ldr	r0, [r7, #4]
 800439c:	f000 fa2c 	bl	80047f8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043aa:	2b40      	cmp	r3, #64	@ 0x40
 80043ac:	d141      	bne.n	8004432 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	3314      	adds	r3, #20
 80043b4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043bc:	e853 3f00 	ldrex	r3, [r3]
 80043c0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80043cc:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	3314      	adds	r3, #20
 80043d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80043da:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80043de:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80043e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80043ea:	e841 2300 	strex	r3, r2, [r1]
 80043ee:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80043f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1d9      	bne.n	80043ae <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d013      	beq.n	800442a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004406:	4a7e      	ldr	r2, [pc, #504]	@ (8004600 <HAL_UART_IRQHandler+0x3e0>)
 8004408:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800440e:	4618      	mov	r0, r3
 8004410:	f7fd fb99 	bl	8001b46 <HAL_DMA_Abort_IT>
 8004414:	4603      	mov	r3, r0
 8004416:	2b00      	cmp	r3, #0
 8004418:	d016      	beq.n	8004448 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800441e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004420:	687a      	ldr	r2, [r7, #4]
 8004422:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004424:	4610      	mov	r0, r2
 8004426:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004428:	e00e      	b.n	8004448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f000 f994 	bl	8004758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004430:	e00a      	b.n	8004448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f990 	bl	8004758 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004438:	e006      	b.n	8004448 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800443a:	6878      	ldr	r0, [r7, #4]
 800443c:	f000 f98c 	bl	8004758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	2200      	movs	r2, #0
 8004444:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004446:	e175      	b.n	8004734 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004448:	bf00      	nop
    return;
 800444a:	e173      	b.n	8004734 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004450:	2b01      	cmp	r3, #1
 8004452:	f040 814f 	bne.w	80046f4 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004456:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 8148 	beq.w	80046f4 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004464:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004468:	f003 0310 	and.w	r3, r3, #16
 800446c:	2b00      	cmp	r3, #0
 800446e:	f000 8141 	beq.w	80046f4 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004472:	2300      	movs	r3, #0
 8004474:	60bb      	str	r3, [r7, #8]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	60bb      	str	r3, [r7, #8]
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	60bb      	str	r3, [r7, #8]
 8004486:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	695b      	ldr	r3, [r3, #20]
 800448e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004492:	2b40      	cmp	r3, #64	@ 0x40
 8004494:	f040 80b6 	bne.w	8004604 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	685b      	ldr	r3, [r3, #4]
 80044a0:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044a4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	f000 8145 	beq.w	8004738 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044b6:	429a      	cmp	r2, r3
 80044b8:	f080 813e 	bcs.w	8004738 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044c2:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044c8:	69db      	ldr	r3, [r3, #28]
 80044ca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044ce:	f000 8088 	beq.w	80045e2 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	330c      	adds	r3, #12
 80044d8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044dc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80044e0:	e853 3f00 	ldrex	r3, [r3]
 80044e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80044e8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80044ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80044f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	330c      	adds	r3, #12
 80044fa:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80044fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004502:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004506:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800450a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800450e:	e841 2300 	strex	r3, r2, [r1]
 8004512:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004516:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800451a:	2b00      	cmp	r3, #0
 800451c:	d1d9      	bne.n	80044d2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	3314      	adds	r3, #20
 8004524:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004526:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004528:	e853 3f00 	ldrex	r3, [r3]
 800452c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800452e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004530:	f023 0301 	bic.w	r3, r3, #1
 8004534:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	3314      	adds	r3, #20
 800453e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004542:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004546:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004548:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800454a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 800454e:	e841 2300 	strex	r3, r2, [r1]
 8004552:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004554:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004556:	2b00      	cmp	r3, #0
 8004558:	d1e1      	bne.n	800451e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3314      	adds	r3, #20
 8004560:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004562:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004564:	e853 3f00 	ldrex	r3, [r3]
 8004568:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800456a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800456c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004570:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	3314      	adds	r3, #20
 800457a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800457e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004580:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004582:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004584:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004586:	e841 2300 	strex	r3, r2, [r1]
 800458a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800458c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800458e:	2b00      	cmp	r3, #0
 8004590:	d1e3      	bne.n	800455a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2220      	movs	r2, #32
 8004596:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	2200      	movs	r2, #0
 800459e:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	330c      	adds	r3, #12
 80045a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045a8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045aa:	e853 3f00 	ldrex	r3, [r3]
 80045ae:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045b0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045b2:	f023 0310 	bic.w	r3, r3, #16
 80045b6:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	330c      	adds	r3, #12
 80045c0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80045c4:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045c6:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045c8:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045ca:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045cc:	e841 2300 	strex	r3, r2, [r1]
 80045d0:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80045d2:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d1e3      	bne.n	80045a0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045dc:	4618      	mov	r0, r3
 80045de:	f7fd fa42 	bl	8001a66 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	2202      	movs	r2, #2
 80045e6:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80045f0:	b29b      	uxth	r3, r3
 80045f2:	1ad3      	subs	r3, r2, r3
 80045f4:	b29b      	uxth	r3, r3
 80045f6:	4619      	mov	r1, r3
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f8b7 	bl	800476c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80045fe:	e09b      	b.n	8004738 <HAL_UART_IRQHandler+0x518>
 8004600:	080048bf 	.word	0x080048bf
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800460c:	b29b      	uxth	r3, r3
 800460e:	1ad3      	subs	r3, r2, r3
 8004610:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004618:	b29b      	uxth	r3, r3
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 808e 	beq.w	800473c <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004620:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8089 	beq.w	800473c <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	681b      	ldr	r3, [r3, #0]
 800462e:	330c      	adds	r3, #12
 8004630:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004634:	e853 3f00 	ldrex	r3, [r3]
 8004638:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800463a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800463c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004640:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	330c      	adds	r3, #12
 800464a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800464e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004650:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004652:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004654:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004656:	e841 2300 	strex	r3, r2, [r1]
 800465a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800465c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800465e:	2b00      	cmp	r3, #0
 8004660:	d1e3      	bne.n	800462a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	3314      	adds	r3, #20
 8004668:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800466a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800466c:	e853 3f00 	ldrex	r3, [r3]
 8004670:	623b      	str	r3, [r7, #32]
   return(result);
 8004672:	6a3b      	ldr	r3, [r7, #32]
 8004674:	f023 0301 	bic.w	r3, r3, #1
 8004678:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	3314      	adds	r3, #20
 8004682:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004686:	633a      	str	r2, [r7, #48]	@ 0x30
 8004688:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800468c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800468e:	e841 2300 	strex	r3, r2, [r1]
 8004692:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004694:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004696:	2b00      	cmp	r3, #0
 8004698:	d1e3      	bne.n	8004662 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2220      	movs	r2, #32
 800469e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	2200      	movs	r2, #0
 80046a6:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	681b      	ldr	r3, [r3, #0]
 80046ac:	330c      	adds	r3, #12
 80046ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	e853 3f00 	ldrex	r3, [r3]
 80046b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f023 0310 	bic.w	r3, r3, #16
 80046be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	330c      	adds	r3, #12
 80046c8:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80046cc:	61fa      	str	r2, [r7, #28]
 80046ce:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046d0:	69b9      	ldr	r1, [r7, #24]
 80046d2:	69fa      	ldr	r2, [r7, #28]
 80046d4:	e841 2300 	strex	r3, r2, [r1]
 80046d8:	617b      	str	r3, [r7, #20]
   return(result);
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1e3      	bne.n	80046a8 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80046e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80046ea:	4619      	mov	r1, r3
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f000 f83d 	bl	800476c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80046f2:	e023      	b.n	800473c <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80046f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80046f8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d009      	beq.n	8004714 <HAL_UART_IRQHandler+0x4f4>
 8004700:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004704:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004708:	2b00      	cmp	r3, #0
 800470a:	d003      	beq.n	8004714 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f8ea 	bl	80048e6 <UART_Transmit_IT>
    return;
 8004712:	e014      	b.n	800473e <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004714:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004718:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800471c:	2b00      	cmp	r3, #0
 800471e:	d00e      	beq.n	800473e <HAL_UART_IRQHandler+0x51e>
 8004720:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004724:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004728:	2b00      	cmp	r3, #0
 800472a:	d008      	beq.n	800473e <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 800472c:	6878      	ldr	r0, [r7, #4]
 800472e:	f000 f92a 	bl	8004986 <UART_EndTransmit_IT>
    return;
 8004732:	e004      	b.n	800473e <HAL_UART_IRQHandler+0x51e>
    return;
 8004734:	bf00      	nop
 8004736:	e002      	b.n	800473e <HAL_UART_IRQHandler+0x51e>
      return;
 8004738:	bf00      	nop
 800473a:	e000      	b.n	800473e <HAL_UART_IRQHandler+0x51e>
      return;
 800473c:	bf00      	nop
  }
}
 800473e:	37e8      	adds	r7, #232	@ 0xe8
 8004740:	46bd      	mov	sp, r7
 8004742:	bd80      	pop	{r7, pc}

08004744 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004744:	b480      	push	{r7}
 8004746:	b083      	sub	sp, #12
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr

08004758 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004758:	b480      	push	{r7}
 800475a:	b083      	sub	sp, #12
 800475c:	af00      	add	r7, sp, #0
 800475e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004760:	bf00      	nop
 8004762:	370c      	adds	r7, #12
 8004764:	46bd      	mov	sp, r7
 8004766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476a:	4770      	bx	lr

0800476c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
 8004774:	460b      	mov	r3, r1
 8004776:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004778:	bf00      	nop
 800477a:	370c      	adds	r7, #12
 800477c:	46bd      	mov	sp, r7
 800477e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004782:	4770      	bx	lr

08004784 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	60f8      	str	r0, [r7, #12]
 800478c:	60b9      	str	r1, [r7, #8]
 800478e:	4613      	mov	r3, r2
 8004790:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	68ba      	ldr	r2, [r7, #8]
 8004796:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	88fa      	ldrh	r2, [r7, #6]
 800479c:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	88fa      	ldrh	r2, [r7, #6]
 80047a2:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	2200      	movs	r2, #0
 80047a8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80047aa:	68fb      	ldr	r3, [r7, #12]
 80047ac:	2222      	movs	r2, #34	@ 0x22
 80047ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	691b      	ldr	r3, [r3, #16]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d007      	beq.n	80047ca <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	68da      	ldr	r2, [r3, #12]
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80047c8:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	695a      	ldr	r2, [r3, #20]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	f042 0201 	orr.w	r2, r2, #1
 80047d8:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68da      	ldr	r2, [r3, #12]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f042 0220 	orr.w	r2, r2, #32
 80047e8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80047ea:	2300      	movs	r3, #0
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3714      	adds	r7, #20
 80047f0:	46bd      	mov	sp, r7
 80047f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f6:	4770      	bx	lr

080047f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80047f8:	b480      	push	{r7}
 80047fa:	b095      	sub	sp, #84	@ 0x54
 80047fc:	af00      	add	r7, sp, #0
 80047fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	330c      	adds	r3, #12
 8004806:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004808:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800480a:	e853 3f00 	ldrex	r3, [r3]
 800480e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004810:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004812:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004816:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	330c      	adds	r3, #12
 800481e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004820:	643a      	str	r2, [r7, #64]	@ 0x40
 8004822:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004824:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004826:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004828:	e841 2300 	strex	r3, r2, [r1]
 800482c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800482e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1e5      	bne.n	8004800 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	3314      	adds	r3, #20
 800483a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800483c:	6a3b      	ldr	r3, [r7, #32]
 800483e:	e853 3f00 	ldrex	r3, [r3]
 8004842:	61fb      	str	r3, [r7, #28]
   return(result);
 8004844:	69fb      	ldr	r3, [r7, #28]
 8004846:	f023 0301 	bic.w	r3, r3, #1
 800484a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	3314      	adds	r3, #20
 8004852:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004854:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004856:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004858:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800485a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800485c:	e841 2300 	strex	r3, r2, [r1]
 8004860:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004864:	2b00      	cmp	r3, #0
 8004866:	d1e5      	bne.n	8004834 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486c:	2b01      	cmp	r3, #1
 800486e:	d119      	bne.n	80048a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	330c      	adds	r3, #12
 8004876:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	e853 3f00 	ldrex	r3, [r3]
 800487e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	f023 0310 	bic.w	r3, r3, #16
 8004886:	647b      	str	r3, [r7, #68]	@ 0x44
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	330c      	adds	r3, #12
 800488e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004890:	61ba      	str	r2, [r7, #24]
 8004892:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004894:	6979      	ldr	r1, [r7, #20]
 8004896:	69ba      	ldr	r2, [r7, #24]
 8004898:	e841 2300 	strex	r3, r2, [r1]
 800489c:	613b      	str	r3, [r7, #16]
   return(result);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d1e5      	bne.n	8004870 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80048b2:	bf00      	nop
 80048b4:	3754      	adds	r7, #84	@ 0x54
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b084      	sub	sp, #16
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048ca:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	2200      	movs	r2, #0
 80048d0:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	2200      	movs	r2, #0
 80048d6:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80048d8:	68f8      	ldr	r0, [r7, #12]
 80048da:	f7ff ff3d 	bl	8004758 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80048de:	bf00      	nop
 80048e0:	3710      	adds	r7, #16
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}

080048e6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b085      	sub	sp, #20
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b21      	cmp	r3, #33	@ 0x21
 80048f8:	d13e      	bne.n	8004978 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	689b      	ldr	r3, [r3, #8]
 80048fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004902:	d114      	bne.n	800492e <UART_Transmit_IT+0x48>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	691b      	ldr	r3, [r3, #16]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d110      	bne.n	800492e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	6a1b      	ldr	r3, [r3, #32]
 8004910:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	881b      	ldrh	r3, [r3, #0]
 8004916:	461a      	mov	r2, r3
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004920:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	6a1b      	ldr	r3, [r3, #32]
 8004926:	1c9a      	adds	r2, r3, #2
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	621a      	str	r2, [r3, #32]
 800492c:	e008      	b.n	8004940 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6a1b      	ldr	r3, [r3, #32]
 8004932:	1c59      	adds	r1, r3, #1
 8004934:	687a      	ldr	r2, [r7, #4]
 8004936:	6211      	str	r1, [r2, #32]
 8004938:	781a      	ldrb	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004944:	b29b      	uxth	r3, r3
 8004946:	3b01      	subs	r3, #1
 8004948:	b29b      	uxth	r3, r3
 800494a:	687a      	ldr	r2, [r7, #4]
 800494c:	4619      	mov	r1, r3
 800494e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004950:	2b00      	cmp	r3, #0
 8004952:	d10f      	bne.n	8004974 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	68da      	ldr	r2, [r3, #12]
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004962:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	68da      	ldr	r2, [r3, #12]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004972:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004974:	2300      	movs	r3, #0
 8004976:	e000      	b.n	800497a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004978:	2302      	movs	r3, #2
  }
}
 800497a:	4618      	mov	r0, r3
 800497c:	3714      	adds	r7, #20
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr

08004986 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004986:	b580      	push	{r7, lr}
 8004988:	b082      	sub	sp, #8
 800498a:	af00      	add	r7, sp, #0
 800498c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	68da      	ldr	r2, [r3, #12]
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800499c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	2220      	movs	r2, #32
 80049a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80049a6:	6878      	ldr	r0, [r7, #4]
 80049a8:	f7ff fecc 	bl	8004744 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3708      	adds	r7, #8
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}

080049b6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80049b6:	b580      	push	{r7, lr}
 80049b8:	b08c      	sub	sp, #48	@ 0x30
 80049ba:	af00      	add	r7, sp, #0
 80049bc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049c4:	b2db      	uxtb	r3, r3
 80049c6:	2b22      	cmp	r3, #34	@ 0x22
 80049c8:	f040 80ae 	bne.w	8004b28 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	689b      	ldr	r3, [r3, #8]
 80049d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049d4:	d117      	bne.n	8004a06 <UART_Receive_IT+0x50>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	691b      	ldr	r3, [r3, #16]
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d113      	bne.n	8004a06 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80049de:	2300      	movs	r3, #0
 80049e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049e6:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	685b      	ldr	r3, [r3, #4]
 80049ee:	b29b      	uxth	r3, r3
 80049f0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80049f4:	b29a      	uxth	r2, r3
 80049f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049f8:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80049fe:	1c9a      	adds	r2, r3, #2
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	629a      	str	r2, [r3, #40]	@ 0x28
 8004a04:	e026      	b.n	8004a54 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	689b      	ldr	r3, [r3, #8]
 8004a14:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a18:	d007      	beq.n	8004a2a <UART_Receive_IT+0x74>
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	689b      	ldr	r3, [r3, #8]
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d10a      	bne.n	8004a38 <UART_Receive_IT+0x82>
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	691b      	ldr	r3, [r3, #16]
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d106      	bne.n	8004a38 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a34:	701a      	strb	r2, [r3, #0]
 8004a36:	e008      	b.n	8004a4a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	685b      	ldr	r3, [r3, #4]
 8004a3e:	b2db      	uxtb	r3, r3
 8004a40:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004a44:	b2da      	uxtb	r2, r3
 8004a46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004a48:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004a4e:	1c5a      	adds	r2, r3, #1
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004a58:	b29b      	uxth	r3, r3
 8004a5a:	3b01      	subs	r3, #1
 8004a5c:	b29b      	uxth	r3, r3
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	4619      	mov	r1, r3
 8004a62:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d15d      	bne.n	8004b24 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	68da      	ldr	r2, [r3, #12]
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f022 0220 	bic.w	r2, r2, #32
 8004a76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	68da      	ldr	r2, [r3, #12]
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004a86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695a      	ldr	r2, [r3, #20]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	f022 0201 	bic.w	r2, r2, #1
 8004a96:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2220      	movs	r2, #32
 8004a9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	2200      	movs	r2, #0
 8004aa4:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004aaa:	2b01      	cmp	r3, #1
 8004aac:	d135      	bne.n	8004b1a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	2200      	movs	r2, #0
 8004ab2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	330c      	adds	r3, #12
 8004aba:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004abc:	697b      	ldr	r3, [r7, #20]
 8004abe:	e853 3f00 	ldrex	r3, [r3]
 8004ac2:	613b      	str	r3, [r7, #16]
   return(result);
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	f023 0310 	bic.w	r3, r3, #16
 8004aca:	627b      	str	r3, [r7, #36]	@ 0x24
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	330c      	adds	r3, #12
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad4:	623a      	str	r2, [r7, #32]
 8004ad6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ad8:	69f9      	ldr	r1, [r7, #28]
 8004ada:	6a3a      	ldr	r2, [r7, #32]
 8004adc:	e841 2300 	strex	r3, r2, [r1]
 8004ae0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004ae2:	69bb      	ldr	r3, [r7, #24]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d1e5      	bne.n	8004ab4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f003 0310 	and.w	r3, r3, #16
 8004af2:	2b10      	cmp	r3, #16
 8004af4:	d10a      	bne.n	8004b0c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004af6:	2300      	movs	r3, #0
 8004af8:	60fb      	str	r3, [r7, #12]
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	685b      	ldr	r3, [r3, #4]
 8004b08:	60fb      	str	r3, [r7, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004b10:	4619      	mov	r1, r3
 8004b12:	6878      	ldr	r0, [r7, #4]
 8004b14:	f7ff fe2a 	bl	800476c <HAL_UARTEx_RxEventCallback>
 8004b18:	e002      	b.n	8004b20 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f7fc f8b4 	bl	8000c88 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004b20:	2300      	movs	r3, #0
 8004b22:	e002      	b.n	8004b2a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004b24:	2300      	movs	r3, #0
 8004b26:	e000      	b.n	8004b2a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004b28:	2302      	movs	r3, #2
  }
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3730      	adds	r7, #48	@ 0x30
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
	...

08004b34 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b38:	b0c0      	sub	sp, #256	@ 0x100
 8004b3a:	af00      	add	r7, sp, #0
 8004b3c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	691b      	ldr	r3, [r3, #16]
 8004b48:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004b4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b50:	68d9      	ldr	r1, [r3, #12]
 8004b52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	ea40 0301 	orr.w	r3, r0, r1
 8004b5c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b62:	689a      	ldr	r2, [r3, #8]
 8004b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b68:	691b      	ldr	r3, [r3, #16]
 8004b6a:	431a      	orrs	r2, r3
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b70:	695b      	ldr	r3, [r3, #20]
 8004b72:	431a      	orrs	r2, r3
 8004b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b78:	69db      	ldr	r3, [r3, #28]
 8004b7a:	4313      	orrs	r3, r2
 8004b7c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004b80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	68db      	ldr	r3, [r3, #12]
 8004b88:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004b8c:	f021 010c 	bic.w	r1, r1, #12
 8004b90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004b9a:	430b      	orrs	r3, r1
 8004b9c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004b9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	695b      	ldr	r3, [r3, #20]
 8004ba6:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004baa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bae:	6999      	ldr	r1, [r3, #24]
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	ea40 0301 	orr.w	r3, r0, r1
 8004bba:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bbc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	4b8f      	ldr	r3, [pc, #572]	@ (8004e00 <UART_SetConfig+0x2cc>)
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d005      	beq.n	8004bd4 <UART_SetConfig+0xa0>
 8004bc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	4b8d      	ldr	r3, [pc, #564]	@ (8004e04 <UART_SetConfig+0x2d0>)
 8004bd0:	429a      	cmp	r2, r3
 8004bd2:	d104      	bne.n	8004bde <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004bd4:	f7fd fbf6 	bl	80023c4 <HAL_RCC_GetPCLK2Freq>
 8004bd8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004bdc:	e003      	b.n	8004be6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004bde:	f7fd fbdd 	bl	800239c <HAL_RCC_GetPCLK1Freq>
 8004be2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004be6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004bea:	69db      	ldr	r3, [r3, #28]
 8004bec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004bf0:	f040 810c 	bne.w	8004e0c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004bf4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004bfe:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004c02:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004c06:	4622      	mov	r2, r4
 8004c08:	462b      	mov	r3, r5
 8004c0a:	1891      	adds	r1, r2, r2
 8004c0c:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004c0e:	415b      	adcs	r3, r3
 8004c10:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004c12:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004c16:	4621      	mov	r1, r4
 8004c18:	eb12 0801 	adds.w	r8, r2, r1
 8004c1c:	4629      	mov	r1, r5
 8004c1e:	eb43 0901 	adc.w	r9, r3, r1
 8004c22:	f04f 0200 	mov.w	r2, #0
 8004c26:	f04f 0300 	mov.w	r3, #0
 8004c2a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c2e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c32:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c36:	4690      	mov	r8, r2
 8004c38:	4699      	mov	r9, r3
 8004c3a:	4623      	mov	r3, r4
 8004c3c:	eb18 0303 	adds.w	r3, r8, r3
 8004c40:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004c44:	462b      	mov	r3, r5
 8004c46:	eb49 0303 	adc.w	r3, r9, r3
 8004c4a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	2200      	movs	r2, #0
 8004c56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004c5a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004c5e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004c62:	460b      	mov	r3, r1
 8004c64:	18db      	adds	r3, r3, r3
 8004c66:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c68:	4613      	mov	r3, r2
 8004c6a:	eb42 0303 	adc.w	r3, r2, r3
 8004c6e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004c70:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004c74:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004c78:	f7fb fb22 	bl	80002c0 <__aeabi_uldivmod>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	4b61      	ldr	r3, [pc, #388]	@ (8004e08 <UART_SetConfig+0x2d4>)
 8004c82:	fba3 2302 	umull	r2, r3, r3, r2
 8004c86:	095b      	lsrs	r3, r3, #5
 8004c88:	011c      	lsls	r4, r3, #4
 8004c8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c94:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004c98:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004c9c:	4642      	mov	r2, r8
 8004c9e:	464b      	mov	r3, r9
 8004ca0:	1891      	adds	r1, r2, r2
 8004ca2:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004ca4:	415b      	adcs	r3, r3
 8004ca6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004ca8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004cac:	4641      	mov	r1, r8
 8004cae:	eb12 0a01 	adds.w	sl, r2, r1
 8004cb2:	4649      	mov	r1, r9
 8004cb4:	eb43 0b01 	adc.w	fp, r3, r1
 8004cb8:	f04f 0200 	mov.w	r2, #0
 8004cbc:	f04f 0300 	mov.w	r3, #0
 8004cc0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cc4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cc8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ccc:	4692      	mov	sl, r2
 8004cce:	469b      	mov	fp, r3
 8004cd0:	4643      	mov	r3, r8
 8004cd2:	eb1a 0303 	adds.w	r3, sl, r3
 8004cd6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004cda:	464b      	mov	r3, r9
 8004cdc:	eb4b 0303 	adc.w	r3, fp, r3
 8004ce0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ce4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce8:	685b      	ldr	r3, [r3, #4]
 8004cea:	2200      	movs	r2, #0
 8004cec:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cf0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004cf4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004cf8:	460b      	mov	r3, r1
 8004cfa:	18db      	adds	r3, r3, r3
 8004cfc:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cfe:	4613      	mov	r3, r2
 8004d00:	eb42 0303 	adc.w	r3, r2, r3
 8004d04:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d06:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004d0a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004d0e:	f7fb fad7 	bl	80002c0 <__aeabi_uldivmod>
 8004d12:	4602      	mov	r2, r0
 8004d14:	460b      	mov	r3, r1
 8004d16:	4611      	mov	r1, r2
 8004d18:	4b3b      	ldr	r3, [pc, #236]	@ (8004e08 <UART_SetConfig+0x2d4>)
 8004d1a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d1e:	095b      	lsrs	r3, r3, #5
 8004d20:	2264      	movs	r2, #100	@ 0x64
 8004d22:	fb02 f303 	mul.w	r3, r2, r3
 8004d26:	1acb      	subs	r3, r1, r3
 8004d28:	00db      	lsls	r3, r3, #3
 8004d2a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004d2e:	4b36      	ldr	r3, [pc, #216]	@ (8004e08 <UART_SetConfig+0x2d4>)
 8004d30:	fba3 2302 	umull	r2, r3, r3, r2
 8004d34:	095b      	lsrs	r3, r3, #5
 8004d36:	005b      	lsls	r3, r3, #1
 8004d38:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004d3c:	441c      	add	r4, r3
 8004d3e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d42:	2200      	movs	r2, #0
 8004d44:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d48:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004d4c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004d50:	4642      	mov	r2, r8
 8004d52:	464b      	mov	r3, r9
 8004d54:	1891      	adds	r1, r2, r2
 8004d56:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004d58:	415b      	adcs	r3, r3
 8004d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004d5c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004d60:	4641      	mov	r1, r8
 8004d62:	1851      	adds	r1, r2, r1
 8004d64:	6339      	str	r1, [r7, #48]	@ 0x30
 8004d66:	4649      	mov	r1, r9
 8004d68:	414b      	adcs	r3, r1
 8004d6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004d6c:	f04f 0200 	mov.w	r2, #0
 8004d70:	f04f 0300 	mov.w	r3, #0
 8004d74:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004d78:	4659      	mov	r1, fp
 8004d7a:	00cb      	lsls	r3, r1, #3
 8004d7c:	4651      	mov	r1, sl
 8004d7e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d82:	4651      	mov	r1, sl
 8004d84:	00ca      	lsls	r2, r1, #3
 8004d86:	4610      	mov	r0, r2
 8004d88:	4619      	mov	r1, r3
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	4642      	mov	r2, r8
 8004d8e:	189b      	adds	r3, r3, r2
 8004d90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d94:	464b      	mov	r3, r9
 8004d96:	460a      	mov	r2, r1
 8004d98:	eb42 0303 	adc.w	r3, r2, r3
 8004d9c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	2200      	movs	r2, #0
 8004da8:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004dac:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004db0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004db4:	460b      	mov	r3, r1
 8004db6:	18db      	adds	r3, r3, r3
 8004db8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004dba:	4613      	mov	r3, r2
 8004dbc:	eb42 0303 	adc.w	r3, r2, r3
 8004dc0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004dc2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004dc6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004dca:	f7fb fa79 	bl	80002c0 <__aeabi_uldivmod>
 8004dce:	4602      	mov	r2, r0
 8004dd0:	460b      	mov	r3, r1
 8004dd2:	4b0d      	ldr	r3, [pc, #52]	@ (8004e08 <UART_SetConfig+0x2d4>)
 8004dd4:	fba3 1302 	umull	r1, r3, r3, r2
 8004dd8:	095b      	lsrs	r3, r3, #5
 8004dda:	2164      	movs	r1, #100	@ 0x64
 8004ddc:	fb01 f303 	mul.w	r3, r1, r3
 8004de0:	1ad3      	subs	r3, r2, r3
 8004de2:	00db      	lsls	r3, r3, #3
 8004de4:	3332      	adds	r3, #50	@ 0x32
 8004de6:	4a08      	ldr	r2, [pc, #32]	@ (8004e08 <UART_SetConfig+0x2d4>)
 8004de8:	fba2 2303 	umull	r2, r3, r2, r3
 8004dec:	095b      	lsrs	r3, r3, #5
 8004dee:	f003 0207 	and.w	r2, r3, #7
 8004df2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	4422      	add	r2, r4
 8004dfa:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004dfc:	e106      	b.n	800500c <UART_SetConfig+0x4d8>
 8004dfe:	bf00      	nop
 8004e00:	40011000 	.word	0x40011000
 8004e04:	40011400 	.word	0x40011400
 8004e08:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e10:	2200      	movs	r2, #0
 8004e12:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004e16:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004e1a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004e1e:	4642      	mov	r2, r8
 8004e20:	464b      	mov	r3, r9
 8004e22:	1891      	adds	r1, r2, r2
 8004e24:	6239      	str	r1, [r7, #32]
 8004e26:	415b      	adcs	r3, r3
 8004e28:	627b      	str	r3, [r7, #36]	@ 0x24
 8004e2a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e2e:	4641      	mov	r1, r8
 8004e30:	1854      	adds	r4, r2, r1
 8004e32:	4649      	mov	r1, r9
 8004e34:	eb43 0501 	adc.w	r5, r3, r1
 8004e38:	f04f 0200 	mov.w	r2, #0
 8004e3c:	f04f 0300 	mov.w	r3, #0
 8004e40:	00eb      	lsls	r3, r5, #3
 8004e42:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e46:	00e2      	lsls	r2, r4, #3
 8004e48:	4614      	mov	r4, r2
 8004e4a:	461d      	mov	r5, r3
 8004e4c:	4643      	mov	r3, r8
 8004e4e:	18e3      	adds	r3, r4, r3
 8004e50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004e54:	464b      	mov	r3, r9
 8004e56:	eb45 0303 	adc.w	r3, r5, r3
 8004e5a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004e5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004e6a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004e6e:	f04f 0200 	mov.w	r2, #0
 8004e72:	f04f 0300 	mov.w	r3, #0
 8004e76:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004e7a:	4629      	mov	r1, r5
 8004e7c:	008b      	lsls	r3, r1, #2
 8004e7e:	4621      	mov	r1, r4
 8004e80:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004e84:	4621      	mov	r1, r4
 8004e86:	008a      	lsls	r2, r1, #2
 8004e88:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004e8c:	f7fb fa18 	bl	80002c0 <__aeabi_uldivmod>
 8004e90:	4602      	mov	r2, r0
 8004e92:	460b      	mov	r3, r1
 8004e94:	4b60      	ldr	r3, [pc, #384]	@ (8005018 <UART_SetConfig+0x4e4>)
 8004e96:	fba3 2302 	umull	r2, r3, r3, r2
 8004e9a:	095b      	lsrs	r3, r3, #5
 8004e9c:	011c      	lsls	r4, r3, #4
 8004e9e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004ea8:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004eac:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004eb0:	4642      	mov	r2, r8
 8004eb2:	464b      	mov	r3, r9
 8004eb4:	1891      	adds	r1, r2, r2
 8004eb6:	61b9      	str	r1, [r7, #24]
 8004eb8:	415b      	adcs	r3, r3
 8004eba:	61fb      	str	r3, [r7, #28]
 8004ebc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ec0:	4641      	mov	r1, r8
 8004ec2:	1851      	adds	r1, r2, r1
 8004ec4:	6139      	str	r1, [r7, #16]
 8004ec6:	4649      	mov	r1, r9
 8004ec8:	414b      	adcs	r3, r1
 8004eca:	617b      	str	r3, [r7, #20]
 8004ecc:	f04f 0200 	mov.w	r2, #0
 8004ed0:	f04f 0300 	mov.w	r3, #0
 8004ed4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ed8:	4659      	mov	r1, fp
 8004eda:	00cb      	lsls	r3, r1, #3
 8004edc:	4651      	mov	r1, sl
 8004ede:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ee2:	4651      	mov	r1, sl
 8004ee4:	00ca      	lsls	r2, r1, #3
 8004ee6:	4610      	mov	r0, r2
 8004ee8:	4619      	mov	r1, r3
 8004eea:	4603      	mov	r3, r0
 8004eec:	4642      	mov	r2, r8
 8004eee:	189b      	adds	r3, r3, r2
 8004ef0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ef4:	464b      	mov	r3, r9
 8004ef6:	460a      	mov	r2, r1
 8004ef8:	eb42 0303 	adc.w	r3, r2, r3
 8004efc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f04:	685b      	ldr	r3, [r3, #4]
 8004f06:	2200      	movs	r2, #0
 8004f08:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004f0a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004f0c:	f04f 0200 	mov.w	r2, #0
 8004f10:	f04f 0300 	mov.w	r3, #0
 8004f14:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004f18:	4649      	mov	r1, r9
 8004f1a:	008b      	lsls	r3, r1, #2
 8004f1c:	4641      	mov	r1, r8
 8004f1e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f22:	4641      	mov	r1, r8
 8004f24:	008a      	lsls	r2, r1, #2
 8004f26:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004f2a:	f7fb f9c9 	bl	80002c0 <__aeabi_uldivmod>
 8004f2e:	4602      	mov	r2, r0
 8004f30:	460b      	mov	r3, r1
 8004f32:	4611      	mov	r1, r2
 8004f34:	4b38      	ldr	r3, [pc, #224]	@ (8005018 <UART_SetConfig+0x4e4>)
 8004f36:	fba3 2301 	umull	r2, r3, r3, r1
 8004f3a:	095b      	lsrs	r3, r3, #5
 8004f3c:	2264      	movs	r2, #100	@ 0x64
 8004f3e:	fb02 f303 	mul.w	r3, r2, r3
 8004f42:	1acb      	subs	r3, r1, r3
 8004f44:	011b      	lsls	r3, r3, #4
 8004f46:	3332      	adds	r3, #50	@ 0x32
 8004f48:	4a33      	ldr	r2, [pc, #204]	@ (8005018 <UART_SetConfig+0x4e4>)
 8004f4a:	fba2 2303 	umull	r2, r3, r2, r3
 8004f4e:	095b      	lsrs	r3, r3, #5
 8004f50:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004f54:	441c      	add	r4, r3
 8004f56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	673b      	str	r3, [r7, #112]	@ 0x70
 8004f5e:	677a      	str	r2, [r7, #116]	@ 0x74
 8004f60:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004f64:	4642      	mov	r2, r8
 8004f66:	464b      	mov	r3, r9
 8004f68:	1891      	adds	r1, r2, r2
 8004f6a:	60b9      	str	r1, [r7, #8]
 8004f6c:	415b      	adcs	r3, r3
 8004f6e:	60fb      	str	r3, [r7, #12]
 8004f70:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f74:	4641      	mov	r1, r8
 8004f76:	1851      	adds	r1, r2, r1
 8004f78:	6039      	str	r1, [r7, #0]
 8004f7a:	4649      	mov	r1, r9
 8004f7c:	414b      	adcs	r3, r1
 8004f7e:	607b      	str	r3, [r7, #4]
 8004f80:	f04f 0200 	mov.w	r2, #0
 8004f84:	f04f 0300 	mov.w	r3, #0
 8004f88:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004f8c:	4659      	mov	r1, fp
 8004f8e:	00cb      	lsls	r3, r1, #3
 8004f90:	4651      	mov	r1, sl
 8004f92:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f96:	4651      	mov	r1, sl
 8004f98:	00ca      	lsls	r2, r1, #3
 8004f9a:	4610      	mov	r0, r2
 8004f9c:	4619      	mov	r1, r3
 8004f9e:	4603      	mov	r3, r0
 8004fa0:	4642      	mov	r2, r8
 8004fa2:	189b      	adds	r3, r3, r2
 8004fa4:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004fa6:	464b      	mov	r3, r9
 8004fa8:	460a      	mov	r2, r1
 8004faa:	eb42 0303 	adc.w	r3, r2, r3
 8004fae:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004fb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	2200      	movs	r2, #0
 8004fb8:	663b      	str	r3, [r7, #96]	@ 0x60
 8004fba:	667a      	str	r2, [r7, #100]	@ 0x64
 8004fbc:	f04f 0200 	mov.w	r2, #0
 8004fc0:	f04f 0300 	mov.w	r3, #0
 8004fc4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004fc8:	4649      	mov	r1, r9
 8004fca:	008b      	lsls	r3, r1, #2
 8004fcc:	4641      	mov	r1, r8
 8004fce:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004fd2:	4641      	mov	r1, r8
 8004fd4:	008a      	lsls	r2, r1, #2
 8004fd6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004fda:	f7fb f971 	bl	80002c0 <__aeabi_uldivmod>
 8004fde:	4602      	mov	r2, r0
 8004fe0:	460b      	mov	r3, r1
 8004fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8005018 <UART_SetConfig+0x4e4>)
 8004fe4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fe8:	095b      	lsrs	r3, r3, #5
 8004fea:	2164      	movs	r1, #100	@ 0x64
 8004fec:	fb01 f303 	mul.w	r3, r1, r3
 8004ff0:	1ad3      	subs	r3, r2, r3
 8004ff2:	011b      	lsls	r3, r3, #4
 8004ff4:	3332      	adds	r3, #50	@ 0x32
 8004ff6:	4a08      	ldr	r2, [pc, #32]	@ (8005018 <UART_SetConfig+0x4e4>)
 8004ff8:	fba2 2303 	umull	r2, r3, r2, r3
 8004ffc:	095b      	lsrs	r3, r3, #5
 8004ffe:	f003 020f 	and.w	r2, r3, #15
 8005002:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	4422      	add	r2, r4
 800500a:	609a      	str	r2, [r3, #8]
}
 800500c:	bf00      	nop
 800500e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005012:	46bd      	mov	sp, r7
 8005014:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005018:	51eb851f 	.word	0x51eb851f

0800501c <siscanf>:
 800501c:	b40e      	push	{r1, r2, r3}
 800501e:	b530      	push	{r4, r5, lr}
 8005020:	b09c      	sub	sp, #112	@ 0x70
 8005022:	ac1f      	add	r4, sp, #124	@ 0x7c
 8005024:	f44f 7201 	mov.w	r2, #516	@ 0x204
 8005028:	f854 5b04 	ldr.w	r5, [r4], #4
 800502c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8005030:	9002      	str	r0, [sp, #8]
 8005032:	9006      	str	r0, [sp, #24]
 8005034:	f7fb f8ec 	bl	8000210 <strlen>
 8005038:	4b0b      	ldr	r3, [pc, #44]	@ (8005068 <siscanf+0x4c>)
 800503a:	9003      	str	r0, [sp, #12]
 800503c:	9007      	str	r0, [sp, #28]
 800503e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005040:	480a      	ldr	r0, [pc, #40]	@ (800506c <siscanf+0x50>)
 8005042:	9401      	str	r4, [sp, #4]
 8005044:	2300      	movs	r3, #0
 8005046:	930f      	str	r3, [sp, #60]	@ 0x3c
 8005048:	9314      	str	r3, [sp, #80]	@ 0x50
 800504a:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800504e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8005052:	462a      	mov	r2, r5
 8005054:	4623      	mov	r3, r4
 8005056:	a902      	add	r1, sp, #8
 8005058:	6800      	ldr	r0, [r0, #0]
 800505a:	f000 f997 	bl	800538c <__ssvfiscanf_r>
 800505e:	b01c      	add	sp, #112	@ 0x70
 8005060:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005064:	b003      	add	sp, #12
 8005066:	4770      	bx	lr
 8005068:	08005071 	.word	0x08005071
 800506c:	20000088 	.word	0x20000088

08005070 <__seofread>:
 8005070:	2000      	movs	r0, #0
 8005072:	4770      	bx	lr

08005074 <memset>:
 8005074:	4402      	add	r2, r0
 8005076:	4603      	mov	r3, r0
 8005078:	4293      	cmp	r3, r2
 800507a:	d100      	bne.n	800507e <memset+0xa>
 800507c:	4770      	bx	lr
 800507e:	f803 1b01 	strb.w	r1, [r3], #1
 8005082:	e7f9      	b.n	8005078 <memset+0x4>

08005084 <__errno>:
 8005084:	4b01      	ldr	r3, [pc, #4]	@ (800508c <__errno+0x8>)
 8005086:	6818      	ldr	r0, [r3, #0]
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	20000088 	.word	0x20000088

08005090 <__libc_init_array>:
 8005090:	b570      	push	{r4, r5, r6, lr}
 8005092:	4d0d      	ldr	r5, [pc, #52]	@ (80050c8 <__libc_init_array+0x38>)
 8005094:	4c0d      	ldr	r4, [pc, #52]	@ (80050cc <__libc_init_array+0x3c>)
 8005096:	1b64      	subs	r4, r4, r5
 8005098:	10a4      	asrs	r4, r4, #2
 800509a:	2600      	movs	r6, #0
 800509c:	42a6      	cmp	r6, r4
 800509e:	d109      	bne.n	80050b4 <__libc_init_array+0x24>
 80050a0:	4d0b      	ldr	r5, [pc, #44]	@ (80050d0 <__libc_init_array+0x40>)
 80050a2:	4c0c      	ldr	r4, [pc, #48]	@ (80050d4 <__libc_init_array+0x44>)
 80050a4:	f000 fde8 	bl	8005c78 <_init>
 80050a8:	1b64      	subs	r4, r4, r5
 80050aa:	10a4      	asrs	r4, r4, #2
 80050ac:	2600      	movs	r6, #0
 80050ae:	42a6      	cmp	r6, r4
 80050b0:	d105      	bne.n	80050be <__libc_init_array+0x2e>
 80050b2:	bd70      	pop	{r4, r5, r6, pc}
 80050b4:	f855 3b04 	ldr.w	r3, [r5], #4
 80050b8:	4798      	blx	r3
 80050ba:	3601      	adds	r6, #1
 80050bc:	e7ee      	b.n	800509c <__libc_init_array+0xc>
 80050be:	f855 3b04 	ldr.w	r3, [r5], #4
 80050c2:	4798      	blx	r3
 80050c4:	3601      	adds	r6, #1
 80050c6:	e7f2      	b.n	80050ae <__libc_init_array+0x1e>
 80050c8:	08005de8 	.word	0x08005de8
 80050cc:	08005de8 	.word	0x08005de8
 80050d0:	08005de8 	.word	0x08005de8
 80050d4:	08005dec 	.word	0x08005dec

080050d8 <__retarget_lock_acquire_recursive>:
 80050d8:	4770      	bx	lr

080050da <__retarget_lock_release_recursive>:
 80050da:	4770      	bx	lr

080050dc <strcpy>:
 80050dc:	4603      	mov	r3, r0
 80050de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050e2:	f803 2b01 	strb.w	r2, [r3], #1
 80050e6:	2a00      	cmp	r2, #0
 80050e8:	d1f9      	bne.n	80050de <strcpy+0x2>
 80050ea:	4770      	bx	lr

080050ec <_free_r>:
 80050ec:	b538      	push	{r3, r4, r5, lr}
 80050ee:	4605      	mov	r5, r0
 80050f0:	2900      	cmp	r1, #0
 80050f2:	d041      	beq.n	8005178 <_free_r+0x8c>
 80050f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80050f8:	1f0c      	subs	r4, r1, #4
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	bfb8      	it	lt
 80050fe:	18e4      	addlt	r4, r4, r3
 8005100:	f000 f8e0 	bl	80052c4 <__malloc_lock>
 8005104:	4a1d      	ldr	r2, [pc, #116]	@ (800517c <_free_r+0x90>)
 8005106:	6813      	ldr	r3, [r2, #0]
 8005108:	b933      	cbnz	r3, 8005118 <_free_r+0x2c>
 800510a:	6063      	str	r3, [r4, #4]
 800510c:	6014      	str	r4, [r2, #0]
 800510e:	4628      	mov	r0, r5
 8005110:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005114:	f000 b8dc 	b.w	80052d0 <__malloc_unlock>
 8005118:	42a3      	cmp	r3, r4
 800511a:	d908      	bls.n	800512e <_free_r+0x42>
 800511c:	6820      	ldr	r0, [r4, #0]
 800511e:	1821      	adds	r1, r4, r0
 8005120:	428b      	cmp	r3, r1
 8005122:	bf01      	itttt	eq
 8005124:	6819      	ldreq	r1, [r3, #0]
 8005126:	685b      	ldreq	r3, [r3, #4]
 8005128:	1809      	addeq	r1, r1, r0
 800512a:	6021      	streq	r1, [r4, #0]
 800512c:	e7ed      	b.n	800510a <_free_r+0x1e>
 800512e:	461a      	mov	r2, r3
 8005130:	685b      	ldr	r3, [r3, #4]
 8005132:	b10b      	cbz	r3, 8005138 <_free_r+0x4c>
 8005134:	42a3      	cmp	r3, r4
 8005136:	d9fa      	bls.n	800512e <_free_r+0x42>
 8005138:	6811      	ldr	r1, [r2, #0]
 800513a:	1850      	adds	r0, r2, r1
 800513c:	42a0      	cmp	r0, r4
 800513e:	d10b      	bne.n	8005158 <_free_r+0x6c>
 8005140:	6820      	ldr	r0, [r4, #0]
 8005142:	4401      	add	r1, r0
 8005144:	1850      	adds	r0, r2, r1
 8005146:	4283      	cmp	r3, r0
 8005148:	6011      	str	r1, [r2, #0]
 800514a:	d1e0      	bne.n	800510e <_free_r+0x22>
 800514c:	6818      	ldr	r0, [r3, #0]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	6053      	str	r3, [r2, #4]
 8005152:	4408      	add	r0, r1
 8005154:	6010      	str	r0, [r2, #0]
 8005156:	e7da      	b.n	800510e <_free_r+0x22>
 8005158:	d902      	bls.n	8005160 <_free_r+0x74>
 800515a:	230c      	movs	r3, #12
 800515c:	602b      	str	r3, [r5, #0]
 800515e:	e7d6      	b.n	800510e <_free_r+0x22>
 8005160:	6820      	ldr	r0, [r4, #0]
 8005162:	1821      	adds	r1, r4, r0
 8005164:	428b      	cmp	r3, r1
 8005166:	bf04      	itt	eq
 8005168:	6819      	ldreq	r1, [r3, #0]
 800516a:	685b      	ldreq	r3, [r3, #4]
 800516c:	6063      	str	r3, [r4, #4]
 800516e:	bf04      	itt	eq
 8005170:	1809      	addeq	r1, r1, r0
 8005172:	6021      	streq	r1, [r4, #0]
 8005174:	6054      	str	r4, [r2, #4]
 8005176:	e7ca      	b.n	800510e <_free_r+0x22>
 8005178:	bd38      	pop	{r3, r4, r5, pc}
 800517a:	bf00      	nop
 800517c:	2000044c 	.word	0x2000044c

08005180 <sbrk_aligned>:
 8005180:	b570      	push	{r4, r5, r6, lr}
 8005182:	4e0f      	ldr	r6, [pc, #60]	@ (80051c0 <sbrk_aligned+0x40>)
 8005184:	460c      	mov	r4, r1
 8005186:	6831      	ldr	r1, [r6, #0]
 8005188:	4605      	mov	r5, r0
 800518a:	b911      	cbnz	r1, 8005192 <sbrk_aligned+0x12>
 800518c:	f000 fc34 	bl	80059f8 <_sbrk_r>
 8005190:	6030      	str	r0, [r6, #0]
 8005192:	4621      	mov	r1, r4
 8005194:	4628      	mov	r0, r5
 8005196:	f000 fc2f 	bl	80059f8 <_sbrk_r>
 800519a:	1c43      	adds	r3, r0, #1
 800519c:	d103      	bne.n	80051a6 <sbrk_aligned+0x26>
 800519e:	f04f 34ff 	mov.w	r4, #4294967295
 80051a2:	4620      	mov	r0, r4
 80051a4:	bd70      	pop	{r4, r5, r6, pc}
 80051a6:	1cc4      	adds	r4, r0, #3
 80051a8:	f024 0403 	bic.w	r4, r4, #3
 80051ac:	42a0      	cmp	r0, r4
 80051ae:	d0f8      	beq.n	80051a2 <sbrk_aligned+0x22>
 80051b0:	1a21      	subs	r1, r4, r0
 80051b2:	4628      	mov	r0, r5
 80051b4:	f000 fc20 	bl	80059f8 <_sbrk_r>
 80051b8:	3001      	adds	r0, #1
 80051ba:	d1f2      	bne.n	80051a2 <sbrk_aligned+0x22>
 80051bc:	e7ef      	b.n	800519e <sbrk_aligned+0x1e>
 80051be:	bf00      	nop
 80051c0:	20000448 	.word	0x20000448

080051c4 <_malloc_r>:
 80051c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80051c8:	1ccd      	adds	r5, r1, #3
 80051ca:	f025 0503 	bic.w	r5, r5, #3
 80051ce:	3508      	adds	r5, #8
 80051d0:	2d0c      	cmp	r5, #12
 80051d2:	bf38      	it	cc
 80051d4:	250c      	movcc	r5, #12
 80051d6:	2d00      	cmp	r5, #0
 80051d8:	4606      	mov	r6, r0
 80051da:	db01      	blt.n	80051e0 <_malloc_r+0x1c>
 80051dc:	42a9      	cmp	r1, r5
 80051de:	d904      	bls.n	80051ea <_malloc_r+0x26>
 80051e0:	230c      	movs	r3, #12
 80051e2:	6033      	str	r3, [r6, #0]
 80051e4:	2000      	movs	r0, #0
 80051e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80051ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80052c0 <_malloc_r+0xfc>
 80051ee:	f000 f869 	bl	80052c4 <__malloc_lock>
 80051f2:	f8d8 3000 	ldr.w	r3, [r8]
 80051f6:	461c      	mov	r4, r3
 80051f8:	bb44      	cbnz	r4, 800524c <_malloc_r+0x88>
 80051fa:	4629      	mov	r1, r5
 80051fc:	4630      	mov	r0, r6
 80051fe:	f7ff ffbf 	bl	8005180 <sbrk_aligned>
 8005202:	1c43      	adds	r3, r0, #1
 8005204:	4604      	mov	r4, r0
 8005206:	d158      	bne.n	80052ba <_malloc_r+0xf6>
 8005208:	f8d8 4000 	ldr.w	r4, [r8]
 800520c:	4627      	mov	r7, r4
 800520e:	2f00      	cmp	r7, #0
 8005210:	d143      	bne.n	800529a <_malloc_r+0xd6>
 8005212:	2c00      	cmp	r4, #0
 8005214:	d04b      	beq.n	80052ae <_malloc_r+0xea>
 8005216:	6823      	ldr	r3, [r4, #0]
 8005218:	4639      	mov	r1, r7
 800521a:	4630      	mov	r0, r6
 800521c:	eb04 0903 	add.w	r9, r4, r3
 8005220:	f000 fbea 	bl	80059f8 <_sbrk_r>
 8005224:	4581      	cmp	r9, r0
 8005226:	d142      	bne.n	80052ae <_malloc_r+0xea>
 8005228:	6821      	ldr	r1, [r4, #0]
 800522a:	1a6d      	subs	r5, r5, r1
 800522c:	4629      	mov	r1, r5
 800522e:	4630      	mov	r0, r6
 8005230:	f7ff ffa6 	bl	8005180 <sbrk_aligned>
 8005234:	3001      	adds	r0, #1
 8005236:	d03a      	beq.n	80052ae <_malloc_r+0xea>
 8005238:	6823      	ldr	r3, [r4, #0]
 800523a:	442b      	add	r3, r5
 800523c:	6023      	str	r3, [r4, #0]
 800523e:	f8d8 3000 	ldr.w	r3, [r8]
 8005242:	685a      	ldr	r2, [r3, #4]
 8005244:	bb62      	cbnz	r2, 80052a0 <_malloc_r+0xdc>
 8005246:	f8c8 7000 	str.w	r7, [r8]
 800524a:	e00f      	b.n	800526c <_malloc_r+0xa8>
 800524c:	6822      	ldr	r2, [r4, #0]
 800524e:	1b52      	subs	r2, r2, r5
 8005250:	d420      	bmi.n	8005294 <_malloc_r+0xd0>
 8005252:	2a0b      	cmp	r2, #11
 8005254:	d917      	bls.n	8005286 <_malloc_r+0xc2>
 8005256:	1961      	adds	r1, r4, r5
 8005258:	42a3      	cmp	r3, r4
 800525a:	6025      	str	r5, [r4, #0]
 800525c:	bf18      	it	ne
 800525e:	6059      	strne	r1, [r3, #4]
 8005260:	6863      	ldr	r3, [r4, #4]
 8005262:	bf08      	it	eq
 8005264:	f8c8 1000 	streq.w	r1, [r8]
 8005268:	5162      	str	r2, [r4, r5]
 800526a:	604b      	str	r3, [r1, #4]
 800526c:	4630      	mov	r0, r6
 800526e:	f000 f82f 	bl	80052d0 <__malloc_unlock>
 8005272:	f104 000b 	add.w	r0, r4, #11
 8005276:	1d23      	adds	r3, r4, #4
 8005278:	f020 0007 	bic.w	r0, r0, #7
 800527c:	1ac2      	subs	r2, r0, r3
 800527e:	bf1c      	itt	ne
 8005280:	1a1b      	subne	r3, r3, r0
 8005282:	50a3      	strne	r3, [r4, r2]
 8005284:	e7af      	b.n	80051e6 <_malloc_r+0x22>
 8005286:	6862      	ldr	r2, [r4, #4]
 8005288:	42a3      	cmp	r3, r4
 800528a:	bf0c      	ite	eq
 800528c:	f8c8 2000 	streq.w	r2, [r8]
 8005290:	605a      	strne	r2, [r3, #4]
 8005292:	e7eb      	b.n	800526c <_malloc_r+0xa8>
 8005294:	4623      	mov	r3, r4
 8005296:	6864      	ldr	r4, [r4, #4]
 8005298:	e7ae      	b.n	80051f8 <_malloc_r+0x34>
 800529a:	463c      	mov	r4, r7
 800529c:	687f      	ldr	r7, [r7, #4]
 800529e:	e7b6      	b.n	800520e <_malloc_r+0x4a>
 80052a0:	461a      	mov	r2, r3
 80052a2:	685b      	ldr	r3, [r3, #4]
 80052a4:	42a3      	cmp	r3, r4
 80052a6:	d1fb      	bne.n	80052a0 <_malloc_r+0xdc>
 80052a8:	2300      	movs	r3, #0
 80052aa:	6053      	str	r3, [r2, #4]
 80052ac:	e7de      	b.n	800526c <_malloc_r+0xa8>
 80052ae:	230c      	movs	r3, #12
 80052b0:	6033      	str	r3, [r6, #0]
 80052b2:	4630      	mov	r0, r6
 80052b4:	f000 f80c 	bl	80052d0 <__malloc_unlock>
 80052b8:	e794      	b.n	80051e4 <_malloc_r+0x20>
 80052ba:	6005      	str	r5, [r0, #0]
 80052bc:	e7d6      	b.n	800526c <_malloc_r+0xa8>
 80052be:	bf00      	nop
 80052c0:	2000044c 	.word	0x2000044c

080052c4 <__malloc_lock>:
 80052c4:	4801      	ldr	r0, [pc, #4]	@ (80052cc <__malloc_lock+0x8>)
 80052c6:	f7ff bf07 	b.w	80050d8 <__retarget_lock_acquire_recursive>
 80052ca:	bf00      	nop
 80052cc:	20000444 	.word	0x20000444

080052d0 <__malloc_unlock>:
 80052d0:	4801      	ldr	r0, [pc, #4]	@ (80052d8 <__malloc_unlock+0x8>)
 80052d2:	f7ff bf02 	b.w	80050da <__retarget_lock_release_recursive>
 80052d6:	bf00      	nop
 80052d8:	20000444 	.word	0x20000444

080052dc <_sungetc_r>:
 80052dc:	b538      	push	{r3, r4, r5, lr}
 80052de:	1c4b      	adds	r3, r1, #1
 80052e0:	4614      	mov	r4, r2
 80052e2:	d103      	bne.n	80052ec <_sungetc_r+0x10>
 80052e4:	f04f 35ff 	mov.w	r5, #4294967295
 80052e8:	4628      	mov	r0, r5
 80052ea:	bd38      	pop	{r3, r4, r5, pc}
 80052ec:	8993      	ldrh	r3, [r2, #12]
 80052ee:	f023 0320 	bic.w	r3, r3, #32
 80052f2:	8193      	strh	r3, [r2, #12]
 80052f4:	6853      	ldr	r3, [r2, #4]
 80052f6:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80052f8:	b2cd      	uxtb	r5, r1
 80052fa:	b18a      	cbz	r2, 8005320 <_sungetc_r+0x44>
 80052fc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80052fe:	429a      	cmp	r2, r3
 8005300:	dd08      	ble.n	8005314 <_sungetc_r+0x38>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	1e5a      	subs	r2, r3, #1
 8005306:	6022      	str	r2, [r4, #0]
 8005308:	f803 5c01 	strb.w	r5, [r3, #-1]
 800530c:	6863      	ldr	r3, [r4, #4]
 800530e:	3301      	adds	r3, #1
 8005310:	6063      	str	r3, [r4, #4]
 8005312:	e7e9      	b.n	80052e8 <_sungetc_r+0xc>
 8005314:	4621      	mov	r1, r4
 8005316:	f000 fb34 	bl	8005982 <__submore>
 800531a:	2800      	cmp	r0, #0
 800531c:	d0f1      	beq.n	8005302 <_sungetc_r+0x26>
 800531e:	e7e1      	b.n	80052e4 <_sungetc_r+0x8>
 8005320:	6921      	ldr	r1, [r4, #16]
 8005322:	6822      	ldr	r2, [r4, #0]
 8005324:	b141      	cbz	r1, 8005338 <_sungetc_r+0x5c>
 8005326:	4291      	cmp	r1, r2
 8005328:	d206      	bcs.n	8005338 <_sungetc_r+0x5c>
 800532a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800532e:	42a9      	cmp	r1, r5
 8005330:	d102      	bne.n	8005338 <_sungetc_r+0x5c>
 8005332:	3a01      	subs	r2, #1
 8005334:	6022      	str	r2, [r4, #0]
 8005336:	e7ea      	b.n	800530e <_sungetc_r+0x32>
 8005338:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800533c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005340:	6363      	str	r3, [r4, #52]	@ 0x34
 8005342:	2303      	movs	r3, #3
 8005344:	63a3      	str	r3, [r4, #56]	@ 0x38
 8005346:	4623      	mov	r3, r4
 8005348:	f803 5f46 	strb.w	r5, [r3, #70]!
 800534c:	6023      	str	r3, [r4, #0]
 800534e:	2301      	movs	r3, #1
 8005350:	e7de      	b.n	8005310 <_sungetc_r+0x34>

08005352 <__ssrefill_r>:
 8005352:	b510      	push	{r4, lr}
 8005354:	460c      	mov	r4, r1
 8005356:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8005358:	b169      	cbz	r1, 8005376 <__ssrefill_r+0x24>
 800535a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800535e:	4299      	cmp	r1, r3
 8005360:	d001      	beq.n	8005366 <__ssrefill_r+0x14>
 8005362:	f7ff fec3 	bl	80050ec <_free_r>
 8005366:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005368:	6063      	str	r3, [r4, #4]
 800536a:	2000      	movs	r0, #0
 800536c:	6360      	str	r0, [r4, #52]	@ 0x34
 800536e:	b113      	cbz	r3, 8005376 <__ssrefill_r+0x24>
 8005370:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8005372:	6023      	str	r3, [r4, #0]
 8005374:	bd10      	pop	{r4, pc}
 8005376:	6923      	ldr	r3, [r4, #16]
 8005378:	6023      	str	r3, [r4, #0]
 800537a:	2300      	movs	r3, #0
 800537c:	6063      	str	r3, [r4, #4]
 800537e:	89a3      	ldrh	r3, [r4, #12]
 8005380:	f043 0320 	orr.w	r3, r3, #32
 8005384:	81a3      	strh	r3, [r4, #12]
 8005386:	f04f 30ff 	mov.w	r0, #4294967295
 800538a:	e7f3      	b.n	8005374 <__ssrefill_r+0x22>

0800538c <__ssvfiscanf_r>:
 800538c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005390:	460c      	mov	r4, r1
 8005392:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8005396:	2100      	movs	r1, #0
 8005398:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800539c:	49a5      	ldr	r1, [pc, #660]	@ (8005634 <__ssvfiscanf_r+0x2a8>)
 800539e:	91a0      	str	r1, [sp, #640]	@ 0x280
 80053a0:	f10d 0804 	add.w	r8, sp, #4
 80053a4:	49a4      	ldr	r1, [pc, #656]	@ (8005638 <__ssvfiscanf_r+0x2ac>)
 80053a6:	4fa5      	ldr	r7, [pc, #660]	@ (800563c <__ssvfiscanf_r+0x2b0>)
 80053a8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 80053ac:	4606      	mov	r6, r0
 80053ae:	91a1      	str	r1, [sp, #644]	@ 0x284
 80053b0:	9300      	str	r3, [sp, #0]
 80053b2:	7813      	ldrb	r3, [r2, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8158 	beq.w	800566a <__ssvfiscanf_r+0x2de>
 80053ba:	5cf9      	ldrb	r1, [r7, r3]
 80053bc:	f011 0108 	ands.w	r1, r1, #8
 80053c0:	f102 0501 	add.w	r5, r2, #1
 80053c4:	d019      	beq.n	80053fa <__ssvfiscanf_r+0x6e>
 80053c6:	6863      	ldr	r3, [r4, #4]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	dd0f      	ble.n	80053ec <__ssvfiscanf_r+0x60>
 80053cc:	6823      	ldr	r3, [r4, #0]
 80053ce:	781a      	ldrb	r2, [r3, #0]
 80053d0:	5cba      	ldrb	r2, [r7, r2]
 80053d2:	0712      	lsls	r2, r2, #28
 80053d4:	d401      	bmi.n	80053da <__ssvfiscanf_r+0x4e>
 80053d6:	462a      	mov	r2, r5
 80053d8:	e7eb      	b.n	80053b2 <__ssvfiscanf_r+0x26>
 80053da:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80053dc:	3201      	adds	r2, #1
 80053de:	9245      	str	r2, [sp, #276]	@ 0x114
 80053e0:	6862      	ldr	r2, [r4, #4]
 80053e2:	3301      	adds	r3, #1
 80053e4:	3a01      	subs	r2, #1
 80053e6:	6062      	str	r2, [r4, #4]
 80053e8:	6023      	str	r3, [r4, #0]
 80053ea:	e7ec      	b.n	80053c6 <__ssvfiscanf_r+0x3a>
 80053ec:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80053ee:	4621      	mov	r1, r4
 80053f0:	4630      	mov	r0, r6
 80053f2:	4798      	blx	r3
 80053f4:	2800      	cmp	r0, #0
 80053f6:	d0e9      	beq.n	80053cc <__ssvfiscanf_r+0x40>
 80053f8:	e7ed      	b.n	80053d6 <__ssvfiscanf_r+0x4a>
 80053fa:	2b25      	cmp	r3, #37	@ 0x25
 80053fc:	d012      	beq.n	8005424 <__ssvfiscanf_r+0x98>
 80053fe:	4699      	mov	r9, r3
 8005400:	6863      	ldr	r3, [r4, #4]
 8005402:	2b00      	cmp	r3, #0
 8005404:	f340 8093 	ble.w	800552e <__ssvfiscanf_r+0x1a2>
 8005408:	6822      	ldr	r2, [r4, #0]
 800540a:	7813      	ldrb	r3, [r2, #0]
 800540c:	454b      	cmp	r3, r9
 800540e:	f040 812c 	bne.w	800566a <__ssvfiscanf_r+0x2de>
 8005412:	6863      	ldr	r3, [r4, #4]
 8005414:	3b01      	subs	r3, #1
 8005416:	6063      	str	r3, [r4, #4]
 8005418:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800541a:	3201      	adds	r2, #1
 800541c:	3301      	adds	r3, #1
 800541e:	6022      	str	r2, [r4, #0]
 8005420:	9345      	str	r3, [sp, #276]	@ 0x114
 8005422:	e7d8      	b.n	80053d6 <__ssvfiscanf_r+0x4a>
 8005424:	9141      	str	r1, [sp, #260]	@ 0x104
 8005426:	9143      	str	r1, [sp, #268]	@ 0x10c
 8005428:	7853      	ldrb	r3, [r2, #1]
 800542a:	2b2a      	cmp	r3, #42	@ 0x2a
 800542c:	bf02      	ittt	eq
 800542e:	2310      	moveq	r3, #16
 8005430:	1c95      	addeq	r5, r2, #2
 8005432:	9341      	streq	r3, [sp, #260]	@ 0x104
 8005434:	220a      	movs	r2, #10
 8005436:	46a9      	mov	r9, r5
 8005438:	f819 1b01 	ldrb.w	r1, [r9], #1
 800543c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8005440:	2b09      	cmp	r3, #9
 8005442:	d91e      	bls.n	8005482 <__ssvfiscanf_r+0xf6>
 8005444:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8005640 <__ssvfiscanf_r+0x2b4>
 8005448:	2203      	movs	r2, #3
 800544a:	4650      	mov	r0, sl
 800544c:	f7fa fee8 	bl	8000220 <memchr>
 8005450:	b138      	cbz	r0, 8005462 <__ssvfiscanf_r+0xd6>
 8005452:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005454:	eba0 000a 	sub.w	r0, r0, sl
 8005458:	2301      	movs	r3, #1
 800545a:	4083      	lsls	r3, r0
 800545c:	4313      	orrs	r3, r2
 800545e:	9341      	str	r3, [sp, #260]	@ 0x104
 8005460:	464d      	mov	r5, r9
 8005462:	f815 3b01 	ldrb.w	r3, [r5], #1
 8005466:	2b78      	cmp	r3, #120	@ 0x78
 8005468:	d806      	bhi.n	8005478 <__ssvfiscanf_r+0xec>
 800546a:	2b57      	cmp	r3, #87	@ 0x57
 800546c:	d810      	bhi.n	8005490 <__ssvfiscanf_r+0x104>
 800546e:	2b25      	cmp	r3, #37	@ 0x25
 8005470:	d0c5      	beq.n	80053fe <__ssvfiscanf_r+0x72>
 8005472:	d857      	bhi.n	8005524 <__ssvfiscanf_r+0x198>
 8005474:	2b00      	cmp	r3, #0
 8005476:	d065      	beq.n	8005544 <__ssvfiscanf_r+0x1b8>
 8005478:	2303      	movs	r3, #3
 800547a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800547c:	230a      	movs	r3, #10
 800547e:	9342      	str	r3, [sp, #264]	@ 0x108
 8005480:	e078      	b.n	8005574 <__ssvfiscanf_r+0x1e8>
 8005482:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8005484:	fb02 1103 	mla	r1, r2, r3, r1
 8005488:	3930      	subs	r1, #48	@ 0x30
 800548a:	9143      	str	r1, [sp, #268]	@ 0x10c
 800548c:	464d      	mov	r5, r9
 800548e:	e7d2      	b.n	8005436 <__ssvfiscanf_r+0xaa>
 8005490:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8005494:	2a20      	cmp	r2, #32
 8005496:	d8ef      	bhi.n	8005478 <__ssvfiscanf_r+0xec>
 8005498:	a101      	add	r1, pc, #4	@ (adr r1, 80054a0 <__ssvfiscanf_r+0x114>)
 800549a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800549e:	bf00      	nop
 80054a0:	08005553 	.word	0x08005553
 80054a4:	08005479 	.word	0x08005479
 80054a8:	08005479 	.word	0x08005479
 80054ac:	080055ad 	.word	0x080055ad
 80054b0:	08005479 	.word	0x08005479
 80054b4:	08005479 	.word	0x08005479
 80054b8:	08005479 	.word	0x08005479
 80054bc:	08005479 	.word	0x08005479
 80054c0:	08005479 	.word	0x08005479
 80054c4:	08005479 	.word	0x08005479
 80054c8:	08005479 	.word	0x08005479
 80054cc:	080055c3 	.word	0x080055c3
 80054d0:	080055a9 	.word	0x080055a9
 80054d4:	0800552b 	.word	0x0800552b
 80054d8:	0800552b 	.word	0x0800552b
 80054dc:	0800552b 	.word	0x0800552b
 80054e0:	08005479 	.word	0x08005479
 80054e4:	08005565 	.word	0x08005565
 80054e8:	08005479 	.word	0x08005479
 80054ec:	08005479 	.word	0x08005479
 80054f0:	08005479 	.word	0x08005479
 80054f4:	08005479 	.word	0x08005479
 80054f8:	080055d3 	.word	0x080055d3
 80054fc:	0800556d 	.word	0x0800556d
 8005500:	0800554b 	.word	0x0800554b
 8005504:	08005479 	.word	0x08005479
 8005508:	08005479 	.word	0x08005479
 800550c:	080055cf 	.word	0x080055cf
 8005510:	08005479 	.word	0x08005479
 8005514:	080055a9 	.word	0x080055a9
 8005518:	08005479 	.word	0x08005479
 800551c:	08005479 	.word	0x08005479
 8005520:	08005553 	.word	0x08005553
 8005524:	3b45      	subs	r3, #69	@ 0x45
 8005526:	2b02      	cmp	r3, #2
 8005528:	d8a6      	bhi.n	8005478 <__ssvfiscanf_r+0xec>
 800552a:	2305      	movs	r3, #5
 800552c:	e021      	b.n	8005572 <__ssvfiscanf_r+0x1e6>
 800552e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005530:	4621      	mov	r1, r4
 8005532:	4630      	mov	r0, r6
 8005534:	4798      	blx	r3
 8005536:	2800      	cmp	r0, #0
 8005538:	f43f af66 	beq.w	8005408 <__ssvfiscanf_r+0x7c>
 800553c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800553e:	2800      	cmp	r0, #0
 8005540:	f040 808b 	bne.w	800565a <__ssvfiscanf_r+0x2ce>
 8005544:	f04f 30ff 	mov.w	r0, #4294967295
 8005548:	e08b      	b.n	8005662 <__ssvfiscanf_r+0x2d6>
 800554a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800554c:	f042 0220 	orr.w	r2, r2, #32
 8005550:	9241      	str	r2, [sp, #260]	@ 0x104
 8005552:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8005554:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005558:	9241      	str	r2, [sp, #260]	@ 0x104
 800555a:	2210      	movs	r2, #16
 800555c:	2b6e      	cmp	r3, #110	@ 0x6e
 800555e:	9242      	str	r2, [sp, #264]	@ 0x108
 8005560:	d902      	bls.n	8005568 <__ssvfiscanf_r+0x1dc>
 8005562:	e005      	b.n	8005570 <__ssvfiscanf_r+0x1e4>
 8005564:	2300      	movs	r3, #0
 8005566:	9342      	str	r3, [sp, #264]	@ 0x108
 8005568:	2303      	movs	r3, #3
 800556a:	e002      	b.n	8005572 <__ssvfiscanf_r+0x1e6>
 800556c:	2308      	movs	r3, #8
 800556e:	9342      	str	r3, [sp, #264]	@ 0x108
 8005570:	2304      	movs	r3, #4
 8005572:	9347      	str	r3, [sp, #284]	@ 0x11c
 8005574:	6863      	ldr	r3, [r4, #4]
 8005576:	2b00      	cmp	r3, #0
 8005578:	dd39      	ble.n	80055ee <__ssvfiscanf_r+0x262>
 800557a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800557c:	0659      	lsls	r1, r3, #25
 800557e:	d404      	bmi.n	800558a <__ssvfiscanf_r+0x1fe>
 8005580:	6823      	ldr	r3, [r4, #0]
 8005582:	781a      	ldrb	r2, [r3, #0]
 8005584:	5cba      	ldrb	r2, [r7, r2]
 8005586:	0712      	lsls	r2, r2, #28
 8005588:	d438      	bmi.n	80055fc <__ssvfiscanf_r+0x270>
 800558a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800558c:	2b02      	cmp	r3, #2
 800558e:	dc47      	bgt.n	8005620 <__ssvfiscanf_r+0x294>
 8005590:	466b      	mov	r3, sp
 8005592:	4622      	mov	r2, r4
 8005594:	a941      	add	r1, sp, #260	@ 0x104
 8005596:	4630      	mov	r0, r6
 8005598:	f000 f86c 	bl	8005674 <_scanf_chars>
 800559c:	2801      	cmp	r0, #1
 800559e:	d064      	beq.n	800566a <__ssvfiscanf_r+0x2de>
 80055a0:	2802      	cmp	r0, #2
 80055a2:	f47f af18 	bne.w	80053d6 <__ssvfiscanf_r+0x4a>
 80055a6:	e7c9      	b.n	800553c <__ssvfiscanf_r+0x1b0>
 80055a8:	220a      	movs	r2, #10
 80055aa:	e7d7      	b.n	800555c <__ssvfiscanf_r+0x1d0>
 80055ac:	4629      	mov	r1, r5
 80055ae:	4640      	mov	r0, r8
 80055b0:	f000 f9ae 	bl	8005910 <__sccl>
 80055b4:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80055b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055ba:	9341      	str	r3, [sp, #260]	@ 0x104
 80055bc:	4605      	mov	r5, r0
 80055be:	2301      	movs	r3, #1
 80055c0:	e7d7      	b.n	8005572 <__ssvfiscanf_r+0x1e6>
 80055c2:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 80055c4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80055c8:	9341      	str	r3, [sp, #260]	@ 0x104
 80055ca:	2300      	movs	r3, #0
 80055cc:	e7d1      	b.n	8005572 <__ssvfiscanf_r+0x1e6>
 80055ce:	2302      	movs	r3, #2
 80055d0:	e7cf      	b.n	8005572 <__ssvfiscanf_r+0x1e6>
 80055d2:	9841      	ldr	r0, [sp, #260]	@ 0x104
 80055d4:	06c3      	lsls	r3, r0, #27
 80055d6:	f53f aefe 	bmi.w	80053d6 <__ssvfiscanf_r+0x4a>
 80055da:	9b00      	ldr	r3, [sp, #0]
 80055dc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80055de:	1d19      	adds	r1, r3, #4
 80055e0:	9100      	str	r1, [sp, #0]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	07c0      	lsls	r0, r0, #31
 80055e6:	bf4c      	ite	mi
 80055e8:	801a      	strhmi	r2, [r3, #0]
 80055ea:	601a      	strpl	r2, [r3, #0]
 80055ec:	e6f3      	b.n	80053d6 <__ssvfiscanf_r+0x4a>
 80055ee:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 80055f0:	4621      	mov	r1, r4
 80055f2:	4630      	mov	r0, r6
 80055f4:	4798      	blx	r3
 80055f6:	2800      	cmp	r0, #0
 80055f8:	d0bf      	beq.n	800557a <__ssvfiscanf_r+0x1ee>
 80055fa:	e79f      	b.n	800553c <__ssvfiscanf_r+0x1b0>
 80055fc:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 80055fe:	3201      	adds	r2, #1
 8005600:	9245      	str	r2, [sp, #276]	@ 0x114
 8005602:	6862      	ldr	r2, [r4, #4]
 8005604:	3a01      	subs	r2, #1
 8005606:	2a00      	cmp	r2, #0
 8005608:	6062      	str	r2, [r4, #4]
 800560a:	dd02      	ble.n	8005612 <__ssvfiscanf_r+0x286>
 800560c:	3301      	adds	r3, #1
 800560e:	6023      	str	r3, [r4, #0]
 8005610:	e7b6      	b.n	8005580 <__ssvfiscanf_r+0x1f4>
 8005612:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8005614:	4621      	mov	r1, r4
 8005616:	4630      	mov	r0, r6
 8005618:	4798      	blx	r3
 800561a:	2800      	cmp	r0, #0
 800561c:	d0b0      	beq.n	8005580 <__ssvfiscanf_r+0x1f4>
 800561e:	e78d      	b.n	800553c <__ssvfiscanf_r+0x1b0>
 8005620:	2b04      	cmp	r3, #4
 8005622:	dc0f      	bgt.n	8005644 <__ssvfiscanf_r+0x2b8>
 8005624:	466b      	mov	r3, sp
 8005626:	4622      	mov	r2, r4
 8005628:	a941      	add	r1, sp, #260	@ 0x104
 800562a:	4630      	mov	r0, r6
 800562c:	f000 f87c 	bl	8005728 <_scanf_i>
 8005630:	e7b4      	b.n	800559c <__ssvfiscanf_r+0x210>
 8005632:	bf00      	nop
 8005634:	080052dd 	.word	0x080052dd
 8005638:	08005353 	.word	0x08005353
 800563c:	08005ce0 	.word	0x08005ce0
 8005640:	08005cc0 	.word	0x08005cc0
 8005644:	4b0a      	ldr	r3, [pc, #40]	@ (8005670 <__ssvfiscanf_r+0x2e4>)
 8005646:	2b00      	cmp	r3, #0
 8005648:	f43f aec5 	beq.w	80053d6 <__ssvfiscanf_r+0x4a>
 800564c:	466b      	mov	r3, sp
 800564e:	4622      	mov	r2, r4
 8005650:	a941      	add	r1, sp, #260	@ 0x104
 8005652:	4630      	mov	r0, r6
 8005654:	f3af 8000 	nop.w
 8005658:	e7a0      	b.n	800559c <__ssvfiscanf_r+0x210>
 800565a:	89a3      	ldrh	r3, [r4, #12]
 800565c:	065b      	lsls	r3, r3, #25
 800565e:	f53f af71 	bmi.w	8005544 <__ssvfiscanf_r+0x1b8>
 8005662:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8005666:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800566a:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800566c:	e7f9      	b.n	8005662 <__ssvfiscanf_r+0x2d6>
 800566e:	bf00      	nop
 8005670:	00000000 	.word	0x00000000

08005674 <_scanf_chars>:
 8005674:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005678:	4615      	mov	r5, r2
 800567a:	688a      	ldr	r2, [r1, #8]
 800567c:	4680      	mov	r8, r0
 800567e:	460c      	mov	r4, r1
 8005680:	b932      	cbnz	r2, 8005690 <_scanf_chars+0x1c>
 8005682:	698a      	ldr	r2, [r1, #24]
 8005684:	2a00      	cmp	r2, #0
 8005686:	bf14      	ite	ne
 8005688:	f04f 32ff 	movne.w	r2, #4294967295
 800568c:	2201      	moveq	r2, #1
 800568e:	608a      	str	r2, [r1, #8]
 8005690:	6822      	ldr	r2, [r4, #0]
 8005692:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8005724 <_scanf_chars+0xb0>
 8005696:	06d1      	lsls	r1, r2, #27
 8005698:	bf5f      	itttt	pl
 800569a:	681a      	ldrpl	r2, [r3, #0]
 800569c:	1d11      	addpl	r1, r2, #4
 800569e:	6019      	strpl	r1, [r3, #0]
 80056a0:	6816      	ldrpl	r6, [r2, #0]
 80056a2:	2700      	movs	r7, #0
 80056a4:	69a0      	ldr	r0, [r4, #24]
 80056a6:	b188      	cbz	r0, 80056cc <_scanf_chars+0x58>
 80056a8:	2801      	cmp	r0, #1
 80056aa:	d107      	bne.n	80056bc <_scanf_chars+0x48>
 80056ac:	682b      	ldr	r3, [r5, #0]
 80056ae:	781a      	ldrb	r2, [r3, #0]
 80056b0:	6963      	ldr	r3, [r4, #20]
 80056b2:	5c9b      	ldrb	r3, [r3, r2]
 80056b4:	b953      	cbnz	r3, 80056cc <_scanf_chars+0x58>
 80056b6:	2f00      	cmp	r7, #0
 80056b8:	d031      	beq.n	800571e <_scanf_chars+0xaa>
 80056ba:	e022      	b.n	8005702 <_scanf_chars+0x8e>
 80056bc:	2802      	cmp	r0, #2
 80056be:	d120      	bne.n	8005702 <_scanf_chars+0x8e>
 80056c0:	682b      	ldr	r3, [r5, #0]
 80056c2:	781b      	ldrb	r3, [r3, #0]
 80056c4:	f819 3003 	ldrb.w	r3, [r9, r3]
 80056c8:	071b      	lsls	r3, r3, #28
 80056ca:	d41a      	bmi.n	8005702 <_scanf_chars+0x8e>
 80056cc:	6823      	ldr	r3, [r4, #0]
 80056ce:	06da      	lsls	r2, r3, #27
 80056d0:	bf5e      	ittt	pl
 80056d2:	682b      	ldrpl	r3, [r5, #0]
 80056d4:	781b      	ldrbpl	r3, [r3, #0]
 80056d6:	f806 3b01 	strbpl.w	r3, [r6], #1
 80056da:	682a      	ldr	r2, [r5, #0]
 80056dc:	686b      	ldr	r3, [r5, #4]
 80056de:	3201      	adds	r2, #1
 80056e0:	602a      	str	r2, [r5, #0]
 80056e2:	68a2      	ldr	r2, [r4, #8]
 80056e4:	3b01      	subs	r3, #1
 80056e6:	3a01      	subs	r2, #1
 80056e8:	606b      	str	r3, [r5, #4]
 80056ea:	3701      	adds	r7, #1
 80056ec:	60a2      	str	r2, [r4, #8]
 80056ee:	b142      	cbz	r2, 8005702 <_scanf_chars+0x8e>
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	dcd7      	bgt.n	80056a4 <_scanf_chars+0x30>
 80056f4:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 80056f8:	4629      	mov	r1, r5
 80056fa:	4640      	mov	r0, r8
 80056fc:	4798      	blx	r3
 80056fe:	2800      	cmp	r0, #0
 8005700:	d0d0      	beq.n	80056a4 <_scanf_chars+0x30>
 8005702:	6823      	ldr	r3, [r4, #0]
 8005704:	f013 0310 	ands.w	r3, r3, #16
 8005708:	d105      	bne.n	8005716 <_scanf_chars+0xa2>
 800570a:	68e2      	ldr	r2, [r4, #12]
 800570c:	3201      	adds	r2, #1
 800570e:	60e2      	str	r2, [r4, #12]
 8005710:	69a2      	ldr	r2, [r4, #24]
 8005712:	b102      	cbz	r2, 8005716 <_scanf_chars+0xa2>
 8005714:	7033      	strb	r3, [r6, #0]
 8005716:	6923      	ldr	r3, [r4, #16]
 8005718:	443b      	add	r3, r7
 800571a:	6123      	str	r3, [r4, #16]
 800571c:	2000      	movs	r0, #0
 800571e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005722:	bf00      	nop
 8005724:	08005ce0 	.word	0x08005ce0

08005728 <_scanf_i>:
 8005728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800572c:	4698      	mov	r8, r3
 800572e:	4b74      	ldr	r3, [pc, #464]	@ (8005900 <_scanf_i+0x1d8>)
 8005730:	460c      	mov	r4, r1
 8005732:	4682      	mov	sl, r0
 8005734:	4616      	mov	r6, r2
 8005736:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800573a:	b087      	sub	sp, #28
 800573c:	ab03      	add	r3, sp, #12
 800573e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8005742:	4b70      	ldr	r3, [pc, #448]	@ (8005904 <_scanf_i+0x1dc>)
 8005744:	69a1      	ldr	r1, [r4, #24]
 8005746:	4a70      	ldr	r2, [pc, #448]	@ (8005908 <_scanf_i+0x1e0>)
 8005748:	2903      	cmp	r1, #3
 800574a:	bf08      	it	eq
 800574c:	461a      	moveq	r2, r3
 800574e:	68a3      	ldr	r3, [r4, #8]
 8005750:	9201      	str	r2, [sp, #4]
 8005752:	1e5a      	subs	r2, r3, #1
 8005754:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8005758:	bf88      	it	hi
 800575a:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800575e:	4627      	mov	r7, r4
 8005760:	bf82      	ittt	hi
 8005762:	eb03 0905 	addhi.w	r9, r3, r5
 8005766:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800576a:	60a3      	strhi	r3, [r4, #8]
 800576c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8005770:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8005774:	bf98      	it	ls
 8005776:	f04f 0900 	movls.w	r9, #0
 800577a:	6023      	str	r3, [r4, #0]
 800577c:	463d      	mov	r5, r7
 800577e:	f04f 0b00 	mov.w	fp, #0
 8005782:	6831      	ldr	r1, [r6, #0]
 8005784:	ab03      	add	r3, sp, #12
 8005786:	7809      	ldrb	r1, [r1, #0]
 8005788:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800578c:	2202      	movs	r2, #2
 800578e:	f7fa fd47 	bl	8000220 <memchr>
 8005792:	b328      	cbz	r0, 80057e0 <_scanf_i+0xb8>
 8005794:	f1bb 0f01 	cmp.w	fp, #1
 8005798:	d159      	bne.n	800584e <_scanf_i+0x126>
 800579a:	6862      	ldr	r2, [r4, #4]
 800579c:	b92a      	cbnz	r2, 80057aa <_scanf_i+0x82>
 800579e:	6822      	ldr	r2, [r4, #0]
 80057a0:	2108      	movs	r1, #8
 80057a2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057a6:	6061      	str	r1, [r4, #4]
 80057a8:	6022      	str	r2, [r4, #0]
 80057aa:	6822      	ldr	r2, [r4, #0]
 80057ac:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 80057b0:	6022      	str	r2, [r4, #0]
 80057b2:	68a2      	ldr	r2, [r4, #8]
 80057b4:	1e51      	subs	r1, r2, #1
 80057b6:	60a1      	str	r1, [r4, #8]
 80057b8:	b192      	cbz	r2, 80057e0 <_scanf_i+0xb8>
 80057ba:	6832      	ldr	r2, [r6, #0]
 80057bc:	1c51      	adds	r1, r2, #1
 80057be:	6031      	str	r1, [r6, #0]
 80057c0:	7812      	ldrb	r2, [r2, #0]
 80057c2:	f805 2b01 	strb.w	r2, [r5], #1
 80057c6:	6872      	ldr	r2, [r6, #4]
 80057c8:	3a01      	subs	r2, #1
 80057ca:	2a00      	cmp	r2, #0
 80057cc:	6072      	str	r2, [r6, #4]
 80057ce:	dc07      	bgt.n	80057e0 <_scanf_i+0xb8>
 80057d0:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 80057d4:	4631      	mov	r1, r6
 80057d6:	4650      	mov	r0, sl
 80057d8:	4790      	blx	r2
 80057da:	2800      	cmp	r0, #0
 80057dc:	f040 8085 	bne.w	80058ea <_scanf_i+0x1c2>
 80057e0:	f10b 0b01 	add.w	fp, fp, #1
 80057e4:	f1bb 0f03 	cmp.w	fp, #3
 80057e8:	d1cb      	bne.n	8005782 <_scanf_i+0x5a>
 80057ea:	6863      	ldr	r3, [r4, #4]
 80057ec:	b90b      	cbnz	r3, 80057f2 <_scanf_i+0xca>
 80057ee:	230a      	movs	r3, #10
 80057f0:	6063      	str	r3, [r4, #4]
 80057f2:	6863      	ldr	r3, [r4, #4]
 80057f4:	4945      	ldr	r1, [pc, #276]	@ (800590c <_scanf_i+0x1e4>)
 80057f6:	6960      	ldr	r0, [r4, #20]
 80057f8:	1ac9      	subs	r1, r1, r3
 80057fa:	f000 f889 	bl	8005910 <__sccl>
 80057fe:	f04f 0b00 	mov.w	fp, #0
 8005802:	68a3      	ldr	r3, [r4, #8]
 8005804:	6822      	ldr	r2, [r4, #0]
 8005806:	2b00      	cmp	r3, #0
 8005808:	d03d      	beq.n	8005886 <_scanf_i+0x15e>
 800580a:	6831      	ldr	r1, [r6, #0]
 800580c:	6960      	ldr	r0, [r4, #20]
 800580e:	f891 c000 	ldrb.w	ip, [r1]
 8005812:	f810 000c 	ldrb.w	r0, [r0, ip]
 8005816:	2800      	cmp	r0, #0
 8005818:	d035      	beq.n	8005886 <_scanf_i+0x15e>
 800581a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800581e:	d124      	bne.n	800586a <_scanf_i+0x142>
 8005820:	0510      	lsls	r0, r2, #20
 8005822:	d522      	bpl.n	800586a <_scanf_i+0x142>
 8005824:	f10b 0b01 	add.w	fp, fp, #1
 8005828:	f1b9 0f00 	cmp.w	r9, #0
 800582c:	d003      	beq.n	8005836 <_scanf_i+0x10e>
 800582e:	3301      	adds	r3, #1
 8005830:	f109 39ff 	add.w	r9, r9, #4294967295
 8005834:	60a3      	str	r3, [r4, #8]
 8005836:	6873      	ldr	r3, [r6, #4]
 8005838:	3b01      	subs	r3, #1
 800583a:	2b00      	cmp	r3, #0
 800583c:	6073      	str	r3, [r6, #4]
 800583e:	dd1b      	ble.n	8005878 <_scanf_i+0x150>
 8005840:	6833      	ldr	r3, [r6, #0]
 8005842:	3301      	adds	r3, #1
 8005844:	6033      	str	r3, [r6, #0]
 8005846:	68a3      	ldr	r3, [r4, #8]
 8005848:	3b01      	subs	r3, #1
 800584a:	60a3      	str	r3, [r4, #8]
 800584c:	e7d9      	b.n	8005802 <_scanf_i+0xda>
 800584e:	f1bb 0f02 	cmp.w	fp, #2
 8005852:	d1ae      	bne.n	80057b2 <_scanf_i+0x8a>
 8005854:	6822      	ldr	r2, [r4, #0]
 8005856:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800585a:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800585e:	d1bf      	bne.n	80057e0 <_scanf_i+0xb8>
 8005860:	2110      	movs	r1, #16
 8005862:	6061      	str	r1, [r4, #4]
 8005864:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005868:	e7a2      	b.n	80057b0 <_scanf_i+0x88>
 800586a:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800586e:	6022      	str	r2, [r4, #0]
 8005870:	780b      	ldrb	r3, [r1, #0]
 8005872:	f805 3b01 	strb.w	r3, [r5], #1
 8005876:	e7de      	b.n	8005836 <_scanf_i+0x10e>
 8005878:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800587c:	4631      	mov	r1, r6
 800587e:	4650      	mov	r0, sl
 8005880:	4798      	blx	r3
 8005882:	2800      	cmp	r0, #0
 8005884:	d0df      	beq.n	8005846 <_scanf_i+0x11e>
 8005886:	6823      	ldr	r3, [r4, #0]
 8005888:	05d9      	lsls	r1, r3, #23
 800588a:	d50d      	bpl.n	80058a8 <_scanf_i+0x180>
 800588c:	42bd      	cmp	r5, r7
 800588e:	d909      	bls.n	80058a4 <_scanf_i+0x17c>
 8005890:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8005894:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8005898:	4632      	mov	r2, r6
 800589a:	4650      	mov	r0, sl
 800589c:	4798      	blx	r3
 800589e:	f105 39ff 	add.w	r9, r5, #4294967295
 80058a2:	464d      	mov	r5, r9
 80058a4:	42bd      	cmp	r5, r7
 80058a6:	d028      	beq.n	80058fa <_scanf_i+0x1d2>
 80058a8:	6822      	ldr	r2, [r4, #0]
 80058aa:	f012 0210 	ands.w	r2, r2, #16
 80058ae:	d113      	bne.n	80058d8 <_scanf_i+0x1b0>
 80058b0:	702a      	strb	r2, [r5, #0]
 80058b2:	6863      	ldr	r3, [r4, #4]
 80058b4:	9e01      	ldr	r6, [sp, #4]
 80058b6:	4639      	mov	r1, r7
 80058b8:	4650      	mov	r0, sl
 80058ba:	47b0      	blx	r6
 80058bc:	f8d8 3000 	ldr.w	r3, [r8]
 80058c0:	6821      	ldr	r1, [r4, #0]
 80058c2:	1d1a      	adds	r2, r3, #4
 80058c4:	f8c8 2000 	str.w	r2, [r8]
 80058c8:	f011 0f20 	tst.w	r1, #32
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	d00f      	beq.n	80058f0 <_scanf_i+0x1c8>
 80058d0:	6018      	str	r0, [r3, #0]
 80058d2:	68e3      	ldr	r3, [r4, #12]
 80058d4:	3301      	adds	r3, #1
 80058d6:	60e3      	str	r3, [r4, #12]
 80058d8:	6923      	ldr	r3, [r4, #16]
 80058da:	1bed      	subs	r5, r5, r7
 80058dc:	445d      	add	r5, fp
 80058de:	442b      	add	r3, r5
 80058e0:	6123      	str	r3, [r4, #16]
 80058e2:	2000      	movs	r0, #0
 80058e4:	b007      	add	sp, #28
 80058e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80058ea:	f04f 0b00 	mov.w	fp, #0
 80058ee:	e7ca      	b.n	8005886 <_scanf_i+0x15e>
 80058f0:	07ca      	lsls	r2, r1, #31
 80058f2:	bf4c      	ite	mi
 80058f4:	8018      	strhmi	r0, [r3, #0]
 80058f6:	6018      	strpl	r0, [r3, #0]
 80058f8:	e7eb      	b.n	80058d2 <_scanf_i+0x1aa>
 80058fa:	2001      	movs	r0, #1
 80058fc:	e7f2      	b.n	80058e4 <_scanf_i+0x1bc>
 80058fe:	bf00      	nop
 8005900:	08005c9c 	.word	0x08005c9c
 8005904:	08005b85 	.word	0x08005b85
 8005908:	08005c65 	.word	0x08005c65
 800590c:	08005cd4 	.word	0x08005cd4

08005910 <__sccl>:
 8005910:	b570      	push	{r4, r5, r6, lr}
 8005912:	780b      	ldrb	r3, [r1, #0]
 8005914:	4604      	mov	r4, r0
 8005916:	2b5e      	cmp	r3, #94	@ 0x5e
 8005918:	bf0b      	itete	eq
 800591a:	784b      	ldrbeq	r3, [r1, #1]
 800591c:	1c4a      	addne	r2, r1, #1
 800591e:	1c8a      	addeq	r2, r1, #2
 8005920:	2100      	movne	r1, #0
 8005922:	bf08      	it	eq
 8005924:	2101      	moveq	r1, #1
 8005926:	3801      	subs	r0, #1
 8005928:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800592c:	f800 1f01 	strb.w	r1, [r0, #1]!
 8005930:	42a8      	cmp	r0, r5
 8005932:	d1fb      	bne.n	800592c <__sccl+0x1c>
 8005934:	b90b      	cbnz	r3, 800593a <__sccl+0x2a>
 8005936:	1e50      	subs	r0, r2, #1
 8005938:	bd70      	pop	{r4, r5, r6, pc}
 800593a:	f081 0101 	eor.w	r1, r1, #1
 800593e:	54e1      	strb	r1, [r4, r3]
 8005940:	4610      	mov	r0, r2
 8005942:	4602      	mov	r2, r0
 8005944:	f812 5b01 	ldrb.w	r5, [r2], #1
 8005948:	2d2d      	cmp	r5, #45	@ 0x2d
 800594a:	d005      	beq.n	8005958 <__sccl+0x48>
 800594c:	2d5d      	cmp	r5, #93	@ 0x5d
 800594e:	d016      	beq.n	800597e <__sccl+0x6e>
 8005950:	2d00      	cmp	r5, #0
 8005952:	d0f1      	beq.n	8005938 <__sccl+0x28>
 8005954:	462b      	mov	r3, r5
 8005956:	e7f2      	b.n	800593e <__sccl+0x2e>
 8005958:	7846      	ldrb	r6, [r0, #1]
 800595a:	2e5d      	cmp	r6, #93	@ 0x5d
 800595c:	d0fa      	beq.n	8005954 <__sccl+0x44>
 800595e:	42b3      	cmp	r3, r6
 8005960:	dcf8      	bgt.n	8005954 <__sccl+0x44>
 8005962:	3002      	adds	r0, #2
 8005964:	461a      	mov	r2, r3
 8005966:	3201      	adds	r2, #1
 8005968:	4296      	cmp	r6, r2
 800596a:	54a1      	strb	r1, [r4, r2]
 800596c:	dcfb      	bgt.n	8005966 <__sccl+0x56>
 800596e:	1af2      	subs	r2, r6, r3
 8005970:	3a01      	subs	r2, #1
 8005972:	1c5d      	adds	r5, r3, #1
 8005974:	42b3      	cmp	r3, r6
 8005976:	bfa8      	it	ge
 8005978:	2200      	movge	r2, #0
 800597a:	18ab      	adds	r3, r5, r2
 800597c:	e7e1      	b.n	8005942 <__sccl+0x32>
 800597e:	4610      	mov	r0, r2
 8005980:	e7da      	b.n	8005938 <__sccl+0x28>

08005982 <__submore>:
 8005982:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005986:	460c      	mov	r4, r1
 8005988:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800598a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800598e:	4299      	cmp	r1, r3
 8005990:	d11d      	bne.n	80059ce <__submore+0x4c>
 8005992:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8005996:	f7ff fc15 	bl	80051c4 <_malloc_r>
 800599a:	b918      	cbnz	r0, 80059a4 <__submore+0x22>
 800599c:	f04f 30ff 	mov.w	r0, #4294967295
 80059a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80059a4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80059a8:	63a3      	str	r3, [r4, #56]	@ 0x38
 80059aa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 80059ae:	6360      	str	r0, [r4, #52]	@ 0x34
 80059b0:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 80059b4:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 80059b8:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 80059bc:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 80059c0:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 80059c4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 80059c8:	6020      	str	r0, [r4, #0]
 80059ca:	2000      	movs	r0, #0
 80059cc:	e7e8      	b.n	80059a0 <__submore+0x1e>
 80059ce:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 80059d0:	0077      	lsls	r7, r6, #1
 80059d2:	463a      	mov	r2, r7
 80059d4:	f000 f82e 	bl	8005a34 <_realloc_r>
 80059d8:	4605      	mov	r5, r0
 80059da:	2800      	cmp	r0, #0
 80059dc:	d0de      	beq.n	800599c <__submore+0x1a>
 80059de:	eb00 0806 	add.w	r8, r0, r6
 80059e2:	4601      	mov	r1, r0
 80059e4:	4632      	mov	r2, r6
 80059e6:	4640      	mov	r0, r8
 80059e8:	f000 f816 	bl	8005a18 <memcpy>
 80059ec:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 80059f0:	f8c4 8000 	str.w	r8, [r4]
 80059f4:	e7e9      	b.n	80059ca <__submore+0x48>
	...

080059f8 <_sbrk_r>:
 80059f8:	b538      	push	{r3, r4, r5, lr}
 80059fa:	4d06      	ldr	r5, [pc, #24]	@ (8005a14 <_sbrk_r+0x1c>)
 80059fc:	2300      	movs	r3, #0
 80059fe:	4604      	mov	r4, r0
 8005a00:	4608      	mov	r0, r1
 8005a02:	602b      	str	r3, [r5, #0]
 8005a04:	f7fb fc32 	bl	800126c <_sbrk>
 8005a08:	1c43      	adds	r3, r0, #1
 8005a0a:	d102      	bne.n	8005a12 <_sbrk_r+0x1a>
 8005a0c:	682b      	ldr	r3, [r5, #0]
 8005a0e:	b103      	cbz	r3, 8005a12 <_sbrk_r+0x1a>
 8005a10:	6023      	str	r3, [r4, #0]
 8005a12:	bd38      	pop	{r3, r4, r5, pc}
 8005a14:	20000440 	.word	0x20000440

08005a18 <memcpy>:
 8005a18:	440a      	add	r2, r1
 8005a1a:	4291      	cmp	r1, r2
 8005a1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005a20:	d100      	bne.n	8005a24 <memcpy+0xc>
 8005a22:	4770      	bx	lr
 8005a24:	b510      	push	{r4, lr}
 8005a26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005a2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005a2e:	4291      	cmp	r1, r2
 8005a30:	d1f9      	bne.n	8005a26 <memcpy+0xe>
 8005a32:	bd10      	pop	{r4, pc}

08005a34 <_realloc_r>:
 8005a34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a38:	4680      	mov	r8, r0
 8005a3a:	4615      	mov	r5, r2
 8005a3c:	460c      	mov	r4, r1
 8005a3e:	b921      	cbnz	r1, 8005a4a <_realloc_r+0x16>
 8005a40:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005a44:	4611      	mov	r1, r2
 8005a46:	f7ff bbbd 	b.w	80051c4 <_malloc_r>
 8005a4a:	b92a      	cbnz	r2, 8005a58 <_realloc_r+0x24>
 8005a4c:	f7ff fb4e 	bl	80050ec <_free_r>
 8005a50:	2400      	movs	r4, #0
 8005a52:	4620      	mov	r0, r4
 8005a54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005a58:	f000 f906 	bl	8005c68 <_malloc_usable_size_r>
 8005a5c:	4285      	cmp	r5, r0
 8005a5e:	4606      	mov	r6, r0
 8005a60:	d802      	bhi.n	8005a68 <_realloc_r+0x34>
 8005a62:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8005a66:	d8f4      	bhi.n	8005a52 <_realloc_r+0x1e>
 8005a68:	4629      	mov	r1, r5
 8005a6a:	4640      	mov	r0, r8
 8005a6c:	f7ff fbaa 	bl	80051c4 <_malloc_r>
 8005a70:	4607      	mov	r7, r0
 8005a72:	2800      	cmp	r0, #0
 8005a74:	d0ec      	beq.n	8005a50 <_realloc_r+0x1c>
 8005a76:	42b5      	cmp	r5, r6
 8005a78:	462a      	mov	r2, r5
 8005a7a:	4621      	mov	r1, r4
 8005a7c:	bf28      	it	cs
 8005a7e:	4632      	movcs	r2, r6
 8005a80:	f7ff ffca 	bl	8005a18 <memcpy>
 8005a84:	4621      	mov	r1, r4
 8005a86:	4640      	mov	r0, r8
 8005a88:	f7ff fb30 	bl	80050ec <_free_r>
 8005a8c:	463c      	mov	r4, r7
 8005a8e:	e7e0      	b.n	8005a52 <_realloc_r+0x1e>

08005a90 <_strtol_l.constprop.0>:
 8005a90:	2b24      	cmp	r3, #36	@ 0x24
 8005a92:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005a96:	4686      	mov	lr, r0
 8005a98:	4690      	mov	r8, r2
 8005a9a:	d801      	bhi.n	8005aa0 <_strtol_l.constprop.0+0x10>
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d106      	bne.n	8005aae <_strtol_l.constprop.0+0x1e>
 8005aa0:	f7ff faf0 	bl	8005084 <__errno>
 8005aa4:	2316      	movs	r3, #22
 8005aa6:	6003      	str	r3, [r0, #0]
 8005aa8:	2000      	movs	r0, #0
 8005aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005aae:	4834      	ldr	r0, [pc, #208]	@ (8005b80 <_strtol_l.constprop.0+0xf0>)
 8005ab0:	460d      	mov	r5, r1
 8005ab2:	462a      	mov	r2, r5
 8005ab4:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005ab8:	5d06      	ldrb	r6, [r0, r4]
 8005aba:	f016 0608 	ands.w	r6, r6, #8
 8005abe:	d1f8      	bne.n	8005ab2 <_strtol_l.constprop.0+0x22>
 8005ac0:	2c2d      	cmp	r4, #45	@ 0x2d
 8005ac2:	d12d      	bne.n	8005b20 <_strtol_l.constprop.0+0x90>
 8005ac4:	782c      	ldrb	r4, [r5, #0]
 8005ac6:	2601      	movs	r6, #1
 8005ac8:	1c95      	adds	r5, r2, #2
 8005aca:	f033 0210 	bics.w	r2, r3, #16
 8005ace:	d109      	bne.n	8005ae4 <_strtol_l.constprop.0+0x54>
 8005ad0:	2c30      	cmp	r4, #48	@ 0x30
 8005ad2:	d12a      	bne.n	8005b2a <_strtol_l.constprop.0+0x9a>
 8005ad4:	782a      	ldrb	r2, [r5, #0]
 8005ad6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005ada:	2a58      	cmp	r2, #88	@ 0x58
 8005adc:	d125      	bne.n	8005b2a <_strtol_l.constprop.0+0x9a>
 8005ade:	786c      	ldrb	r4, [r5, #1]
 8005ae0:	2310      	movs	r3, #16
 8005ae2:	3502      	adds	r5, #2
 8005ae4:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8005ae8:	f10c 3cff 	add.w	ip, ip, #4294967295
 8005aec:	2200      	movs	r2, #0
 8005aee:	fbbc f9f3 	udiv	r9, ip, r3
 8005af2:	4610      	mov	r0, r2
 8005af4:	fb03 ca19 	mls	sl, r3, r9, ip
 8005af8:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8005afc:	2f09      	cmp	r7, #9
 8005afe:	d81b      	bhi.n	8005b38 <_strtol_l.constprop.0+0xa8>
 8005b00:	463c      	mov	r4, r7
 8005b02:	42a3      	cmp	r3, r4
 8005b04:	dd27      	ble.n	8005b56 <_strtol_l.constprop.0+0xc6>
 8005b06:	1c57      	adds	r7, r2, #1
 8005b08:	d007      	beq.n	8005b1a <_strtol_l.constprop.0+0x8a>
 8005b0a:	4581      	cmp	r9, r0
 8005b0c:	d320      	bcc.n	8005b50 <_strtol_l.constprop.0+0xc0>
 8005b0e:	d101      	bne.n	8005b14 <_strtol_l.constprop.0+0x84>
 8005b10:	45a2      	cmp	sl, r4
 8005b12:	db1d      	blt.n	8005b50 <_strtol_l.constprop.0+0xc0>
 8005b14:	fb00 4003 	mla	r0, r0, r3, r4
 8005b18:	2201      	movs	r2, #1
 8005b1a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b1e:	e7eb      	b.n	8005af8 <_strtol_l.constprop.0+0x68>
 8005b20:	2c2b      	cmp	r4, #43	@ 0x2b
 8005b22:	bf04      	itt	eq
 8005b24:	782c      	ldrbeq	r4, [r5, #0]
 8005b26:	1c95      	addeq	r5, r2, #2
 8005b28:	e7cf      	b.n	8005aca <_strtol_l.constprop.0+0x3a>
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d1da      	bne.n	8005ae4 <_strtol_l.constprop.0+0x54>
 8005b2e:	2c30      	cmp	r4, #48	@ 0x30
 8005b30:	bf0c      	ite	eq
 8005b32:	2308      	moveq	r3, #8
 8005b34:	230a      	movne	r3, #10
 8005b36:	e7d5      	b.n	8005ae4 <_strtol_l.constprop.0+0x54>
 8005b38:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8005b3c:	2f19      	cmp	r7, #25
 8005b3e:	d801      	bhi.n	8005b44 <_strtol_l.constprop.0+0xb4>
 8005b40:	3c37      	subs	r4, #55	@ 0x37
 8005b42:	e7de      	b.n	8005b02 <_strtol_l.constprop.0+0x72>
 8005b44:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8005b48:	2f19      	cmp	r7, #25
 8005b4a:	d804      	bhi.n	8005b56 <_strtol_l.constprop.0+0xc6>
 8005b4c:	3c57      	subs	r4, #87	@ 0x57
 8005b4e:	e7d8      	b.n	8005b02 <_strtol_l.constprop.0+0x72>
 8005b50:	f04f 32ff 	mov.w	r2, #4294967295
 8005b54:	e7e1      	b.n	8005b1a <_strtol_l.constprop.0+0x8a>
 8005b56:	1c53      	adds	r3, r2, #1
 8005b58:	d108      	bne.n	8005b6c <_strtol_l.constprop.0+0xdc>
 8005b5a:	2322      	movs	r3, #34	@ 0x22
 8005b5c:	f8ce 3000 	str.w	r3, [lr]
 8005b60:	4660      	mov	r0, ip
 8005b62:	f1b8 0f00 	cmp.w	r8, #0
 8005b66:	d0a0      	beq.n	8005aaa <_strtol_l.constprop.0+0x1a>
 8005b68:	1e69      	subs	r1, r5, #1
 8005b6a:	e006      	b.n	8005b7a <_strtol_l.constprop.0+0xea>
 8005b6c:	b106      	cbz	r6, 8005b70 <_strtol_l.constprop.0+0xe0>
 8005b6e:	4240      	negs	r0, r0
 8005b70:	f1b8 0f00 	cmp.w	r8, #0
 8005b74:	d099      	beq.n	8005aaa <_strtol_l.constprop.0+0x1a>
 8005b76:	2a00      	cmp	r2, #0
 8005b78:	d1f6      	bne.n	8005b68 <_strtol_l.constprop.0+0xd8>
 8005b7a:	f8c8 1000 	str.w	r1, [r8]
 8005b7e:	e794      	b.n	8005aaa <_strtol_l.constprop.0+0x1a>
 8005b80:	08005ce0 	.word	0x08005ce0

08005b84 <_strtol_r>:
 8005b84:	f7ff bf84 	b.w	8005a90 <_strtol_l.constprop.0>

08005b88 <_strtoul_l.constprop.0>:
 8005b88:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005b8c:	4e34      	ldr	r6, [pc, #208]	@ (8005c60 <_strtoul_l.constprop.0+0xd8>)
 8005b8e:	4686      	mov	lr, r0
 8005b90:	460d      	mov	r5, r1
 8005b92:	4628      	mov	r0, r5
 8005b94:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005b98:	5d37      	ldrb	r7, [r6, r4]
 8005b9a:	f017 0708 	ands.w	r7, r7, #8
 8005b9e:	d1f8      	bne.n	8005b92 <_strtoul_l.constprop.0+0xa>
 8005ba0:	2c2d      	cmp	r4, #45	@ 0x2d
 8005ba2:	d12f      	bne.n	8005c04 <_strtoul_l.constprop.0+0x7c>
 8005ba4:	782c      	ldrb	r4, [r5, #0]
 8005ba6:	2701      	movs	r7, #1
 8005ba8:	1c85      	adds	r5, r0, #2
 8005baa:	f033 0010 	bics.w	r0, r3, #16
 8005bae:	d109      	bne.n	8005bc4 <_strtoul_l.constprop.0+0x3c>
 8005bb0:	2c30      	cmp	r4, #48	@ 0x30
 8005bb2:	d12c      	bne.n	8005c0e <_strtoul_l.constprop.0+0x86>
 8005bb4:	7828      	ldrb	r0, [r5, #0]
 8005bb6:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 8005bba:	2858      	cmp	r0, #88	@ 0x58
 8005bbc:	d127      	bne.n	8005c0e <_strtoul_l.constprop.0+0x86>
 8005bbe:	786c      	ldrb	r4, [r5, #1]
 8005bc0:	2310      	movs	r3, #16
 8005bc2:	3502      	adds	r5, #2
 8005bc4:	f04f 38ff 	mov.w	r8, #4294967295
 8005bc8:	2600      	movs	r6, #0
 8005bca:	fbb8 f8f3 	udiv	r8, r8, r3
 8005bce:	fb03 f908 	mul.w	r9, r3, r8
 8005bd2:	ea6f 0909 	mvn.w	r9, r9
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8005bdc:	f1bc 0f09 	cmp.w	ip, #9
 8005be0:	d81c      	bhi.n	8005c1c <_strtoul_l.constprop.0+0x94>
 8005be2:	4664      	mov	r4, ip
 8005be4:	42a3      	cmp	r3, r4
 8005be6:	dd2a      	ble.n	8005c3e <_strtoul_l.constprop.0+0xb6>
 8005be8:	f1b6 3fff 	cmp.w	r6, #4294967295
 8005bec:	d007      	beq.n	8005bfe <_strtoul_l.constprop.0+0x76>
 8005bee:	4580      	cmp	r8, r0
 8005bf0:	d322      	bcc.n	8005c38 <_strtoul_l.constprop.0+0xb0>
 8005bf2:	d101      	bne.n	8005bf8 <_strtoul_l.constprop.0+0x70>
 8005bf4:	45a1      	cmp	r9, r4
 8005bf6:	db1f      	blt.n	8005c38 <_strtoul_l.constprop.0+0xb0>
 8005bf8:	fb00 4003 	mla	r0, r0, r3, r4
 8005bfc:	2601      	movs	r6, #1
 8005bfe:	f815 4b01 	ldrb.w	r4, [r5], #1
 8005c02:	e7e9      	b.n	8005bd8 <_strtoul_l.constprop.0+0x50>
 8005c04:	2c2b      	cmp	r4, #43	@ 0x2b
 8005c06:	bf04      	itt	eq
 8005c08:	782c      	ldrbeq	r4, [r5, #0]
 8005c0a:	1c85      	addeq	r5, r0, #2
 8005c0c:	e7cd      	b.n	8005baa <_strtoul_l.constprop.0+0x22>
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d1d8      	bne.n	8005bc4 <_strtoul_l.constprop.0+0x3c>
 8005c12:	2c30      	cmp	r4, #48	@ 0x30
 8005c14:	bf0c      	ite	eq
 8005c16:	2308      	moveq	r3, #8
 8005c18:	230a      	movne	r3, #10
 8005c1a:	e7d3      	b.n	8005bc4 <_strtoul_l.constprop.0+0x3c>
 8005c1c:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 8005c20:	f1bc 0f19 	cmp.w	ip, #25
 8005c24:	d801      	bhi.n	8005c2a <_strtoul_l.constprop.0+0xa2>
 8005c26:	3c37      	subs	r4, #55	@ 0x37
 8005c28:	e7dc      	b.n	8005be4 <_strtoul_l.constprop.0+0x5c>
 8005c2a:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 8005c2e:	f1bc 0f19 	cmp.w	ip, #25
 8005c32:	d804      	bhi.n	8005c3e <_strtoul_l.constprop.0+0xb6>
 8005c34:	3c57      	subs	r4, #87	@ 0x57
 8005c36:	e7d5      	b.n	8005be4 <_strtoul_l.constprop.0+0x5c>
 8005c38:	f04f 36ff 	mov.w	r6, #4294967295
 8005c3c:	e7df      	b.n	8005bfe <_strtoul_l.constprop.0+0x76>
 8005c3e:	1c73      	adds	r3, r6, #1
 8005c40:	d106      	bne.n	8005c50 <_strtoul_l.constprop.0+0xc8>
 8005c42:	2322      	movs	r3, #34	@ 0x22
 8005c44:	f8ce 3000 	str.w	r3, [lr]
 8005c48:	4630      	mov	r0, r6
 8005c4a:	b932      	cbnz	r2, 8005c5a <_strtoul_l.constprop.0+0xd2>
 8005c4c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c50:	b107      	cbz	r7, 8005c54 <_strtoul_l.constprop.0+0xcc>
 8005c52:	4240      	negs	r0, r0
 8005c54:	2a00      	cmp	r2, #0
 8005c56:	d0f9      	beq.n	8005c4c <_strtoul_l.constprop.0+0xc4>
 8005c58:	b106      	cbz	r6, 8005c5c <_strtoul_l.constprop.0+0xd4>
 8005c5a:	1e69      	subs	r1, r5, #1
 8005c5c:	6011      	str	r1, [r2, #0]
 8005c5e:	e7f5      	b.n	8005c4c <_strtoul_l.constprop.0+0xc4>
 8005c60:	08005ce0 	.word	0x08005ce0

08005c64 <_strtoul_r>:
 8005c64:	f7ff bf90 	b.w	8005b88 <_strtoul_l.constprop.0>

08005c68 <_malloc_usable_size_r>:
 8005c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c6c:	1f18      	subs	r0, r3, #4
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	bfbc      	itt	lt
 8005c72:	580b      	ldrlt	r3, [r1, r0]
 8005c74:	18c0      	addlt	r0, r0, r3
 8005c76:	4770      	bx	lr

08005c78 <_init>:
 8005c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c7a:	bf00      	nop
 8005c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7e:	bc08      	pop	{r3}
 8005c80:	469e      	mov	lr, r3
 8005c82:	4770      	bx	lr

08005c84 <_fini>:
 8005c84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c86:	bf00      	nop
 8005c88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c8a:	bc08      	pop	{r3}
 8005c8c:	469e      	mov	lr, r3
 8005c8e:	4770      	bx	lr
